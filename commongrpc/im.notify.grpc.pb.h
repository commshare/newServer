// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: im.notify.proto
#ifndef GRPC_im_2enotify_2eproto__INCLUDED
#define GRPC_im_2enotify_2eproto__INCLUDED

#include "im.notify.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace imnotify {

class NotifyService final {
 public:
  static constexpr char const* service_full_name() {
    return "imnotify.NotifyService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status OnGroupRelation(::grpc::ClientContext* context, const ::imnotify::GroupRelationNotify& request, ::imnotify::GroupRelationNotifyACK* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::GroupRelationNotifyACK>> AsyncOnGroupRelation(::grpc::ClientContext* context, const ::imnotify::GroupRelationNotify& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::GroupRelationNotifyACK>>(AsyncOnGroupRelationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::GroupRelationNotifyACK>> PrepareAsyncOnGroupRelation(::grpc::ClientContext* context, const ::imnotify::GroupRelationNotify& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::GroupRelationNotifyACK>>(PrepareAsyncOnGroupRelationRaw(context, request, cq));
    }
    virtual ::grpc::Status OnFriendRelation(::grpc::ClientContext* context, const ::imnotify::FriendRelationNotify& request, ::imnotify::FriendRelationNotifyACK* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::FriendRelationNotifyACK>> AsyncOnFriendRelation(::grpc::ClientContext* context, const ::imnotify::FriendRelationNotify& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::FriendRelationNotifyACK>>(AsyncOnFriendRelationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::FriendRelationNotifyACK>> PrepareAsyncOnFriendRelation(::grpc::ClientContext* context, const ::imnotify::FriendRelationNotify& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::FriendRelationNotifyACK>>(PrepareAsyncOnFriendRelationRaw(context, request, cq));
    }
    virtual ::grpc::Status OnLoginOperation(::grpc::ClientContext* context, const ::imnotify::LoginOperationNotify& request, ::imnotify::LoginOperationNotifyACK* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::LoginOperationNotifyACK>> AsyncOnLoginOperation(::grpc::ClientContext* context, const ::imnotify::LoginOperationNotify& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::LoginOperationNotifyACK>>(AsyncOnLoginOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::LoginOperationNotifyACK>> PrepareAsyncOnLoginOperation(::grpc::ClientContext* context, const ::imnotify::LoginOperationNotify& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::LoginOperationNotifyACK>>(PrepareAsyncOnLoginOperationRaw(context, request, cq));
    }
    virtual ::grpc::Status OnCommonMsgNotify(::grpc::ClientContext* context, const ::imnotify::CommonMsgNotify& request, ::imnotify::CommonMsgNotifyACK* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::CommonMsgNotifyACK>> AsyncOnCommonMsgNotify(::grpc::ClientContext* context, const ::imnotify::CommonMsgNotify& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::CommonMsgNotifyACK>>(AsyncOnCommonMsgNotifyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::CommonMsgNotifyACK>> PrepareAsyncOnCommonMsgNotify(::grpc::ClientContext* context, const ::imnotify::CommonMsgNotify& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::CommonMsgNotifyACK>>(PrepareAsyncOnCommonMsgNotifyRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void OnGroupRelation(::grpc::ClientContext* context, const ::imnotify::GroupRelationNotify* request, ::imnotify::GroupRelationNotifyACK* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OnFriendRelation(::grpc::ClientContext* context, const ::imnotify::FriendRelationNotify* request, ::imnotify::FriendRelationNotifyACK* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OnLoginOperation(::grpc::ClientContext* context, const ::imnotify::LoginOperationNotify* request, ::imnotify::LoginOperationNotifyACK* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OnCommonMsgNotify(::grpc::ClientContext* context, const ::imnotify::CommonMsgNotify* request, ::imnotify::CommonMsgNotifyACK* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::GroupRelationNotifyACK>* AsyncOnGroupRelationRaw(::grpc::ClientContext* context, const ::imnotify::GroupRelationNotify& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::GroupRelationNotifyACK>* PrepareAsyncOnGroupRelationRaw(::grpc::ClientContext* context, const ::imnotify::GroupRelationNotify& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::FriendRelationNotifyACK>* AsyncOnFriendRelationRaw(::grpc::ClientContext* context, const ::imnotify::FriendRelationNotify& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::FriendRelationNotifyACK>* PrepareAsyncOnFriendRelationRaw(::grpc::ClientContext* context, const ::imnotify::FriendRelationNotify& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::LoginOperationNotifyACK>* AsyncOnLoginOperationRaw(::grpc::ClientContext* context, const ::imnotify::LoginOperationNotify& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::LoginOperationNotifyACK>* PrepareAsyncOnLoginOperationRaw(::grpc::ClientContext* context, const ::imnotify::LoginOperationNotify& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::CommonMsgNotifyACK>* AsyncOnCommonMsgNotifyRaw(::grpc::ClientContext* context, const ::imnotify::CommonMsgNotify& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::imnotify::CommonMsgNotifyACK>* PrepareAsyncOnCommonMsgNotifyRaw(::grpc::ClientContext* context, const ::imnotify::CommonMsgNotify& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status OnGroupRelation(::grpc::ClientContext* context, const ::imnotify::GroupRelationNotify& request, ::imnotify::GroupRelationNotifyACK* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::imnotify::GroupRelationNotifyACK>> AsyncOnGroupRelation(::grpc::ClientContext* context, const ::imnotify::GroupRelationNotify& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::imnotify::GroupRelationNotifyACK>>(AsyncOnGroupRelationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::imnotify::GroupRelationNotifyACK>> PrepareAsyncOnGroupRelation(::grpc::ClientContext* context, const ::imnotify::GroupRelationNotify& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::imnotify::GroupRelationNotifyACK>>(PrepareAsyncOnGroupRelationRaw(context, request, cq));
    }
    ::grpc::Status OnFriendRelation(::grpc::ClientContext* context, const ::imnotify::FriendRelationNotify& request, ::imnotify::FriendRelationNotifyACK* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::imnotify::FriendRelationNotifyACK>> AsyncOnFriendRelation(::grpc::ClientContext* context, const ::imnotify::FriendRelationNotify& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::imnotify::FriendRelationNotifyACK>>(AsyncOnFriendRelationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::imnotify::FriendRelationNotifyACK>> PrepareAsyncOnFriendRelation(::grpc::ClientContext* context, const ::imnotify::FriendRelationNotify& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::imnotify::FriendRelationNotifyACK>>(PrepareAsyncOnFriendRelationRaw(context, request, cq));
    }
    ::grpc::Status OnLoginOperation(::grpc::ClientContext* context, const ::imnotify::LoginOperationNotify& request, ::imnotify::LoginOperationNotifyACK* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::imnotify::LoginOperationNotifyACK>> AsyncOnLoginOperation(::grpc::ClientContext* context, const ::imnotify::LoginOperationNotify& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::imnotify::LoginOperationNotifyACK>>(AsyncOnLoginOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::imnotify::LoginOperationNotifyACK>> PrepareAsyncOnLoginOperation(::grpc::ClientContext* context, const ::imnotify::LoginOperationNotify& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::imnotify::LoginOperationNotifyACK>>(PrepareAsyncOnLoginOperationRaw(context, request, cq));
    }
    ::grpc::Status OnCommonMsgNotify(::grpc::ClientContext* context, const ::imnotify::CommonMsgNotify& request, ::imnotify::CommonMsgNotifyACK* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::imnotify::CommonMsgNotifyACK>> AsyncOnCommonMsgNotify(::grpc::ClientContext* context, const ::imnotify::CommonMsgNotify& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::imnotify::CommonMsgNotifyACK>>(AsyncOnCommonMsgNotifyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::imnotify::CommonMsgNotifyACK>> PrepareAsyncOnCommonMsgNotify(::grpc::ClientContext* context, const ::imnotify::CommonMsgNotify& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::imnotify::CommonMsgNotifyACK>>(PrepareAsyncOnCommonMsgNotifyRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void OnGroupRelation(::grpc::ClientContext* context, const ::imnotify::GroupRelationNotify* request, ::imnotify::GroupRelationNotifyACK* response, std::function<void(::grpc::Status)>) override;
      void OnFriendRelation(::grpc::ClientContext* context, const ::imnotify::FriendRelationNotify* request, ::imnotify::FriendRelationNotifyACK* response, std::function<void(::grpc::Status)>) override;
      void OnLoginOperation(::grpc::ClientContext* context, const ::imnotify::LoginOperationNotify* request, ::imnotify::LoginOperationNotifyACK* response, std::function<void(::grpc::Status)>) override;
      void OnCommonMsgNotify(::grpc::ClientContext* context, const ::imnotify::CommonMsgNotify* request, ::imnotify::CommonMsgNotifyACK* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::imnotify::GroupRelationNotifyACK>* AsyncOnGroupRelationRaw(::grpc::ClientContext* context, const ::imnotify::GroupRelationNotify& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::imnotify::GroupRelationNotifyACK>* PrepareAsyncOnGroupRelationRaw(::grpc::ClientContext* context, const ::imnotify::GroupRelationNotify& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::imnotify::FriendRelationNotifyACK>* AsyncOnFriendRelationRaw(::grpc::ClientContext* context, const ::imnotify::FriendRelationNotify& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::imnotify::FriendRelationNotifyACK>* PrepareAsyncOnFriendRelationRaw(::grpc::ClientContext* context, const ::imnotify::FriendRelationNotify& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::imnotify::LoginOperationNotifyACK>* AsyncOnLoginOperationRaw(::grpc::ClientContext* context, const ::imnotify::LoginOperationNotify& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::imnotify::LoginOperationNotifyACK>* PrepareAsyncOnLoginOperationRaw(::grpc::ClientContext* context, const ::imnotify::LoginOperationNotify& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::imnotify::CommonMsgNotifyACK>* AsyncOnCommonMsgNotifyRaw(::grpc::ClientContext* context, const ::imnotify::CommonMsgNotify& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::imnotify::CommonMsgNotifyACK>* PrepareAsyncOnCommonMsgNotifyRaw(::grpc::ClientContext* context, const ::imnotify::CommonMsgNotify& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_OnGroupRelation_;
    const ::grpc::internal::RpcMethod rpcmethod_OnFriendRelation_;
    const ::grpc::internal::RpcMethod rpcmethod_OnLoginOperation_;
    const ::grpc::internal::RpcMethod rpcmethod_OnCommonMsgNotify_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status OnGroupRelation(::grpc::ServerContext* context, const ::imnotify::GroupRelationNotify* request, ::imnotify::GroupRelationNotifyACK* response);
    virtual ::grpc::Status OnFriendRelation(::grpc::ServerContext* context, const ::imnotify::FriendRelationNotify* request, ::imnotify::FriendRelationNotifyACK* response);
    virtual ::grpc::Status OnLoginOperation(::grpc::ServerContext* context, const ::imnotify::LoginOperationNotify* request, ::imnotify::LoginOperationNotifyACK* response);
    virtual ::grpc::Status OnCommonMsgNotify(::grpc::ServerContext* context, const ::imnotify::CommonMsgNotify* request, ::imnotify::CommonMsgNotifyACK* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_OnGroupRelation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_OnGroupRelation() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_OnGroupRelation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnGroupRelation(::grpc::ServerContext* context, const ::imnotify::GroupRelationNotify* request, ::imnotify::GroupRelationNotifyACK* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnGroupRelation(::grpc::ServerContext* context, ::imnotify::GroupRelationNotify* request, ::grpc::ServerAsyncResponseWriter< ::imnotify::GroupRelationNotifyACK>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnFriendRelation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_OnFriendRelation() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_OnFriendRelation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnFriendRelation(::grpc::ServerContext* context, const ::imnotify::FriendRelationNotify* request, ::imnotify::FriendRelationNotifyACK* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnFriendRelation(::grpc::ServerContext* context, ::imnotify::FriendRelationNotify* request, ::grpc::ServerAsyncResponseWriter< ::imnotify::FriendRelationNotifyACK>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnLoginOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_OnLoginOperation() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_OnLoginOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnLoginOperation(::grpc::ServerContext* context, const ::imnotify::LoginOperationNotify* request, ::imnotify::LoginOperationNotifyACK* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnLoginOperation(::grpc::ServerContext* context, ::imnotify::LoginOperationNotify* request, ::grpc::ServerAsyncResponseWriter< ::imnotify::LoginOperationNotifyACK>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnCommonMsgNotify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_OnCommonMsgNotify() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_OnCommonMsgNotify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnCommonMsgNotify(::grpc::ServerContext* context, const ::imnotify::CommonMsgNotify* request, ::imnotify::CommonMsgNotifyACK* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnCommonMsgNotify(::grpc::ServerContext* context, ::imnotify::CommonMsgNotify* request, ::grpc::ServerAsyncResponseWriter< ::imnotify::CommonMsgNotifyACK>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_OnGroupRelation<WithAsyncMethod_OnFriendRelation<WithAsyncMethod_OnLoginOperation<WithAsyncMethod_OnCommonMsgNotify<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_OnGroupRelation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_OnGroupRelation() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_OnGroupRelation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnGroupRelation(::grpc::ServerContext* context, const ::imnotify::GroupRelationNotify* request, ::imnotify::GroupRelationNotifyACK* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnFriendRelation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_OnFriendRelation() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_OnFriendRelation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnFriendRelation(::grpc::ServerContext* context, const ::imnotify::FriendRelationNotify* request, ::imnotify::FriendRelationNotifyACK* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnLoginOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_OnLoginOperation() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_OnLoginOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnLoginOperation(::grpc::ServerContext* context, const ::imnotify::LoginOperationNotify* request, ::imnotify::LoginOperationNotifyACK* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnCommonMsgNotify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_OnCommonMsgNotify() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_OnCommonMsgNotify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnCommonMsgNotify(::grpc::ServerContext* context, const ::imnotify::CommonMsgNotify* request, ::imnotify::CommonMsgNotifyACK* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnGroupRelation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_OnGroupRelation() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_OnGroupRelation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnGroupRelation(::grpc::ServerContext* context, const ::imnotify::GroupRelationNotify* request, ::imnotify::GroupRelationNotifyACK* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnGroupRelation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnFriendRelation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_OnFriendRelation() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_OnFriendRelation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnFriendRelation(::grpc::ServerContext* context, const ::imnotify::FriendRelationNotify* request, ::imnotify::FriendRelationNotifyACK* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnFriendRelation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnLoginOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_OnLoginOperation() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_OnLoginOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnLoginOperation(::grpc::ServerContext* context, const ::imnotify::LoginOperationNotify* request, ::imnotify::LoginOperationNotifyACK* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnLoginOperation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OnCommonMsgNotify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_OnCommonMsgNotify() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_OnCommonMsgNotify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnCommonMsgNotify(::grpc::ServerContext* context, const ::imnotify::CommonMsgNotify* request, ::imnotify::CommonMsgNotifyACK* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnCommonMsgNotify(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OnGroupRelation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_OnGroupRelation() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::imnotify::GroupRelationNotify, ::imnotify::GroupRelationNotifyACK>(std::bind(&WithStreamedUnaryMethod_OnGroupRelation<BaseClass>::StreamedOnGroupRelation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_OnGroupRelation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnGroupRelation(::grpc::ServerContext* context, const ::imnotify::GroupRelationNotify* request, ::imnotify::GroupRelationNotifyACK* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnGroupRelation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::imnotify::GroupRelationNotify,::imnotify::GroupRelationNotifyACK>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OnFriendRelation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_OnFriendRelation() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::imnotify::FriendRelationNotify, ::imnotify::FriendRelationNotifyACK>(std::bind(&WithStreamedUnaryMethod_OnFriendRelation<BaseClass>::StreamedOnFriendRelation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_OnFriendRelation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnFriendRelation(::grpc::ServerContext* context, const ::imnotify::FriendRelationNotify* request, ::imnotify::FriendRelationNotifyACK* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnFriendRelation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::imnotify::FriendRelationNotify,::imnotify::FriendRelationNotifyACK>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OnLoginOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_OnLoginOperation() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::imnotify::LoginOperationNotify, ::imnotify::LoginOperationNotifyACK>(std::bind(&WithStreamedUnaryMethod_OnLoginOperation<BaseClass>::StreamedOnLoginOperation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_OnLoginOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnLoginOperation(::grpc::ServerContext* context, const ::imnotify::LoginOperationNotify* request, ::imnotify::LoginOperationNotifyACK* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnLoginOperation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::imnotify::LoginOperationNotify,::imnotify::LoginOperationNotifyACK>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OnCommonMsgNotify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_OnCommonMsgNotify() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::imnotify::CommonMsgNotify, ::imnotify::CommonMsgNotifyACK>(std::bind(&WithStreamedUnaryMethod_OnCommonMsgNotify<BaseClass>::StreamedOnCommonMsgNotify, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_OnCommonMsgNotify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnCommonMsgNotify(::grpc::ServerContext* context, const ::imnotify::CommonMsgNotify* request, ::imnotify::CommonMsgNotifyACK* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnCommonMsgNotify(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::imnotify::CommonMsgNotify,::imnotify::CommonMsgNotifyACK>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_OnGroupRelation<WithStreamedUnaryMethod_OnFriendRelation<WithStreamedUnaryMethod_OnLoginOperation<WithStreamedUnaryMethod_OnCommonMsgNotify<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_OnGroupRelation<WithStreamedUnaryMethod_OnFriendRelation<WithStreamedUnaryMethod_OnLoginOperation<WithStreamedUnaryMethod_OnCommonMsgNotify<Service > > > > StreamedService;
};

}  // namespace imnotify


#endif  // GRPC_im_2enotify_2eproto__INCLUDED
