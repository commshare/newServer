// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.radio.proto

#ifndef PROTOBUF_INCLUDED_im_2eradio_2eproto
#define PROTOBUF_INCLUDED_im_2eradio_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_im_2eradio_2eproto 

namespace protobuf_im_2eradio_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_im_2eradio_2eproto
namespace radionotify {
class RadioMsgNotify;
class RadioMsgNotifyDefaultTypeInternal;
extern RadioMsgNotifyDefaultTypeInternal _RadioMsgNotify_default_instance_;
class RadioMsgNotifyACK;
class RadioMsgNotifyACKDefaultTypeInternal;
extern RadioMsgNotifyACKDefaultTypeInternal _RadioMsgNotifyACK_default_instance_;
}  // namespace radionotify
namespace google {
namespace protobuf {
template<> ::radionotify::RadioMsgNotify* Arena::CreateMaybeMessage<::radionotify::RadioMsgNotify>(Arena*);
template<> ::radionotify::RadioMsgNotifyACK* Arena::CreateMaybeMessage<::radionotify::RadioMsgNotifyACK>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace radionotify {

enum RadioNotifyType {
  RADIO_TYPE_UNKNOWN = 0,
  RADIO_TYPE_NAME_CHANGED = 1,
  RADIO_TYPE_ICON_CHANGED = 2,
  RADIO_TYPE_NOTICE_CHANGED = 3,
  RADIO_TYPE_MEMBER_QUIT = 4,
  RADIO_TYPE_MEMBER_REMOVE = 5,
  RADIO_TYPE_APPLY = 6,
  RADIO_TYPE_INVITE = 7,
  RADIO_TYPE_MASTER_CHANGED = 8,
  RADIO_TYPE_ADMIN_SET = 9,
  RADIO_TYPE_ADMIN_UNSET = 10,
  RADIO_TYPE_DISMISS = 11,
  RADIO_TYPE_NOSPEAK = 12,
  RADIO_TYPE_SPEAKING = 13,
  RADIO_TYPE_CREATE = 14,
  RadioNotifyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RadioNotifyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RadioNotifyType_IsValid(int value);
const RadioNotifyType RadioNotifyType_MIN = RADIO_TYPE_UNKNOWN;
const RadioNotifyType RadioNotifyType_MAX = RADIO_TYPE_CREATE;
const int RadioNotifyType_ARRAYSIZE = RadioNotifyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RadioNotifyType_descriptor();
inline const ::std::string& RadioNotifyType_Name(RadioNotifyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RadioNotifyType_descriptor(), value);
}
inline bool RadioNotifyType_Parse(
    const ::std::string& name, RadioNotifyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RadioNotifyType>(
    RadioNotifyType_descriptor(), name, value);
}
enum ExceptionCode {
  NO_EXP = 0,
  EXP_ERR = 1,
  ExceptionCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ExceptionCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ExceptionCode_IsValid(int value);
const ExceptionCode ExceptionCode_MIN = NO_EXP;
const ExceptionCode ExceptionCode_MAX = EXP_ERR;
const int ExceptionCode_ARRAYSIZE = ExceptionCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExceptionCode_descriptor();
inline const ::std::string& ExceptionCode_Name(ExceptionCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExceptionCode_descriptor(), value);
}
inline bool ExceptionCode_Parse(
    const ::std::string& name, ExceptionCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExceptionCode>(
    ExceptionCode_descriptor(), name, value);
}
// ===================================================================

class RadioMsgNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:radionotify.RadioMsgNotify) */ {
 public:
  RadioMsgNotify();
  virtual ~RadioMsgNotify();

  RadioMsgNotify(const RadioMsgNotify& from);

  inline RadioMsgNotify& operator=(const RadioMsgNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RadioMsgNotify(RadioMsgNotify&& from) noexcept
    : RadioMsgNotify() {
    *this = ::std::move(from);
  }

  inline RadioMsgNotify& operator=(RadioMsgNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RadioMsgNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadioMsgNotify* internal_default_instance() {
    return reinterpret_cast<const RadioMsgNotify*>(
               &_RadioMsgNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RadioMsgNotify* other);
  friend void swap(RadioMsgNotify& a, RadioMsgNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RadioMsgNotify* New() const final {
    return CreateMaybeMessage<RadioMsgNotify>(NULL);
  }

  RadioMsgNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RadioMsgNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RadioMsgNotify& from);
  void MergeFrom(const RadioMsgNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadioMsgNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sMnpledUserId = 5;
  int smnpleduserid_size() const;
  void clear_smnpleduserid();
  static const int kSMnpledUserIdFieldNumber = 5;
  const ::std::string& smnpleduserid(int index) const;
  ::std::string* mutable_smnpleduserid(int index);
  void set_smnpleduserid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_smnpleduserid(int index, ::std::string&& value);
  #endif
  void set_smnpleduserid(int index, const char* value);
  void set_smnpleduserid(int index, const char* value, size_t size);
  ::std::string* add_smnpleduserid();
  void add_smnpleduserid(const ::std::string& value);
  #if LANG_CXX11
  void add_smnpleduserid(::std::string&& value);
  #endif
  void add_smnpleduserid(const char* value);
  void add_smnpleduserid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& smnpleduserid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_smnpleduserid();

  // string sRadioId = 1;
  void clear_sradioid();
  static const int kSRadioIdFieldNumber = 1;
  const ::std::string& sradioid() const;
  void set_sradioid(const ::std::string& value);
  #if LANG_CXX11
  void set_sradioid(::std::string&& value);
  #endif
  void set_sradioid(const char* value);
  void set_sradioid(const char* value, size_t size);
  ::std::string* mutable_sradioid();
  ::std::string* release_sradioid();
  void set_allocated_sradioid(::std::string* sradioid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sOprUserId = 4;
  void clear_sopruserid();
  static const int kSOprUserIdFieldNumber = 4;
  const ::std::string& sopruserid() const;
  void set_sopruserid(const ::std::string& value);
  #if LANG_CXX11
  void set_sopruserid(::std::string&& value);
  #endif
  void set_sopruserid(const char* value);
  void set_sopruserid(const char* value, size_t size);
  ::std::string* mutable_sopruserid();
  ::std::string* release_sopruserid();
  void set_allocated_sopruserid(::std::string* sopruserid);

  // string sContent = 6;
  void clear_scontent();
  static const int kSContentFieldNumber = 6;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // string extend = 8;
  void clear_extend();
  static const int kExtendFieldNumber = 8;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint64 msgTime = 3;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 3;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .radionotify.RadioNotifyType notifyType = 7;
  void clear_notifytype();
  static const int kNotifyTypeFieldNumber = 7;
  ::radionotify::RadioNotifyType notifytype() const;
  void set_notifytype(::radionotify::RadioNotifyType value);

  // @@protoc_insertion_point(class_scope:radionotify.RadioMsgNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> smnpleduserid_;
  ::google::protobuf::internal::ArenaStringPtr sradioid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr sopruserid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint64 msgtime_;
  int notifytype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2eradio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RadioMsgNotifyACK : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:radionotify.RadioMsgNotifyACK) */ {
 public:
  RadioMsgNotifyACK();
  virtual ~RadioMsgNotifyACK();

  RadioMsgNotifyACK(const RadioMsgNotifyACK& from);

  inline RadioMsgNotifyACK& operator=(const RadioMsgNotifyACK& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RadioMsgNotifyACK(RadioMsgNotifyACK&& from) noexcept
    : RadioMsgNotifyACK() {
    *this = ::std::move(from);
  }

  inline RadioMsgNotifyACK& operator=(RadioMsgNotifyACK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RadioMsgNotifyACK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadioMsgNotifyACK* internal_default_instance() {
    return reinterpret_cast<const RadioMsgNotifyACK*>(
               &_RadioMsgNotifyACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RadioMsgNotifyACK* other);
  friend void swap(RadioMsgNotifyACK& a, RadioMsgNotifyACK& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RadioMsgNotifyACK* New() const final {
    return CreateMaybeMessage<RadioMsgNotifyACK>(NULL);
  }

  RadioMsgNotifyACK* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RadioMsgNotifyACK>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RadioMsgNotifyACK& from);
  void MergeFrom(const RadioMsgNotifyACK& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadioMsgNotifyACK* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sMsgId = 1;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 1;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // uint64 msgTime = 2;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 2;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .radionotify.ExceptionCode expcode = 3;
  void clear_expcode();
  static const int kExpcodeFieldNumber = 3;
  ::radionotify::ExceptionCode expcode() const;
  void set_expcode(::radionotify::ExceptionCode value);

  // @@protoc_insertion_point(class_scope:radionotify.RadioMsgNotifyACK)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::uint64 msgtime_;
  int expcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2eradio_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RadioMsgNotify

// string sRadioId = 1;
inline void RadioMsgNotify::clear_sradioid() {
  sradioid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RadioMsgNotify::sradioid() const {
  // @@protoc_insertion_point(field_get:radionotify.RadioMsgNotify.sRadioId)
  return sradioid_.GetNoArena();
}
inline void RadioMsgNotify::set_sradioid(const ::std::string& value) {
  
  sradioid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:radionotify.RadioMsgNotify.sRadioId)
}
#if LANG_CXX11
inline void RadioMsgNotify::set_sradioid(::std::string&& value) {
  
  sradioid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:radionotify.RadioMsgNotify.sRadioId)
}
#endif
inline void RadioMsgNotify::set_sradioid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sradioid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:radionotify.RadioMsgNotify.sRadioId)
}
inline void RadioMsgNotify::set_sradioid(const char* value, size_t size) {
  
  sradioid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:radionotify.RadioMsgNotify.sRadioId)
}
inline ::std::string* RadioMsgNotify::mutable_sradioid() {
  
  // @@protoc_insertion_point(field_mutable:radionotify.RadioMsgNotify.sRadioId)
  return sradioid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadioMsgNotify::release_sradioid() {
  // @@protoc_insertion_point(field_release:radionotify.RadioMsgNotify.sRadioId)
  
  return sradioid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadioMsgNotify::set_allocated_sradioid(::std::string* sradioid) {
  if (sradioid != NULL) {
    
  } else {
    
  }
  sradioid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sradioid);
  // @@protoc_insertion_point(field_set_allocated:radionotify.RadioMsgNotify.sRadioId)
}

// string sMsgId = 2;
inline void RadioMsgNotify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RadioMsgNotify::smsgid() const {
  // @@protoc_insertion_point(field_get:radionotify.RadioMsgNotify.sMsgId)
  return smsgid_.GetNoArena();
}
inline void RadioMsgNotify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:radionotify.RadioMsgNotify.sMsgId)
}
#if LANG_CXX11
inline void RadioMsgNotify::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:radionotify.RadioMsgNotify.sMsgId)
}
#endif
inline void RadioMsgNotify::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:radionotify.RadioMsgNotify.sMsgId)
}
inline void RadioMsgNotify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:radionotify.RadioMsgNotify.sMsgId)
}
inline ::std::string* RadioMsgNotify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:radionotify.RadioMsgNotify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadioMsgNotify::release_smsgid() {
  // @@protoc_insertion_point(field_release:radionotify.RadioMsgNotify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadioMsgNotify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:radionotify.RadioMsgNotify.sMsgId)
}

// uint64 msgTime = 3;
inline void RadioMsgNotify::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RadioMsgNotify::msgtime() const {
  // @@protoc_insertion_point(field_get:radionotify.RadioMsgNotify.msgTime)
  return msgtime_;
}
inline void RadioMsgNotify::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:radionotify.RadioMsgNotify.msgTime)
}

// string sOprUserId = 4;
inline void RadioMsgNotify::clear_sopruserid() {
  sopruserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RadioMsgNotify::sopruserid() const {
  // @@protoc_insertion_point(field_get:radionotify.RadioMsgNotify.sOprUserId)
  return sopruserid_.GetNoArena();
}
inline void RadioMsgNotify::set_sopruserid(const ::std::string& value) {
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:radionotify.RadioMsgNotify.sOprUserId)
}
#if LANG_CXX11
inline void RadioMsgNotify::set_sopruserid(::std::string&& value) {
  
  sopruserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:radionotify.RadioMsgNotify.sOprUserId)
}
#endif
inline void RadioMsgNotify::set_sopruserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:radionotify.RadioMsgNotify.sOprUserId)
}
inline void RadioMsgNotify::set_sopruserid(const char* value, size_t size) {
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:radionotify.RadioMsgNotify.sOprUserId)
}
inline ::std::string* RadioMsgNotify::mutable_sopruserid() {
  
  // @@protoc_insertion_point(field_mutable:radionotify.RadioMsgNotify.sOprUserId)
  return sopruserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadioMsgNotify::release_sopruserid() {
  // @@protoc_insertion_point(field_release:radionotify.RadioMsgNotify.sOprUserId)
  
  return sopruserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadioMsgNotify::set_allocated_sopruserid(::std::string* sopruserid) {
  if (sopruserid != NULL) {
    
  } else {
    
  }
  sopruserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sopruserid);
  // @@protoc_insertion_point(field_set_allocated:radionotify.RadioMsgNotify.sOprUserId)
}

// repeated string sMnpledUserId = 5;
inline int RadioMsgNotify::smnpleduserid_size() const {
  return smnpleduserid_.size();
}
inline void RadioMsgNotify::clear_smnpleduserid() {
  smnpleduserid_.Clear();
}
inline const ::std::string& RadioMsgNotify::smnpleduserid(int index) const {
  // @@protoc_insertion_point(field_get:radionotify.RadioMsgNotify.sMnpledUserId)
  return smnpleduserid_.Get(index);
}
inline ::std::string* RadioMsgNotify::mutable_smnpleduserid(int index) {
  // @@protoc_insertion_point(field_mutable:radionotify.RadioMsgNotify.sMnpledUserId)
  return smnpleduserid_.Mutable(index);
}
inline void RadioMsgNotify::set_smnpleduserid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:radionotify.RadioMsgNotify.sMnpledUserId)
  smnpleduserid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RadioMsgNotify::set_smnpleduserid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:radionotify.RadioMsgNotify.sMnpledUserId)
  smnpleduserid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RadioMsgNotify::set_smnpleduserid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  smnpleduserid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:radionotify.RadioMsgNotify.sMnpledUserId)
}
inline void RadioMsgNotify::set_smnpleduserid(int index, const char* value, size_t size) {
  smnpleduserid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:radionotify.RadioMsgNotify.sMnpledUserId)
}
inline ::std::string* RadioMsgNotify::add_smnpleduserid() {
  // @@protoc_insertion_point(field_add_mutable:radionotify.RadioMsgNotify.sMnpledUserId)
  return smnpleduserid_.Add();
}
inline void RadioMsgNotify::add_smnpleduserid(const ::std::string& value) {
  smnpleduserid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:radionotify.RadioMsgNotify.sMnpledUserId)
}
#if LANG_CXX11
inline void RadioMsgNotify::add_smnpleduserid(::std::string&& value) {
  smnpleduserid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:radionotify.RadioMsgNotify.sMnpledUserId)
}
#endif
inline void RadioMsgNotify::add_smnpleduserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  smnpleduserid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:radionotify.RadioMsgNotify.sMnpledUserId)
}
inline void RadioMsgNotify::add_smnpleduserid(const char* value, size_t size) {
  smnpleduserid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:radionotify.RadioMsgNotify.sMnpledUserId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RadioMsgNotify::smnpleduserid() const {
  // @@protoc_insertion_point(field_list:radionotify.RadioMsgNotify.sMnpledUserId)
  return smnpleduserid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RadioMsgNotify::mutable_smnpleduserid() {
  // @@protoc_insertion_point(field_mutable_list:radionotify.RadioMsgNotify.sMnpledUserId)
  return &smnpleduserid_;
}

// string sContent = 6;
inline void RadioMsgNotify::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RadioMsgNotify::scontent() const {
  // @@protoc_insertion_point(field_get:radionotify.RadioMsgNotify.sContent)
  return scontent_.GetNoArena();
}
inline void RadioMsgNotify::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:radionotify.RadioMsgNotify.sContent)
}
#if LANG_CXX11
inline void RadioMsgNotify::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:radionotify.RadioMsgNotify.sContent)
}
#endif
inline void RadioMsgNotify::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:radionotify.RadioMsgNotify.sContent)
}
inline void RadioMsgNotify::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:radionotify.RadioMsgNotify.sContent)
}
inline ::std::string* RadioMsgNotify::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:radionotify.RadioMsgNotify.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadioMsgNotify::release_scontent() {
  // @@protoc_insertion_point(field_release:radionotify.RadioMsgNotify.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadioMsgNotify::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:radionotify.RadioMsgNotify.sContent)
}

// .radionotify.RadioNotifyType notifyType = 7;
inline void RadioMsgNotify::clear_notifytype() {
  notifytype_ = 0;
}
inline ::radionotify::RadioNotifyType RadioMsgNotify::notifytype() const {
  // @@protoc_insertion_point(field_get:radionotify.RadioMsgNotify.notifyType)
  return static_cast< ::radionotify::RadioNotifyType >(notifytype_);
}
inline void RadioMsgNotify::set_notifytype(::radionotify::RadioNotifyType value) {
  
  notifytype_ = value;
  // @@protoc_insertion_point(field_set:radionotify.RadioMsgNotify.notifyType)
}

// string extend = 8;
inline void RadioMsgNotify::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RadioMsgNotify::extend() const {
  // @@protoc_insertion_point(field_get:radionotify.RadioMsgNotify.extend)
  return extend_.GetNoArena();
}
inline void RadioMsgNotify::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:radionotify.RadioMsgNotify.extend)
}
#if LANG_CXX11
inline void RadioMsgNotify::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:radionotify.RadioMsgNotify.extend)
}
#endif
inline void RadioMsgNotify::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:radionotify.RadioMsgNotify.extend)
}
inline void RadioMsgNotify::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:radionotify.RadioMsgNotify.extend)
}
inline ::std::string* RadioMsgNotify::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:radionotify.RadioMsgNotify.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadioMsgNotify::release_extend() {
  // @@protoc_insertion_point(field_release:radionotify.RadioMsgNotify.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadioMsgNotify::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:radionotify.RadioMsgNotify.extend)
}

// -------------------------------------------------------------------

// RadioMsgNotifyACK

// string sMsgId = 1;
inline void RadioMsgNotifyACK::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RadioMsgNotifyACK::smsgid() const {
  // @@protoc_insertion_point(field_get:radionotify.RadioMsgNotifyACK.sMsgId)
  return smsgid_.GetNoArena();
}
inline void RadioMsgNotifyACK::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:radionotify.RadioMsgNotifyACK.sMsgId)
}
#if LANG_CXX11
inline void RadioMsgNotifyACK::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:radionotify.RadioMsgNotifyACK.sMsgId)
}
#endif
inline void RadioMsgNotifyACK::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:radionotify.RadioMsgNotifyACK.sMsgId)
}
inline void RadioMsgNotifyACK::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:radionotify.RadioMsgNotifyACK.sMsgId)
}
inline ::std::string* RadioMsgNotifyACK::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:radionotify.RadioMsgNotifyACK.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadioMsgNotifyACK::release_smsgid() {
  // @@protoc_insertion_point(field_release:radionotify.RadioMsgNotifyACK.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadioMsgNotifyACK::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:radionotify.RadioMsgNotifyACK.sMsgId)
}

// uint64 msgTime = 2;
inline void RadioMsgNotifyACK::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RadioMsgNotifyACK::msgtime() const {
  // @@protoc_insertion_point(field_get:radionotify.RadioMsgNotifyACK.msgTime)
  return msgtime_;
}
inline void RadioMsgNotifyACK::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:radionotify.RadioMsgNotifyACK.msgTime)
}

// .radionotify.ExceptionCode expcode = 3;
inline void RadioMsgNotifyACK::clear_expcode() {
  expcode_ = 0;
}
inline ::radionotify::ExceptionCode RadioMsgNotifyACK::expcode() const {
  // @@protoc_insertion_point(field_get:radionotify.RadioMsgNotifyACK.expcode)
  return static_cast< ::radionotify::ExceptionCode >(expcode_);
}
inline void RadioMsgNotifyACK::set_expcode(::radionotify::ExceptionCode value) {
  
  expcode_ = value;
  // @@protoc_insertion_point(field_set:radionotify.RadioMsgNotifyACK.expcode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace radionotify

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::radionotify::RadioNotifyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::radionotify::RadioNotifyType>() {
  return ::radionotify::RadioNotifyType_descriptor();
}
template <> struct is_proto_enum< ::radionotify::ExceptionCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::radionotify::ExceptionCode>() {
  return ::radionotify::ExceptionCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_im_2eradio_2eproto
