// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc.statistic.proto

#ifndef PROTOBUF_INCLUDED_grpc_2estatistic_2eproto
#define PROTOBUF_INCLUDED_grpc_2estatistic_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_grpc_2estatistic_2eproto 

namespace protobuf_grpc_2estatistic_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_grpc_2estatistic_2eproto
namespace bi_analysis {
class CommonRsp;
class CommonRspDefaultTypeInternal;
extern CommonRspDefaultTypeInternal _CommonRsp_default_instance_;
class LocationInfo;
class LocationInfoDefaultTypeInternal;
extern LocationInfoDefaultTypeInternal _LocationInfo_default_instance_;
class UserAction;
class UserActionDefaultTypeInternal;
extern UserActionDefaultTypeInternal _UserAction_default_instance_;
class UserActions;
class UserActionsDefaultTypeInternal;
extern UserActionsDefaultTypeInternal _UserActions_default_instance_;
class UserContext;
class UserContextDefaultTypeInternal;
extern UserContextDefaultTypeInternal _UserContext_default_instance_;
class UserContexts;
class UserContextsDefaultTypeInternal;
extern UserContextsDefaultTypeInternal _UserContexts_default_instance_;
}  // namespace bi_analysis
namespace google {
namespace protobuf {
template<> ::bi_analysis::CommonRsp* Arena::CreateMaybeMessage<::bi_analysis::CommonRsp>(Arena*);
template<> ::bi_analysis::LocationInfo* Arena::CreateMaybeMessage<::bi_analysis::LocationInfo>(Arena*);
template<> ::bi_analysis::UserAction* Arena::CreateMaybeMessage<::bi_analysis::UserAction>(Arena*);
template<> ::bi_analysis::UserActions* Arena::CreateMaybeMessage<::bi_analysis::UserActions>(Arena*);
template<> ::bi_analysis::UserContext* Arena::CreateMaybeMessage<::bi_analysis::UserContext>(Arena*);
template<> ::bi_analysis::UserContexts* Arena::CreateMaybeMessage<::bi_analysis::UserContexts>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace bi_analysis {

enum PlatFormType {
  PLAT_UNKNOWN = 0,
  PLAT_IOS = 1,
  PLAT_ANDROID = 2,
  PLAT_PC = 3,
  PlatFormType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlatFormType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlatFormType_IsValid(int value);
const PlatFormType PlatFormType_MIN = PLAT_UNKNOWN;
const PlatFormType PlatFormType_MAX = PLAT_PC;
const int PlatFormType_ARRAYSIZE = PlatFormType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlatFormType_descriptor();
inline const ::std::string& PlatFormType_Name(PlatFormType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlatFormType_descriptor(), value);
}
inline bool PlatFormType_Parse(
    const ::std::string& name, PlatFormType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlatFormType>(
    PlatFormType_descriptor(), name, value);
}
enum DataFromType {
  FROM_IOS = 0,
  FROM_ANDROID = 1,
  FROM_PC = 2,
  FROM_PHP_SERVER = 3,
  FROM_IM_SERVER = 4,
  DataFromType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DataFromType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DataFromType_IsValid(int value);
const DataFromType DataFromType_MIN = FROM_IOS;
const DataFromType DataFromType_MAX = FROM_IM_SERVER;
const int DataFromType_ARRAYSIZE = DataFromType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataFromType_descriptor();
inline const ::std::string& DataFromType_Name(DataFromType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataFromType_descriptor(), value);
}
inline bool DataFromType_Parse(
    const ::std::string& name, DataFromType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataFromType>(
    DataFromType_descriptor(), name, value);
}
enum AppChannelType {
  APP_CHANNEL_UNKNOWN = 0,
  APP_CHANNEL_APPSTORE = 1001,
  APP_CHANNEL_GOOLEPLAY = 2001,
  APP_CHANNEL_OFFICIALWEB = 2002,
  APP_CHANNEL_FIR = 2003,
  AppChannelType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AppChannelType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AppChannelType_IsValid(int value);
const AppChannelType AppChannelType_MIN = APP_CHANNEL_UNKNOWN;
const AppChannelType AppChannelType_MAX = APP_CHANNEL_FIR;
const int AppChannelType_ARRAYSIZE = AppChannelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AppChannelType_descriptor();
inline const ::std::string& AppChannelType_Name(AppChannelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AppChannelType_descriptor(), value);
}
inline bool AppChannelType_Parse(
    const ::std::string& name, AppChannelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AppChannelType>(
    AppChannelType_descriptor(), name, value);
}
enum NetStateType {
  NET_STATE_UNKNOWN = 0,
  NET_STATE_WIFI = 1,
  NET_STATE_2G = 2,
  NET_STATE_3G = 3,
  NET_STATE_4G = 4,
  NET_STATE_5G = 5,
  NetStateType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NetStateType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NetStateType_IsValid(int value);
const NetStateType NetStateType_MIN = NET_STATE_UNKNOWN;
const NetStateType NetStateType_MAX = NET_STATE_5G;
const int NetStateType_ARRAYSIZE = NetStateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetStateType_descriptor();
inline const ::std::string& NetStateType_Name(NetStateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetStateType_descriptor(), value);
}
inline bool NetStateType_Parse(
    const ::std::string& name, NetStateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetStateType>(
    NetStateType_descriptor(), name, value);
}
// ===================================================================

class LocationInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bi_analysis.LocationInfo) */ {
 public:
  LocationInfo();
  virtual ~LocationInfo();

  LocationInfo(const LocationInfo& from);

  inline LocationInfo& operator=(const LocationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocationInfo(LocationInfo&& from) noexcept
    : LocationInfo() {
    *this = ::std::move(from);
  }

  inline LocationInfo& operator=(LocationInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LocationInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationInfo* internal_default_instance() {
    return reinterpret_cast<const LocationInfo*>(
               &_LocationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LocationInfo* other);
  friend void swap(LocationInfo& a, LocationInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocationInfo* New() const final {
    return CreateMaybeMessage<LocationInfo>(NULL);
  }

  LocationInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LocationInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LocationInfo& from);
  void MergeFrom(const LocationInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string country = 1;
  void clear_country();
  static const int kCountryFieldNumber = 1;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // string province = 2;
  void clear_province();
  static const int kProvinceFieldNumber = 2;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // string city = 3;
  void clear_city();
  static const int kCityFieldNumber = 3;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // @@protoc_insertion_point(class_scope:bi_analysis.LocationInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_grpc_2estatistic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommonRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bi_analysis.CommonRsp) */ {
 public:
  CommonRsp();
  virtual ~CommonRsp();

  CommonRsp(const CommonRsp& from);

  inline CommonRsp& operator=(const CommonRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonRsp(CommonRsp&& from) noexcept
    : CommonRsp() {
    *this = ::std::move(from);
  }

  inline CommonRsp& operator=(CommonRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonRsp* internal_default_instance() {
    return reinterpret_cast<const CommonRsp*>(
               &_CommonRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CommonRsp* other);
  friend void swap(CommonRsp& a, CommonRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonRsp* New() const final {
    return CreateMaybeMessage<CommonRsp>(NULL);
  }

  CommonRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommonRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommonRsp& from);
  void MergeFrom(const CommonRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sBatchMsgId = 1;
  void clear_sbatchmsgid();
  static const int kSBatchMsgIdFieldNumber = 1;
  const ::std::string& sbatchmsgid() const;
  void set_sbatchmsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_sbatchmsgid(::std::string&& value);
  #endif
  void set_sbatchmsgid(const char* value);
  void set_sbatchmsgid(const char* value, size_t size);
  ::std::string* mutable_sbatchmsgid();
  ::std::string* release_sbatchmsgid();
  void set_allocated_sbatchmsgid(::std::string* sbatchmsgid);

  // string sErrMessage = 3;
  void clear_serrmessage();
  static const int kSErrMessageFieldNumber = 3;
  const ::std::string& serrmessage() const;
  void set_serrmessage(const ::std::string& value);
  #if LANG_CXX11
  void set_serrmessage(::std::string&& value);
  #endif
  void set_serrmessage(const char* value);
  void set_serrmessage(const char* value, size_t size);
  ::std::string* mutable_serrmessage();
  ::std::string* release_serrmessage();
  void set_allocated_serrmessage(::std::string* serrmessage);

  // uint32 nErrCode = 2;
  void clear_nerrcode();
  static const int kNErrCodeFieldNumber = 2;
  ::google::protobuf::uint32 nerrcode() const;
  void set_nerrcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bi_analysis.CommonRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sbatchmsgid_;
  ::google::protobuf::internal::ArenaStringPtr serrmessage_;
  ::google::protobuf::uint32 nerrcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_grpc_2estatistic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bi_analysis.UserContext) */ {
 public:
  UserContext();
  virtual ~UserContext();

  UserContext(const UserContext& from);

  inline UserContext& operator=(const UserContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserContext(UserContext&& from) noexcept
    : UserContext() {
    *this = ::std::move(from);
  }

  inline UserContext& operator=(UserContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserContext* internal_default_instance() {
    return reinterpret_cast<const UserContext*>(
               &_UserContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UserContext* other);
  friend void swap(UserContext& a, UserContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserContext* New() const final {
    return CreateMaybeMessage<UserContext>(NULL);
  }

  UserContext* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserContext>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserContext& from);
  void MergeFrom(const UserContext& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sDeviceId = 3;
  void clear_sdeviceid();
  static const int kSDeviceIdFieldNumber = 3;
  const ::std::string& sdeviceid() const;
  void set_sdeviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_sdeviceid(::std::string&& value);
  #endif
  void set_sdeviceid(const char* value);
  void set_sdeviceid(const char* value, size_t size);
  ::std::string* mutable_sdeviceid();
  ::std::string* release_sdeviceid();
  void set_allocated_sdeviceid(::std::string* sdeviceid);

  // string sAppId = 4;
  void clear_sappid();
  static const int kSAppIdFieldNumber = 4;
  const ::std::string& sappid() const;
  void set_sappid(const ::std::string& value);
  #if LANG_CXX11
  void set_sappid(::std::string&& value);
  #endif
  void set_sappid(const char* value);
  void set_sappid(const char* value, size_t size);
  ::std::string* mutable_sappid();
  ::std::string* release_sappid();
  void set_allocated_sappid(::std::string* sappid);

  // string sAppVersion = 5;
  void clear_sappversion();
  static const int kSAppVersionFieldNumber = 5;
  const ::std::string& sappversion() const;
  void set_sappversion(const ::std::string& value);
  #if LANG_CXX11
  void set_sappversion(::std::string&& value);
  #endif
  void set_sappversion(const char* value);
  void set_sappversion(const char* value, size_t size);
  ::std::string* mutable_sappversion();
  ::std::string* release_sappversion();
  void set_allocated_sappversion(::std::string* sappversion);

  // string sDeviceBrand = 6;
  void clear_sdevicebrand();
  static const int kSDeviceBrandFieldNumber = 6;
  const ::std::string& sdevicebrand() const;
  void set_sdevicebrand(const ::std::string& value);
  #if LANG_CXX11
  void set_sdevicebrand(::std::string&& value);
  #endif
  void set_sdevicebrand(const char* value);
  void set_sdevicebrand(const char* value, size_t size);
  ::std::string* mutable_sdevicebrand();
  ::std::string* release_sdevicebrand();
  void set_allocated_sdevicebrand(::std::string* sdevicebrand);

  // string sDeviceModel = 7;
  void clear_sdevicemodel();
  static const int kSDeviceModelFieldNumber = 7;
  const ::std::string& sdevicemodel() const;
  void set_sdevicemodel(const ::std::string& value);
  #if LANG_CXX11
  void set_sdevicemodel(::std::string&& value);
  #endif
  void set_sdevicemodel(const char* value);
  void set_sdevicemodel(const char* value, size_t size);
  ::std::string* mutable_sdevicemodel();
  ::std::string* release_sdevicemodel();
  void set_allocated_sdevicemodel(::std::string* sdevicemodel);

  // string sOsVersion = 9;
  void clear_sosversion();
  static const int kSOsVersionFieldNumber = 9;
  const ::std::string& sosversion() const;
  void set_sosversion(const ::std::string& value);
  #if LANG_CXX11
  void set_sosversion(::std::string&& value);
  #endif
  void set_sosversion(const char* value);
  void set_sosversion(const char* value, size_t size);
  ::std::string* mutable_sosversion();
  ::std::string* release_sosversion();
  void set_allocated_sosversion(::std::string* sosversion);

  // string sSysLang = 10;
  void clear_ssyslang();
  static const int kSSysLangFieldNumber = 10;
  const ::std::string& ssyslang() const;
  void set_ssyslang(const ::std::string& value);
  #if LANG_CXX11
  void set_ssyslang(::std::string&& value);
  #endif
  void set_ssyslang(const char* value);
  void set_ssyslang(const char* value, size_t size);
  ::std::string* mutable_ssyslang();
  ::std::string* release_ssyslang();
  void set_allocated_ssyslang(::std::string* ssyslang);

  // string sIP = 12;
  void clear_sip();
  static const int kSIPFieldNumber = 12;
  const ::std::string& sip() const;
  void set_sip(const ::std::string& value);
  #if LANG_CXX11
  void set_sip(::std::string&& value);
  #endif
  void set_sip(const char* value);
  void set_sip(const char* value, size_t size);
  ::std::string* mutable_sip();
  ::std::string* release_sip();
  void set_allocated_sip(::std::string* sip);

  // string sMsgId = 14;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 14;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .bi_analysis.LocationInfo location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  private:
  const ::bi_analysis::LocationInfo& _internal_location() const;
  public:
  const ::bi_analysis::LocationInfo& location() const;
  ::bi_analysis::LocationInfo* release_location();
  ::bi_analysis::LocationInfo* mutable_location();
  void set_allocated_location(::bi_analysis::LocationInfo* location);

  // .bi_analysis.PlatFormType PlatForm = 8;
  void clear_platform();
  static const int kPlatFormFieldNumber = 8;
  ::bi_analysis::PlatFormType platform() const;
  void set_platform(::bi_analysis::PlatFormType value);

  // .bi_analysis.AppChannelType nAppChannel = 11;
  void clear_nappchannel();
  static const int kNAppChannelFieldNumber = 11;
  ::bi_analysis::AppChannelType nappchannel() const;
  void set_nappchannel(::bi_analysis::AppChannelType value);

  // .bi_analysis.NetStateType nNetworkState = 13;
  void clear_nnetworkstate();
  static const int kNNetworkStateFieldNumber = 13;
  ::bi_analysis::NetStateType nnetworkstate() const;
  void set_nnetworkstate(::bi_analysis::NetStateType value);

  // @@protoc_insertion_point(class_scope:bi_analysis.UserContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sdeviceid_;
  ::google::protobuf::internal::ArenaStringPtr sappid_;
  ::google::protobuf::internal::ArenaStringPtr sappversion_;
  ::google::protobuf::internal::ArenaStringPtr sdevicebrand_;
  ::google::protobuf::internal::ArenaStringPtr sdevicemodel_;
  ::google::protobuf::internal::ArenaStringPtr sosversion_;
  ::google::protobuf::internal::ArenaStringPtr ssyslang_;
  ::google::protobuf::internal::ArenaStringPtr sip_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::bi_analysis::LocationInfo* location_;
  int platform_;
  int nappchannel_;
  int nnetworkstate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_grpc_2estatistic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserContexts : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bi_analysis.UserContexts) */ {
 public:
  UserContexts();
  virtual ~UserContexts();

  UserContexts(const UserContexts& from);

  inline UserContexts& operator=(const UserContexts& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserContexts(UserContexts&& from) noexcept
    : UserContexts() {
    *this = ::std::move(from);
  }

  inline UserContexts& operator=(UserContexts&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserContexts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserContexts* internal_default_instance() {
    return reinterpret_cast<const UserContexts*>(
               &_UserContexts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UserContexts* other);
  friend void swap(UserContexts& a, UserContexts& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserContexts* New() const final {
    return CreateMaybeMessage<UserContexts>(NULL);
  }

  UserContexts* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserContexts>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserContexts& from);
  void MergeFrom(const UserContexts& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserContexts* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bi_analysis.UserContext contexts = 2;
  int contexts_size() const;
  void clear_contexts();
  static const int kContextsFieldNumber = 2;
  ::bi_analysis::UserContext* mutable_contexts(int index);
  ::google::protobuf::RepeatedPtrField< ::bi_analysis::UserContext >*
      mutable_contexts();
  const ::bi_analysis::UserContext& contexts(int index) const;
  ::bi_analysis::UserContext* add_contexts();
  const ::google::protobuf::RepeatedPtrField< ::bi_analysis::UserContext >&
      contexts() const;

  // string sBatchMsgId = 1;
  void clear_sbatchmsgid();
  static const int kSBatchMsgIdFieldNumber = 1;
  const ::std::string& sbatchmsgid() const;
  void set_sbatchmsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_sbatchmsgid(::std::string&& value);
  #endif
  void set_sbatchmsgid(const char* value);
  void set_sbatchmsgid(const char* value, size_t size);
  ::std::string* mutable_sbatchmsgid();
  ::std::string* release_sbatchmsgid();
  void set_allocated_sbatchmsgid(::std::string* sbatchmsgid);

  // @@protoc_insertion_point(class_scope:bi_analysis.UserContexts)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::bi_analysis::UserContext > contexts_;
  ::google::protobuf::internal::ArenaStringPtr sbatchmsgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_grpc_2estatistic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bi_analysis.UserAction) */ {
 public:
  UserAction();
  virtual ~UserAction();

  UserAction(const UserAction& from);

  inline UserAction& operator=(const UserAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserAction(UserAction&& from) noexcept
    : UserAction() {
    *this = ::std::move(from);
  }

  inline UserAction& operator=(UserAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAction* internal_default_instance() {
    return reinterpret_cast<const UserAction*>(
               &_UserAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UserAction* other);
  friend void swap(UserAction& a, UserAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserAction* New() const final {
    return CreateMaybeMessage<UserAction>(NULL);
  }

  UserAction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserAction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserAction& from);
  void MergeFrom(const UserAction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sTypePath = 2;
  void clear_stypepath();
  static const int kSTypePathFieldNumber = 2;
  const ::std::string& stypepath() const;
  void set_stypepath(const ::std::string& value);
  #if LANG_CXX11
  void set_stypepath(::std::string&& value);
  #endif
  void set_stypepath(const char* value);
  void set_stypepath(const char* value, size_t size);
  ::std::string* mutable_stypepath();
  ::std::string* release_stypepath();
  void set_allocated_stypepath(::std::string* stypepath);

  // string sContent = 3;
  void clear_scontent();
  static const int kSContentFieldNumber = 3;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // string sGroupId = 4;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 4;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // string sDescription = 6;
  void clear_sdescription();
  static const int kSDescriptionFieldNumber = 6;
  const ::std::string& sdescription() const;
  void set_sdescription(const ::std::string& value);
  #if LANG_CXX11
  void set_sdescription(::std::string&& value);
  #endif
  void set_sdescription(const char* value);
  void set_sdescription(const char* value, size_t size);
  ::std::string* mutable_sdescription();
  ::std::string* release_sdescription();
  void set_allocated_sdescription(::std::string* sdescription);

  // string sMsgId = 7;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 7;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sCorrelationId = 8;
  void clear_scorrelationid();
  static const int kSCorrelationIdFieldNumber = 8;
  const ::std::string& scorrelationid() const;
  void set_scorrelationid(const ::std::string& value);
  #if LANG_CXX11
  void set_scorrelationid(::std::string&& value);
  #endif
  void set_scorrelationid(const char* value);
  void set_scorrelationid(const char* value, size_t size);
  ::std::string* mutable_scorrelationid();
  ::std::string* release_scorrelationid();
  void set_allocated_scorrelationid(::std::string* scorrelationid);

  // uint64 nActionTime = 9;
  void clear_nactiontime();
  static const int kNActionTimeFieldNumber = 9;
  ::google::protobuf::uint64 nactiontime() const;
  void set_nactiontime(::google::protobuf::uint64 value);

  // .bi_analysis.DataFromType Data_From = 5;
  void clear_data_from();
  static const int kDataFromFieldNumber = 5;
  ::bi_analysis::DataFromType data_from() const;
  void set_data_from(::bi_analysis::DataFromType value);

  // @@protoc_insertion_point(class_scope:bi_analysis.UserAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr stypepath_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::internal::ArenaStringPtr sdescription_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr scorrelationid_;
  ::google::protobuf::uint64 nactiontime_;
  int data_from_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_grpc_2estatistic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserActions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bi_analysis.UserActions) */ {
 public:
  UserActions();
  virtual ~UserActions();

  UserActions(const UserActions& from);

  inline UserActions& operator=(const UserActions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserActions(UserActions&& from) noexcept
    : UserActions() {
    *this = ::std::move(from);
  }

  inline UserActions& operator=(UserActions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserActions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserActions* internal_default_instance() {
    return reinterpret_cast<const UserActions*>(
               &_UserActions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(UserActions* other);
  friend void swap(UserActions& a, UserActions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserActions* New() const final {
    return CreateMaybeMessage<UserActions>(NULL);
  }

  UserActions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserActions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserActions& from);
  void MergeFrom(const UserActions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserActions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bi_analysis.UserAction actions = 2;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 2;
  ::bi_analysis::UserAction* mutable_actions(int index);
  ::google::protobuf::RepeatedPtrField< ::bi_analysis::UserAction >*
      mutable_actions();
  const ::bi_analysis::UserAction& actions(int index) const;
  ::bi_analysis::UserAction* add_actions();
  const ::google::protobuf::RepeatedPtrField< ::bi_analysis::UserAction >&
      actions() const;

  // string sBatchMsgId = 1;
  void clear_sbatchmsgid();
  static const int kSBatchMsgIdFieldNumber = 1;
  const ::std::string& sbatchmsgid() const;
  void set_sbatchmsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_sbatchmsgid(::std::string&& value);
  #endif
  void set_sbatchmsgid(const char* value);
  void set_sbatchmsgid(const char* value, size_t size);
  ::std::string* mutable_sbatchmsgid();
  ::std::string* release_sbatchmsgid();
  void set_allocated_sbatchmsgid(::std::string* sbatchmsgid);

  // @@protoc_insertion_point(class_scope:bi_analysis.UserActions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::bi_analysis::UserAction > actions_;
  ::google::protobuf::internal::ArenaStringPtr sbatchmsgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_grpc_2estatistic_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocationInfo

// string country = 1;
inline void LocationInfo::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LocationInfo::country() const {
  // @@protoc_insertion_point(field_get:bi_analysis.LocationInfo.country)
  return country_.GetNoArena();
}
inline void LocationInfo::set_country(const ::std::string& value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.LocationInfo.country)
}
#if LANG_CXX11
inline void LocationInfo::set_country(::std::string&& value) {
  
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.LocationInfo.country)
}
#endif
inline void LocationInfo::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.LocationInfo.country)
}
inline void LocationInfo::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.LocationInfo.country)
}
inline ::std::string* LocationInfo::mutable_country() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.LocationInfo.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationInfo::release_country() {
  // @@protoc_insertion_point(field_release:bi_analysis.LocationInfo.country)
  
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationInfo::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.LocationInfo.country)
}

// string province = 2;
inline void LocationInfo::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LocationInfo::province() const {
  // @@protoc_insertion_point(field_get:bi_analysis.LocationInfo.province)
  return province_.GetNoArena();
}
inline void LocationInfo::set_province(const ::std::string& value) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.LocationInfo.province)
}
#if LANG_CXX11
inline void LocationInfo::set_province(::std::string&& value) {
  
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.LocationInfo.province)
}
#endif
inline void LocationInfo::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.LocationInfo.province)
}
inline void LocationInfo::set_province(const char* value, size_t size) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.LocationInfo.province)
}
inline ::std::string* LocationInfo::mutable_province() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.LocationInfo.province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationInfo::release_province() {
  // @@protoc_insertion_point(field_release:bi_analysis.LocationInfo.province)
  
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationInfo::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    
  } else {
    
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.LocationInfo.province)
}

// string city = 3;
inline void LocationInfo::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LocationInfo::city() const {
  // @@protoc_insertion_point(field_get:bi_analysis.LocationInfo.city)
  return city_.GetNoArena();
}
inline void LocationInfo::set_city(const ::std::string& value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.LocationInfo.city)
}
#if LANG_CXX11
inline void LocationInfo::set_city(::std::string&& value) {
  
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.LocationInfo.city)
}
#endif
inline void LocationInfo::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.LocationInfo.city)
}
inline void LocationInfo::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.LocationInfo.city)
}
inline ::std::string* LocationInfo::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.LocationInfo.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationInfo::release_city() {
  // @@protoc_insertion_point(field_release:bi_analysis.LocationInfo.city)
  
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationInfo::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.LocationInfo.city)
}

// -------------------------------------------------------------------

// CommonRsp

// string sBatchMsgId = 1;
inline void CommonRsp::clear_sbatchmsgid() {
  sbatchmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonRsp::sbatchmsgid() const {
  // @@protoc_insertion_point(field_get:bi_analysis.CommonRsp.sBatchMsgId)
  return sbatchmsgid_.GetNoArena();
}
inline void CommonRsp::set_sbatchmsgid(const ::std::string& value) {
  
  sbatchmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.CommonRsp.sBatchMsgId)
}
#if LANG_CXX11
inline void CommonRsp::set_sbatchmsgid(::std::string&& value) {
  
  sbatchmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.CommonRsp.sBatchMsgId)
}
#endif
inline void CommonRsp::set_sbatchmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sbatchmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.CommonRsp.sBatchMsgId)
}
inline void CommonRsp::set_sbatchmsgid(const char* value, size_t size) {
  
  sbatchmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.CommonRsp.sBatchMsgId)
}
inline ::std::string* CommonRsp::mutable_sbatchmsgid() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.CommonRsp.sBatchMsgId)
  return sbatchmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonRsp::release_sbatchmsgid() {
  // @@protoc_insertion_point(field_release:bi_analysis.CommonRsp.sBatchMsgId)
  
  return sbatchmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonRsp::set_allocated_sbatchmsgid(::std::string* sbatchmsgid) {
  if (sbatchmsgid != NULL) {
    
  } else {
    
  }
  sbatchmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sbatchmsgid);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.CommonRsp.sBatchMsgId)
}

// uint32 nErrCode = 2;
inline void CommonRsp::clear_nerrcode() {
  nerrcode_ = 0u;
}
inline ::google::protobuf::uint32 CommonRsp::nerrcode() const {
  // @@protoc_insertion_point(field_get:bi_analysis.CommonRsp.nErrCode)
  return nerrcode_;
}
inline void CommonRsp::set_nerrcode(::google::protobuf::uint32 value) {
  
  nerrcode_ = value;
  // @@protoc_insertion_point(field_set:bi_analysis.CommonRsp.nErrCode)
}

// string sErrMessage = 3;
inline void CommonRsp::clear_serrmessage() {
  serrmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonRsp::serrmessage() const {
  // @@protoc_insertion_point(field_get:bi_analysis.CommonRsp.sErrMessage)
  return serrmessage_.GetNoArena();
}
inline void CommonRsp::set_serrmessage(const ::std::string& value) {
  
  serrmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.CommonRsp.sErrMessage)
}
#if LANG_CXX11
inline void CommonRsp::set_serrmessage(::std::string&& value) {
  
  serrmessage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.CommonRsp.sErrMessage)
}
#endif
inline void CommonRsp::set_serrmessage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serrmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.CommonRsp.sErrMessage)
}
inline void CommonRsp::set_serrmessage(const char* value, size_t size) {
  
  serrmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.CommonRsp.sErrMessage)
}
inline ::std::string* CommonRsp::mutable_serrmessage() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.CommonRsp.sErrMessage)
  return serrmessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonRsp::release_serrmessage() {
  // @@protoc_insertion_point(field_release:bi_analysis.CommonRsp.sErrMessage)
  
  return serrmessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonRsp::set_allocated_serrmessage(::std::string* serrmessage) {
  if (serrmessage != NULL) {
    
  } else {
    
  }
  serrmessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serrmessage);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.CommonRsp.sErrMessage)
}

// -------------------------------------------------------------------

// UserContext

// string sUserId = 1;
inline void UserContext::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContext::suserid() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserContext.sUserId)
  return suserid_.GetNoArena();
}
inline void UserContext::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.UserContext.sUserId)
}
#if LANG_CXX11
inline void UserContext::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.UserContext.sUserId)
}
#endif
inline void UserContext::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.UserContext.sUserId)
}
inline void UserContext::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.UserContext.sUserId)
}
inline ::std::string* UserContext::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserContext.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContext::release_suserid() {
  // @@protoc_insertion_point(field_release:bi_analysis.UserContext.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContext::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.UserContext.sUserId)
}

// .bi_analysis.LocationInfo location = 2;
inline bool UserContext::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
inline void UserContext::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
}
inline const ::bi_analysis::LocationInfo& UserContext::_internal_location() const {
  return *location_;
}
inline const ::bi_analysis::LocationInfo& UserContext::location() const {
  const ::bi_analysis::LocationInfo* p = location_;
  // @@protoc_insertion_point(field_get:bi_analysis.UserContext.location)
  return p != NULL ? *p : *reinterpret_cast<const ::bi_analysis::LocationInfo*>(
      &::bi_analysis::_LocationInfo_default_instance_);
}
inline ::bi_analysis::LocationInfo* UserContext::release_location() {
  // @@protoc_insertion_point(field_release:bi_analysis.UserContext.location)
  
  ::bi_analysis::LocationInfo* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::bi_analysis::LocationInfo* UserContext::mutable_location() {
  
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::bi_analysis::LocationInfo>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserContext.location)
  return location_;
}
inline void UserContext::set_allocated_location(::bi_analysis::LocationInfo* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.UserContext.location)
}

// string sDeviceId = 3;
inline void UserContext::clear_sdeviceid() {
  sdeviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContext::sdeviceid() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserContext.sDeviceId)
  return sdeviceid_.GetNoArena();
}
inline void UserContext::set_sdeviceid(const ::std::string& value) {
  
  sdeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.UserContext.sDeviceId)
}
#if LANG_CXX11
inline void UserContext::set_sdeviceid(::std::string&& value) {
  
  sdeviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.UserContext.sDeviceId)
}
#endif
inline void UserContext::set_sdeviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sdeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.UserContext.sDeviceId)
}
inline void UserContext::set_sdeviceid(const char* value, size_t size) {
  
  sdeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.UserContext.sDeviceId)
}
inline ::std::string* UserContext::mutable_sdeviceid() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserContext.sDeviceId)
  return sdeviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContext::release_sdeviceid() {
  // @@protoc_insertion_point(field_release:bi_analysis.UserContext.sDeviceId)
  
  return sdeviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContext::set_allocated_sdeviceid(::std::string* sdeviceid) {
  if (sdeviceid != NULL) {
    
  } else {
    
  }
  sdeviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdeviceid);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.UserContext.sDeviceId)
}

// string sAppId = 4;
inline void UserContext::clear_sappid() {
  sappid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContext::sappid() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserContext.sAppId)
  return sappid_.GetNoArena();
}
inline void UserContext::set_sappid(const ::std::string& value) {
  
  sappid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.UserContext.sAppId)
}
#if LANG_CXX11
inline void UserContext::set_sappid(::std::string&& value) {
  
  sappid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.UserContext.sAppId)
}
#endif
inline void UserContext::set_sappid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sappid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.UserContext.sAppId)
}
inline void UserContext::set_sappid(const char* value, size_t size) {
  
  sappid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.UserContext.sAppId)
}
inline ::std::string* UserContext::mutable_sappid() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserContext.sAppId)
  return sappid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContext::release_sappid() {
  // @@protoc_insertion_point(field_release:bi_analysis.UserContext.sAppId)
  
  return sappid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContext::set_allocated_sappid(::std::string* sappid) {
  if (sappid != NULL) {
    
  } else {
    
  }
  sappid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sappid);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.UserContext.sAppId)
}

// string sAppVersion = 5;
inline void UserContext::clear_sappversion() {
  sappversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContext::sappversion() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserContext.sAppVersion)
  return sappversion_.GetNoArena();
}
inline void UserContext::set_sappversion(const ::std::string& value) {
  
  sappversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.UserContext.sAppVersion)
}
#if LANG_CXX11
inline void UserContext::set_sappversion(::std::string&& value) {
  
  sappversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.UserContext.sAppVersion)
}
#endif
inline void UserContext::set_sappversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sappversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.UserContext.sAppVersion)
}
inline void UserContext::set_sappversion(const char* value, size_t size) {
  
  sappversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.UserContext.sAppVersion)
}
inline ::std::string* UserContext::mutable_sappversion() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserContext.sAppVersion)
  return sappversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContext::release_sappversion() {
  // @@protoc_insertion_point(field_release:bi_analysis.UserContext.sAppVersion)
  
  return sappversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContext::set_allocated_sappversion(::std::string* sappversion) {
  if (sappversion != NULL) {
    
  } else {
    
  }
  sappversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sappversion);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.UserContext.sAppVersion)
}

// string sDeviceBrand = 6;
inline void UserContext::clear_sdevicebrand() {
  sdevicebrand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContext::sdevicebrand() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserContext.sDeviceBrand)
  return sdevicebrand_.GetNoArena();
}
inline void UserContext::set_sdevicebrand(const ::std::string& value) {
  
  sdevicebrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.UserContext.sDeviceBrand)
}
#if LANG_CXX11
inline void UserContext::set_sdevicebrand(::std::string&& value) {
  
  sdevicebrand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.UserContext.sDeviceBrand)
}
#endif
inline void UserContext::set_sdevicebrand(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sdevicebrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.UserContext.sDeviceBrand)
}
inline void UserContext::set_sdevicebrand(const char* value, size_t size) {
  
  sdevicebrand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.UserContext.sDeviceBrand)
}
inline ::std::string* UserContext::mutable_sdevicebrand() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserContext.sDeviceBrand)
  return sdevicebrand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContext::release_sdevicebrand() {
  // @@protoc_insertion_point(field_release:bi_analysis.UserContext.sDeviceBrand)
  
  return sdevicebrand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContext::set_allocated_sdevicebrand(::std::string* sdevicebrand) {
  if (sdevicebrand != NULL) {
    
  } else {
    
  }
  sdevicebrand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdevicebrand);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.UserContext.sDeviceBrand)
}

// string sDeviceModel = 7;
inline void UserContext::clear_sdevicemodel() {
  sdevicemodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContext::sdevicemodel() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserContext.sDeviceModel)
  return sdevicemodel_.GetNoArena();
}
inline void UserContext::set_sdevicemodel(const ::std::string& value) {
  
  sdevicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.UserContext.sDeviceModel)
}
#if LANG_CXX11
inline void UserContext::set_sdevicemodel(::std::string&& value) {
  
  sdevicemodel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.UserContext.sDeviceModel)
}
#endif
inline void UserContext::set_sdevicemodel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sdevicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.UserContext.sDeviceModel)
}
inline void UserContext::set_sdevicemodel(const char* value, size_t size) {
  
  sdevicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.UserContext.sDeviceModel)
}
inline ::std::string* UserContext::mutable_sdevicemodel() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserContext.sDeviceModel)
  return sdevicemodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContext::release_sdevicemodel() {
  // @@protoc_insertion_point(field_release:bi_analysis.UserContext.sDeviceModel)
  
  return sdevicemodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContext::set_allocated_sdevicemodel(::std::string* sdevicemodel) {
  if (sdevicemodel != NULL) {
    
  } else {
    
  }
  sdevicemodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdevicemodel);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.UserContext.sDeviceModel)
}

// .bi_analysis.PlatFormType PlatForm = 8;
inline void UserContext::clear_platform() {
  platform_ = 0;
}
inline ::bi_analysis::PlatFormType UserContext::platform() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserContext.PlatForm)
  return static_cast< ::bi_analysis::PlatFormType >(platform_);
}
inline void UserContext::set_platform(::bi_analysis::PlatFormType value) {
  
  platform_ = value;
  // @@protoc_insertion_point(field_set:bi_analysis.UserContext.PlatForm)
}

// string sOsVersion = 9;
inline void UserContext::clear_sosversion() {
  sosversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContext::sosversion() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserContext.sOsVersion)
  return sosversion_.GetNoArena();
}
inline void UserContext::set_sosversion(const ::std::string& value) {
  
  sosversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.UserContext.sOsVersion)
}
#if LANG_CXX11
inline void UserContext::set_sosversion(::std::string&& value) {
  
  sosversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.UserContext.sOsVersion)
}
#endif
inline void UserContext::set_sosversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sosversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.UserContext.sOsVersion)
}
inline void UserContext::set_sosversion(const char* value, size_t size) {
  
  sosversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.UserContext.sOsVersion)
}
inline ::std::string* UserContext::mutable_sosversion() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserContext.sOsVersion)
  return sosversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContext::release_sosversion() {
  // @@protoc_insertion_point(field_release:bi_analysis.UserContext.sOsVersion)
  
  return sosversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContext::set_allocated_sosversion(::std::string* sosversion) {
  if (sosversion != NULL) {
    
  } else {
    
  }
  sosversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sosversion);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.UserContext.sOsVersion)
}

// string sSysLang = 10;
inline void UserContext::clear_ssyslang() {
  ssyslang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContext::ssyslang() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserContext.sSysLang)
  return ssyslang_.GetNoArena();
}
inline void UserContext::set_ssyslang(const ::std::string& value) {
  
  ssyslang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.UserContext.sSysLang)
}
#if LANG_CXX11
inline void UserContext::set_ssyslang(::std::string&& value) {
  
  ssyslang_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.UserContext.sSysLang)
}
#endif
inline void UserContext::set_ssyslang(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ssyslang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.UserContext.sSysLang)
}
inline void UserContext::set_ssyslang(const char* value, size_t size) {
  
  ssyslang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.UserContext.sSysLang)
}
inline ::std::string* UserContext::mutable_ssyslang() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserContext.sSysLang)
  return ssyslang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContext::release_ssyslang() {
  // @@protoc_insertion_point(field_release:bi_analysis.UserContext.sSysLang)
  
  return ssyslang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContext::set_allocated_ssyslang(::std::string* ssyslang) {
  if (ssyslang != NULL) {
    
  } else {
    
  }
  ssyslang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ssyslang);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.UserContext.sSysLang)
}

// .bi_analysis.AppChannelType nAppChannel = 11;
inline void UserContext::clear_nappchannel() {
  nappchannel_ = 0;
}
inline ::bi_analysis::AppChannelType UserContext::nappchannel() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserContext.nAppChannel)
  return static_cast< ::bi_analysis::AppChannelType >(nappchannel_);
}
inline void UserContext::set_nappchannel(::bi_analysis::AppChannelType value) {
  
  nappchannel_ = value;
  // @@protoc_insertion_point(field_set:bi_analysis.UserContext.nAppChannel)
}

// string sIP = 12;
inline void UserContext::clear_sip() {
  sip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContext::sip() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserContext.sIP)
  return sip_.GetNoArena();
}
inline void UserContext::set_sip(const ::std::string& value) {
  
  sip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.UserContext.sIP)
}
#if LANG_CXX11
inline void UserContext::set_sip(::std::string&& value) {
  
  sip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.UserContext.sIP)
}
#endif
inline void UserContext::set_sip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.UserContext.sIP)
}
inline void UserContext::set_sip(const char* value, size_t size) {
  
  sip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.UserContext.sIP)
}
inline ::std::string* UserContext::mutable_sip() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserContext.sIP)
  return sip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContext::release_sip() {
  // @@protoc_insertion_point(field_release:bi_analysis.UserContext.sIP)
  
  return sip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContext::set_allocated_sip(::std::string* sip) {
  if (sip != NULL) {
    
  } else {
    
  }
  sip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sip);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.UserContext.sIP)
}

// .bi_analysis.NetStateType nNetworkState = 13;
inline void UserContext::clear_nnetworkstate() {
  nnetworkstate_ = 0;
}
inline ::bi_analysis::NetStateType UserContext::nnetworkstate() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserContext.nNetworkState)
  return static_cast< ::bi_analysis::NetStateType >(nnetworkstate_);
}
inline void UserContext::set_nnetworkstate(::bi_analysis::NetStateType value) {
  
  nnetworkstate_ = value;
  // @@protoc_insertion_point(field_set:bi_analysis.UserContext.nNetworkState)
}

// string sMsgId = 14;
inline void UserContext::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContext::smsgid() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserContext.sMsgId)
  return smsgid_.GetNoArena();
}
inline void UserContext::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.UserContext.sMsgId)
}
#if LANG_CXX11
inline void UserContext::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.UserContext.sMsgId)
}
#endif
inline void UserContext::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.UserContext.sMsgId)
}
inline void UserContext::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.UserContext.sMsgId)
}
inline ::std::string* UserContext::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserContext.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContext::release_smsgid() {
  // @@protoc_insertion_point(field_release:bi_analysis.UserContext.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContext::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.UserContext.sMsgId)
}

// -------------------------------------------------------------------

// UserContexts

// string sBatchMsgId = 1;
inline void UserContexts::clear_sbatchmsgid() {
  sbatchmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserContexts::sbatchmsgid() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserContexts.sBatchMsgId)
  return sbatchmsgid_.GetNoArena();
}
inline void UserContexts::set_sbatchmsgid(const ::std::string& value) {
  
  sbatchmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.UserContexts.sBatchMsgId)
}
#if LANG_CXX11
inline void UserContexts::set_sbatchmsgid(::std::string&& value) {
  
  sbatchmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.UserContexts.sBatchMsgId)
}
#endif
inline void UserContexts::set_sbatchmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sbatchmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.UserContexts.sBatchMsgId)
}
inline void UserContexts::set_sbatchmsgid(const char* value, size_t size) {
  
  sbatchmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.UserContexts.sBatchMsgId)
}
inline ::std::string* UserContexts::mutable_sbatchmsgid() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserContexts.sBatchMsgId)
  return sbatchmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserContexts::release_sbatchmsgid() {
  // @@protoc_insertion_point(field_release:bi_analysis.UserContexts.sBatchMsgId)
  
  return sbatchmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserContexts::set_allocated_sbatchmsgid(::std::string* sbatchmsgid) {
  if (sbatchmsgid != NULL) {
    
  } else {
    
  }
  sbatchmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sbatchmsgid);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.UserContexts.sBatchMsgId)
}

// repeated .bi_analysis.UserContext contexts = 2;
inline int UserContexts::contexts_size() const {
  return contexts_.size();
}
inline void UserContexts::clear_contexts() {
  contexts_.Clear();
}
inline ::bi_analysis::UserContext* UserContexts::mutable_contexts(int index) {
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserContexts.contexts)
  return contexts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::bi_analysis::UserContext >*
UserContexts::mutable_contexts() {
  // @@protoc_insertion_point(field_mutable_list:bi_analysis.UserContexts.contexts)
  return &contexts_;
}
inline const ::bi_analysis::UserContext& UserContexts::contexts(int index) const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserContexts.contexts)
  return contexts_.Get(index);
}
inline ::bi_analysis::UserContext* UserContexts::add_contexts() {
  // @@protoc_insertion_point(field_add:bi_analysis.UserContexts.contexts)
  return contexts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bi_analysis::UserContext >&
UserContexts::contexts() const {
  // @@protoc_insertion_point(field_list:bi_analysis.UserContexts.contexts)
  return contexts_;
}

// -------------------------------------------------------------------

// UserAction

// string sUserId = 1;
inline void UserAction::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAction::suserid() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserAction.sUserId)
  return suserid_.GetNoArena();
}
inline void UserAction::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.UserAction.sUserId)
}
#if LANG_CXX11
inline void UserAction::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.UserAction.sUserId)
}
#endif
inline void UserAction::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.UserAction.sUserId)
}
inline void UserAction::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.UserAction.sUserId)
}
inline ::std::string* UserAction::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserAction.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAction::release_suserid() {
  // @@protoc_insertion_point(field_release:bi_analysis.UserAction.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAction::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.UserAction.sUserId)
}

// string sTypePath = 2;
inline void UserAction::clear_stypepath() {
  stypepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAction::stypepath() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserAction.sTypePath)
  return stypepath_.GetNoArena();
}
inline void UserAction::set_stypepath(const ::std::string& value) {
  
  stypepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.UserAction.sTypePath)
}
#if LANG_CXX11
inline void UserAction::set_stypepath(::std::string&& value) {
  
  stypepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.UserAction.sTypePath)
}
#endif
inline void UserAction::set_stypepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stypepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.UserAction.sTypePath)
}
inline void UserAction::set_stypepath(const char* value, size_t size) {
  
  stypepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.UserAction.sTypePath)
}
inline ::std::string* UserAction::mutable_stypepath() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserAction.sTypePath)
  return stypepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAction::release_stypepath() {
  // @@protoc_insertion_point(field_release:bi_analysis.UserAction.sTypePath)
  
  return stypepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAction::set_allocated_stypepath(::std::string* stypepath) {
  if (stypepath != NULL) {
    
  } else {
    
  }
  stypepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stypepath);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.UserAction.sTypePath)
}

// string sContent = 3;
inline void UserAction::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAction::scontent() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserAction.sContent)
  return scontent_.GetNoArena();
}
inline void UserAction::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.UserAction.sContent)
}
#if LANG_CXX11
inline void UserAction::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.UserAction.sContent)
}
#endif
inline void UserAction::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.UserAction.sContent)
}
inline void UserAction::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.UserAction.sContent)
}
inline ::std::string* UserAction::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserAction.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAction::release_scontent() {
  // @@protoc_insertion_point(field_release:bi_analysis.UserAction.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAction::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.UserAction.sContent)
}

// string sGroupId = 4;
inline void UserAction::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAction::sgroupid() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserAction.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void UserAction::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.UserAction.sGroupId)
}
#if LANG_CXX11
inline void UserAction::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.UserAction.sGroupId)
}
#endif
inline void UserAction::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.UserAction.sGroupId)
}
inline void UserAction::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.UserAction.sGroupId)
}
inline ::std::string* UserAction::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserAction.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAction::release_sgroupid() {
  // @@protoc_insertion_point(field_release:bi_analysis.UserAction.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAction::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.UserAction.sGroupId)
}

// .bi_analysis.DataFromType Data_From = 5;
inline void UserAction::clear_data_from() {
  data_from_ = 0;
}
inline ::bi_analysis::DataFromType UserAction::data_from() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserAction.Data_From)
  return static_cast< ::bi_analysis::DataFromType >(data_from_);
}
inline void UserAction::set_data_from(::bi_analysis::DataFromType value) {
  
  data_from_ = value;
  // @@protoc_insertion_point(field_set:bi_analysis.UserAction.Data_From)
}

// string sDescription = 6;
inline void UserAction::clear_sdescription() {
  sdescription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAction::sdescription() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserAction.sDescription)
  return sdescription_.GetNoArena();
}
inline void UserAction::set_sdescription(const ::std::string& value) {
  
  sdescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.UserAction.sDescription)
}
#if LANG_CXX11
inline void UserAction::set_sdescription(::std::string&& value) {
  
  sdescription_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.UserAction.sDescription)
}
#endif
inline void UserAction::set_sdescription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sdescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.UserAction.sDescription)
}
inline void UserAction::set_sdescription(const char* value, size_t size) {
  
  sdescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.UserAction.sDescription)
}
inline ::std::string* UserAction::mutable_sdescription() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserAction.sDescription)
  return sdescription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAction::release_sdescription() {
  // @@protoc_insertion_point(field_release:bi_analysis.UserAction.sDescription)
  
  return sdescription_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAction::set_allocated_sdescription(::std::string* sdescription) {
  if (sdescription != NULL) {
    
  } else {
    
  }
  sdescription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdescription);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.UserAction.sDescription)
}

// string sMsgId = 7;
inline void UserAction::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAction::smsgid() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserAction.sMsgId)
  return smsgid_.GetNoArena();
}
inline void UserAction::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.UserAction.sMsgId)
}
#if LANG_CXX11
inline void UserAction::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.UserAction.sMsgId)
}
#endif
inline void UserAction::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.UserAction.sMsgId)
}
inline void UserAction::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.UserAction.sMsgId)
}
inline ::std::string* UserAction::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserAction.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAction::release_smsgid() {
  // @@protoc_insertion_point(field_release:bi_analysis.UserAction.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAction::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.UserAction.sMsgId)
}

// string sCorrelationId = 8;
inline void UserAction::clear_scorrelationid() {
  scorrelationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAction::scorrelationid() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserAction.sCorrelationId)
  return scorrelationid_.GetNoArena();
}
inline void UserAction::set_scorrelationid(const ::std::string& value) {
  
  scorrelationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.UserAction.sCorrelationId)
}
#if LANG_CXX11
inline void UserAction::set_scorrelationid(::std::string&& value) {
  
  scorrelationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.UserAction.sCorrelationId)
}
#endif
inline void UserAction::set_scorrelationid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scorrelationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.UserAction.sCorrelationId)
}
inline void UserAction::set_scorrelationid(const char* value, size_t size) {
  
  scorrelationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.UserAction.sCorrelationId)
}
inline ::std::string* UserAction::mutable_scorrelationid() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserAction.sCorrelationId)
  return scorrelationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAction::release_scorrelationid() {
  // @@protoc_insertion_point(field_release:bi_analysis.UserAction.sCorrelationId)
  
  return scorrelationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAction::set_allocated_scorrelationid(::std::string* scorrelationid) {
  if (scorrelationid != NULL) {
    
  } else {
    
  }
  scorrelationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scorrelationid);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.UserAction.sCorrelationId)
}

// uint64 nActionTime = 9;
inline void UserAction::clear_nactiontime() {
  nactiontime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UserAction::nactiontime() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserAction.nActionTime)
  return nactiontime_;
}
inline void UserAction::set_nactiontime(::google::protobuf::uint64 value) {
  
  nactiontime_ = value;
  // @@protoc_insertion_point(field_set:bi_analysis.UserAction.nActionTime)
}

// -------------------------------------------------------------------

// UserActions

// string sBatchMsgId = 1;
inline void UserActions::clear_sbatchmsgid() {
  sbatchmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserActions::sbatchmsgid() const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserActions.sBatchMsgId)
  return sbatchmsgid_.GetNoArena();
}
inline void UserActions::set_sbatchmsgid(const ::std::string& value) {
  
  sbatchmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bi_analysis.UserActions.sBatchMsgId)
}
#if LANG_CXX11
inline void UserActions::set_sbatchmsgid(::std::string&& value) {
  
  sbatchmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bi_analysis.UserActions.sBatchMsgId)
}
#endif
inline void UserActions::set_sbatchmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sbatchmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bi_analysis.UserActions.sBatchMsgId)
}
inline void UserActions::set_sbatchmsgid(const char* value, size_t size) {
  
  sbatchmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bi_analysis.UserActions.sBatchMsgId)
}
inline ::std::string* UserActions::mutable_sbatchmsgid() {
  
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserActions.sBatchMsgId)
  return sbatchmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserActions::release_sbatchmsgid() {
  // @@protoc_insertion_point(field_release:bi_analysis.UserActions.sBatchMsgId)
  
  return sbatchmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserActions::set_allocated_sbatchmsgid(::std::string* sbatchmsgid) {
  if (sbatchmsgid != NULL) {
    
  } else {
    
  }
  sbatchmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sbatchmsgid);
  // @@protoc_insertion_point(field_set_allocated:bi_analysis.UserActions.sBatchMsgId)
}

// repeated .bi_analysis.UserAction actions = 2;
inline int UserActions::actions_size() const {
  return actions_.size();
}
inline void UserActions::clear_actions() {
  actions_.Clear();
}
inline ::bi_analysis::UserAction* UserActions::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:bi_analysis.UserActions.actions)
  return actions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::bi_analysis::UserAction >*
UserActions::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:bi_analysis.UserActions.actions)
  return &actions_;
}
inline const ::bi_analysis::UserAction& UserActions::actions(int index) const {
  // @@protoc_insertion_point(field_get:bi_analysis.UserActions.actions)
  return actions_.Get(index);
}
inline ::bi_analysis::UserAction* UserActions::add_actions() {
  // @@protoc_insertion_point(field_add:bi_analysis.UserActions.actions)
  return actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bi_analysis::UserAction >&
UserActions::actions() const {
  // @@protoc_insertion_point(field_list:bi_analysis.UserActions.actions)
  return actions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bi_analysis

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::bi_analysis::PlatFormType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bi_analysis::PlatFormType>() {
  return ::bi_analysis::PlatFormType_descriptor();
}
template <> struct is_proto_enum< ::bi_analysis::DataFromType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bi_analysis::DataFromType>() {
  return ::bi_analysis::DataFromType_descriptor();
}
template <> struct is_proto_enum< ::bi_analysis::AppChannelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bi_analysis::AppChannelType>() {
  return ::bi_analysis::AppChannelType_descriptor();
}
template <> struct is_proto_enum< ::bi_analysis::NetStateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bi_analysis::NetStateType>() {
  return ::bi_analysis::NetStateType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_grpc_2estatistic_2eproto
