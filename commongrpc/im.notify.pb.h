// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.notify.proto

#ifndef PROTOBUF_INCLUDED_im_2enotify_2eproto
#define PROTOBUF_INCLUDED_im_2enotify_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_im_2enotify_2eproto 

namespace protobuf_im_2enotify_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_im_2enotify_2eproto
namespace imnotify {
class CommonMsgNotify;
class CommonMsgNotifyDefaultTypeInternal;
extern CommonMsgNotifyDefaultTypeInternal _CommonMsgNotify_default_instance_;
class CommonMsgNotifyACK;
class CommonMsgNotifyACKDefaultTypeInternal;
extern CommonMsgNotifyACKDefaultTypeInternal _CommonMsgNotifyACK_default_instance_;
class FriendRelationNotify;
class FriendRelationNotifyDefaultTypeInternal;
extern FriendRelationNotifyDefaultTypeInternal _FriendRelationNotify_default_instance_;
class FriendRelationNotifyACK;
class FriendRelationNotifyACKDefaultTypeInternal;
extern FriendRelationNotifyACKDefaultTypeInternal _FriendRelationNotifyACK_default_instance_;
class GroupRelationNotify;
class GroupRelationNotifyDefaultTypeInternal;
extern GroupRelationNotifyDefaultTypeInternal _GroupRelationNotify_default_instance_;
class GroupRelationNotifyACK;
class GroupRelationNotifyACKDefaultTypeInternal;
extern GroupRelationNotifyACKDefaultTypeInternal _GroupRelationNotifyACK_default_instance_;
class LoginOperationNotify;
class LoginOperationNotifyDefaultTypeInternal;
extern LoginOperationNotifyDefaultTypeInternal _LoginOperationNotify_default_instance_;
class LoginOperationNotifyACK;
class LoginOperationNotifyACKDefaultTypeInternal;
extern LoginOperationNotifyACKDefaultTypeInternal _LoginOperationNotifyACK_default_instance_;
}  // namespace imnotify
namespace google {
namespace protobuf {
template<> ::imnotify::CommonMsgNotify* Arena::CreateMaybeMessage<::imnotify::CommonMsgNotify>(Arena*);
template<> ::imnotify::CommonMsgNotifyACK* Arena::CreateMaybeMessage<::imnotify::CommonMsgNotifyACK>(Arena*);
template<> ::imnotify::FriendRelationNotify* Arena::CreateMaybeMessage<::imnotify::FriendRelationNotify>(Arena*);
template<> ::imnotify::FriendRelationNotifyACK* Arena::CreateMaybeMessage<::imnotify::FriendRelationNotifyACK>(Arena*);
template<> ::imnotify::GroupRelationNotify* Arena::CreateMaybeMessage<::imnotify::GroupRelationNotify>(Arena*);
template<> ::imnotify::GroupRelationNotifyACK* Arena::CreateMaybeMessage<::imnotify::GroupRelationNotifyACK>(Arena*);
template<> ::imnotify::LoginOperationNotify* Arena::CreateMaybeMessage<::imnotify::LoginOperationNotify>(Arena*);
template<> ::imnotify::LoginOperationNotifyACK* Arena::CreateMaybeMessage<::imnotify::LoginOperationNotifyACK>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace imnotify {

enum NotifyType {
  NOTIFY_TYPE_UNKNOWN = 0,
  NOTIFY_TYPE_GRPINFO_CHANGED = 1,
  NOTIFY_TYPE_GRPMEM_QUIT = 2,
  NOTIFY_TYPE_GRPMEM_REMOVE = 3,
  NOTIFY_TYPE_GRPAPPLY_RESULT = 4,
  NOTIFY_TYPE_GRPINVITE_RESULT = 5,
  NOTIFY_TYPE_GRPMASTER_CHANGED = 6,
  NOTIFY_TYPE_GRP_ACTIVE = 7,
  NOTIFY_TYPE_MASTER_ANS_APPLY = 8,
  NOTIFY_TYPE_MASTER_ANS_INVITE = 9,
  NotifyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NotifyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NotifyType_IsValid(int value);
const NotifyType NotifyType_MIN = NOTIFY_TYPE_UNKNOWN;
const NotifyType NotifyType_MAX = NOTIFY_TYPE_MASTER_ANS_INVITE;
const int NotifyType_ARRAYSIZE = NotifyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyType_descriptor();
inline const ::std::string& NotifyType_Name(NotifyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyType_descriptor(), value);
}
inline bool NotifyType_Parse(
    const ::std::string& name, NotifyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyType>(
    NotifyType_descriptor(), name, value);
}
enum FriendNotifyType {
  FRIEND_NOTIFY_TYPE_UNKNOWN = 0,
  FRIEND_NOTIFY_TYPE_ADD = 1,
  FRIEND_NOTIFY_TYPE_ANS = 2,
  FriendNotifyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FriendNotifyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FriendNotifyType_IsValid(int value);
const FriendNotifyType FriendNotifyType_MIN = FRIEND_NOTIFY_TYPE_UNKNOWN;
const FriendNotifyType FriendNotifyType_MAX = FRIEND_NOTIFY_TYPE_ANS;
const int FriendNotifyType_ARRAYSIZE = FriendNotifyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FriendNotifyType_descriptor();
inline const ::std::string& FriendNotifyType_Name(FriendNotifyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FriendNotifyType_descriptor(), value);
}
inline bool FriendNotifyType_Parse(
    const ::std::string& name, FriendNotifyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FriendNotifyType>(
    FriendNotifyType_descriptor(), name, value);
}
enum LoginNotifyType {
  LOGIN_NOTIFY_TYPE_UNKNOWN = 0,
  LOGIN_NOTIFY_TYPE_LOGIN = 1,
  LOGIN_NOTIFY_TYPE_LOGOUT = 2,
  LoginNotifyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LoginNotifyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LoginNotifyType_IsValid(int value);
const LoginNotifyType LoginNotifyType_MIN = LOGIN_NOTIFY_TYPE_UNKNOWN;
const LoginNotifyType LoginNotifyType_MAX = LOGIN_NOTIFY_TYPE_LOGOUT;
const int LoginNotifyType_ARRAYSIZE = LoginNotifyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginNotifyType_descriptor();
inline const ::std::string& LoginNotifyType_Name(LoginNotifyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginNotifyType_descriptor(), value);
}
inline bool LoginNotifyType_Parse(
    const ::std::string& name, LoginNotifyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginNotifyType>(
    LoginNotifyType_descriptor(), name, value);
}
enum LoginNotifySubType {
  LOGIN_NOTIFY_SUBTYPE_OK = 0,
  LOGIN_NOTIFY_SUBTYPE_NOCAPTCHA = 1,
  LOGIN_NOTIFY_SUBTYPE_CAPTCHA = 2,
  LoginNotifySubType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LoginNotifySubType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LoginNotifySubType_IsValid(int value);
const LoginNotifySubType LoginNotifySubType_MIN = LOGIN_NOTIFY_SUBTYPE_OK;
const LoginNotifySubType LoginNotifySubType_MAX = LOGIN_NOTIFY_SUBTYPE_CAPTCHA;
const int LoginNotifySubType_ARRAYSIZE = LoginNotifySubType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginNotifySubType_descriptor();
inline const ::std::string& LoginNotifySubType_Name(LoginNotifySubType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginNotifySubType_descriptor(), value);
}
inline bool LoginNotifySubType_Parse(
    const ::std::string& name, LoginNotifySubType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginNotifySubType>(
    LoginNotifySubType_descriptor(), name, value);
}
enum CommonNotifyType {
  Notify_ModifyUserInfo = 0,
  Notify_ModifyPublicKey = 1,
  CommonNotifyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonNotifyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonNotifyType_IsValid(int value);
const CommonNotifyType CommonNotifyType_MIN = Notify_ModifyUserInfo;
const CommonNotifyType CommonNotifyType_MAX = Notify_ModifyPublicKey;
const int CommonNotifyType_ARRAYSIZE = CommonNotifyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonNotifyType_descriptor();
inline const ::std::string& CommonNotifyType_Name(CommonNotifyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonNotifyType_descriptor(), value);
}
inline bool CommonNotifyType_Parse(
    const ::std::string& name, CommonNotifyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonNotifyType>(
    CommonNotifyType_descriptor(), name, value);
}
enum ExceptionCode {
  NO_EXP = 0,
  EXP_ERR = 1,
  ExceptionCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ExceptionCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ExceptionCode_IsValid(int value);
const ExceptionCode ExceptionCode_MIN = NO_EXP;
const ExceptionCode ExceptionCode_MAX = EXP_ERR;
const int ExceptionCode_ARRAYSIZE = ExceptionCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExceptionCode_descriptor();
inline const ::std::string& ExceptionCode_Name(ExceptionCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExceptionCode_descriptor(), value);
}
inline bool ExceptionCode_Parse(
    const ::std::string& name, ExceptionCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExceptionCode>(
    ExceptionCode_descriptor(), name, value);
}
// ===================================================================

class GroupRelationNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:imnotify.GroupRelationNotify) */ {
 public:
  GroupRelationNotify();
  virtual ~GroupRelationNotify();

  GroupRelationNotify(const GroupRelationNotify& from);

  inline GroupRelationNotify& operator=(const GroupRelationNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupRelationNotify(GroupRelationNotify&& from) noexcept
    : GroupRelationNotify() {
    *this = ::std::move(from);
  }

  inline GroupRelationNotify& operator=(GroupRelationNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupRelationNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupRelationNotify* internal_default_instance() {
    return reinterpret_cast<const GroupRelationNotify*>(
               &_GroupRelationNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GroupRelationNotify* other);
  friend void swap(GroupRelationNotify& a, GroupRelationNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupRelationNotify* New() const final {
    return CreateMaybeMessage<GroupRelationNotify>(NULL);
  }

  GroupRelationNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupRelationNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GroupRelationNotify& from);
  void MergeFrom(const GroupRelationNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupRelationNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sToIds = 3;
  int stoids_size() const;
  void clear_stoids();
  static const int kSToIdsFieldNumber = 3;
  const ::std::string& stoids(int index) const;
  ::std::string* mutable_stoids(int index);
  void set_stoids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_stoids(int index, ::std::string&& value);
  #endif
  void set_stoids(int index, const char* value);
  void set_stoids(int index, const char* value, size_t size);
  ::std::string* add_stoids();
  void add_stoids(const ::std::string& value);
  #if LANG_CXX11
  void add_stoids(::std::string&& value);
  #endif
  void add_stoids(const char* value);
  void add_stoids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stoids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stoids();

  // repeated string sMnpledUserId = 6;
  int smnpleduserid_size() const;
  void clear_smnpleduserid();
  static const int kSMnpledUserIdFieldNumber = 6;
  const ::std::string& smnpleduserid(int index) const;
  ::std::string* mutable_smnpleduserid(int index);
  void set_smnpleduserid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_smnpleduserid(int index, ::std::string&& value);
  #endif
  void set_smnpleduserid(int index, const char* value);
  void set_smnpleduserid(int index, const char* value, size_t size);
  ::std::string* add_smnpleduserid();
  void add_smnpleduserid(const ::std::string& value);
  #if LANG_CXX11
  void add_smnpleduserid(::std::string&& value);
  #endif
  void add_smnpleduserid(const char* value);
  void add_smnpleduserid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& smnpleduserid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_smnpleduserid();

  // string sGrpId = 1;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 1;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sOprUserId = 5;
  void clear_sopruserid();
  static const int kSOprUserIdFieldNumber = 5;
  const ::std::string& sopruserid() const;
  void set_sopruserid(const ::std::string& value);
  #if LANG_CXX11
  void set_sopruserid(::std::string&& value);
  #endif
  void set_sopruserid(const char* value);
  void set_sopruserid(const char* value, size_t size);
  ::std::string* mutable_sopruserid();
  ::std::string* release_sopruserid();
  void set_allocated_sopruserid(::std::string* sopruserid);

  // string sContent = 7;
  void clear_scontent();
  static const int kSContentFieldNumber = 7;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // string sOperId = 9;
  void clear_soperid();
  static const int kSOperIdFieldNumber = 9;
  const ::std::string& soperid() const;
  void set_soperid(const ::std::string& value);
  #if LANG_CXX11
  void set_soperid(::std::string&& value);
  #endif
  void set_soperid(const char* value);
  void set_soperid(const char* value, size_t size);
  ::std::string* mutable_soperid();
  ::std::string* release_soperid();
  void set_allocated_soperid(::std::string* soperid);

  // string extend = 10;
  void clear_extend();
  static const int kExtendFieldNumber = 10;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint64 msgTime = 4;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 4;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .imnotify.NotifyType notifyType = 8;
  void clear_notifytype();
  static const int kNotifyTypeFieldNumber = 8;
  ::imnotify::NotifyType notifytype() const;
  void set_notifytype(::imnotify::NotifyType value);

  // @@protoc_insertion_point(class_scope:imnotify.GroupRelationNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stoids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> smnpleduserid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr sopruserid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::internal::ArenaStringPtr soperid_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint64 msgtime_;
  int notifytype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2enotify_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupRelationNotifyACK : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:imnotify.GroupRelationNotifyACK) */ {
 public:
  GroupRelationNotifyACK();
  virtual ~GroupRelationNotifyACK();

  GroupRelationNotifyACK(const GroupRelationNotifyACK& from);

  inline GroupRelationNotifyACK& operator=(const GroupRelationNotifyACK& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupRelationNotifyACK(GroupRelationNotifyACK&& from) noexcept
    : GroupRelationNotifyACK() {
    *this = ::std::move(from);
  }

  inline GroupRelationNotifyACK& operator=(GroupRelationNotifyACK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupRelationNotifyACK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupRelationNotifyACK* internal_default_instance() {
    return reinterpret_cast<const GroupRelationNotifyACK*>(
               &_GroupRelationNotifyACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GroupRelationNotifyACK* other);
  friend void swap(GroupRelationNotifyACK& a, GroupRelationNotifyACK& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupRelationNotifyACK* New() const final {
    return CreateMaybeMessage<GroupRelationNotifyACK>(NULL);
  }

  GroupRelationNotifyACK* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupRelationNotifyACK>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GroupRelationNotifyACK& from);
  void MergeFrom(const GroupRelationNotifyACK& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupRelationNotifyACK* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sMsgId = 1;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 1;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // uint64 msgTime = 2;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 2;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .imnotify.ExceptionCode expcode = 3;
  void clear_expcode();
  static const int kExpcodeFieldNumber = 3;
  ::imnotify::ExceptionCode expcode() const;
  void set_expcode(::imnotify::ExceptionCode value);

  // @@protoc_insertion_point(class_scope:imnotify.GroupRelationNotifyACK)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::uint64 msgtime_;
  int expcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2enotify_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRelationNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:imnotify.FriendRelationNotify) */ {
 public:
  FriendRelationNotify();
  virtual ~FriendRelationNotify();

  FriendRelationNotify(const FriendRelationNotify& from);

  inline FriendRelationNotify& operator=(const FriendRelationNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRelationNotify(FriendRelationNotify&& from) noexcept
    : FriendRelationNotify() {
    *this = ::std::move(from);
  }

  inline FriendRelationNotify& operator=(FriendRelationNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRelationNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendRelationNotify* internal_default_instance() {
    return reinterpret_cast<const FriendRelationNotify*>(
               &_FriendRelationNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FriendRelationNotify* other);
  friend void swap(FriendRelationNotify& a, FriendRelationNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRelationNotify* New() const final {
    return CreateMaybeMessage<FriendRelationNotify>(NULL);
  }

  FriendRelationNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FriendRelationNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FriendRelationNotify& from);
  void MergeFrom(const FriendRelationNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendRelationNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sMemoName = 4;
  void clear_smemoname();
  static const int kSMemoNameFieldNumber = 4;
  const ::std::string& smemoname() const;
  void set_smemoname(const ::std::string& value);
  #if LANG_CXX11
  void set_smemoname(::std::string&& value);
  #endif
  void set_smemoname(const char* value);
  void set_smemoname(const char* value, size_t size);
  ::std::string* mutable_smemoname();
  ::std::string* release_smemoname();
  void set_allocated_smemoname(::std::string* smemoname);

  // string sSelfIntroduce = 6;
  void clear_sselfintroduce();
  static const int kSSelfIntroduceFieldNumber = 6;
  const ::std::string& sselfintroduce() const;
  void set_sselfintroduce(const ::std::string& value);
  #if LANG_CXX11
  void set_sselfintroduce(::std::string&& value);
  #endif
  void set_sselfintroduce(const char* value);
  void set_sselfintroduce(const char* value, size_t size);
  ::std::string* mutable_sselfintroduce();
  ::std::string* release_sselfintroduce();
  void set_allocated_sselfintroduce(::std::string* sselfintroduce);

  // string sOperId = 8;
  void clear_soperid();
  static const int kSOperIdFieldNumber = 8;
  const ::std::string& soperid() const;
  void set_soperid(const ::std::string& value);
  #if LANG_CXX11
  void set_soperid(::std::string&& value);
  #endif
  void set_soperid(const char* value);
  void set_soperid(const char* value, size_t size);
  ::std::string* mutable_soperid();
  ::std::string* release_soperid();
  void set_allocated_soperid(::std::string* soperid);

  // string extend = 9;
  void clear_extend();
  static const int kExtendFieldNumber = 9;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint64 msgTime = 7;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 7;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .imnotify.FriendNotifyType notifyType = 5;
  void clear_notifytype();
  static const int kNotifyTypeFieldNumber = 5;
  ::imnotify::FriendNotifyType notifytype() const;
  void set_notifytype(::imnotify::FriendNotifyType value);

  // @@protoc_insertion_point(class_scope:imnotify.FriendRelationNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr smemoname_;
  ::google::protobuf::internal::ArenaStringPtr sselfintroduce_;
  ::google::protobuf::internal::ArenaStringPtr soperid_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint64 msgtime_;
  int notifytype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2enotify_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendRelationNotifyACK : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:imnotify.FriendRelationNotifyACK) */ {
 public:
  FriendRelationNotifyACK();
  virtual ~FriendRelationNotifyACK();

  FriendRelationNotifyACK(const FriendRelationNotifyACK& from);

  inline FriendRelationNotifyACK& operator=(const FriendRelationNotifyACK& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRelationNotifyACK(FriendRelationNotifyACK&& from) noexcept
    : FriendRelationNotifyACK() {
    *this = ::std::move(from);
  }

  inline FriendRelationNotifyACK& operator=(FriendRelationNotifyACK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRelationNotifyACK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendRelationNotifyACK* internal_default_instance() {
    return reinterpret_cast<const FriendRelationNotifyACK*>(
               &_FriendRelationNotifyACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FriendRelationNotifyACK* other);
  friend void swap(FriendRelationNotifyACK& a, FriendRelationNotifyACK& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRelationNotifyACK* New() const final {
    return CreateMaybeMessage<FriendRelationNotifyACK>(NULL);
  }

  FriendRelationNotifyACK* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FriendRelationNotifyACK>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FriendRelationNotifyACK& from);
  void MergeFrom(const FriendRelationNotifyACK& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendRelationNotifyACK* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sMsgId = 1;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 1;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // uint64 msgTime = 2;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 2;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .imnotify.ExceptionCode expcode = 3;
  void clear_expcode();
  static const int kExpcodeFieldNumber = 3;
  ::imnotify::ExceptionCode expcode() const;
  void set_expcode(::imnotify::ExceptionCode value);

  // @@protoc_insertion_point(class_scope:imnotify.FriendRelationNotifyACK)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::uint64 msgtime_;
  int expcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2enotify_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginOperationNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:imnotify.LoginOperationNotify) */ {
 public:
  LoginOperationNotify();
  virtual ~LoginOperationNotify();

  LoginOperationNotify(const LoginOperationNotify& from);

  inline LoginOperationNotify& operator=(const LoginOperationNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginOperationNotify(LoginOperationNotify&& from) noexcept
    : LoginOperationNotify() {
    *this = ::std::move(from);
  }

  inline LoginOperationNotify& operator=(LoginOperationNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginOperationNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginOperationNotify* internal_default_instance() {
    return reinterpret_cast<const LoginOperationNotify*>(
               &_LoginOperationNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LoginOperationNotify* other);
  friend void swap(LoginOperationNotify& a, LoginOperationNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginOperationNotify* New() const final {
    return CreateMaybeMessage<LoginOperationNotify>(NULL);
  }

  LoginOperationNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginOperationNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginOperationNotify& from);
  void MergeFrom(const LoginOperationNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginOperationNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sDeviceToken = 2;
  void clear_sdevicetoken();
  static const int kSDeviceTokenFieldNumber = 2;
  const ::std::string& sdevicetoken() const;
  void set_sdevicetoken(const ::std::string& value);
  #if LANG_CXX11
  void set_sdevicetoken(::std::string&& value);
  #endif
  void set_sdevicetoken(const char* value);
  void set_sdevicetoken(const char* value, size_t size);
  ::std::string* mutable_sdevicetoken();
  ::std::string* release_sdevicetoken();
  void set_allocated_sdevicetoken(::std::string* sdevicetoken);

  // string extend = 5;
  void clear_extend();
  static const int kExtendFieldNumber = 5;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint64 msgTime = 3;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 3;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .imnotify.LoginNotifyType loginType = 4;
  void clear_logintype();
  static const int kLoginTypeFieldNumber = 4;
  ::imnotify::LoginNotifyType logintype() const;
  void set_logintype(::imnotify::LoginNotifyType value);

  // .imnotify.LoginNotifySubType loginSubType = 6;
  void clear_loginsubtype();
  static const int kLoginSubTypeFieldNumber = 6;
  ::imnotify::LoginNotifySubType loginsubtype() const;
  void set_loginsubtype(::imnotify::LoginNotifySubType value);

  // @@protoc_insertion_point(class_scope:imnotify.LoginOperationNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sdevicetoken_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint64 msgtime_;
  int logintype_;
  int loginsubtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2enotify_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginOperationNotifyACK : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:imnotify.LoginOperationNotifyACK) */ {
 public:
  LoginOperationNotifyACK();
  virtual ~LoginOperationNotifyACK();

  LoginOperationNotifyACK(const LoginOperationNotifyACK& from);

  inline LoginOperationNotifyACK& operator=(const LoginOperationNotifyACK& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginOperationNotifyACK(LoginOperationNotifyACK&& from) noexcept
    : LoginOperationNotifyACK() {
    *this = ::std::move(from);
  }

  inline LoginOperationNotifyACK& operator=(LoginOperationNotifyACK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginOperationNotifyACK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginOperationNotifyACK* internal_default_instance() {
    return reinterpret_cast<const LoginOperationNotifyACK*>(
               &_LoginOperationNotifyACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LoginOperationNotifyACK* other);
  friend void swap(LoginOperationNotifyACK& a, LoginOperationNotifyACK& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginOperationNotifyACK* New() const final {
    return CreateMaybeMessage<LoginOperationNotifyACK>(NULL);
  }

  LoginOperationNotifyACK* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginOperationNotifyACK>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginOperationNotifyACK& from);
  void MergeFrom(const LoginOperationNotifyACK& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginOperationNotifyACK* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // uint64 msgTime = 2;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 2;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .imnotify.ExceptionCode expcode = 3;
  void clear_expcode();
  static const int kExpcodeFieldNumber = 3;
  ::imnotify::ExceptionCode expcode() const;
  void set_expcode(::imnotify::ExceptionCode value);

  // @@protoc_insertion_point(class_scope:imnotify.LoginOperationNotifyACK)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::uint64 msgtime_;
  int expcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2enotify_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommonMsgNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:imnotify.CommonMsgNotify) */ {
 public:
  CommonMsgNotify();
  virtual ~CommonMsgNotify();

  CommonMsgNotify(const CommonMsgNotify& from);

  inline CommonMsgNotify& operator=(const CommonMsgNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonMsgNotify(CommonMsgNotify&& from) noexcept
    : CommonMsgNotify() {
    *this = ::std::move(from);
  }

  inline CommonMsgNotify& operator=(CommonMsgNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonMsgNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonMsgNotify* internal_default_instance() {
    return reinterpret_cast<const CommonMsgNotify*>(
               &_CommonMsgNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CommonMsgNotify* other);
  friend void swap(CommonMsgNotify& a, CommonMsgNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonMsgNotify* New() const final {
    return CreateMaybeMessage<CommonMsgNotify>(NULL);
  }

  CommonMsgNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommonMsgNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommonMsgNotify& from);
  void MergeFrom(const CommonMsgNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonMsgNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sToIds = 2;
  int stoids_size() const;
  void clear_stoids();
  static const int kSToIdsFieldNumber = 2;
  const ::std::string& stoids(int index) const;
  ::std::string* mutable_stoids(int index);
  void set_stoids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_stoids(int index, ::std::string&& value);
  #endif
  void set_stoids(int index, const char* value);
  void set_stoids(int index, const char* value, size_t size);
  ::std::string* add_stoids();
  void add_stoids(const ::std::string& value);
  #if LANG_CXX11
  void add_stoids(::std::string&& value);
  #endif
  void add_stoids(const char* value);
  void add_stoids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stoids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stoids();

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sContent = 5;
  void clear_scontent();
  static const int kSContentFieldNumber = 5;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // string extend = 7;
  void clear_extend();
  static const int kExtendFieldNumber = 7;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint64 msgTime = 6;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 6;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .imnotify.CommonNotifyType notifyType = 4;
  void clear_notifytype();
  static const int kNotifyTypeFieldNumber = 4;
  ::imnotify::CommonNotifyType notifytype() const;
  void set_notifytype(::imnotify::CommonNotifyType value);

  // @@protoc_insertion_point(class_scope:imnotify.CommonMsgNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stoids_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint64 msgtime_;
  int notifytype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2enotify_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommonMsgNotifyACK : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:imnotify.CommonMsgNotifyACK) */ {
 public:
  CommonMsgNotifyACK();
  virtual ~CommonMsgNotifyACK();

  CommonMsgNotifyACK(const CommonMsgNotifyACK& from);

  inline CommonMsgNotifyACK& operator=(const CommonMsgNotifyACK& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonMsgNotifyACK(CommonMsgNotifyACK&& from) noexcept
    : CommonMsgNotifyACK() {
    *this = ::std::move(from);
  }

  inline CommonMsgNotifyACK& operator=(CommonMsgNotifyACK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonMsgNotifyACK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonMsgNotifyACK* internal_default_instance() {
    return reinterpret_cast<const CommonMsgNotifyACK*>(
               &_CommonMsgNotifyACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CommonMsgNotifyACK* other);
  friend void swap(CommonMsgNotifyACK& a, CommonMsgNotifyACK& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonMsgNotifyACK* New() const final {
    return CreateMaybeMessage<CommonMsgNotifyACK>(NULL);
  }

  CommonMsgNotifyACK* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommonMsgNotifyACK>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommonMsgNotifyACK& from);
  void MergeFrom(const CommonMsgNotifyACK& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonMsgNotifyACK* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sMsgId = 1;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 1;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // uint64 msgTime = 2;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 2;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .imnotify.ExceptionCode expcode = 3;
  void clear_expcode();
  static const int kExpcodeFieldNumber = 3;
  ::imnotify::ExceptionCode expcode() const;
  void set_expcode(::imnotify::ExceptionCode value);

  // @@protoc_insertion_point(class_scope:imnotify.CommonMsgNotifyACK)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::uint64 msgtime_;
  int expcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2enotify_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GroupRelationNotify

// string sGrpId = 1;
inline void GroupRelationNotify::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupRelationNotify::sgrpid() const {
  // @@protoc_insertion_point(field_get:imnotify.GroupRelationNotify.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void GroupRelationNotify::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.GroupRelationNotify.sGrpId)
}
#if LANG_CXX11
inline void GroupRelationNotify::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.GroupRelationNotify.sGrpId)
}
#endif
inline void GroupRelationNotify::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.GroupRelationNotify.sGrpId)
}
inline void GroupRelationNotify::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.GroupRelationNotify.sGrpId)
}
inline ::std::string* GroupRelationNotify::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.GroupRelationNotify.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupRelationNotify::release_sgrpid() {
  // @@protoc_insertion_point(field_release:imnotify.GroupRelationNotify.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupRelationNotify::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:imnotify.GroupRelationNotify.sGrpId)
}

// string sMsgId = 2;
inline void GroupRelationNotify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupRelationNotify::smsgid() const {
  // @@protoc_insertion_point(field_get:imnotify.GroupRelationNotify.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupRelationNotify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.GroupRelationNotify.sMsgId)
}
#if LANG_CXX11
inline void GroupRelationNotify::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.GroupRelationNotify.sMsgId)
}
#endif
inline void GroupRelationNotify::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.GroupRelationNotify.sMsgId)
}
inline void GroupRelationNotify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.GroupRelationNotify.sMsgId)
}
inline ::std::string* GroupRelationNotify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.GroupRelationNotify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupRelationNotify::release_smsgid() {
  // @@protoc_insertion_point(field_release:imnotify.GroupRelationNotify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupRelationNotify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:imnotify.GroupRelationNotify.sMsgId)
}

// repeated string sToIds = 3;
inline int GroupRelationNotify::stoids_size() const {
  return stoids_.size();
}
inline void GroupRelationNotify::clear_stoids() {
  stoids_.Clear();
}
inline const ::std::string& GroupRelationNotify::stoids(int index) const {
  // @@protoc_insertion_point(field_get:imnotify.GroupRelationNotify.sToIds)
  return stoids_.Get(index);
}
inline ::std::string* GroupRelationNotify::mutable_stoids(int index) {
  // @@protoc_insertion_point(field_mutable:imnotify.GroupRelationNotify.sToIds)
  return stoids_.Mutable(index);
}
inline void GroupRelationNotify::set_stoids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:imnotify.GroupRelationNotify.sToIds)
  stoids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GroupRelationNotify::set_stoids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:imnotify.GroupRelationNotify.sToIds)
  stoids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GroupRelationNotify::set_stoids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stoids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:imnotify.GroupRelationNotify.sToIds)
}
inline void GroupRelationNotify::set_stoids(int index, const char* value, size_t size) {
  stoids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:imnotify.GroupRelationNotify.sToIds)
}
inline ::std::string* GroupRelationNotify::add_stoids() {
  // @@protoc_insertion_point(field_add_mutable:imnotify.GroupRelationNotify.sToIds)
  return stoids_.Add();
}
inline void GroupRelationNotify::add_stoids(const ::std::string& value) {
  stoids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:imnotify.GroupRelationNotify.sToIds)
}
#if LANG_CXX11
inline void GroupRelationNotify::add_stoids(::std::string&& value) {
  stoids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:imnotify.GroupRelationNotify.sToIds)
}
#endif
inline void GroupRelationNotify::add_stoids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stoids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:imnotify.GroupRelationNotify.sToIds)
}
inline void GroupRelationNotify::add_stoids(const char* value, size_t size) {
  stoids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:imnotify.GroupRelationNotify.sToIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GroupRelationNotify::stoids() const {
  // @@protoc_insertion_point(field_list:imnotify.GroupRelationNotify.sToIds)
  return stoids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GroupRelationNotify::mutable_stoids() {
  // @@protoc_insertion_point(field_mutable_list:imnotify.GroupRelationNotify.sToIds)
  return &stoids_;
}

// uint64 msgTime = 4;
inline void GroupRelationNotify::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GroupRelationNotify::msgtime() const {
  // @@protoc_insertion_point(field_get:imnotify.GroupRelationNotify.msgTime)
  return msgtime_;
}
inline void GroupRelationNotify::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:imnotify.GroupRelationNotify.msgTime)
}

// string sOprUserId = 5;
inline void GroupRelationNotify::clear_sopruserid() {
  sopruserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupRelationNotify::sopruserid() const {
  // @@protoc_insertion_point(field_get:imnotify.GroupRelationNotify.sOprUserId)
  return sopruserid_.GetNoArena();
}
inline void GroupRelationNotify::set_sopruserid(const ::std::string& value) {
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.GroupRelationNotify.sOprUserId)
}
#if LANG_CXX11
inline void GroupRelationNotify::set_sopruserid(::std::string&& value) {
  
  sopruserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.GroupRelationNotify.sOprUserId)
}
#endif
inline void GroupRelationNotify::set_sopruserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.GroupRelationNotify.sOprUserId)
}
inline void GroupRelationNotify::set_sopruserid(const char* value, size_t size) {
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.GroupRelationNotify.sOprUserId)
}
inline ::std::string* GroupRelationNotify::mutable_sopruserid() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.GroupRelationNotify.sOprUserId)
  return sopruserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupRelationNotify::release_sopruserid() {
  // @@protoc_insertion_point(field_release:imnotify.GroupRelationNotify.sOprUserId)
  
  return sopruserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupRelationNotify::set_allocated_sopruserid(::std::string* sopruserid) {
  if (sopruserid != NULL) {
    
  } else {
    
  }
  sopruserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sopruserid);
  // @@protoc_insertion_point(field_set_allocated:imnotify.GroupRelationNotify.sOprUserId)
}

// repeated string sMnpledUserId = 6;
inline int GroupRelationNotify::smnpleduserid_size() const {
  return smnpleduserid_.size();
}
inline void GroupRelationNotify::clear_smnpleduserid() {
  smnpleduserid_.Clear();
}
inline const ::std::string& GroupRelationNotify::smnpleduserid(int index) const {
  // @@protoc_insertion_point(field_get:imnotify.GroupRelationNotify.sMnpledUserId)
  return smnpleduserid_.Get(index);
}
inline ::std::string* GroupRelationNotify::mutable_smnpleduserid(int index) {
  // @@protoc_insertion_point(field_mutable:imnotify.GroupRelationNotify.sMnpledUserId)
  return smnpleduserid_.Mutable(index);
}
inline void GroupRelationNotify::set_smnpleduserid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:imnotify.GroupRelationNotify.sMnpledUserId)
  smnpleduserid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GroupRelationNotify::set_smnpleduserid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:imnotify.GroupRelationNotify.sMnpledUserId)
  smnpleduserid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GroupRelationNotify::set_smnpleduserid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  smnpleduserid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:imnotify.GroupRelationNotify.sMnpledUserId)
}
inline void GroupRelationNotify::set_smnpleduserid(int index, const char* value, size_t size) {
  smnpleduserid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:imnotify.GroupRelationNotify.sMnpledUserId)
}
inline ::std::string* GroupRelationNotify::add_smnpleduserid() {
  // @@protoc_insertion_point(field_add_mutable:imnotify.GroupRelationNotify.sMnpledUserId)
  return smnpleduserid_.Add();
}
inline void GroupRelationNotify::add_smnpleduserid(const ::std::string& value) {
  smnpleduserid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:imnotify.GroupRelationNotify.sMnpledUserId)
}
#if LANG_CXX11
inline void GroupRelationNotify::add_smnpleduserid(::std::string&& value) {
  smnpleduserid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:imnotify.GroupRelationNotify.sMnpledUserId)
}
#endif
inline void GroupRelationNotify::add_smnpleduserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  smnpleduserid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:imnotify.GroupRelationNotify.sMnpledUserId)
}
inline void GroupRelationNotify::add_smnpleduserid(const char* value, size_t size) {
  smnpleduserid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:imnotify.GroupRelationNotify.sMnpledUserId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GroupRelationNotify::smnpleduserid() const {
  // @@protoc_insertion_point(field_list:imnotify.GroupRelationNotify.sMnpledUserId)
  return smnpleduserid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GroupRelationNotify::mutable_smnpleduserid() {
  // @@protoc_insertion_point(field_mutable_list:imnotify.GroupRelationNotify.sMnpledUserId)
  return &smnpleduserid_;
}

// string sContent = 7;
inline void GroupRelationNotify::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupRelationNotify::scontent() const {
  // @@protoc_insertion_point(field_get:imnotify.GroupRelationNotify.sContent)
  return scontent_.GetNoArena();
}
inline void GroupRelationNotify::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.GroupRelationNotify.sContent)
}
#if LANG_CXX11
inline void GroupRelationNotify::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.GroupRelationNotify.sContent)
}
#endif
inline void GroupRelationNotify::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.GroupRelationNotify.sContent)
}
inline void GroupRelationNotify::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.GroupRelationNotify.sContent)
}
inline ::std::string* GroupRelationNotify::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.GroupRelationNotify.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupRelationNotify::release_scontent() {
  // @@protoc_insertion_point(field_release:imnotify.GroupRelationNotify.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupRelationNotify::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:imnotify.GroupRelationNotify.sContent)
}

// .imnotify.NotifyType notifyType = 8;
inline void GroupRelationNotify::clear_notifytype() {
  notifytype_ = 0;
}
inline ::imnotify::NotifyType GroupRelationNotify::notifytype() const {
  // @@protoc_insertion_point(field_get:imnotify.GroupRelationNotify.notifyType)
  return static_cast< ::imnotify::NotifyType >(notifytype_);
}
inline void GroupRelationNotify::set_notifytype(::imnotify::NotifyType value) {
  
  notifytype_ = value;
  // @@protoc_insertion_point(field_set:imnotify.GroupRelationNotify.notifyType)
}

// string sOperId = 9;
inline void GroupRelationNotify::clear_soperid() {
  soperid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupRelationNotify::soperid() const {
  // @@protoc_insertion_point(field_get:imnotify.GroupRelationNotify.sOperId)
  return soperid_.GetNoArena();
}
inline void GroupRelationNotify::set_soperid(const ::std::string& value) {
  
  soperid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.GroupRelationNotify.sOperId)
}
#if LANG_CXX11
inline void GroupRelationNotify::set_soperid(::std::string&& value) {
  
  soperid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.GroupRelationNotify.sOperId)
}
#endif
inline void GroupRelationNotify::set_soperid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  soperid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.GroupRelationNotify.sOperId)
}
inline void GroupRelationNotify::set_soperid(const char* value, size_t size) {
  
  soperid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.GroupRelationNotify.sOperId)
}
inline ::std::string* GroupRelationNotify::mutable_soperid() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.GroupRelationNotify.sOperId)
  return soperid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupRelationNotify::release_soperid() {
  // @@protoc_insertion_point(field_release:imnotify.GroupRelationNotify.sOperId)
  
  return soperid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupRelationNotify::set_allocated_soperid(::std::string* soperid) {
  if (soperid != NULL) {
    
  } else {
    
  }
  soperid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), soperid);
  // @@protoc_insertion_point(field_set_allocated:imnotify.GroupRelationNotify.sOperId)
}

// string extend = 10;
inline void GroupRelationNotify::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupRelationNotify::extend() const {
  // @@protoc_insertion_point(field_get:imnotify.GroupRelationNotify.extend)
  return extend_.GetNoArena();
}
inline void GroupRelationNotify::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.GroupRelationNotify.extend)
}
#if LANG_CXX11
inline void GroupRelationNotify::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.GroupRelationNotify.extend)
}
#endif
inline void GroupRelationNotify::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.GroupRelationNotify.extend)
}
inline void GroupRelationNotify::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.GroupRelationNotify.extend)
}
inline ::std::string* GroupRelationNotify::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.GroupRelationNotify.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupRelationNotify::release_extend() {
  // @@protoc_insertion_point(field_release:imnotify.GroupRelationNotify.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupRelationNotify::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:imnotify.GroupRelationNotify.extend)
}

// -------------------------------------------------------------------

// GroupRelationNotifyACK

// string sMsgId = 1;
inline void GroupRelationNotifyACK::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupRelationNotifyACK::smsgid() const {
  // @@protoc_insertion_point(field_get:imnotify.GroupRelationNotifyACK.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupRelationNotifyACK::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.GroupRelationNotifyACK.sMsgId)
}
#if LANG_CXX11
inline void GroupRelationNotifyACK::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.GroupRelationNotifyACK.sMsgId)
}
#endif
inline void GroupRelationNotifyACK::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.GroupRelationNotifyACK.sMsgId)
}
inline void GroupRelationNotifyACK::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.GroupRelationNotifyACK.sMsgId)
}
inline ::std::string* GroupRelationNotifyACK::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.GroupRelationNotifyACK.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupRelationNotifyACK::release_smsgid() {
  // @@protoc_insertion_point(field_release:imnotify.GroupRelationNotifyACK.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupRelationNotifyACK::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:imnotify.GroupRelationNotifyACK.sMsgId)
}

// uint64 msgTime = 2;
inline void GroupRelationNotifyACK::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GroupRelationNotifyACK::msgtime() const {
  // @@protoc_insertion_point(field_get:imnotify.GroupRelationNotifyACK.msgTime)
  return msgtime_;
}
inline void GroupRelationNotifyACK::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:imnotify.GroupRelationNotifyACK.msgTime)
}

// .imnotify.ExceptionCode expcode = 3;
inline void GroupRelationNotifyACK::clear_expcode() {
  expcode_ = 0;
}
inline ::imnotify::ExceptionCode GroupRelationNotifyACK::expcode() const {
  // @@protoc_insertion_point(field_get:imnotify.GroupRelationNotifyACK.expcode)
  return static_cast< ::imnotify::ExceptionCode >(expcode_);
}
inline void GroupRelationNotifyACK::set_expcode(::imnotify::ExceptionCode value) {
  
  expcode_ = value;
  // @@protoc_insertion_point(field_set:imnotify.GroupRelationNotifyACK.expcode)
}

// -------------------------------------------------------------------

// FriendRelationNotify

// string sFromId = 1;
inline void FriendRelationNotify::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRelationNotify::sfromid() const {
  // @@protoc_insertion_point(field_get:imnotify.FriendRelationNotify.sFromId)
  return sfromid_.GetNoArena();
}
inline void FriendRelationNotify::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.FriendRelationNotify.sFromId)
}
#if LANG_CXX11
inline void FriendRelationNotify::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.FriendRelationNotify.sFromId)
}
#endif
inline void FriendRelationNotify::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.FriendRelationNotify.sFromId)
}
inline void FriendRelationNotify::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.FriendRelationNotify.sFromId)
}
inline ::std::string* FriendRelationNotify::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.FriendRelationNotify.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRelationNotify::release_sfromid() {
  // @@protoc_insertion_point(field_release:imnotify.FriendRelationNotify.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRelationNotify::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:imnotify.FriendRelationNotify.sFromId)
}

// string sToId = 2;
inline void FriendRelationNotify::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRelationNotify::stoid() const {
  // @@protoc_insertion_point(field_get:imnotify.FriendRelationNotify.sToId)
  return stoid_.GetNoArena();
}
inline void FriendRelationNotify::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.FriendRelationNotify.sToId)
}
#if LANG_CXX11
inline void FriendRelationNotify::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.FriendRelationNotify.sToId)
}
#endif
inline void FriendRelationNotify::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.FriendRelationNotify.sToId)
}
inline void FriendRelationNotify::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.FriendRelationNotify.sToId)
}
inline ::std::string* FriendRelationNotify::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.FriendRelationNotify.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRelationNotify::release_stoid() {
  // @@protoc_insertion_point(field_release:imnotify.FriendRelationNotify.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRelationNotify::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:imnotify.FriendRelationNotify.sToId)
}

// string sMsgId = 3;
inline void FriendRelationNotify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRelationNotify::smsgid() const {
  // @@protoc_insertion_point(field_get:imnotify.FriendRelationNotify.sMsgId)
  return smsgid_.GetNoArena();
}
inline void FriendRelationNotify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.FriendRelationNotify.sMsgId)
}
#if LANG_CXX11
inline void FriendRelationNotify::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.FriendRelationNotify.sMsgId)
}
#endif
inline void FriendRelationNotify::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.FriendRelationNotify.sMsgId)
}
inline void FriendRelationNotify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.FriendRelationNotify.sMsgId)
}
inline ::std::string* FriendRelationNotify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.FriendRelationNotify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRelationNotify::release_smsgid() {
  // @@protoc_insertion_point(field_release:imnotify.FriendRelationNotify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRelationNotify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:imnotify.FriendRelationNotify.sMsgId)
}

// string sMemoName = 4;
inline void FriendRelationNotify::clear_smemoname() {
  smemoname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRelationNotify::smemoname() const {
  // @@protoc_insertion_point(field_get:imnotify.FriendRelationNotify.sMemoName)
  return smemoname_.GetNoArena();
}
inline void FriendRelationNotify::set_smemoname(const ::std::string& value) {
  
  smemoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.FriendRelationNotify.sMemoName)
}
#if LANG_CXX11
inline void FriendRelationNotify::set_smemoname(::std::string&& value) {
  
  smemoname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.FriendRelationNotify.sMemoName)
}
#endif
inline void FriendRelationNotify::set_smemoname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smemoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.FriendRelationNotify.sMemoName)
}
inline void FriendRelationNotify::set_smemoname(const char* value, size_t size) {
  
  smemoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.FriendRelationNotify.sMemoName)
}
inline ::std::string* FriendRelationNotify::mutable_smemoname() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.FriendRelationNotify.sMemoName)
  return smemoname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRelationNotify::release_smemoname() {
  // @@protoc_insertion_point(field_release:imnotify.FriendRelationNotify.sMemoName)
  
  return smemoname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRelationNotify::set_allocated_smemoname(::std::string* smemoname) {
  if (smemoname != NULL) {
    
  } else {
    
  }
  smemoname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smemoname);
  // @@protoc_insertion_point(field_set_allocated:imnotify.FriendRelationNotify.sMemoName)
}

// .imnotify.FriendNotifyType notifyType = 5;
inline void FriendRelationNotify::clear_notifytype() {
  notifytype_ = 0;
}
inline ::imnotify::FriendNotifyType FriendRelationNotify::notifytype() const {
  // @@protoc_insertion_point(field_get:imnotify.FriendRelationNotify.notifyType)
  return static_cast< ::imnotify::FriendNotifyType >(notifytype_);
}
inline void FriendRelationNotify::set_notifytype(::imnotify::FriendNotifyType value) {
  
  notifytype_ = value;
  // @@protoc_insertion_point(field_set:imnotify.FriendRelationNotify.notifyType)
}

// string sSelfIntroduce = 6;
inline void FriendRelationNotify::clear_sselfintroduce() {
  sselfintroduce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRelationNotify::sselfintroduce() const {
  // @@protoc_insertion_point(field_get:imnotify.FriendRelationNotify.sSelfIntroduce)
  return sselfintroduce_.GetNoArena();
}
inline void FriendRelationNotify::set_sselfintroduce(const ::std::string& value) {
  
  sselfintroduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.FriendRelationNotify.sSelfIntroduce)
}
#if LANG_CXX11
inline void FriendRelationNotify::set_sselfintroduce(::std::string&& value) {
  
  sselfintroduce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.FriendRelationNotify.sSelfIntroduce)
}
#endif
inline void FriendRelationNotify::set_sselfintroduce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sselfintroduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.FriendRelationNotify.sSelfIntroduce)
}
inline void FriendRelationNotify::set_sselfintroduce(const char* value, size_t size) {
  
  sselfintroduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.FriendRelationNotify.sSelfIntroduce)
}
inline ::std::string* FriendRelationNotify::mutable_sselfintroduce() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.FriendRelationNotify.sSelfIntroduce)
  return sselfintroduce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRelationNotify::release_sselfintroduce() {
  // @@protoc_insertion_point(field_release:imnotify.FriendRelationNotify.sSelfIntroduce)
  
  return sselfintroduce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRelationNotify::set_allocated_sselfintroduce(::std::string* sselfintroduce) {
  if (sselfintroduce != NULL) {
    
  } else {
    
  }
  sselfintroduce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sselfintroduce);
  // @@protoc_insertion_point(field_set_allocated:imnotify.FriendRelationNotify.sSelfIntroduce)
}

// uint64 msgTime = 7;
inline void FriendRelationNotify::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FriendRelationNotify::msgtime() const {
  // @@protoc_insertion_point(field_get:imnotify.FriendRelationNotify.msgTime)
  return msgtime_;
}
inline void FriendRelationNotify::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:imnotify.FriendRelationNotify.msgTime)
}

// string sOperId = 8;
inline void FriendRelationNotify::clear_soperid() {
  soperid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRelationNotify::soperid() const {
  // @@protoc_insertion_point(field_get:imnotify.FriendRelationNotify.sOperId)
  return soperid_.GetNoArena();
}
inline void FriendRelationNotify::set_soperid(const ::std::string& value) {
  
  soperid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.FriendRelationNotify.sOperId)
}
#if LANG_CXX11
inline void FriendRelationNotify::set_soperid(::std::string&& value) {
  
  soperid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.FriendRelationNotify.sOperId)
}
#endif
inline void FriendRelationNotify::set_soperid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  soperid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.FriendRelationNotify.sOperId)
}
inline void FriendRelationNotify::set_soperid(const char* value, size_t size) {
  
  soperid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.FriendRelationNotify.sOperId)
}
inline ::std::string* FriendRelationNotify::mutable_soperid() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.FriendRelationNotify.sOperId)
  return soperid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRelationNotify::release_soperid() {
  // @@protoc_insertion_point(field_release:imnotify.FriendRelationNotify.sOperId)
  
  return soperid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRelationNotify::set_allocated_soperid(::std::string* soperid) {
  if (soperid != NULL) {
    
  } else {
    
  }
  soperid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), soperid);
  // @@protoc_insertion_point(field_set_allocated:imnotify.FriendRelationNotify.sOperId)
}

// string extend = 9;
inline void FriendRelationNotify::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRelationNotify::extend() const {
  // @@protoc_insertion_point(field_get:imnotify.FriendRelationNotify.extend)
  return extend_.GetNoArena();
}
inline void FriendRelationNotify::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.FriendRelationNotify.extend)
}
#if LANG_CXX11
inline void FriendRelationNotify::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.FriendRelationNotify.extend)
}
#endif
inline void FriendRelationNotify::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.FriendRelationNotify.extend)
}
inline void FriendRelationNotify::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.FriendRelationNotify.extend)
}
inline ::std::string* FriendRelationNotify::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.FriendRelationNotify.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRelationNotify::release_extend() {
  // @@protoc_insertion_point(field_release:imnotify.FriendRelationNotify.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRelationNotify::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:imnotify.FriendRelationNotify.extend)
}

// -------------------------------------------------------------------

// FriendRelationNotifyACK

// string sMsgId = 1;
inline void FriendRelationNotifyACK::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRelationNotifyACK::smsgid() const {
  // @@protoc_insertion_point(field_get:imnotify.FriendRelationNotifyACK.sMsgId)
  return smsgid_.GetNoArena();
}
inline void FriendRelationNotifyACK::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.FriendRelationNotifyACK.sMsgId)
}
#if LANG_CXX11
inline void FriendRelationNotifyACK::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.FriendRelationNotifyACK.sMsgId)
}
#endif
inline void FriendRelationNotifyACK::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.FriendRelationNotifyACK.sMsgId)
}
inline void FriendRelationNotifyACK::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.FriendRelationNotifyACK.sMsgId)
}
inline ::std::string* FriendRelationNotifyACK::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.FriendRelationNotifyACK.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRelationNotifyACK::release_smsgid() {
  // @@protoc_insertion_point(field_release:imnotify.FriendRelationNotifyACK.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRelationNotifyACK::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:imnotify.FriendRelationNotifyACK.sMsgId)
}

// uint64 msgTime = 2;
inline void FriendRelationNotifyACK::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FriendRelationNotifyACK::msgtime() const {
  // @@protoc_insertion_point(field_get:imnotify.FriendRelationNotifyACK.msgTime)
  return msgtime_;
}
inline void FriendRelationNotifyACK::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:imnotify.FriendRelationNotifyACK.msgTime)
}

// .imnotify.ExceptionCode expcode = 3;
inline void FriendRelationNotifyACK::clear_expcode() {
  expcode_ = 0;
}
inline ::imnotify::ExceptionCode FriendRelationNotifyACK::expcode() const {
  // @@protoc_insertion_point(field_get:imnotify.FriendRelationNotifyACK.expcode)
  return static_cast< ::imnotify::ExceptionCode >(expcode_);
}
inline void FriendRelationNotifyACK::set_expcode(::imnotify::ExceptionCode value) {
  
  expcode_ = value;
  // @@protoc_insertion_point(field_set:imnotify.FriendRelationNotifyACK.expcode)
}

// -------------------------------------------------------------------

// LoginOperationNotify

// string sUserId = 1;
inline void LoginOperationNotify::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginOperationNotify::suserid() const {
  // @@protoc_insertion_point(field_get:imnotify.LoginOperationNotify.sUserId)
  return suserid_.GetNoArena();
}
inline void LoginOperationNotify::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.LoginOperationNotify.sUserId)
}
#if LANG_CXX11
inline void LoginOperationNotify::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.LoginOperationNotify.sUserId)
}
#endif
inline void LoginOperationNotify::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.LoginOperationNotify.sUserId)
}
inline void LoginOperationNotify::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.LoginOperationNotify.sUserId)
}
inline ::std::string* LoginOperationNotify::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.LoginOperationNotify.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginOperationNotify::release_suserid() {
  // @@protoc_insertion_point(field_release:imnotify.LoginOperationNotify.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginOperationNotify::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:imnotify.LoginOperationNotify.sUserId)
}

// string sDeviceToken = 2;
inline void LoginOperationNotify::clear_sdevicetoken() {
  sdevicetoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginOperationNotify::sdevicetoken() const {
  // @@protoc_insertion_point(field_get:imnotify.LoginOperationNotify.sDeviceToken)
  return sdevicetoken_.GetNoArena();
}
inline void LoginOperationNotify::set_sdevicetoken(const ::std::string& value) {
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.LoginOperationNotify.sDeviceToken)
}
#if LANG_CXX11
inline void LoginOperationNotify::set_sdevicetoken(::std::string&& value) {
  
  sdevicetoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.LoginOperationNotify.sDeviceToken)
}
#endif
inline void LoginOperationNotify::set_sdevicetoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.LoginOperationNotify.sDeviceToken)
}
inline void LoginOperationNotify::set_sdevicetoken(const char* value, size_t size) {
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.LoginOperationNotify.sDeviceToken)
}
inline ::std::string* LoginOperationNotify::mutable_sdevicetoken() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.LoginOperationNotify.sDeviceToken)
  return sdevicetoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginOperationNotify::release_sdevicetoken() {
  // @@protoc_insertion_point(field_release:imnotify.LoginOperationNotify.sDeviceToken)
  
  return sdevicetoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginOperationNotify::set_allocated_sdevicetoken(::std::string* sdevicetoken) {
  if (sdevicetoken != NULL) {
    
  } else {
    
  }
  sdevicetoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdevicetoken);
  // @@protoc_insertion_point(field_set_allocated:imnotify.LoginOperationNotify.sDeviceToken)
}

// uint64 msgTime = 3;
inline void LoginOperationNotify::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginOperationNotify::msgtime() const {
  // @@protoc_insertion_point(field_get:imnotify.LoginOperationNotify.msgTime)
  return msgtime_;
}
inline void LoginOperationNotify::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:imnotify.LoginOperationNotify.msgTime)
}

// .imnotify.LoginNotifyType loginType = 4;
inline void LoginOperationNotify::clear_logintype() {
  logintype_ = 0;
}
inline ::imnotify::LoginNotifyType LoginOperationNotify::logintype() const {
  // @@protoc_insertion_point(field_get:imnotify.LoginOperationNotify.loginType)
  return static_cast< ::imnotify::LoginNotifyType >(logintype_);
}
inline void LoginOperationNotify::set_logintype(::imnotify::LoginNotifyType value) {
  
  logintype_ = value;
  // @@protoc_insertion_point(field_set:imnotify.LoginOperationNotify.loginType)
}

// string extend = 5;
inline void LoginOperationNotify::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginOperationNotify::extend() const {
  // @@protoc_insertion_point(field_get:imnotify.LoginOperationNotify.extend)
  return extend_.GetNoArena();
}
inline void LoginOperationNotify::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.LoginOperationNotify.extend)
}
#if LANG_CXX11
inline void LoginOperationNotify::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.LoginOperationNotify.extend)
}
#endif
inline void LoginOperationNotify::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.LoginOperationNotify.extend)
}
inline void LoginOperationNotify::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.LoginOperationNotify.extend)
}
inline ::std::string* LoginOperationNotify::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.LoginOperationNotify.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginOperationNotify::release_extend() {
  // @@protoc_insertion_point(field_release:imnotify.LoginOperationNotify.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginOperationNotify::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:imnotify.LoginOperationNotify.extend)
}

// .imnotify.LoginNotifySubType loginSubType = 6;
inline void LoginOperationNotify::clear_loginsubtype() {
  loginsubtype_ = 0;
}
inline ::imnotify::LoginNotifySubType LoginOperationNotify::loginsubtype() const {
  // @@protoc_insertion_point(field_get:imnotify.LoginOperationNotify.loginSubType)
  return static_cast< ::imnotify::LoginNotifySubType >(loginsubtype_);
}
inline void LoginOperationNotify::set_loginsubtype(::imnotify::LoginNotifySubType value) {
  
  loginsubtype_ = value;
  // @@protoc_insertion_point(field_set:imnotify.LoginOperationNotify.loginSubType)
}

// -------------------------------------------------------------------

// LoginOperationNotifyACK

// string sUserId = 1;
inline void LoginOperationNotifyACK::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginOperationNotifyACK::suserid() const {
  // @@protoc_insertion_point(field_get:imnotify.LoginOperationNotifyACK.sUserId)
  return suserid_.GetNoArena();
}
inline void LoginOperationNotifyACK::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.LoginOperationNotifyACK.sUserId)
}
#if LANG_CXX11
inline void LoginOperationNotifyACK::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.LoginOperationNotifyACK.sUserId)
}
#endif
inline void LoginOperationNotifyACK::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.LoginOperationNotifyACK.sUserId)
}
inline void LoginOperationNotifyACK::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.LoginOperationNotifyACK.sUserId)
}
inline ::std::string* LoginOperationNotifyACK::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.LoginOperationNotifyACK.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginOperationNotifyACK::release_suserid() {
  // @@protoc_insertion_point(field_release:imnotify.LoginOperationNotifyACK.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginOperationNotifyACK::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:imnotify.LoginOperationNotifyACK.sUserId)
}

// uint64 msgTime = 2;
inline void LoginOperationNotifyACK::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginOperationNotifyACK::msgtime() const {
  // @@protoc_insertion_point(field_get:imnotify.LoginOperationNotifyACK.msgTime)
  return msgtime_;
}
inline void LoginOperationNotifyACK::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:imnotify.LoginOperationNotifyACK.msgTime)
}

// .imnotify.ExceptionCode expcode = 3;
inline void LoginOperationNotifyACK::clear_expcode() {
  expcode_ = 0;
}
inline ::imnotify::ExceptionCode LoginOperationNotifyACK::expcode() const {
  // @@protoc_insertion_point(field_get:imnotify.LoginOperationNotifyACK.expcode)
  return static_cast< ::imnotify::ExceptionCode >(expcode_);
}
inline void LoginOperationNotifyACK::set_expcode(::imnotify::ExceptionCode value) {
  
  expcode_ = value;
  // @@protoc_insertion_point(field_set:imnotify.LoginOperationNotifyACK.expcode)
}

// -------------------------------------------------------------------

// CommonMsgNotify

// string sFromId = 1;
inline void CommonMsgNotify::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonMsgNotify::sfromid() const {
  // @@protoc_insertion_point(field_get:imnotify.CommonMsgNotify.sFromId)
  return sfromid_.GetNoArena();
}
inline void CommonMsgNotify::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.CommonMsgNotify.sFromId)
}
#if LANG_CXX11
inline void CommonMsgNotify::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.CommonMsgNotify.sFromId)
}
#endif
inline void CommonMsgNotify::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.CommonMsgNotify.sFromId)
}
inline void CommonMsgNotify::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.CommonMsgNotify.sFromId)
}
inline ::std::string* CommonMsgNotify::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.CommonMsgNotify.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonMsgNotify::release_sfromid() {
  // @@protoc_insertion_point(field_release:imnotify.CommonMsgNotify.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonMsgNotify::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:imnotify.CommonMsgNotify.sFromId)
}

// repeated string sToIds = 2;
inline int CommonMsgNotify::stoids_size() const {
  return stoids_.size();
}
inline void CommonMsgNotify::clear_stoids() {
  stoids_.Clear();
}
inline const ::std::string& CommonMsgNotify::stoids(int index) const {
  // @@protoc_insertion_point(field_get:imnotify.CommonMsgNotify.sToIds)
  return stoids_.Get(index);
}
inline ::std::string* CommonMsgNotify::mutable_stoids(int index) {
  // @@protoc_insertion_point(field_mutable:imnotify.CommonMsgNotify.sToIds)
  return stoids_.Mutable(index);
}
inline void CommonMsgNotify::set_stoids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:imnotify.CommonMsgNotify.sToIds)
  stoids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CommonMsgNotify::set_stoids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:imnotify.CommonMsgNotify.sToIds)
  stoids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CommonMsgNotify::set_stoids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stoids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:imnotify.CommonMsgNotify.sToIds)
}
inline void CommonMsgNotify::set_stoids(int index, const char* value, size_t size) {
  stoids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:imnotify.CommonMsgNotify.sToIds)
}
inline ::std::string* CommonMsgNotify::add_stoids() {
  // @@protoc_insertion_point(field_add_mutable:imnotify.CommonMsgNotify.sToIds)
  return stoids_.Add();
}
inline void CommonMsgNotify::add_stoids(const ::std::string& value) {
  stoids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:imnotify.CommonMsgNotify.sToIds)
}
#if LANG_CXX11
inline void CommonMsgNotify::add_stoids(::std::string&& value) {
  stoids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:imnotify.CommonMsgNotify.sToIds)
}
#endif
inline void CommonMsgNotify::add_stoids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stoids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:imnotify.CommonMsgNotify.sToIds)
}
inline void CommonMsgNotify::add_stoids(const char* value, size_t size) {
  stoids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:imnotify.CommonMsgNotify.sToIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommonMsgNotify::stoids() const {
  // @@protoc_insertion_point(field_list:imnotify.CommonMsgNotify.sToIds)
  return stoids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommonMsgNotify::mutable_stoids() {
  // @@protoc_insertion_point(field_mutable_list:imnotify.CommonMsgNotify.sToIds)
  return &stoids_;
}

// string sMsgId = 3;
inline void CommonMsgNotify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonMsgNotify::smsgid() const {
  // @@protoc_insertion_point(field_get:imnotify.CommonMsgNotify.sMsgId)
  return smsgid_.GetNoArena();
}
inline void CommonMsgNotify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.CommonMsgNotify.sMsgId)
}
#if LANG_CXX11
inline void CommonMsgNotify::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.CommonMsgNotify.sMsgId)
}
#endif
inline void CommonMsgNotify::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.CommonMsgNotify.sMsgId)
}
inline void CommonMsgNotify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.CommonMsgNotify.sMsgId)
}
inline ::std::string* CommonMsgNotify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.CommonMsgNotify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonMsgNotify::release_smsgid() {
  // @@protoc_insertion_point(field_release:imnotify.CommonMsgNotify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonMsgNotify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:imnotify.CommonMsgNotify.sMsgId)
}

// .imnotify.CommonNotifyType notifyType = 4;
inline void CommonMsgNotify::clear_notifytype() {
  notifytype_ = 0;
}
inline ::imnotify::CommonNotifyType CommonMsgNotify::notifytype() const {
  // @@protoc_insertion_point(field_get:imnotify.CommonMsgNotify.notifyType)
  return static_cast< ::imnotify::CommonNotifyType >(notifytype_);
}
inline void CommonMsgNotify::set_notifytype(::imnotify::CommonNotifyType value) {
  
  notifytype_ = value;
  // @@protoc_insertion_point(field_set:imnotify.CommonMsgNotify.notifyType)
}

// string sContent = 5;
inline void CommonMsgNotify::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonMsgNotify::scontent() const {
  // @@protoc_insertion_point(field_get:imnotify.CommonMsgNotify.sContent)
  return scontent_.GetNoArena();
}
inline void CommonMsgNotify::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.CommonMsgNotify.sContent)
}
#if LANG_CXX11
inline void CommonMsgNotify::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.CommonMsgNotify.sContent)
}
#endif
inline void CommonMsgNotify::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.CommonMsgNotify.sContent)
}
inline void CommonMsgNotify::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.CommonMsgNotify.sContent)
}
inline ::std::string* CommonMsgNotify::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.CommonMsgNotify.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonMsgNotify::release_scontent() {
  // @@protoc_insertion_point(field_release:imnotify.CommonMsgNotify.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonMsgNotify::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:imnotify.CommonMsgNotify.sContent)
}

// uint64 msgTime = 6;
inline void CommonMsgNotify::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CommonMsgNotify::msgtime() const {
  // @@protoc_insertion_point(field_get:imnotify.CommonMsgNotify.msgTime)
  return msgtime_;
}
inline void CommonMsgNotify::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:imnotify.CommonMsgNotify.msgTime)
}

// string extend = 7;
inline void CommonMsgNotify::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonMsgNotify::extend() const {
  // @@protoc_insertion_point(field_get:imnotify.CommonMsgNotify.extend)
  return extend_.GetNoArena();
}
inline void CommonMsgNotify::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.CommonMsgNotify.extend)
}
#if LANG_CXX11
inline void CommonMsgNotify::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.CommonMsgNotify.extend)
}
#endif
inline void CommonMsgNotify::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.CommonMsgNotify.extend)
}
inline void CommonMsgNotify::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.CommonMsgNotify.extend)
}
inline ::std::string* CommonMsgNotify::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.CommonMsgNotify.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonMsgNotify::release_extend() {
  // @@protoc_insertion_point(field_release:imnotify.CommonMsgNotify.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonMsgNotify::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:imnotify.CommonMsgNotify.extend)
}

// -------------------------------------------------------------------

// CommonMsgNotifyACK

// string sMsgId = 1;
inline void CommonMsgNotifyACK::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonMsgNotifyACK::smsgid() const {
  // @@protoc_insertion_point(field_get:imnotify.CommonMsgNotifyACK.sMsgId)
  return smsgid_.GetNoArena();
}
inline void CommonMsgNotifyACK::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imnotify.CommonMsgNotifyACK.sMsgId)
}
#if LANG_CXX11
inline void CommonMsgNotifyACK::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imnotify.CommonMsgNotifyACK.sMsgId)
}
#endif
inline void CommonMsgNotifyACK::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imnotify.CommonMsgNotifyACK.sMsgId)
}
inline void CommonMsgNotifyACK::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imnotify.CommonMsgNotifyACK.sMsgId)
}
inline ::std::string* CommonMsgNotifyACK::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:imnotify.CommonMsgNotifyACK.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonMsgNotifyACK::release_smsgid() {
  // @@protoc_insertion_point(field_release:imnotify.CommonMsgNotifyACK.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonMsgNotifyACK::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:imnotify.CommonMsgNotifyACK.sMsgId)
}

// uint64 msgTime = 2;
inline void CommonMsgNotifyACK::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CommonMsgNotifyACK::msgtime() const {
  // @@protoc_insertion_point(field_get:imnotify.CommonMsgNotifyACK.msgTime)
  return msgtime_;
}
inline void CommonMsgNotifyACK::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:imnotify.CommonMsgNotifyACK.msgTime)
}

// .imnotify.ExceptionCode expcode = 3;
inline void CommonMsgNotifyACK::clear_expcode() {
  expcode_ = 0;
}
inline ::imnotify::ExceptionCode CommonMsgNotifyACK::expcode() const {
  // @@protoc_insertion_point(field_get:imnotify.CommonMsgNotifyACK.expcode)
  return static_cast< ::imnotify::ExceptionCode >(expcode_);
}
inline void CommonMsgNotifyACK::set_expcode(::imnotify::ExceptionCode value) {
  
  expcode_ = value;
  // @@protoc_insertion_point(field_set:imnotify.CommonMsgNotifyACK.expcode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace imnotify

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::imnotify::NotifyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::imnotify::NotifyType>() {
  return ::imnotify::NotifyType_descriptor();
}
template <> struct is_proto_enum< ::imnotify::FriendNotifyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::imnotify::FriendNotifyType>() {
  return ::imnotify::FriendNotifyType_descriptor();
}
template <> struct is_proto_enum< ::imnotify::LoginNotifyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::imnotify::LoginNotifyType>() {
  return ::imnotify::LoginNotifyType_descriptor();
}
template <> struct is_proto_enum< ::imnotify::LoginNotifySubType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::imnotify::LoginNotifySubType>() {
  return ::imnotify::LoginNotifySubType_descriptor();
}
template <> struct is_proto_enum< ::imnotify::CommonNotifyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::imnotify::CommonNotifyType>() {
  return ::imnotify::CommonNotifyType_descriptor();
}
template <> struct is_proto_enum< ::imnotify::ExceptionCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::imnotify::ExceptionCode>() {
  return ::imnotify::ExceptionCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_im_2enotify_2eproto
