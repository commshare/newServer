// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.mes.proto

#ifndef PROTOBUF_INCLUDED_im_2emes_2eproto
#define PROTOBUF_INCLUDED_im_2emes_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "im.pub.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_im_2emes_2eproto 

namespace protobuf_im_2emes_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[59];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_im_2emes_2eproto
namespace im {
class MESAddFriend;
class MESAddFriendDefaultTypeInternal;
extern MESAddFriendDefaultTypeInternal _MESAddFriend_default_instance_;
class MESAddFriendAck;
class MESAddFriendAckDefaultTypeInternal;
extern MESAddFriendAckDefaultTypeInternal _MESAddFriendAck_default_instance_;
class MESAddFriendAns;
class MESAddFriendAnsDefaultTypeInternal;
extern MESAddFriendAnsDefaultTypeInternal _MESAddFriendAns_default_instance_;
class MESAddFriendAnsAck;
class MESAddFriendAnsAckDefaultTypeInternal;
extern MESAddFriendAnsAckDefaultTypeInternal _MESAddFriendAnsAck_default_instance_;
class MESAddFriendAnsDeliverACK;
class MESAddFriendAnsDeliverACKDefaultTypeInternal;
extern MESAddFriendAnsDeliverACKDefaultTypeInternal _MESAddFriendAnsDeliverACK_default_instance_;
class MESAddFriendDeliverAck;
class MESAddFriendDeliverAckDefaultTypeInternal;
extern MESAddFriendDeliverAckDefaultTypeInternal _MESAddFriendDeliverAck_default_instance_;
class MESChat;
class MESChatDefaultTypeInternal;
extern MESChatDefaultTypeInternal _MESChat_default_instance_;
class MESChatAck;
class MESChatAckDefaultTypeInternal;
extern MESChatAckDefaultTypeInternal _MESChatAck_default_instance_;
class MESChatCancel;
class MESChatCancelDefaultTypeInternal;
extern MESChatCancelDefaultTypeInternal _MESChatCancel_default_instance_;
class MESChatCancelAck;
class MESChatCancelAckDefaultTypeInternal;
extern MESChatCancelAckDefaultTypeInternal _MESChatCancelAck_default_instance_;
class MESChatDeliveredAck;
class MESChatDeliveredAckDefaultTypeInternal;
extern MESChatDeliveredAckDefaultTypeInternal _MESChatDeliveredAck_default_instance_;
class MESChatDeliveredNotificationAck;
class MESChatDeliveredNotificationAckDefaultTypeInternal;
extern MESChatDeliveredNotificationAckDefaultTypeInternal _MESChatDeliveredNotificationAck_default_instance_;
class MESChatRead;
class MESChatReadDefaultTypeInternal;
extern MESChatReadDefaultTypeInternal _MESChatRead_default_instance_;
class MESChatReadAck;
class MESChatReadAckDefaultTypeInternal;
extern MESChatReadAckDefaultTypeInternal _MESChatReadAck_default_instance_;
class MESChatReadDelivereAck;
class MESChatReadDelivereAckDefaultTypeInternal;
extern MESChatReadDelivereAckDefaultTypeInternal _MESChatReadDelivereAck_default_instance_;
class MESDecBlacklist;
class MESDecBlacklistDefaultTypeInternal;
extern MESDecBlacklistDefaultTypeInternal _MESDecBlacklist_default_instance_;
class MESDecBlacklistAck;
class MESDecBlacklistAckDefaultTypeInternal;
extern MESDecBlacklistAckDefaultTypeInternal _MESDecBlacklistAck_default_instance_;
class MESDelFriend;
class MESDelFriendDefaultTypeInternal;
extern MESDelFriendDefaultTypeInternal _MESDelFriend_default_instance_;
class MESDelFriendAck;
class MESDelFriendAckDefaultTypeInternal;
extern MESDelFriendAckDefaultTypeInternal _MESDelFriendAck_default_instance_;
class MESExchangeKey;
class MESExchangeKeyDefaultTypeInternal;
extern MESExchangeKeyDefaultTypeInternal _MESExchangeKey_default_instance_;
class MESExchangeKeyAck;
class MESExchangeKeyAckDefaultTypeInternal;
extern MESExchangeKeyAckDefaultTypeInternal _MESExchangeKeyAck_default_instance_;
class MESExchangeKeyDeliver;
class MESExchangeKeyDeliverDefaultTypeInternal;
extern MESExchangeKeyDeliverDefaultTypeInternal _MESExchangeKeyDeliver_default_instance_;
class MESExchangeKeyDeliverAck;
class MESExchangeKeyDeliverAckDefaultTypeInternal;
extern MESExchangeKeyDeliverAckDefaultTypeInternal _MESExchangeKeyDeliverAck_default_instance_;
class MESExchangeKeyDeliverNotifyAck;
class MESExchangeKeyDeliverNotifyAckDefaultTypeInternal;
extern MESExchangeKeyDeliverNotifyAckDefaultTypeInternal _MESExchangeKeyDeliverNotifyAck_default_instance_;
class MESGrpChat;
class MESGrpChatDefaultTypeInternal;
extern MESGrpChatDefaultTypeInternal _MESGrpChat_default_instance_;
class MESGrpChatDeliveredAck;
class MESGrpChatDeliveredAckDefaultTypeInternal;
extern MESGrpChatDeliveredAckDefaultTypeInternal _MESGrpChatDeliveredAck_default_instance_;
class MESGrpNotify;
class MESGrpNotifyDefaultTypeInternal;
extern MESGrpNotifyDefaultTypeInternal _MESGrpNotify_default_instance_;
class MESGrpNotifyDeliverAck;
class MESGrpNotifyDeliverAckDefaultTypeInternal;
extern MESGrpNotifyDeliverAckDefaultTypeInternal _MESGrpNotifyDeliverAck_default_instance_;
class MESIncBlacklist;
class MESIncBlacklistDefaultTypeInternal;
extern MESIncBlacklistDefaultTypeInternal _MESIncBlacklist_default_instance_;
class MESIncBlacklistAck;
class MESIncBlacklistAckDefaultTypeInternal;
extern MESIncBlacklistAckDefaultTypeInternal _MESIncBlacklistAck_default_instance_;
class MESJoinGrp;
class MESJoinGrpDefaultTypeInternal;
extern MESJoinGrpDefaultTypeInternal _MESJoinGrp_default_instance_;
class MESJoinGrpAck;
class MESJoinGrpAckDefaultTypeInternal;
extern MESJoinGrpAckDefaultTypeInternal _MESJoinGrpAck_default_instance_;
class MESJoinGrpDeliverAck;
class MESJoinGrpDeliverAckDefaultTypeInternal;
extern MESJoinGrpDeliverAckDefaultTypeInternal _MESJoinGrpDeliverAck_default_instance_;
class MESOfflineMsg;
class MESOfflineMsgDefaultTypeInternal;
extern MESOfflineMsgDefaultTypeInternal _MESOfflineMsg_default_instance_;
class MESOfflineMsgAck;
class MESOfflineMsgAckDefaultTypeInternal;
extern MESOfflineMsgAckDefaultTypeInternal _MESOfflineMsgAck_default_instance_;
class MESOfflineMsgDelivered;
class MESOfflineMsgDeliveredDefaultTypeInternal;
extern MESOfflineMsgDeliveredDefaultTypeInternal _MESOfflineMsgDelivered_default_instance_;
class MESOfflineMsgDeliveredNotifyAck;
class MESOfflineMsgDeliveredNotifyAckDefaultTypeInternal;
extern MESOfflineMsgDeliveredNotifyAckDefaultTypeInternal _MESOfflineMsgDeliveredNotifyAck_default_instance_;
class MESOfflineMsgDelivereddAck;
class MESOfflineMsgDelivereddAckDefaultTypeInternal;
extern MESOfflineMsgDelivereddAckDefaultTypeInternal _MESOfflineMsgDelivereddAck_default_instance_;
class MESOfflineSummary;
class MESOfflineSummaryDefaultTypeInternal;
extern MESOfflineSummaryDefaultTypeInternal _MESOfflineSummary_default_instance_;
class MESOfflineSummaryAck;
class MESOfflineSummaryAckDefaultTypeInternal;
extern MESOfflineSummaryAckDefaultTypeInternal _MESOfflineSummaryAck_default_instance_;
class MESOfflineTotal;
class MESOfflineTotalDefaultTypeInternal;
extern MESOfflineTotalDefaultTypeInternal _MESOfflineTotal_default_instance_;
class MSGCommonNotify;
class MSGCommonNotifyDefaultTypeInternal;
extern MSGCommonNotifyDefaultTypeInternal _MSGCommonNotify_default_instance_;
class MSGCommonNotifyACK;
class MSGCommonNotifyACKDefaultTypeInternal;
extern MSGCommonNotifyACKDefaultTypeInternal _MSGCommonNotifyACK_default_instance_;
class MsgReadResult;
class MsgReadResultDefaultTypeInternal;
extern MsgReadResultDefaultTypeInternal _MsgReadResult_default_instance_;
class OfflineDeliveredMsg;
class OfflineDeliveredMsgDefaultTypeInternal;
extern OfflineDeliveredMsgDefaultTypeInternal _OfflineDeliveredMsg_default_instance_;
class OfflineMsgData;
class OfflineMsgDataDefaultTypeInternal;
extern OfflineMsgDataDefaultTypeInternal _OfflineMsgData_default_instance_;
class OfflineTotal;
class OfflineTotalDefaultTypeInternal;
extern OfflineTotalDefaultTypeInternal _OfflineTotal_default_instance_;
class SVRMSGCommonMsgNotify;
class SVRMSGCommonMsgNotifyDefaultTypeInternal;
extern SVRMSGCommonMsgNotifyDefaultTypeInternal _SVRMSGCommonMsgNotify_default_instance_;
class SVRMSGFriendRelationNotify;
class SVRMSGFriendRelationNotifyDefaultTypeInternal;
extern SVRMSGFriendRelationNotifyDefaultTypeInternal _SVRMSGFriendRelationNotify_default_instance_;
class SVRMSGGroupRelationNotify;
class SVRMSGGroupRelationNotifyDefaultTypeInternal;
extern SVRMSGGroupRelationNotifyDefaultTypeInternal _SVRMSGGroupRelationNotify_default_instance_;
class SVRMSGNotifyACK;
class SVRMSGNotifyACKDefaultTypeInternal;
extern SVRMSGNotifyACKDefaultTypeInternal _SVRMSGNotifyACK_default_instance_;
class UserKey;
class UserKeyDefaultTypeInternal;
extern UserKeyDefaultTypeInternal _UserKey_default_instance_;
class _InnerGrpNotify;
class _InnerGrpNotifyDefaultTypeInternal;
extern _InnerGrpNotifyDefaultTypeInternal __InnerGrpNotify_default_instance_;
class _MESGrpInterChat;
class _MESGrpInterChatDefaultTypeInternal;
extern _MESGrpInterChatDefaultTypeInternal __MESGrpInterChat_default_instance_;
class _MESGrpInterChatAck;
class _MESGrpInterChatAckDefaultTypeInternal;
extern _MESGrpInterChatAckDefaultTypeInternal __MESGrpInterChatAck_default_instance_;
class _MESGrpInterChatCancel;
class _MESGrpInterChatCancelDefaultTypeInternal;
extern _MESGrpInterChatCancelDefaultTypeInternal __MESGrpInterChatCancel_default_instance_;
class _MESGrpInterChatCancelAck;
class _MESGrpInterChatCancelAckDefaultTypeInternal;
extern _MESGrpInterChatCancelAckDefaultTypeInternal __MESGrpInterChatCancelAck_default_instance_;
class _MESGrpInterNotify;
class _MESGrpInterNotifyDefaultTypeInternal;
extern _MESGrpInterNotifyDefaultTypeInternal __MESGrpInterNotify_default_instance_;
class _MESGrpInterNotifyAck;
class _MESGrpInterNotifyAckDefaultTypeInternal;
extern _MESGrpInterNotifyAckDefaultTypeInternal __MESGrpInterNotifyAck_default_instance_;
}  // namespace im
namespace google {
namespace protobuf {
template<> ::im::MESAddFriend* Arena::CreateMaybeMessage<::im::MESAddFriend>(Arena*);
template<> ::im::MESAddFriendAck* Arena::CreateMaybeMessage<::im::MESAddFriendAck>(Arena*);
template<> ::im::MESAddFriendAns* Arena::CreateMaybeMessage<::im::MESAddFriendAns>(Arena*);
template<> ::im::MESAddFriendAnsAck* Arena::CreateMaybeMessage<::im::MESAddFriendAnsAck>(Arena*);
template<> ::im::MESAddFriendAnsDeliverACK* Arena::CreateMaybeMessage<::im::MESAddFriendAnsDeliverACK>(Arena*);
template<> ::im::MESAddFriendDeliverAck* Arena::CreateMaybeMessage<::im::MESAddFriendDeliverAck>(Arena*);
template<> ::im::MESChat* Arena::CreateMaybeMessage<::im::MESChat>(Arena*);
template<> ::im::MESChatAck* Arena::CreateMaybeMessage<::im::MESChatAck>(Arena*);
template<> ::im::MESChatCancel* Arena::CreateMaybeMessage<::im::MESChatCancel>(Arena*);
template<> ::im::MESChatCancelAck* Arena::CreateMaybeMessage<::im::MESChatCancelAck>(Arena*);
template<> ::im::MESChatDeliveredAck* Arena::CreateMaybeMessage<::im::MESChatDeliveredAck>(Arena*);
template<> ::im::MESChatDeliveredNotificationAck* Arena::CreateMaybeMessage<::im::MESChatDeliveredNotificationAck>(Arena*);
template<> ::im::MESChatRead* Arena::CreateMaybeMessage<::im::MESChatRead>(Arena*);
template<> ::im::MESChatReadAck* Arena::CreateMaybeMessage<::im::MESChatReadAck>(Arena*);
template<> ::im::MESChatReadDelivereAck* Arena::CreateMaybeMessage<::im::MESChatReadDelivereAck>(Arena*);
template<> ::im::MESDecBlacklist* Arena::CreateMaybeMessage<::im::MESDecBlacklist>(Arena*);
template<> ::im::MESDecBlacklistAck* Arena::CreateMaybeMessage<::im::MESDecBlacklistAck>(Arena*);
template<> ::im::MESDelFriend* Arena::CreateMaybeMessage<::im::MESDelFriend>(Arena*);
template<> ::im::MESDelFriendAck* Arena::CreateMaybeMessage<::im::MESDelFriendAck>(Arena*);
template<> ::im::MESExchangeKey* Arena::CreateMaybeMessage<::im::MESExchangeKey>(Arena*);
template<> ::im::MESExchangeKeyAck* Arena::CreateMaybeMessage<::im::MESExchangeKeyAck>(Arena*);
template<> ::im::MESExchangeKeyDeliver* Arena::CreateMaybeMessage<::im::MESExchangeKeyDeliver>(Arena*);
template<> ::im::MESExchangeKeyDeliverAck* Arena::CreateMaybeMessage<::im::MESExchangeKeyDeliverAck>(Arena*);
template<> ::im::MESExchangeKeyDeliverNotifyAck* Arena::CreateMaybeMessage<::im::MESExchangeKeyDeliverNotifyAck>(Arena*);
template<> ::im::MESGrpChat* Arena::CreateMaybeMessage<::im::MESGrpChat>(Arena*);
template<> ::im::MESGrpChatDeliveredAck* Arena::CreateMaybeMessage<::im::MESGrpChatDeliveredAck>(Arena*);
template<> ::im::MESGrpNotify* Arena::CreateMaybeMessage<::im::MESGrpNotify>(Arena*);
template<> ::im::MESGrpNotifyDeliverAck* Arena::CreateMaybeMessage<::im::MESGrpNotifyDeliverAck>(Arena*);
template<> ::im::MESIncBlacklist* Arena::CreateMaybeMessage<::im::MESIncBlacklist>(Arena*);
template<> ::im::MESIncBlacklistAck* Arena::CreateMaybeMessage<::im::MESIncBlacklistAck>(Arena*);
template<> ::im::MESJoinGrp* Arena::CreateMaybeMessage<::im::MESJoinGrp>(Arena*);
template<> ::im::MESJoinGrpAck* Arena::CreateMaybeMessage<::im::MESJoinGrpAck>(Arena*);
template<> ::im::MESJoinGrpDeliverAck* Arena::CreateMaybeMessage<::im::MESJoinGrpDeliverAck>(Arena*);
template<> ::im::MESOfflineMsg* Arena::CreateMaybeMessage<::im::MESOfflineMsg>(Arena*);
template<> ::im::MESOfflineMsgAck* Arena::CreateMaybeMessage<::im::MESOfflineMsgAck>(Arena*);
template<> ::im::MESOfflineMsgDelivered* Arena::CreateMaybeMessage<::im::MESOfflineMsgDelivered>(Arena*);
template<> ::im::MESOfflineMsgDeliveredNotifyAck* Arena::CreateMaybeMessage<::im::MESOfflineMsgDeliveredNotifyAck>(Arena*);
template<> ::im::MESOfflineMsgDelivereddAck* Arena::CreateMaybeMessage<::im::MESOfflineMsgDelivereddAck>(Arena*);
template<> ::im::MESOfflineSummary* Arena::CreateMaybeMessage<::im::MESOfflineSummary>(Arena*);
template<> ::im::MESOfflineSummaryAck* Arena::CreateMaybeMessage<::im::MESOfflineSummaryAck>(Arena*);
template<> ::im::MESOfflineTotal* Arena::CreateMaybeMessage<::im::MESOfflineTotal>(Arena*);
template<> ::im::MSGCommonNotify* Arena::CreateMaybeMessage<::im::MSGCommonNotify>(Arena*);
template<> ::im::MSGCommonNotifyACK* Arena::CreateMaybeMessage<::im::MSGCommonNotifyACK>(Arena*);
template<> ::im::MsgReadResult* Arena::CreateMaybeMessage<::im::MsgReadResult>(Arena*);
template<> ::im::OfflineDeliveredMsg* Arena::CreateMaybeMessage<::im::OfflineDeliveredMsg>(Arena*);
template<> ::im::OfflineMsgData* Arena::CreateMaybeMessage<::im::OfflineMsgData>(Arena*);
template<> ::im::OfflineTotal* Arena::CreateMaybeMessage<::im::OfflineTotal>(Arena*);
template<> ::im::SVRMSGCommonMsgNotify* Arena::CreateMaybeMessage<::im::SVRMSGCommonMsgNotify>(Arena*);
template<> ::im::SVRMSGFriendRelationNotify* Arena::CreateMaybeMessage<::im::SVRMSGFriendRelationNotify>(Arena*);
template<> ::im::SVRMSGGroupRelationNotify* Arena::CreateMaybeMessage<::im::SVRMSGGroupRelationNotify>(Arena*);
template<> ::im::SVRMSGNotifyACK* Arena::CreateMaybeMessage<::im::SVRMSGNotifyACK>(Arena*);
template<> ::im::UserKey* Arena::CreateMaybeMessage<::im::UserKey>(Arena*);
template<> ::im::_InnerGrpNotify* Arena::CreateMaybeMessage<::im::_InnerGrpNotify>(Arena*);
template<> ::im::_MESGrpInterChat* Arena::CreateMaybeMessage<::im::_MESGrpInterChat>(Arena*);
template<> ::im::_MESGrpInterChatAck* Arena::CreateMaybeMessage<::im::_MESGrpInterChatAck>(Arena*);
template<> ::im::_MESGrpInterChatCancel* Arena::CreateMaybeMessage<::im::_MESGrpInterChatCancel>(Arena*);
template<> ::im::_MESGrpInterChatCancelAck* Arena::CreateMaybeMessage<::im::_MESGrpInterChatCancelAck>(Arena*);
template<> ::im::_MESGrpInterNotify* Arena::CreateMaybeMessage<::im::_MESGrpInterNotify>(Arena*);
template<> ::im::_MESGrpInterNotifyAck* Arena::CreateMaybeMessage<::im::_MESGrpInterNotifyAck>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace im {

enum SVRGroupRelationNotifyType {
  GRPRELATION_TYPE_UNKNOWN = 0,
  GRPRELATION_TYPE_INFO_CHANGED = 1,
  GRPRELATION_TYPE_MEM_QUIT = 2,
  GRPRELATION_TYPE_MEM_REMOVE = 3,
  GRPRELATION_TYPE_APPLY_RESULT = 4,
  GRPRELATION_TYPE_INVITE_RESULT = 5,
  GRPRELATION_TYPE_MASTER_CHANGED = 6,
  GRPRELATION_TYPE_GRP_ACTIVE = 7,
  GRPRELATION_TYPE_MASTER_ANS_APPLY = 8,
  GRPRELATION_TYPE_MASTER_ANS_INVITE = 9,
  SVRGroupRelationNotifyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SVRGroupRelationNotifyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SVRGroupRelationNotifyType_IsValid(int value);
const SVRGroupRelationNotifyType SVRGroupRelationNotifyType_MIN = GRPRELATION_TYPE_UNKNOWN;
const SVRGroupRelationNotifyType SVRGroupRelationNotifyType_MAX = GRPRELATION_TYPE_MASTER_ANS_INVITE;
const int SVRGroupRelationNotifyType_ARRAYSIZE = SVRGroupRelationNotifyType_MAX + 1;

enum SVRFriendRelationNotifyType {
  FRIEND_NOTIFY_TYPE_UNKNOWN = 0,
  FRIEND_NOTIFY_TYPE_ADD = 1,
  FRIEND_NOTIFY_TYPE_ANS = 2,
  SVRFriendRelationNotifyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SVRFriendRelationNotifyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SVRFriendRelationNotifyType_IsValid(int value);
const SVRFriendRelationNotifyType SVRFriendRelationNotifyType_MIN = FRIEND_NOTIFY_TYPE_UNKNOWN;
const SVRFriendRelationNotifyType SVRFriendRelationNotifyType_MAX = FRIEND_NOTIFY_TYPE_ANS;
const int SVRFriendRelationNotifyType_ARRAYSIZE = SVRFriendRelationNotifyType_MAX + 1;

enum SVRCommonNotifyType {
  NOTIFY_MODIFYUSERINFO = 0,
  SVRCommonNotifyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SVRCommonNotifyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SVRCommonNotifyType_IsValid(int value);
const SVRCommonNotifyType SVRCommonNotifyType_MIN = NOTIFY_MODIFYUSERINFO;
const SVRCommonNotifyType SVRCommonNotifyType_MAX = NOTIFY_MODIFYUSERINFO;
const int SVRCommonNotifyType_ARRAYSIZE = SVRCommonNotifyType_MAX + 1;

// ===================================================================

class MESChat : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESChat) */ {
 public:
  MESChat();
  virtual ~MESChat();

  MESChat(const MESChat& from);

  inline MESChat& operator=(const MESChat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESChat(MESChat&& from) noexcept
    : MESChat() {
    *this = ::std::move(from);
  }

  inline MESChat& operator=(MESChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESChat* internal_default_instance() {
    return reinterpret_cast<const MESChat*>(
               &_MESChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MESChat* other);
  friend void swap(MESChat& a, MESChat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESChat* New() const final {
    return CreateMaybeMessage<MESChat>(NULL);
  }

  MESChat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESChat>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESChat& from);
  void MergeFrom(const MESChat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESChat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sContent = 7;
  void clear_scontent();
  static const int kSContentFieldNumber = 7;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // string sServiceId = 8;
  void clear_sserviceid();
  static const int kSServiceIdFieldNumber = 8;
  const ::std::string& sserviceid() const;
  void set_sserviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_sserviceid(::std::string&& value);
  #endif
  void set_sserviceid(const char* value);
  void set_sserviceid(const char* value, size_t size);
  ::std::string* mutable_sserviceid();
  ::std::string* release_sserviceid();
  void set_allocated_sserviceid(::std::string* sserviceid);

  // string sQuestionId = 9;
  void clear_squestionid();
  static const int kSQuestionIdFieldNumber = 9;
  const ::std::string& squestionid() const;
  void set_squestionid(const ::std::string& value);
  #if LANG_CXX11
  void set_squestionid(::std::string&& value);
  #endif
  void set_squestionid(const char* value);
  void set_squestionid(const char* value, size_t size);
  ::std::string* mutable_squestionid();
  ::std::string* release_squestionid();
  void set_allocated_squestionid(::std::string* squestionid);

  // string extend = 10;
  void clear_extend();
  static const int kExtendFieldNumber = 10;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint64 msgTime = 5;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 5;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // uint32 msgType = 4;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 4;
  ::google::protobuf::uint32 msgtype() const;
  void set_msgtype(::google::protobuf::uint32 value);

  // uint32 encrypt = 6;
  void clear_encrypt();
  static const int kEncryptFieldNumber = 6;
  ::google::protobuf::uint32 encrypt() const;
  void set_encrypt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.MESChat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::internal::ArenaStringPtr sserviceid_;
  ::google::protobuf::internal::ArenaStringPtr squestionid_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint64 msgtime_;
  ::google::protobuf::uint32 msgtype_;
  ::google::protobuf::uint32 encrypt_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESChatAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESChatAck) */ {
 public:
  MESChatAck();
  virtual ~MESChatAck();

  MESChatAck(const MESChatAck& from);

  inline MESChatAck& operator=(const MESChatAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESChatAck(MESChatAck&& from) noexcept
    : MESChatAck() {
    *this = ::std::move(from);
  }

  inline MESChatAck& operator=(MESChatAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESChatAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESChatAck* internal_default_instance() {
    return reinterpret_cast<const MESChatAck*>(
               &_MESChatAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MESChatAck* other);
  friend void swap(MESChatAck& a, MESChatAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESChatAck* New() const final {
    return CreateMaybeMessage<MESChatAck>(NULL);
  }

  MESChatAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESChatAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESChatAck& from);
  void MergeFrom(const MESChatAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESChatAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // uint64 sendtime = 3;
  void clear_sendtime();
  static const int kSendtimeFieldNumber = 3;
  ::google::protobuf::uint64 sendtime() const;
  void set_sendtime(::google::protobuf::uint64 value);

  // .im.ErrCode errcode = 4;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 4;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.MESChatAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::uint64 sendtime_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESChatDeliveredAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESChatDeliveredAck) */ {
 public:
  MESChatDeliveredAck();
  virtual ~MESChatDeliveredAck();

  MESChatDeliveredAck(const MESChatDeliveredAck& from);

  inline MESChatDeliveredAck& operator=(const MESChatDeliveredAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESChatDeliveredAck(MESChatDeliveredAck&& from) noexcept
    : MESChatDeliveredAck() {
    *this = ::std::move(from);
  }

  inline MESChatDeliveredAck& operator=(MESChatDeliveredAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESChatDeliveredAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESChatDeliveredAck* internal_default_instance() {
    return reinterpret_cast<const MESChatDeliveredAck*>(
               &_MESChatDeliveredAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MESChatDeliveredAck* other);
  friend void swap(MESChatDeliveredAck& a, MESChatDeliveredAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESChatDeliveredAck* New() const final {
    return CreateMaybeMessage<MESChatDeliveredAck>(NULL);
  }

  MESChatDeliveredAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESChatDeliveredAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESChatDeliveredAck& from);
  void MergeFrom(const MESChatDeliveredAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESChatDeliveredAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // @@protoc_insertion_point(class_scope:im.MESChatDeliveredAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESChatDeliveredNotificationAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESChatDeliveredNotificationAck) */ {
 public:
  MESChatDeliveredNotificationAck();
  virtual ~MESChatDeliveredNotificationAck();

  MESChatDeliveredNotificationAck(const MESChatDeliveredNotificationAck& from);

  inline MESChatDeliveredNotificationAck& operator=(const MESChatDeliveredNotificationAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESChatDeliveredNotificationAck(MESChatDeliveredNotificationAck&& from) noexcept
    : MESChatDeliveredNotificationAck() {
    *this = ::std::move(from);
  }

  inline MESChatDeliveredNotificationAck& operator=(MESChatDeliveredNotificationAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESChatDeliveredNotificationAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESChatDeliveredNotificationAck* internal_default_instance() {
    return reinterpret_cast<const MESChatDeliveredNotificationAck*>(
               &_MESChatDeliveredNotificationAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(MESChatDeliveredNotificationAck* other);
  friend void swap(MESChatDeliveredNotificationAck& a, MESChatDeliveredNotificationAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESChatDeliveredNotificationAck* New() const final {
    return CreateMaybeMessage<MESChatDeliveredNotificationAck>(NULL);
  }

  MESChatDeliveredNotificationAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESChatDeliveredNotificationAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESChatDeliveredNotificationAck& from);
  void MergeFrom(const MESChatDeliveredNotificationAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESChatDeliveredNotificationAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // @@protoc_insertion_point(class_scope:im.MESChatDeliveredNotificationAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgReadResult : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MsgReadResult) */ {
 public:
  MsgReadResult();
  virtual ~MsgReadResult();

  MsgReadResult(const MsgReadResult& from);

  inline MsgReadResult& operator=(const MsgReadResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgReadResult(MsgReadResult&& from) noexcept
    : MsgReadResult() {
    *this = ::std::move(from);
  }

  inline MsgReadResult& operator=(MsgReadResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MsgReadResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgReadResult* internal_default_instance() {
    return reinterpret_cast<const MsgReadResult*>(
               &_MsgReadResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(MsgReadResult* other);
  friend void swap(MsgReadResult& a, MsgReadResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgReadResult* New() const final {
    return CreateMaybeMessage<MsgReadResult>(NULL);
  }

  MsgReadResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgReadResult>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MsgReadResult& from);
  void MergeFrom(const MsgReadResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgReadResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sMsgId = 1;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 1;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 2;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.MsgReadResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESChatRead : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESChatRead) */ {
 public:
  MESChatRead();
  virtual ~MESChatRead();

  MESChatRead(const MESChatRead& from);

  inline MESChatRead& operator=(const MESChatRead& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESChatRead(MESChatRead&& from) noexcept
    : MESChatRead() {
    *this = ::std::move(from);
  }

  inline MESChatRead& operator=(MESChatRead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESChatRead& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESChatRead* internal_default_instance() {
    return reinterpret_cast<const MESChatRead*>(
               &_MESChatRead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(MESChatRead* other);
  friend void swap(MESChatRead& a, MESChatRead& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESChatRead* New() const final {
    return CreateMaybeMessage<MESChatRead>(NULL);
  }

  MESChatRead* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESChatRead>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESChatRead& from);
  void MergeFrom(const MESChatRead& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESChatRead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .im.MsgReadResult readResults = 4;
  int readresults_size() const;
  void clear_readresults();
  static const int kReadResultsFieldNumber = 4;
  ::im::MsgReadResult* mutable_readresults(int index);
  ::google::protobuf::RepeatedPtrField< ::im::MsgReadResult >*
      mutable_readresults();
  const ::im::MsgReadResult& readresults(int index) const;
  ::im::MsgReadResult* add_readresults();
  const ::google::protobuf::RepeatedPtrField< ::im::MsgReadResult >&
      readresults() const;

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // uint32 readReceiptOff = 5;
  void clear_readreceiptoff();
  static const int kReadReceiptOffFieldNumber = 5;
  ::google::protobuf::uint32 readreceiptoff() const;
  void set_readreceiptoff(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.MESChatRead)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::im::MsgReadResult > readresults_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::uint32 readreceiptoff_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESChatReadAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESChatReadAck) */ {
 public:
  MESChatReadAck();
  virtual ~MESChatReadAck();

  MESChatReadAck(const MESChatReadAck& from);

  inline MESChatReadAck& operator=(const MESChatReadAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESChatReadAck(MESChatReadAck&& from) noexcept
    : MESChatReadAck() {
    *this = ::std::move(from);
  }

  inline MESChatReadAck& operator=(MESChatReadAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESChatReadAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESChatReadAck* internal_default_instance() {
    return reinterpret_cast<const MESChatReadAck*>(
               &_MESChatReadAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(MESChatReadAck* other);
  friend void swap(MESChatReadAck& a, MESChatReadAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESChatReadAck* New() const final {
    return CreateMaybeMessage<MESChatReadAck>(NULL);
  }

  MESChatReadAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESChatReadAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESChatReadAck& from);
  void MergeFrom(const MESChatReadAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESChatReadAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 3;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.MESChatReadAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESChatReadDelivereAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESChatReadDelivereAck) */ {
 public:
  MESChatReadDelivereAck();
  virtual ~MESChatReadDelivereAck();

  MESChatReadDelivereAck(const MESChatReadDelivereAck& from);

  inline MESChatReadDelivereAck& operator=(const MESChatReadDelivereAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESChatReadDelivereAck(MESChatReadDelivereAck&& from) noexcept
    : MESChatReadDelivereAck() {
    *this = ::std::move(from);
  }

  inline MESChatReadDelivereAck& operator=(MESChatReadDelivereAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESChatReadDelivereAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESChatReadDelivereAck* internal_default_instance() {
    return reinterpret_cast<const MESChatReadDelivereAck*>(
               &_MESChatReadDelivereAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(MESChatReadDelivereAck* other);
  friend void swap(MESChatReadDelivereAck& a, MESChatReadDelivereAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESChatReadDelivereAck* New() const final {
    return CreateMaybeMessage<MESChatReadDelivereAck>(NULL);
  }

  MESChatReadDelivereAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESChatReadDelivereAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESChatReadDelivereAck& from);
  void MergeFrom(const MESChatReadDelivereAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESChatReadDelivereAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // @@protoc_insertion_point(class_scope:im.MESChatReadDelivereAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OfflineTotal : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.OfflineTotal) */ {
 public:
  OfflineTotal();
  virtual ~OfflineTotal();

  OfflineTotal(const OfflineTotal& from);

  inline OfflineTotal& operator=(const OfflineTotal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OfflineTotal(OfflineTotal&& from) noexcept
    : OfflineTotal() {
    *this = ::std::move(from);
  }

  inline OfflineTotal& operator=(OfflineTotal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const OfflineTotal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OfflineTotal* internal_default_instance() {
    return reinterpret_cast<const OfflineTotal*>(
               &_OfflineTotal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(OfflineTotal* other);
  friend void swap(OfflineTotal& a, OfflineTotal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OfflineTotal* New() const final {
    return CreateMaybeMessage<OfflineTotal>(NULL);
  }

  OfflineTotal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OfflineTotal>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const OfflineTotal& from);
  void MergeFrom(const OfflineTotal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OfflineTotal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 2;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 2;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 3;
  void clear_stoid();
  static const int kSToIdFieldNumber = 3;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // bytes sRecentcontent = 6;
  void clear_srecentcontent();
  static const int kSRecentcontentFieldNumber = 6;
  const ::std::string& srecentcontent() const;
  void set_srecentcontent(const ::std::string& value);
  #if LANG_CXX11
  void set_srecentcontent(::std::string&& value);
  #endif
  void set_srecentcontent(const char* value);
  void set_srecentcontent(const void* value, size_t size);
  ::std::string* mutable_srecentcontent();
  ::std::string* release_srecentcontent();
  void set_allocated_srecentcontent(::std::string* srecentcontent);

  // string sRecentMsgId = 8;
  void clear_srecentmsgid();
  static const int kSRecentMsgIdFieldNumber = 8;
  const ::std::string& srecentmsgid() const;
  void set_srecentmsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_srecentmsgid(::std::string&& value);
  #endif
  void set_srecentmsgid(const char* value);
  void set_srecentmsgid(const char* value, size_t size);
  ::std::string* mutable_srecentmsgid();
  ::std::string* release_srecentmsgid();
  void set_allocated_srecentmsgid(::std::string* srecentmsgid);

  // uint32 cmdId = 1;
  void clear_cmdid();
  static const int kCmdIdFieldNumber = 1;
  ::google::protobuf::uint32 cmdid() const;
  void set_cmdid(::google::protobuf::uint32 value);

  // int32 unreadTotal = 4;
  void clear_unreadtotal();
  static const int kUnreadTotalFieldNumber = 4;
  ::google::protobuf::int32 unreadtotal() const;
  void set_unreadtotal(::google::protobuf::int32 value);

  // uint64 recenttimestamp = 7;
  void clear_recenttimestamp();
  static const int kRecenttimestampFieldNumber = 7;
  ::google::protobuf::uint64 recenttimestamp() const;
  void set_recenttimestamp(::google::protobuf::uint64 value);

  // int32 unreadChatCount = 5;
  void clear_unreadchatcount();
  static const int kUnreadChatCountFieldNumber = 5;
  ::google::protobuf::int32 unreadchatcount() const;
  void set_unreadchatcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:im.OfflineTotal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr srecentcontent_;
  ::google::protobuf::internal::ArenaStringPtr srecentmsgid_;
  ::google::protobuf::uint32 cmdid_;
  ::google::protobuf::int32 unreadtotal_;
  ::google::protobuf::uint64 recenttimestamp_;
  ::google::protobuf::int32 unreadchatcount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESOfflineSummary : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESOfflineSummary) */ {
 public:
  MESOfflineSummary();
  virtual ~MESOfflineSummary();

  MESOfflineSummary(const MESOfflineSummary& from);

  inline MESOfflineSummary& operator=(const MESOfflineSummary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESOfflineSummary(MESOfflineSummary&& from) noexcept
    : MESOfflineSummary() {
    *this = ::std::move(from);
  }

  inline MESOfflineSummary& operator=(MESOfflineSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESOfflineSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESOfflineSummary* internal_default_instance() {
    return reinterpret_cast<const MESOfflineSummary*>(
               &_MESOfflineSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(MESOfflineSummary* other);
  friend void swap(MESOfflineSummary& a, MESOfflineSummary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESOfflineSummary* New() const final {
    return CreateMaybeMessage<MESOfflineSummary>(NULL);
  }

  MESOfflineSummary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESOfflineSummary>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESOfflineSummary& from);
  void MergeFrom(const MESOfflineSummary& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESOfflineSummary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // @@protoc_insertion_point(class_scope:im.MESOfflineSummary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESOfflineSummaryAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESOfflineSummaryAck) */ {
 public:
  MESOfflineSummaryAck();
  virtual ~MESOfflineSummaryAck();

  MESOfflineSummaryAck(const MESOfflineSummaryAck& from);

  inline MESOfflineSummaryAck& operator=(const MESOfflineSummaryAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESOfflineSummaryAck(MESOfflineSummaryAck&& from) noexcept
    : MESOfflineSummaryAck() {
    *this = ::std::move(from);
  }

  inline MESOfflineSummaryAck& operator=(MESOfflineSummaryAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESOfflineSummaryAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESOfflineSummaryAck* internal_default_instance() {
    return reinterpret_cast<const MESOfflineSummaryAck*>(
               &_MESOfflineSummaryAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(MESOfflineSummaryAck* other);
  friend void swap(MESOfflineSummaryAck& a, MESOfflineSummaryAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESOfflineSummaryAck* New() const final {
    return CreateMaybeMessage<MESOfflineSummaryAck>(NULL);
  }

  MESOfflineSummaryAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESOfflineSummaryAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESOfflineSummaryAck& from);
  void MergeFrom(const MESOfflineSummaryAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESOfflineSummaryAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .im.OfflineTotal offlineTotals = 2;
  int offlinetotals_size() const;
  void clear_offlinetotals();
  static const int kOfflineTotalsFieldNumber = 2;
  ::im::OfflineTotal* mutable_offlinetotals(int index);
  ::google::protobuf::RepeatedPtrField< ::im::OfflineTotal >*
      mutable_offlinetotals();
  const ::im::OfflineTotal& offlinetotals(int index) const;
  ::im::OfflineTotal* add_offlinetotals();
  const ::google::protobuf::RepeatedPtrField< ::im::OfflineTotal >&
      offlinetotals() const;

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // .im.ErrCode errcode = 3;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.MESOfflineSummaryAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::im::OfflineTotal > offlinetotals_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESOfflineTotal : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESOfflineTotal) */ {
 public:
  MESOfflineTotal();
  virtual ~MESOfflineTotal();

  MESOfflineTotal(const MESOfflineTotal& from);

  inline MESOfflineTotal& operator=(const MESOfflineTotal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESOfflineTotal(MESOfflineTotal&& from) noexcept
    : MESOfflineTotal() {
    *this = ::std::move(from);
  }

  inline MESOfflineTotal& operator=(MESOfflineTotal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESOfflineTotal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESOfflineTotal* internal_default_instance() {
    return reinterpret_cast<const MESOfflineTotal*>(
               &_MESOfflineTotal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(MESOfflineTotal* other);
  friend void swap(MESOfflineTotal& a, MESOfflineTotal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESOfflineTotal* New() const final {
    return CreateMaybeMessage<MESOfflineTotal>(NULL);
  }

  MESOfflineTotal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESOfflineTotal>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESOfflineTotal& from);
  void MergeFrom(const MESOfflineTotal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESOfflineTotal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 2;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 2;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 3;
  void clear_stoid();
  static const int kSToIdFieldNumber = 3;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // uint32 cmdId = 1;
  void clear_cmdid();
  static const int kCmdIdFieldNumber = 1;
  ::google::protobuf::uint32 cmdid() const;
  void set_cmdid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.MESOfflineTotal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::uint32 cmdid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESOfflineMsg : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESOfflineMsg) */ {
 public:
  MESOfflineMsg();
  virtual ~MESOfflineMsg();

  MESOfflineMsg(const MESOfflineMsg& from);

  inline MESOfflineMsg& operator=(const MESOfflineMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESOfflineMsg(MESOfflineMsg&& from) noexcept
    : MESOfflineMsg() {
    *this = ::std::move(from);
  }

  inline MESOfflineMsg& operator=(MESOfflineMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESOfflineMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESOfflineMsg* internal_default_instance() {
    return reinterpret_cast<const MESOfflineMsg*>(
               &_MESOfflineMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(MESOfflineMsg* other);
  friend void swap(MESOfflineMsg& a, MESOfflineMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESOfflineMsg* New() const final {
    return CreateMaybeMessage<MESOfflineMsg>(NULL);
  }

  MESOfflineMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESOfflineMsg>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESOfflineMsg& from);
  void MergeFrom(const MESOfflineMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESOfflineMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .im.OfflineDeliveredMsg lsMsgs = 6;
  int lsmsgs_size() const;
  void clear_lsmsgs();
  static const int kLsMsgsFieldNumber = 6;
  ::im::OfflineDeliveredMsg* mutable_lsmsgs(int index);
  ::google::protobuf::RepeatedPtrField< ::im::OfflineDeliveredMsg >*
      mutable_lsmsgs();
  const ::im::OfflineDeliveredMsg& lsmsgs(int index) const;
  ::im::OfflineDeliveredMsg* add_lsmsgs();
  const ::google::protobuf::RepeatedPtrField< ::im::OfflineDeliveredMsg >&
      lsmsgs() const;

  // string sFromId = 2;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 2;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 3;
  void clear_stoid();
  static const int kSToIdFieldNumber = 3;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 5;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 5;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // uint32 cmdId = 1;
  void clear_cmdid();
  static const int kCmdIdFieldNumber = 1;
  ::google::protobuf::uint32 cmdid() const;
  void set_cmdid(::google::protobuf::uint32 value);

  // int32 count = 4;
  void clear_count();
  static const int kCountFieldNumber = 4;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:im.MESOfflineMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::im::OfflineDeliveredMsg > lsmsgs_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::uint32 cmdid_;
  ::google::protobuf::int32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OfflineMsgData : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.OfflineMsgData) */ {
 public:
  OfflineMsgData();
  virtual ~OfflineMsgData();

  OfflineMsgData(const OfflineMsgData& from);

  inline OfflineMsgData& operator=(const OfflineMsgData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OfflineMsgData(OfflineMsgData&& from) noexcept
    : OfflineMsgData() {
    *this = ::std::move(from);
  }

  inline OfflineMsgData& operator=(OfflineMsgData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const OfflineMsgData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OfflineMsgData* internal_default_instance() {
    return reinterpret_cast<const OfflineMsgData*>(
               &_OfflineMsgData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(OfflineMsgData* other);
  friend void swap(OfflineMsgData& a, OfflineMsgData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OfflineMsgData* New() const final {
    return CreateMaybeMessage<OfflineMsgData>(NULL);
  }

  OfflineMsgData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OfflineMsgData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const OfflineMsgData& from);
  void MergeFrom(const OfflineMsgData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OfflineMsgData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes sMsgData = 2;
  void clear_smsgdata();
  static const int kSMsgDataFieldNumber = 2;
  const ::std::string& smsgdata() const;
  void set_smsgdata(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgdata(::std::string&& value);
  #endif
  void set_smsgdata(const char* value);
  void set_smsgdata(const void* value, size_t size);
  ::std::string* mutable_smsgdata();
  ::std::string* release_smsgdata();
  void set_allocated_smsgdata(::std::string* smsgdata);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sFromId = 4;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 4;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // uint32 cmdId = 1;
  void clear_cmdid();
  static const int kCmdIdFieldNumber = 1;
  ::google::protobuf::uint32 cmdid() const;
  void set_cmdid(::google::protobuf::uint32 value);

  // uint32 status = 5;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // uint64 uCreateTime = 6;
  void clear_ucreatetime();
  static const int kUCreateTimeFieldNumber = 6;
  ::google::protobuf::uint64 ucreatetime() const;
  void set_ucreatetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:im.OfflineMsgData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr smsgdata_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::uint32 cmdid_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint64 ucreatetime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESOfflineMsgAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESOfflineMsgAck) */ {
 public:
  MESOfflineMsgAck();
  virtual ~MESOfflineMsgAck();

  MESOfflineMsgAck(const MESOfflineMsgAck& from);

  inline MESOfflineMsgAck& operator=(const MESOfflineMsgAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESOfflineMsgAck(MESOfflineMsgAck&& from) noexcept
    : MESOfflineMsgAck() {
    *this = ::std::move(from);
  }

  inline MESOfflineMsgAck& operator=(MESOfflineMsgAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESOfflineMsgAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESOfflineMsgAck* internal_default_instance() {
    return reinterpret_cast<const MESOfflineMsgAck*>(
               &_MESOfflineMsgAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(MESOfflineMsgAck* other);
  friend void swap(MESOfflineMsgAck& a, MESOfflineMsgAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESOfflineMsgAck* New() const final {
    return CreateMaybeMessage<MESOfflineMsgAck>(NULL);
  }

  MESOfflineMsgAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESOfflineMsgAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESOfflineMsgAck& from);
  void MergeFrom(const MESOfflineMsgAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESOfflineMsgAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .im.OfflineMsgData msglist = 13;
  int msglist_size() const;
  void clear_msglist();
  static const int kMsglistFieldNumber = 13;
  ::im::OfflineMsgData* mutable_msglist(int index);
  ::google::protobuf::RepeatedPtrField< ::im::OfflineMsgData >*
      mutable_msglist();
  const ::im::OfflineMsgData& msglist(int index) const;
  ::im::OfflineMsgData* add_msglist();
  const ::google::protobuf::RepeatedPtrField< ::im::OfflineMsgData >&
      msglist() const;

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 5;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 5;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // uint64 msgTime = 6;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 6;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .im.ErrCode errcode = 4;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 4;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // uint32 msgTotal = 14;
  void clear_msgtotal();
  static const int kMsgTotalFieldNumber = 14;
  ::google::protobuf::uint32 msgtotal() const;
  void set_msgtotal(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.MESOfflineMsgAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::im::OfflineMsgData > msglist_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::uint64 msgtime_;
  int errcode_;
  ::google::protobuf::uint32 msgtotal_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OfflineDeliveredMsg : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.OfflineDeliveredMsg) */ {
 public:
  OfflineDeliveredMsg();
  virtual ~OfflineDeliveredMsg();

  OfflineDeliveredMsg(const OfflineDeliveredMsg& from);

  inline OfflineDeliveredMsg& operator=(const OfflineDeliveredMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OfflineDeliveredMsg(OfflineDeliveredMsg&& from) noexcept
    : OfflineDeliveredMsg() {
    *this = ::std::move(from);
  }

  inline OfflineDeliveredMsg& operator=(OfflineDeliveredMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const OfflineDeliveredMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OfflineDeliveredMsg* internal_default_instance() {
    return reinterpret_cast<const OfflineDeliveredMsg*>(
               &_OfflineDeliveredMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(OfflineDeliveredMsg* other);
  friend void swap(OfflineDeliveredMsg& a, OfflineDeliveredMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OfflineDeliveredMsg* New() const final {
    return CreateMaybeMessage<OfflineDeliveredMsg>(NULL);
  }

  OfflineDeliveredMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OfflineDeliveredMsg>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const OfflineDeliveredMsg& from);
  void MergeFrom(const OfflineDeliveredMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OfflineDeliveredMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 2;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 2;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 3;
  void clear_stoid();
  static const int kSToIdFieldNumber = 3;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 4;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 4;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // uint32 cmdId = 1;
  void clear_cmdid();
  static const int kCmdIdFieldNumber = 1;
  ::google::protobuf::uint32 cmdid() const;
  void set_cmdid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.OfflineDeliveredMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::uint32 cmdid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESOfflineMsgDelivered : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESOfflineMsgDelivered) */ {
 public:
  MESOfflineMsgDelivered();
  virtual ~MESOfflineMsgDelivered();

  MESOfflineMsgDelivered(const MESOfflineMsgDelivered& from);

  inline MESOfflineMsgDelivered& operator=(const MESOfflineMsgDelivered& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESOfflineMsgDelivered(MESOfflineMsgDelivered&& from) noexcept
    : MESOfflineMsgDelivered() {
    *this = ::std::move(from);
  }

  inline MESOfflineMsgDelivered& operator=(MESOfflineMsgDelivered&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESOfflineMsgDelivered& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESOfflineMsgDelivered* internal_default_instance() {
    return reinterpret_cast<const MESOfflineMsgDelivered*>(
               &_MESOfflineMsgDelivered_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(MESOfflineMsgDelivered* other);
  friend void swap(MESOfflineMsgDelivered& a, MESOfflineMsgDelivered& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESOfflineMsgDelivered* New() const final {
    return CreateMaybeMessage<MESOfflineMsgDelivered>(NULL);
  }

  MESOfflineMsgDelivered* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESOfflineMsgDelivered>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESOfflineMsgDelivered& from);
  void MergeFrom(const MESOfflineMsgDelivered& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESOfflineMsgDelivered* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .im.OfflineDeliveredMsg lsMsgs = 4;
  int lsmsgs_size() const;
  void clear_lsmsgs();
  static const int kLsMsgsFieldNumber = 4;
  ::im::OfflineDeliveredMsg* mutable_lsmsgs(int index);
  ::google::protobuf::RepeatedPtrField< ::im::OfflineDeliveredMsg >*
      mutable_lsmsgs();
  const ::im::OfflineDeliveredMsg& lsmsgs(int index) const;
  ::im::OfflineDeliveredMsg* add_lsmsgs();
  const ::google::protobuf::RepeatedPtrField< ::im::OfflineDeliveredMsg >&
      lsmsgs() const;

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // @@protoc_insertion_point(class_scope:im.MESOfflineMsgDelivered)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::im::OfflineDeliveredMsg > lsmsgs_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESOfflineMsgDelivereddAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESOfflineMsgDelivereddAck) */ {
 public:
  MESOfflineMsgDelivereddAck();
  virtual ~MESOfflineMsgDelivereddAck();

  MESOfflineMsgDelivereddAck(const MESOfflineMsgDelivereddAck& from);

  inline MESOfflineMsgDelivereddAck& operator=(const MESOfflineMsgDelivereddAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESOfflineMsgDelivereddAck(MESOfflineMsgDelivereddAck&& from) noexcept
    : MESOfflineMsgDelivereddAck() {
    *this = ::std::move(from);
  }

  inline MESOfflineMsgDelivereddAck& operator=(MESOfflineMsgDelivereddAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESOfflineMsgDelivereddAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESOfflineMsgDelivereddAck* internal_default_instance() {
    return reinterpret_cast<const MESOfflineMsgDelivereddAck*>(
               &_MESOfflineMsgDelivereddAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(MESOfflineMsgDelivereddAck* other);
  friend void swap(MESOfflineMsgDelivereddAck& a, MESOfflineMsgDelivereddAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESOfflineMsgDelivereddAck* New() const final {
    return CreateMaybeMessage<MESOfflineMsgDelivereddAck>(NULL);
  }

  MESOfflineMsgDelivereddAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESOfflineMsgDelivereddAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESOfflineMsgDelivereddAck& from);
  void MergeFrom(const MESOfflineMsgDelivereddAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESOfflineMsgDelivereddAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 3;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.MESOfflineMsgDelivereddAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESOfflineMsgDeliveredNotifyAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESOfflineMsgDeliveredNotifyAck) */ {
 public:
  MESOfflineMsgDeliveredNotifyAck();
  virtual ~MESOfflineMsgDeliveredNotifyAck();

  MESOfflineMsgDeliveredNotifyAck(const MESOfflineMsgDeliveredNotifyAck& from);

  inline MESOfflineMsgDeliveredNotifyAck& operator=(const MESOfflineMsgDeliveredNotifyAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESOfflineMsgDeliveredNotifyAck(MESOfflineMsgDeliveredNotifyAck&& from) noexcept
    : MESOfflineMsgDeliveredNotifyAck() {
    *this = ::std::move(from);
  }

  inline MESOfflineMsgDeliveredNotifyAck& operator=(MESOfflineMsgDeliveredNotifyAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESOfflineMsgDeliveredNotifyAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESOfflineMsgDeliveredNotifyAck* internal_default_instance() {
    return reinterpret_cast<const MESOfflineMsgDeliveredNotifyAck*>(
               &_MESOfflineMsgDeliveredNotifyAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(MESOfflineMsgDeliveredNotifyAck* other);
  friend void swap(MESOfflineMsgDeliveredNotifyAck& a, MESOfflineMsgDeliveredNotifyAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESOfflineMsgDeliveredNotifyAck* New() const final {
    return CreateMaybeMessage<MESOfflineMsgDeliveredNotifyAck>(NULL);
  }

  MESOfflineMsgDeliveredNotifyAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESOfflineMsgDeliveredNotifyAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESOfflineMsgDeliveredNotifyAck& from);
  void MergeFrom(const MESOfflineMsgDeliveredNotifyAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESOfflineMsgDeliveredNotifyAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .im.OfflineDeliveredMsg lsMsgs = 3;
  int lsmsgs_size() const;
  void clear_lsmsgs();
  static const int kLsMsgsFieldNumber = 3;
  ::im::OfflineDeliveredMsg* mutable_lsmsgs(int index);
  ::google::protobuf::RepeatedPtrField< ::im::OfflineDeliveredMsg >*
      mutable_lsmsgs();
  const ::im::OfflineDeliveredMsg& lsmsgs(int index) const;
  ::im::OfflineDeliveredMsg* add_lsmsgs();
  const ::google::protobuf::RepeatedPtrField< ::im::OfflineDeliveredMsg >&
      lsmsgs() const;

  // string sMsgId = 1;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 1;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sFromId = 2;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 2;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // @@protoc_insertion_point(class_scope:im.MESOfflineMsgDeliveredNotifyAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::im::OfflineDeliveredMsg > lsmsgs_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESAddFriend : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESAddFriend) */ {
 public:
  MESAddFriend();
  virtual ~MESAddFriend();

  MESAddFriend(const MESAddFriend& from);

  inline MESAddFriend& operator=(const MESAddFriend& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESAddFriend(MESAddFriend&& from) noexcept
    : MESAddFriend() {
    *this = ::std::move(from);
  }

  inline MESAddFriend& operator=(MESAddFriend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESAddFriend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESAddFriend* internal_default_instance() {
    return reinterpret_cast<const MESAddFriend*>(
               &_MESAddFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(MESAddFriend* other);
  friend void swap(MESAddFriend& a, MESAddFriend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESAddFriend* New() const final {
    return CreateMaybeMessage<MESAddFriend>(NULL);
  }

  MESAddFriend* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESAddFriend>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESAddFriend& from);
  void MergeFrom(const MESAddFriend& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESAddFriend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sDesc = 4;
  void clear_sdesc();
  static const int kSDescFieldNumber = 4;
  const ::std::string& sdesc() const;
  void set_sdesc(const ::std::string& value);
  #if LANG_CXX11
  void set_sdesc(::std::string&& value);
  #endif
  void set_sdesc(const char* value);
  void set_sdesc(const char* value, size_t size);
  ::std::string* mutable_sdesc();
  ::std::string* release_sdesc();
  void set_allocated_sdesc(::std::string* sdesc);

  // string sMemoName = 5;
  void clear_smemoname();
  static const int kSMemoNameFieldNumber = 5;
  const ::std::string& smemoname() const;
  void set_smemoname(const ::std::string& value);
  #if LANG_CXX11
  void set_smemoname(::std::string&& value);
  #endif
  void set_smemoname(const char* value);
  void set_smemoname(const char* value, size_t size);
  ::std::string* mutable_smemoname();
  ::std::string* release_smemoname();
  void set_allocated_smemoname(::std::string* smemoname);

  // string sSelfIntroduce = 7;
  void clear_sselfintroduce();
  static const int kSSelfIntroduceFieldNumber = 7;
  const ::std::string& sselfintroduce() const;
  void set_sselfintroduce(const ::std::string& value);
  #if LANG_CXX11
  void set_sselfintroduce(::std::string&& value);
  #endif
  void set_sselfintroduce(const char* value);
  void set_sselfintroduce(const char* value, size_t size);
  ::std::string* mutable_sselfintroduce();
  ::std::string* release_sselfintroduce();
  void set_allocated_sselfintroduce(::std::string* sselfintroduce);

  // string extend = 9;
  void clear_extend();
  static const int kExtendFieldNumber = 9;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint64 msgTime = 8;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 8;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // uint32 packetId = 6;
  void clear_packetid();
  static const int kPacketIdFieldNumber = 6;
  ::google::protobuf::uint32 packetid() const;
  void set_packetid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.MESAddFriend)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr sdesc_;
  ::google::protobuf::internal::ArenaStringPtr smemoname_;
  ::google::protobuf::internal::ArenaStringPtr sselfintroduce_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint64 msgtime_;
  ::google::protobuf::uint32 packetid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESAddFriendAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESAddFriendAck) */ {
 public:
  MESAddFriendAck();
  virtual ~MESAddFriendAck();

  MESAddFriendAck(const MESAddFriendAck& from);

  inline MESAddFriendAck& operator=(const MESAddFriendAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESAddFriendAck(MESAddFriendAck&& from) noexcept
    : MESAddFriendAck() {
    *this = ::std::move(from);
  }

  inline MESAddFriendAck& operator=(MESAddFriendAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESAddFriendAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESAddFriendAck* internal_default_instance() {
    return reinterpret_cast<const MESAddFriendAck*>(
               &_MESAddFriendAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(MESAddFriendAck* other);
  friend void swap(MESAddFriendAck& a, MESAddFriendAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESAddFriendAck* New() const final {
    return CreateMaybeMessage<MESAddFriendAck>(NULL);
  }

  MESAddFriendAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESAddFriendAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESAddFriendAck& from);
  void MergeFrom(const MESAddFriendAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESAddFriendAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 3;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.MESAddFriendAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESAddFriendDeliverAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESAddFriendDeliverAck) */ {
 public:
  MESAddFriendDeliverAck();
  virtual ~MESAddFriendDeliverAck();

  MESAddFriendDeliverAck(const MESAddFriendDeliverAck& from);

  inline MESAddFriendDeliverAck& operator=(const MESAddFriendDeliverAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESAddFriendDeliverAck(MESAddFriendDeliverAck&& from) noexcept
    : MESAddFriendDeliverAck() {
    *this = ::std::move(from);
  }

  inline MESAddFriendDeliverAck& operator=(MESAddFriendDeliverAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESAddFriendDeliverAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESAddFriendDeliverAck* internal_default_instance() {
    return reinterpret_cast<const MESAddFriendDeliverAck*>(
               &_MESAddFriendDeliverAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(MESAddFriendDeliverAck* other);
  friend void swap(MESAddFriendDeliverAck& a, MESAddFriendDeliverAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESAddFriendDeliverAck* New() const final {
    return CreateMaybeMessage<MESAddFriendDeliverAck>(NULL);
  }

  MESAddFriendDeliverAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESAddFriendDeliverAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESAddFriendDeliverAck& from);
  void MergeFrom(const MESAddFriendDeliverAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESAddFriendDeliverAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // @@protoc_insertion_point(class_scope:im.MESAddFriendDeliverAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESAddFriendAns : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESAddFriendAns) */ {
 public:
  MESAddFriendAns();
  virtual ~MESAddFriendAns();

  MESAddFriendAns(const MESAddFriendAns& from);

  inline MESAddFriendAns& operator=(const MESAddFriendAns& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESAddFriendAns(MESAddFriendAns&& from) noexcept
    : MESAddFriendAns() {
    *this = ::std::move(from);
  }

  inline MESAddFriendAns& operator=(MESAddFriendAns&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESAddFriendAns& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESAddFriendAns* internal_default_instance() {
    return reinterpret_cast<const MESAddFriendAns*>(
               &_MESAddFriendAns_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(MESAddFriendAns* other);
  friend void swap(MESAddFriendAns& a, MESAddFriendAns& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESAddFriendAns* New() const final {
    return CreateMaybeMessage<MESAddFriendAns>(NULL);
  }

  MESAddFriendAns* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESAddFriendAns>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESAddFriendAns& from);
  void MergeFrom(const MESAddFriendAns& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESAddFriendAns* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sAns = 4;
  void clear_sans();
  static const int kSAnsFieldNumber = 4;
  const ::std::string& sans() const;
  void set_sans(const ::std::string& value);
  #if LANG_CXX11
  void set_sans(::std::string&& value);
  #endif
  void set_sans(const char* value);
  void set_sans(const char* value, size_t size);
  ::std::string* mutable_sans();
  ::std::string* release_sans();
  void set_allocated_sans(::std::string* sans);

  // string sMemoName = 6;
  void clear_smemoname();
  static const int kSMemoNameFieldNumber = 6;
  const ::std::string& smemoname() const;
  void set_smemoname(const ::std::string& value);
  #if LANG_CXX11
  void set_smemoname(::std::string&& value);
  #endif
  void set_smemoname(const char* value);
  void set_smemoname(const char* value, size_t size);
  ::std::string* mutable_smemoname();
  ::std::string* release_smemoname();
  void set_allocated_smemoname(::std::string* smemoname);

  // string extend = 9;
  void clear_extend();
  static const int kExtendFieldNumber = 9;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // .im.ErrCode errcode = 5;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 5;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // uint32 packetId = 7;
  void clear_packetid();
  static const int kPacketIdFieldNumber = 7;
  ::google::protobuf::uint32 packetid() const;
  void set_packetid(::google::protobuf::uint32 value);

  // uint64 msgTime = 8;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 8;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:im.MESAddFriendAns)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr sans_;
  ::google::protobuf::internal::ArenaStringPtr smemoname_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  int errcode_;
  ::google::protobuf::uint32 packetid_;
  ::google::protobuf::uint64 msgtime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESAddFriendAnsAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESAddFriendAnsAck) */ {
 public:
  MESAddFriendAnsAck();
  virtual ~MESAddFriendAnsAck();

  MESAddFriendAnsAck(const MESAddFriendAnsAck& from);

  inline MESAddFriendAnsAck& operator=(const MESAddFriendAnsAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESAddFriendAnsAck(MESAddFriendAnsAck&& from) noexcept
    : MESAddFriendAnsAck() {
    *this = ::std::move(from);
  }

  inline MESAddFriendAnsAck& operator=(MESAddFriendAnsAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESAddFriendAnsAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESAddFriendAnsAck* internal_default_instance() {
    return reinterpret_cast<const MESAddFriendAnsAck*>(
               &_MESAddFriendAnsAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(MESAddFriendAnsAck* other);
  friend void swap(MESAddFriendAnsAck& a, MESAddFriendAnsAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESAddFriendAnsAck* New() const final {
    return CreateMaybeMessage<MESAddFriendAnsAck>(NULL);
  }

  MESAddFriendAnsAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESAddFriendAnsAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESAddFriendAnsAck& from);
  void MergeFrom(const MESAddFriendAnsAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESAddFriendAnsAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 3;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.MESAddFriendAnsAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESAddFriendAnsDeliverACK : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESAddFriendAnsDeliverACK) */ {
 public:
  MESAddFriendAnsDeliverACK();
  virtual ~MESAddFriendAnsDeliverACK();

  MESAddFriendAnsDeliverACK(const MESAddFriendAnsDeliverACK& from);

  inline MESAddFriendAnsDeliverACK& operator=(const MESAddFriendAnsDeliverACK& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESAddFriendAnsDeliverACK(MESAddFriendAnsDeliverACK&& from) noexcept
    : MESAddFriendAnsDeliverACK() {
    *this = ::std::move(from);
  }

  inline MESAddFriendAnsDeliverACK& operator=(MESAddFriendAnsDeliverACK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESAddFriendAnsDeliverACK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESAddFriendAnsDeliverACK* internal_default_instance() {
    return reinterpret_cast<const MESAddFriendAnsDeliverACK*>(
               &_MESAddFriendAnsDeliverACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(MESAddFriendAnsDeliverACK* other);
  friend void swap(MESAddFriendAnsDeliverACK& a, MESAddFriendAnsDeliverACK& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESAddFriendAnsDeliverACK* New() const final {
    return CreateMaybeMessage<MESAddFriendAnsDeliverACK>(NULL);
  }

  MESAddFriendAnsDeliverACK* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESAddFriendAnsDeliverACK>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESAddFriendAnsDeliverACK& from);
  void MergeFrom(const MESAddFriendAnsDeliverACK& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESAddFriendAnsDeliverACK* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // @@protoc_insertion_point(class_scope:im.MESAddFriendAnsDeliverACK)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESDelFriend : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESDelFriend) */ {
 public:
  MESDelFriend();
  virtual ~MESDelFriend();

  MESDelFriend(const MESDelFriend& from);

  inline MESDelFriend& operator=(const MESDelFriend& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESDelFriend(MESDelFriend&& from) noexcept
    : MESDelFriend() {
    *this = ::std::move(from);
  }

  inline MESDelFriend& operator=(MESDelFriend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESDelFriend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESDelFriend* internal_default_instance() {
    return reinterpret_cast<const MESDelFriend*>(
               &_MESDelFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(MESDelFriend* other);
  friend void swap(MESDelFriend& a, MESDelFriend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESDelFriend* New() const final {
    return CreateMaybeMessage<MESDelFriend>(NULL);
  }

  MESDelFriend* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESDelFriend>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESDelFriend& from);
  void MergeFrom(const MESDelFriend& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESDelFriend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // @@protoc_insertion_point(class_scope:im.MESDelFriend)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESDelFriendAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESDelFriendAck) */ {
 public:
  MESDelFriendAck();
  virtual ~MESDelFriendAck();

  MESDelFriendAck(const MESDelFriendAck& from);

  inline MESDelFriendAck& operator=(const MESDelFriendAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESDelFriendAck(MESDelFriendAck&& from) noexcept
    : MESDelFriendAck() {
    *this = ::std::move(from);
  }

  inline MESDelFriendAck& operator=(MESDelFriendAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESDelFriendAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESDelFriendAck* internal_default_instance() {
    return reinterpret_cast<const MESDelFriendAck*>(
               &_MESDelFriendAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(MESDelFriendAck* other);
  friend void swap(MESDelFriendAck& a, MESDelFriendAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESDelFriendAck* New() const final {
    return CreateMaybeMessage<MESDelFriendAck>(NULL);
  }

  MESDelFriendAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESDelFriendAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESDelFriendAck& from);
  void MergeFrom(const MESDelFriendAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESDelFriendAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 3;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.MESDelFriendAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESIncBlacklist : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESIncBlacklist) */ {
 public:
  MESIncBlacklist();
  virtual ~MESIncBlacklist();

  MESIncBlacklist(const MESIncBlacklist& from);

  inline MESIncBlacklist& operator=(const MESIncBlacklist& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESIncBlacklist(MESIncBlacklist&& from) noexcept
    : MESIncBlacklist() {
    *this = ::std::move(from);
  }

  inline MESIncBlacklist& operator=(MESIncBlacklist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESIncBlacklist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESIncBlacklist* internal_default_instance() {
    return reinterpret_cast<const MESIncBlacklist*>(
               &_MESIncBlacklist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(MESIncBlacklist* other);
  friend void swap(MESIncBlacklist& a, MESIncBlacklist& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESIncBlacklist* New() const final {
    return CreateMaybeMessage<MESIncBlacklist>(NULL);
  }

  MESIncBlacklist* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESIncBlacklist>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESIncBlacklist& from);
  void MergeFrom(const MESIncBlacklist& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESIncBlacklist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // @@protoc_insertion_point(class_scope:im.MESIncBlacklist)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESIncBlacklistAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESIncBlacklistAck) */ {
 public:
  MESIncBlacklistAck();
  virtual ~MESIncBlacklistAck();

  MESIncBlacklistAck(const MESIncBlacklistAck& from);

  inline MESIncBlacklistAck& operator=(const MESIncBlacklistAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESIncBlacklistAck(MESIncBlacklistAck&& from) noexcept
    : MESIncBlacklistAck() {
    *this = ::std::move(from);
  }

  inline MESIncBlacklistAck& operator=(MESIncBlacklistAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESIncBlacklistAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESIncBlacklistAck* internal_default_instance() {
    return reinterpret_cast<const MESIncBlacklistAck*>(
               &_MESIncBlacklistAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(MESIncBlacklistAck* other);
  friend void swap(MESIncBlacklistAck& a, MESIncBlacklistAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESIncBlacklistAck* New() const final {
    return CreateMaybeMessage<MESIncBlacklistAck>(NULL);
  }

  MESIncBlacklistAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESIncBlacklistAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESIncBlacklistAck& from);
  void MergeFrom(const MESIncBlacklistAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESIncBlacklistAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 3;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.MESIncBlacklistAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESDecBlacklist : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESDecBlacklist) */ {
 public:
  MESDecBlacklist();
  virtual ~MESDecBlacklist();

  MESDecBlacklist(const MESDecBlacklist& from);

  inline MESDecBlacklist& operator=(const MESDecBlacklist& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESDecBlacklist(MESDecBlacklist&& from) noexcept
    : MESDecBlacklist() {
    *this = ::std::move(from);
  }

  inline MESDecBlacklist& operator=(MESDecBlacklist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESDecBlacklist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESDecBlacklist* internal_default_instance() {
    return reinterpret_cast<const MESDecBlacklist*>(
               &_MESDecBlacklist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(MESDecBlacklist* other);
  friend void swap(MESDecBlacklist& a, MESDecBlacklist& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESDecBlacklist* New() const final {
    return CreateMaybeMessage<MESDecBlacklist>(NULL);
  }

  MESDecBlacklist* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESDecBlacklist>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESDecBlacklist& from);
  void MergeFrom(const MESDecBlacklist& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESDecBlacklist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // @@protoc_insertion_point(class_scope:im.MESDecBlacklist)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESDecBlacklistAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESDecBlacklistAck) */ {
 public:
  MESDecBlacklistAck();
  virtual ~MESDecBlacklistAck();

  MESDecBlacklistAck(const MESDecBlacklistAck& from);

  inline MESDecBlacklistAck& operator=(const MESDecBlacklistAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESDecBlacklistAck(MESDecBlacklistAck&& from) noexcept
    : MESDecBlacklistAck() {
    *this = ::std::move(from);
  }

  inline MESDecBlacklistAck& operator=(MESDecBlacklistAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESDecBlacklistAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESDecBlacklistAck* internal_default_instance() {
    return reinterpret_cast<const MESDecBlacklistAck*>(
               &_MESDecBlacklistAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(MESDecBlacklistAck* other);
  friend void swap(MESDecBlacklistAck& a, MESDecBlacklistAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESDecBlacklistAck* New() const final {
    return CreateMaybeMessage<MESDecBlacklistAck>(NULL);
  }

  MESDecBlacklistAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESDecBlacklistAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESDecBlacklistAck& from);
  void MergeFrom(const MESDecBlacklistAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESDecBlacklistAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 3;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.MESDecBlacklistAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESJoinGrp : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESJoinGrp) */ {
 public:
  MESJoinGrp();
  virtual ~MESJoinGrp();

  MESJoinGrp(const MESJoinGrp& from);

  inline MESJoinGrp& operator=(const MESJoinGrp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESJoinGrp(MESJoinGrp&& from) noexcept
    : MESJoinGrp() {
    *this = ::std::move(from);
  }

  inline MESJoinGrp& operator=(MESJoinGrp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESJoinGrp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESJoinGrp* internal_default_instance() {
    return reinterpret_cast<const MESJoinGrp*>(
               &_MESJoinGrp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(MESJoinGrp* other);
  friend void swap(MESJoinGrp& a, MESJoinGrp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESJoinGrp* New() const final {
    return CreateMaybeMessage<MESJoinGrp>(NULL);
  }

  MESJoinGrp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESJoinGrp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESJoinGrp& from);
  void MergeFrom(const MESJoinGrp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESJoinGrp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sGrpId = 3;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 3;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 4;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 4;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sSelfIntroduce = 6;
  void clear_sselfintroduce();
  static const int kSSelfIntroduceFieldNumber = 6;
  const ::std::string& sselfintroduce() const;
  void set_sselfintroduce(const ::std::string& value);
  #if LANG_CXX11
  void set_sselfintroduce(::std::string&& value);
  #endif
  void set_sselfintroduce(const char* value);
  void set_sselfintroduce(const char* value, size_t size);
  ::std::string* mutable_sselfintroduce();
  ::std::string* release_sselfintroduce();
  void set_allocated_sselfintroduce(::std::string* sselfintroduce);

  // string sDesc = 7;
  void clear_sdesc();
  static const int kSDescFieldNumber = 7;
  const ::std::string& sdesc() const;
  void set_sdesc(const ::std::string& value);
  #if LANG_CXX11
  void set_sdesc(::std::string&& value);
  #endif
  void set_sdesc(const char* value);
  void set_sdesc(const char* value, size_t size);
  ::std::string* mutable_sdesc();
  ::std::string* release_sdesc();
  void set_allocated_sdesc(::std::string* sdesc);

  // string extend = 9;
  void clear_extend();
  static const int kExtendFieldNumber = 9;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint64 msgTime = 8;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 8;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // uint32 reqType = 5;
  void clear_reqtype();
  static const int kReqTypeFieldNumber = 5;
  ::google::protobuf::uint32 reqtype() const;
  void set_reqtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.MESJoinGrp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr sselfintroduce_;
  ::google::protobuf::internal::ArenaStringPtr sdesc_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint64 msgtime_;
  ::google::protobuf::uint32 reqtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESJoinGrpAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESJoinGrpAck) */ {
 public:
  MESJoinGrpAck();
  virtual ~MESJoinGrpAck();

  MESJoinGrpAck(const MESJoinGrpAck& from);

  inline MESJoinGrpAck& operator=(const MESJoinGrpAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESJoinGrpAck(MESJoinGrpAck&& from) noexcept
    : MESJoinGrpAck() {
    *this = ::std::move(from);
  }

  inline MESJoinGrpAck& operator=(MESJoinGrpAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESJoinGrpAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESJoinGrpAck* internal_default_instance() {
    return reinterpret_cast<const MESJoinGrpAck*>(
               &_MESJoinGrpAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(MESJoinGrpAck* other);
  friend void swap(MESJoinGrpAck& a, MESJoinGrpAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESJoinGrpAck* New() const final {
    return CreateMaybeMessage<MESJoinGrpAck>(NULL);
  }

  MESJoinGrpAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESJoinGrpAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESJoinGrpAck& from);
  void MergeFrom(const MESJoinGrpAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESJoinGrpAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sGrpId = 2;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 2;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 4;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 4;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.MESJoinGrpAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESJoinGrpDeliverAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESJoinGrpDeliverAck) */ {
 public:
  MESJoinGrpDeliverAck();
  virtual ~MESJoinGrpDeliverAck();

  MESJoinGrpDeliverAck(const MESJoinGrpDeliverAck& from);

  inline MESJoinGrpDeliverAck& operator=(const MESJoinGrpDeliverAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESJoinGrpDeliverAck(MESJoinGrpDeliverAck&& from) noexcept
    : MESJoinGrpDeliverAck() {
    *this = ::std::move(from);
  }

  inline MESJoinGrpDeliverAck& operator=(MESJoinGrpDeliverAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESJoinGrpDeliverAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESJoinGrpDeliverAck* internal_default_instance() {
    return reinterpret_cast<const MESJoinGrpDeliverAck*>(
               &_MESJoinGrpDeliverAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(MESJoinGrpDeliverAck* other);
  friend void swap(MESJoinGrpDeliverAck& a, MESJoinGrpDeliverAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESJoinGrpDeliverAck* New() const final {
    return CreateMaybeMessage<MESJoinGrpDeliverAck>(NULL);
  }

  MESJoinGrpDeliverAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESJoinGrpDeliverAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESJoinGrpDeliverAck& from);
  void MergeFrom(const MESJoinGrpDeliverAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESJoinGrpDeliverAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sGrpId = 2;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 2;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // @@protoc_insertion_point(class_scope:im.MESJoinGrpDeliverAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserKey : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.UserKey) */ {
 public:
  UserKey();
  virtual ~UserKey();

  UserKey(const UserKey& from);

  inline UserKey& operator=(const UserKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserKey(UserKey&& from) noexcept
    : UserKey() {
    *this = ::std::move(from);
  }

  inline UserKey& operator=(UserKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const UserKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserKey* internal_default_instance() {
    return reinterpret_cast<const UserKey*>(
               &_UserKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(UserKey* other);
  friend void swap(UserKey& a, UserKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserKey* New() const final {
    return CreateMaybeMessage<UserKey>(NULL);
  }

  UserKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserKey>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const UserKey& from);
  void MergeFrom(const UserKey& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sKey = 2;
  void clear_skey();
  static const int kSKeyFieldNumber = 2;
  const ::std::string& skey() const;
  void set_skey(const ::std::string& value);
  #if LANG_CXX11
  void set_skey(::std::string&& value);
  #endif
  void set_skey(const char* value);
  void set_skey(const char* value, size_t size);
  ::std::string* mutable_skey();
  ::std::string* release_skey();
  void set_allocated_skey(::std::string* skey);

  // @@protoc_insertion_point(class_scope:im.UserKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr skey_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESExchangeKey : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESExchangeKey) */ {
 public:
  MESExchangeKey();
  virtual ~MESExchangeKey();

  MESExchangeKey(const MESExchangeKey& from);

  inline MESExchangeKey& operator=(const MESExchangeKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESExchangeKey(MESExchangeKey&& from) noexcept
    : MESExchangeKey() {
    *this = ::std::move(from);
  }

  inline MESExchangeKey& operator=(MESExchangeKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESExchangeKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESExchangeKey* internal_default_instance() {
    return reinterpret_cast<const MESExchangeKey*>(
               &_MESExchangeKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(MESExchangeKey* other);
  friend void swap(MESExchangeKey& a, MESExchangeKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESExchangeKey* New() const final {
    return CreateMaybeMessage<MESExchangeKey>(NULL);
  }

  MESExchangeKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESExchangeKey>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESExchangeKey& from);
  void MergeFrom(const MESExchangeKey& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESExchangeKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .im.UserKey lsUserKeys = 12;
  int lsuserkeys_size() const;
  void clear_lsuserkeys();
  static const int kLsUserKeysFieldNumber = 12;
  ::im::UserKey* mutable_lsuserkeys(int index);
  ::google::protobuf::RepeatedPtrField< ::im::UserKey >*
      mutable_lsuserkeys();
  const ::im::UserKey& lsuserkeys(int index) const;
  ::im::UserKey* add_lsuserkeys();
  const ::google::protobuf::RepeatedPtrField< ::im::UserKey >&
      lsuserkeys() const;

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sGrpId = 3;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 3;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 4;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 4;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sOprUserId = 7;
  void clear_sopruserid();
  static const int kSOprUserIdFieldNumber = 7;
  const ::std::string& sopruserid() const;
  void set_sopruserid(const ::std::string& value);
  #if LANG_CXX11
  void set_sopruserid(::std::string&& value);
  #endif
  void set_sopruserid(const char* value);
  void set_sopruserid(const char* value, size_t size);
  ::std::string* mutable_sopruserid();
  ::std::string* release_sopruserid();
  void set_allocated_sopruserid(::std::string* sopruserid);

  // uint32 encrypt = 5;
  void clear_encrypt();
  static const int kEncryptFieldNumber = 5;
  ::google::protobuf::uint32 encrypt() const;
  void set_encrypt(::google::protobuf::uint32 value);

  // uint32 exchangeMode = 6;
  void clear_exchangemode();
  static const int kExchangeModeFieldNumber = 6;
  ::google::protobuf::uint32 exchangemode() const;
  void set_exchangemode(::google::protobuf::uint32 value);

  // uint64 msgTime = 8;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 8;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:im.MESExchangeKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::im::UserKey > lsuserkeys_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr sopruserid_;
  ::google::protobuf::uint32 encrypt_;
  ::google::protobuf::uint32 exchangemode_;
  ::google::protobuf::uint64 msgtime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESExchangeKeyAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESExchangeKeyAck) */ {
 public:
  MESExchangeKeyAck();
  virtual ~MESExchangeKeyAck();

  MESExchangeKeyAck(const MESExchangeKeyAck& from);

  inline MESExchangeKeyAck& operator=(const MESExchangeKeyAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESExchangeKeyAck(MESExchangeKeyAck&& from) noexcept
    : MESExchangeKeyAck() {
    *this = ::std::move(from);
  }

  inline MESExchangeKeyAck& operator=(MESExchangeKeyAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESExchangeKeyAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESExchangeKeyAck* internal_default_instance() {
    return reinterpret_cast<const MESExchangeKeyAck*>(
               &_MESExchangeKeyAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(MESExchangeKeyAck* other);
  friend void swap(MESExchangeKeyAck& a, MESExchangeKeyAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESExchangeKeyAck* New() const final {
    return CreateMaybeMessage<MESExchangeKeyAck>(NULL);
  }

  MESExchangeKeyAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESExchangeKeyAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESExchangeKeyAck& from);
  void MergeFrom(const MESExchangeKeyAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESExchangeKeyAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sGrpId = 2;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 2;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 4;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 4;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.MESExchangeKeyAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESExchangeKeyDeliver : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESExchangeKeyDeliver) */ {
 public:
  MESExchangeKeyDeliver();
  virtual ~MESExchangeKeyDeliver();

  MESExchangeKeyDeliver(const MESExchangeKeyDeliver& from);

  inline MESExchangeKeyDeliver& operator=(const MESExchangeKeyDeliver& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESExchangeKeyDeliver(MESExchangeKeyDeliver&& from) noexcept
    : MESExchangeKeyDeliver() {
    *this = ::std::move(from);
  }

  inline MESExchangeKeyDeliver& operator=(MESExchangeKeyDeliver&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESExchangeKeyDeliver& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESExchangeKeyDeliver* internal_default_instance() {
    return reinterpret_cast<const MESExchangeKeyDeliver*>(
               &_MESExchangeKeyDeliver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(MESExchangeKeyDeliver* other);
  friend void swap(MESExchangeKeyDeliver& a, MESExchangeKeyDeliver& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESExchangeKeyDeliver* New() const final {
    return CreateMaybeMessage<MESExchangeKeyDeliver>(NULL);
  }

  MESExchangeKeyDeliver* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESExchangeKeyDeliver>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESExchangeKeyDeliver& from);
  void MergeFrom(const MESExchangeKeyDeliver& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESExchangeKeyDeliver* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sGrpId = 3;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 3;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 4;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 4;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sKey = 6;
  void clear_skey();
  static const int kSKeyFieldNumber = 6;
  const ::std::string& skey() const;
  void set_skey(const ::std::string& value);
  #if LANG_CXX11
  void set_skey(::std::string&& value);
  #endif
  void set_skey(const char* value);
  void set_skey(const char* value, size_t size);
  ::std::string* mutable_skey();
  ::std::string* release_skey();
  void set_allocated_skey(::std::string* skey);

  // string sOprUserId = 8;
  void clear_sopruserid();
  static const int kSOprUserIdFieldNumber = 8;
  const ::std::string& sopruserid() const;
  void set_sopruserid(const ::std::string& value);
  #if LANG_CXX11
  void set_sopruserid(::std::string&& value);
  #endif
  void set_sopruserid(const char* value);
  void set_sopruserid(const char* value, size_t size);
  ::std::string* mutable_sopruserid();
  ::std::string* release_sopruserid();
  void set_allocated_sopruserid(::std::string* sopruserid);

  // string extend = 10;
  void clear_extend();
  static const int kExtendFieldNumber = 10;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint32 exchangeMode = 5;
  void clear_exchangemode();
  static const int kExchangeModeFieldNumber = 5;
  ::google::protobuf::uint32 exchangemode() const;
  void set_exchangemode(::google::protobuf::uint32 value);

  // uint32 encrypt = 7;
  void clear_encrypt();
  static const int kEncryptFieldNumber = 7;
  ::google::protobuf::uint32 encrypt() const;
  void set_encrypt(::google::protobuf::uint32 value);

  // uint64 msgTime = 9;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 9;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:im.MESExchangeKeyDeliver)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr skey_;
  ::google::protobuf::internal::ArenaStringPtr sopruserid_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint32 exchangemode_;
  ::google::protobuf::uint32 encrypt_;
  ::google::protobuf::uint64 msgtime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESExchangeKeyDeliverAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESExchangeKeyDeliverAck) */ {
 public:
  MESExchangeKeyDeliverAck();
  virtual ~MESExchangeKeyDeliverAck();

  MESExchangeKeyDeliverAck(const MESExchangeKeyDeliverAck& from);

  inline MESExchangeKeyDeliverAck& operator=(const MESExchangeKeyDeliverAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESExchangeKeyDeliverAck(MESExchangeKeyDeliverAck&& from) noexcept
    : MESExchangeKeyDeliverAck() {
    *this = ::std::move(from);
  }

  inline MESExchangeKeyDeliverAck& operator=(MESExchangeKeyDeliverAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESExchangeKeyDeliverAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESExchangeKeyDeliverAck* internal_default_instance() {
    return reinterpret_cast<const MESExchangeKeyDeliverAck*>(
               &_MESExchangeKeyDeliverAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(MESExchangeKeyDeliverAck* other);
  friend void swap(MESExchangeKeyDeliverAck& a, MESExchangeKeyDeliverAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESExchangeKeyDeliverAck* New() const final {
    return CreateMaybeMessage<MESExchangeKeyDeliverAck>(NULL);
  }

  MESExchangeKeyDeliverAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESExchangeKeyDeliverAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESExchangeKeyDeliverAck& from);
  void MergeFrom(const MESExchangeKeyDeliverAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESExchangeKeyDeliverAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sGrpId = 3;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 3;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 4;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 4;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sKey = 5;
  void clear_skey();
  static const int kSKeyFieldNumber = 5;
  const ::std::string& skey() const;
  void set_skey(const ::std::string& value);
  #if LANG_CXX11
  void set_skey(::std::string&& value);
  #endif
  void set_skey(const char* value);
  void set_skey(const char* value, size_t size);
  ::std::string* mutable_skey();
  ::std::string* release_skey();
  void set_allocated_skey(::std::string* skey);

  // uint32 encrypt = 6;
  void clear_encrypt();
  static const int kEncryptFieldNumber = 6;
  ::google::protobuf::uint32 encrypt() const;
  void set_encrypt(::google::protobuf::uint32 value);

  // .im.ErrCode errcode = 7;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 7;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // uint64 msgTime = 8;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 8;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:im.MESExchangeKeyDeliverAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr skey_;
  ::google::protobuf::uint32 encrypt_;
  int errcode_;
  ::google::protobuf::uint64 msgtime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESExchangeKeyDeliverNotifyAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESExchangeKeyDeliverNotifyAck) */ {
 public:
  MESExchangeKeyDeliverNotifyAck();
  virtual ~MESExchangeKeyDeliverNotifyAck();

  MESExchangeKeyDeliverNotifyAck(const MESExchangeKeyDeliverNotifyAck& from);

  inline MESExchangeKeyDeliverNotifyAck& operator=(const MESExchangeKeyDeliverNotifyAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESExchangeKeyDeliverNotifyAck(MESExchangeKeyDeliverNotifyAck&& from) noexcept
    : MESExchangeKeyDeliverNotifyAck() {
    *this = ::std::move(from);
  }

  inline MESExchangeKeyDeliverNotifyAck& operator=(MESExchangeKeyDeliverNotifyAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESExchangeKeyDeliverNotifyAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESExchangeKeyDeliverNotifyAck* internal_default_instance() {
    return reinterpret_cast<const MESExchangeKeyDeliverNotifyAck*>(
               &_MESExchangeKeyDeliverNotifyAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(MESExchangeKeyDeliverNotifyAck* other);
  friend void swap(MESExchangeKeyDeliverNotifyAck& a, MESExchangeKeyDeliverNotifyAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESExchangeKeyDeliverNotifyAck* New() const final {
    return CreateMaybeMessage<MESExchangeKeyDeliverNotifyAck>(NULL);
  }

  MESExchangeKeyDeliverNotifyAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESExchangeKeyDeliverNotifyAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESExchangeKeyDeliverNotifyAck& from);
  void MergeFrom(const MESExchangeKeyDeliverNotifyAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESExchangeKeyDeliverNotifyAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // @@protoc_insertion_point(class_scope:im.MESExchangeKeyDeliverNotifyAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class _InnerGrpNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im._InnerGrpNotify) */ {
 public:
  _InnerGrpNotify();
  virtual ~_InnerGrpNotify();

  _InnerGrpNotify(const _InnerGrpNotify& from);

  inline _InnerGrpNotify& operator=(const _InnerGrpNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  _InnerGrpNotify(_InnerGrpNotify&& from) noexcept
    : _InnerGrpNotify() {
    *this = ::std::move(from);
  }

  inline _InnerGrpNotify& operator=(_InnerGrpNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const _InnerGrpNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const _InnerGrpNotify* internal_default_instance() {
    return reinterpret_cast<const _InnerGrpNotify*>(
               &__InnerGrpNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(_InnerGrpNotify* other);
  friend void swap(_InnerGrpNotify& a, _InnerGrpNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline _InnerGrpNotify* New() const final {
    return CreateMaybeMessage<_InnerGrpNotify>(NULL);
  }

  _InnerGrpNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<_InnerGrpNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const _InnerGrpNotify& from);
  void MergeFrom(const _InnerGrpNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(_InnerGrpNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string lsToId = 2;
  int lstoid_size() const;
  void clear_lstoid();
  static const int kLsToIdFieldNumber = 2;
  const ::std::string& lstoid(int index) const;
  ::std::string* mutable_lstoid(int index);
  void set_lstoid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_lstoid(int index, ::std::string&& value);
  #endif
  void set_lstoid(int index, const char* value);
  void set_lstoid(int index, const char* value, size_t size);
  ::std::string* add_lstoid();
  void add_lstoid(const ::std::string& value);
  #if LANG_CXX11
  void add_lstoid(::std::string&& value);
  #endif
  void add_lstoid(const char* value);
  void add_lstoid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& lstoid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_lstoid();

  // repeated string sMnpledUserId = 6;
  int smnpleduserid_size() const;
  void clear_smnpleduserid();
  static const int kSMnpledUserIdFieldNumber = 6;
  const ::std::string& smnpleduserid(int index) const;
  ::std::string* mutable_smnpleduserid(int index);
  void set_smnpleduserid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_smnpleduserid(int index, ::std::string&& value);
  #endif
  void set_smnpleduserid(int index, const char* value);
  void set_smnpleduserid(int index, const char* value, size_t size);
  ::std::string* add_smnpleduserid();
  void add_smnpleduserid(const ::std::string& value);
  #if LANG_CXX11
  void add_smnpleduserid(::std::string&& value);
  #endif
  void add_smnpleduserid(const char* value);
  void add_smnpleduserid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& smnpleduserid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_smnpleduserid();

  // string sGrpId = 1;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 1;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sOprUserId = 5;
  void clear_sopruserid();
  static const int kSOprUserIdFieldNumber = 5;
  const ::std::string& sopruserid() const;
  void set_sopruserid(const ::std::string& value);
  #if LANG_CXX11
  void set_sopruserid(::std::string&& value);
  #endif
  void set_sopruserid(const char* value);
  void set_sopruserid(const char* value, size_t size);
  ::std::string* mutable_sopruserid();
  ::std::string* release_sopruserid();
  void set_allocated_sopruserid(::std::string* sopruserid);

  // string sContent = 7;
  void clear_scontent();
  static const int kSContentFieldNumber = 7;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // string extend = 10;
  void clear_extend();
  static const int kExtendFieldNumber = 10;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint64 msgTime = 4;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 4;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .im.NotifyType notifyType = 8;
  void clear_notifytype();
  static const int kNotifyTypeFieldNumber = 8;
  ::im::NotifyType notifytype() const;
  void set_notifytype(::im::NotifyType value);

  // .im.ErrCode errcode = 9;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 9;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im._InnerGrpNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> lstoid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> smnpleduserid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr sopruserid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint64 msgtime_;
  int notifytype_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class _MESGrpInterNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im._MESGrpInterNotify) */ {
 public:
  _MESGrpInterNotify();
  virtual ~_MESGrpInterNotify();

  _MESGrpInterNotify(const _MESGrpInterNotify& from);

  inline _MESGrpInterNotify& operator=(const _MESGrpInterNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  _MESGrpInterNotify(_MESGrpInterNotify&& from) noexcept
    : _MESGrpInterNotify() {
    *this = ::std::move(from);
  }

  inline _MESGrpInterNotify& operator=(_MESGrpInterNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const _MESGrpInterNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const _MESGrpInterNotify* internal_default_instance() {
    return reinterpret_cast<const _MESGrpInterNotify*>(
               &__MESGrpInterNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(_MESGrpInterNotify* other);
  friend void swap(_MESGrpInterNotify& a, _MESGrpInterNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline _MESGrpInterNotify* New() const final {
    return CreateMaybeMessage<_MESGrpInterNotify>(NULL);
  }

  _MESGrpInterNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<_MESGrpInterNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const _MESGrpInterNotify& from);
  void MergeFrom(const _MESGrpInterNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(_MESGrpInterNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sToId = 2;
  int stoid_size() const;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid(int index) const;
  ::std::string* mutable_stoid(int index);
  void set_stoid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(int index, ::std::string&& value);
  #endif
  void set_stoid(int index, const char* value);
  void set_stoid(int index, const char* value, size_t size);
  ::std::string* add_stoid();
  void add_stoid(const ::std::string& value);
  #if LANG_CXX11
  void add_stoid(::std::string&& value);
  #endif
  void add_stoid(const char* value);
  void add_stoid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stoid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stoid();

  // repeated string sMnpledUserId = 6;
  int smnpleduserid_size() const;
  void clear_smnpleduserid();
  static const int kSMnpledUserIdFieldNumber = 6;
  const ::std::string& smnpleduserid(int index) const;
  ::std::string* mutable_smnpleduserid(int index);
  void set_smnpleduserid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_smnpleduserid(int index, ::std::string&& value);
  #endif
  void set_smnpleduserid(int index, const char* value);
  void set_smnpleduserid(int index, const char* value, size_t size);
  ::std::string* add_smnpleduserid();
  void add_smnpleduserid(const ::std::string& value);
  #if LANG_CXX11
  void add_smnpleduserid(::std::string&& value);
  #endif
  void add_smnpleduserid(const char* value);
  void add_smnpleduserid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& smnpleduserid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_smnpleduserid();

  // string sGrpId = 1;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 1;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sOprUserId = 5;
  void clear_sopruserid();
  static const int kSOprUserIdFieldNumber = 5;
  const ::std::string& sopruserid() const;
  void set_sopruserid(const ::std::string& value);
  #if LANG_CXX11
  void set_sopruserid(::std::string&& value);
  #endif
  void set_sopruserid(const char* value);
  void set_sopruserid(const char* value, size_t size);
  ::std::string* mutable_sopruserid();
  ::std::string* release_sopruserid();
  void set_allocated_sopruserid(::std::string* sopruserid);

  // string sContent = 7;
  void clear_scontent();
  static const int kSContentFieldNumber = 7;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // string extend = 10;
  void clear_extend();
  static const int kExtendFieldNumber = 10;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint64 msgTime = 4;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 4;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .im.NotifyType notifyType = 8;
  void clear_notifytype();
  static const int kNotifyTypeFieldNumber = 8;
  ::im::NotifyType notifytype() const;
  void set_notifytype(::im::NotifyType value);

  // .im.ErrCode errcode = 9;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 9;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im._MESGrpInterNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stoid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> smnpleduserid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr sopruserid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint64 msgtime_;
  int notifytype_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class _MESGrpInterNotifyAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im._MESGrpInterNotifyAck) */ {
 public:
  _MESGrpInterNotifyAck();
  virtual ~_MESGrpInterNotifyAck();

  _MESGrpInterNotifyAck(const _MESGrpInterNotifyAck& from);

  inline _MESGrpInterNotifyAck& operator=(const _MESGrpInterNotifyAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  _MESGrpInterNotifyAck(_MESGrpInterNotifyAck&& from) noexcept
    : _MESGrpInterNotifyAck() {
    *this = ::std::move(from);
  }

  inline _MESGrpInterNotifyAck& operator=(_MESGrpInterNotifyAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const _MESGrpInterNotifyAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const _MESGrpInterNotifyAck* internal_default_instance() {
    return reinterpret_cast<const _MESGrpInterNotifyAck*>(
               &__MESGrpInterNotifyAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(_MESGrpInterNotifyAck* other);
  friend void swap(_MESGrpInterNotifyAck& a, _MESGrpInterNotifyAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline _MESGrpInterNotifyAck* New() const final {
    return CreateMaybeMessage<_MESGrpInterNotifyAck>(NULL);
  }

  _MESGrpInterNotifyAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<_MESGrpInterNotifyAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const _MESGrpInterNotifyAck& from);
  void MergeFrom(const _MESGrpInterNotifyAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(_MESGrpInterNotifyAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sGrpId = 2;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 2;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 4;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 4;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im._MESGrpInterNotifyAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESGrpNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESGrpNotify) */ {
 public:
  MESGrpNotify();
  virtual ~MESGrpNotify();

  MESGrpNotify(const MESGrpNotify& from);

  inline MESGrpNotify& operator=(const MESGrpNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESGrpNotify(MESGrpNotify&& from) noexcept
    : MESGrpNotify() {
    *this = ::std::move(from);
  }

  inline MESGrpNotify& operator=(MESGrpNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESGrpNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESGrpNotify* internal_default_instance() {
    return reinterpret_cast<const MESGrpNotify*>(
               &_MESGrpNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(MESGrpNotify* other);
  friend void swap(MESGrpNotify& a, MESGrpNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESGrpNotify* New() const final {
    return CreateMaybeMessage<MESGrpNotify>(NULL);
  }

  MESGrpNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESGrpNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESGrpNotify& from);
  void MergeFrom(const MESGrpNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESGrpNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sMnpledUserId = 6;
  int smnpleduserid_size() const;
  void clear_smnpleduserid();
  static const int kSMnpledUserIdFieldNumber = 6;
  const ::std::string& smnpleduserid(int index) const;
  ::std::string* mutable_smnpleduserid(int index);
  void set_smnpleduserid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_smnpleduserid(int index, ::std::string&& value);
  #endif
  void set_smnpleduserid(int index, const char* value);
  void set_smnpleduserid(int index, const char* value, size_t size);
  ::std::string* add_smnpleduserid();
  void add_smnpleduserid(const ::std::string& value);
  #if LANG_CXX11
  void add_smnpleduserid(::std::string&& value);
  #endif
  void add_smnpleduserid(const char* value);
  void add_smnpleduserid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& smnpleduserid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_smnpleduserid();

  // string sGrpId = 1;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 1;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sOprUserId = 5;
  void clear_sopruserid();
  static const int kSOprUserIdFieldNumber = 5;
  const ::std::string& sopruserid() const;
  void set_sopruserid(const ::std::string& value);
  #if LANG_CXX11
  void set_sopruserid(::std::string&& value);
  #endif
  void set_sopruserid(const char* value);
  void set_sopruserid(const char* value, size_t size);
  ::std::string* mutable_sopruserid();
  ::std::string* release_sopruserid();
  void set_allocated_sopruserid(::std::string* sopruserid);

  // string sContent = 7;
  void clear_scontent();
  static const int kSContentFieldNumber = 7;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // string extend = 10;
  void clear_extend();
  static const int kExtendFieldNumber = 10;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint64 msgTime = 4;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 4;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .im.NotifyType notifyType = 8;
  void clear_notifytype();
  static const int kNotifyTypeFieldNumber = 8;
  ::im::NotifyType notifytype() const;
  void set_notifytype(::im::NotifyType value);

  // .im.ErrCode errcode = 9;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 9;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.MESGrpNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> smnpleduserid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr sopruserid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint64 msgtime_;
  int notifytype_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESGrpNotifyDeliverAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESGrpNotifyDeliverAck) */ {
 public:
  MESGrpNotifyDeliverAck();
  virtual ~MESGrpNotifyDeliverAck();

  MESGrpNotifyDeliverAck(const MESGrpNotifyDeliverAck& from);

  inline MESGrpNotifyDeliverAck& operator=(const MESGrpNotifyDeliverAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESGrpNotifyDeliverAck(MESGrpNotifyDeliverAck&& from) noexcept
    : MESGrpNotifyDeliverAck() {
    *this = ::std::move(from);
  }

  inline MESGrpNotifyDeliverAck& operator=(MESGrpNotifyDeliverAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESGrpNotifyDeliverAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESGrpNotifyDeliverAck* internal_default_instance() {
    return reinterpret_cast<const MESGrpNotifyDeliverAck*>(
               &_MESGrpNotifyDeliverAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(MESGrpNotifyDeliverAck* other);
  friend void swap(MESGrpNotifyDeliverAck& a, MESGrpNotifyDeliverAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESGrpNotifyDeliverAck* New() const final {
    return CreateMaybeMessage<MESGrpNotifyDeliverAck>(NULL);
  }

  MESGrpNotifyDeliverAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESGrpNotifyDeliverAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESGrpNotifyDeliverAck& from);
  void MergeFrom(const MESGrpNotifyDeliverAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESGrpNotifyDeliverAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sGrpId = 2;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 2;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // @@protoc_insertion_point(class_scope:im.MESGrpNotifyDeliverAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class _MESGrpInterChat : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im._MESGrpInterChat) */ {
 public:
  _MESGrpInterChat();
  virtual ~_MESGrpInterChat();

  _MESGrpInterChat(const _MESGrpInterChat& from);

  inline _MESGrpInterChat& operator=(const _MESGrpInterChat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  _MESGrpInterChat(_MESGrpInterChat&& from) noexcept
    : _MESGrpInterChat() {
    *this = ::std::move(from);
  }

  inline _MESGrpInterChat& operator=(_MESGrpInterChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const _MESGrpInterChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const _MESGrpInterChat* internal_default_instance() {
    return reinterpret_cast<const _MESGrpInterChat*>(
               &__MESGrpInterChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(_MESGrpInterChat* other);
  friend void swap(_MESGrpInterChat& a, _MESGrpInterChat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline _MESGrpInterChat* New() const final {
    return CreateMaybeMessage<_MESGrpInterChat>(NULL);
  }

  _MESGrpInterChat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<_MESGrpInterChat>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const _MESGrpInterChat& from);
  void MergeFrom(const _MESGrpInterChat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(_MESGrpInterChat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sToId = 3;
  int stoid_size() const;
  void clear_stoid();
  static const int kSToIdFieldNumber = 3;
  const ::std::string& stoid(int index) const;
  ::std::string* mutable_stoid(int index);
  void set_stoid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(int index, ::std::string&& value);
  #endif
  void set_stoid(int index, const char* value);
  void set_stoid(int index, const char* value, size_t size);
  ::std::string* add_stoid();
  void add_stoid(const ::std::string& value);
  #if LANG_CXX11
  void add_stoid(::std::string&& value);
  #endif
  void add_stoid(const char* value);
  void add_stoid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stoid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stoid();

  // repeated string sNotifyUsers = 10;
  int snotifyusers_size() const;
  void clear_snotifyusers();
  static const int kSNotifyUsersFieldNumber = 10;
  const ::std::string& snotifyusers(int index) const;
  ::std::string* mutable_snotifyusers(int index);
  void set_snotifyusers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_snotifyusers(int index, ::std::string&& value);
  #endif
  void set_snotifyusers(int index, const char* value);
  void set_snotifyusers(int index, const char* value, size_t size);
  ::std::string* add_snotifyusers();
  void add_snotifyusers(const ::std::string& value);
  #if LANG_CXX11
  void add_snotifyusers(::std::string&& value);
  #endif
  void add_snotifyusers(const char* value);
  void add_snotifyusers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& snotifyusers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_snotifyusers();

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sGrpId = 2;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 2;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 5;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 5;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sContent = 9;
  void clear_scontent();
  static const int kSContentFieldNumber = 9;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // string extend = 11;
  void clear_extend();
  static const int kExtendFieldNumber = 11;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint32 nNotifyCount = 4;
  void clear_nnotifycount();
  static const int kNNotifyCountFieldNumber = 4;
  ::google::protobuf::uint32 nnotifycount() const;
  void set_nnotifycount(::google::protobuf::uint32 value);

  // uint32 msgType = 6;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 6;
  ::google::protobuf::uint32 msgtype() const;
  void set_msgtype(::google::protobuf::uint32 value);

  // uint64 msgTime = 7;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 7;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // uint32 encrypt = 8;
  void clear_encrypt();
  static const int kEncryptFieldNumber = 8;
  ::google::protobuf::uint32 encrypt() const;
  void set_encrypt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im._MESGrpInterChat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stoid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> snotifyusers_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint32 nnotifycount_;
  ::google::protobuf::uint32 msgtype_;
  ::google::protobuf::uint64 msgtime_;
  ::google::protobuf::uint32 encrypt_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class _MESGrpInterChatAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im._MESGrpInterChatAck) */ {
 public:
  _MESGrpInterChatAck();
  virtual ~_MESGrpInterChatAck();

  _MESGrpInterChatAck(const _MESGrpInterChatAck& from);

  inline _MESGrpInterChatAck& operator=(const _MESGrpInterChatAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  _MESGrpInterChatAck(_MESGrpInterChatAck&& from) noexcept
    : _MESGrpInterChatAck() {
    *this = ::std::move(from);
  }

  inline _MESGrpInterChatAck& operator=(_MESGrpInterChatAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const _MESGrpInterChatAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const _MESGrpInterChatAck* internal_default_instance() {
    return reinterpret_cast<const _MESGrpInterChatAck*>(
               &__MESGrpInterChatAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(_MESGrpInterChatAck* other);
  friend void swap(_MESGrpInterChatAck& a, _MESGrpInterChatAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline _MESGrpInterChatAck* New() const final {
    return CreateMaybeMessage<_MESGrpInterChatAck>(NULL);
  }

  _MESGrpInterChatAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<_MESGrpInterChatAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const _MESGrpInterChatAck& from);
  void MergeFrom(const _MESGrpInterChatAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(_MESGrpInterChatAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sGrpId = 2;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 2;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 4;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 4;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im._MESGrpInterChatAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESGrpChatDeliveredAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESGrpChatDeliveredAck) */ {
 public:
  MESGrpChatDeliveredAck();
  virtual ~MESGrpChatDeliveredAck();

  MESGrpChatDeliveredAck(const MESGrpChatDeliveredAck& from);

  inline MESGrpChatDeliveredAck& operator=(const MESGrpChatDeliveredAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESGrpChatDeliveredAck(MESGrpChatDeliveredAck&& from) noexcept
    : MESGrpChatDeliveredAck() {
    *this = ::std::move(from);
  }

  inline MESGrpChatDeliveredAck& operator=(MESGrpChatDeliveredAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESGrpChatDeliveredAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESGrpChatDeliveredAck* internal_default_instance() {
    return reinterpret_cast<const MESGrpChatDeliveredAck*>(
               &_MESGrpChatDeliveredAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(MESGrpChatDeliveredAck* other);
  friend void swap(MESGrpChatDeliveredAck& a, MESGrpChatDeliveredAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESGrpChatDeliveredAck* New() const final {
    return CreateMaybeMessage<MESGrpChatDeliveredAck>(NULL);
  }

  MESGrpChatDeliveredAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESGrpChatDeliveredAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESGrpChatDeliveredAck& from);
  void MergeFrom(const MESGrpChatDeliveredAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESGrpChatDeliveredAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sGrpId = 2;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 2;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 4;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 4;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.MESGrpChatDeliveredAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESGrpChat : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESGrpChat) */ {
 public:
  MESGrpChat();
  virtual ~MESGrpChat();

  MESGrpChat(const MESGrpChat& from);

  inline MESGrpChat& operator=(const MESGrpChat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESGrpChat(MESGrpChat&& from) noexcept
    : MESGrpChat() {
    *this = ::std::move(from);
  }

  inline MESGrpChat& operator=(MESGrpChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESGrpChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESGrpChat* internal_default_instance() {
    return reinterpret_cast<const MESGrpChat*>(
               &_MESGrpChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(MESGrpChat* other);
  friend void swap(MESGrpChat& a, MESGrpChat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESGrpChat* New() const final {
    return CreateMaybeMessage<MESGrpChat>(NULL);
  }

  MESGrpChat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESGrpChat>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESGrpChat& from);
  void MergeFrom(const MESGrpChat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESGrpChat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sNotifyUsers = 10;
  int snotifyusers_size() const;
  void clear_snotifyusers();
  static const int kSNotifyUsersFieldNumber = 10;
  const ::std::string& snotifyusers(int index) const;
  ::std::string* mutable_snotifyusers(int index);
  void set_snotifyusers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_snotifyusers(int index, ::std::string&& value);
  #endif
  void set_snotifyusers(int index, const char* value);
  void set_snotifyusers(int index, const char* value, size_t size);
  ::std::string* add_snotifyusers();
  void add_snotifyusers(const ::std::string& value);
  #if LANG_CXX11
  void add_snotifyusers(::std::string&& value);
  #endif
  void add_snotifyusers(const char* value);
  void add_snotifyusers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& snotifyusers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_snotifyusers();

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sGrpId = 2;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 2;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sToId = 3;
  void clear_stoid();
  static const int kSToIdFieldNumber = 3;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 5;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 5;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sContent = 9;
  void clear_scontent();
  static const int kSContentFieldNumber = 9;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // string extend = 11;
  void clear_extend();
  static const int kExtendFieldNumber = 11;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint32 nNotifyCount = 4;
  void clear_nnotifycount();
  static const int kNNotifyCountFieldNumber = 4;
  ::google::protobuf::uint32 nnotifycount() const;
  void set_nnotifycount(::google::protobuf::uint32 value);

  // uint32 msgType = 6;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 6;
  ::google::protobuf::uint32 msgtype() const;
  void set_msgtype(::google::protobuf::uint32 value);

  // uint64 msgTime = 7;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 7;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // uint32 encrypt = 8;
  void clear_encrypt();
  static const int kEncryptFieldNumber = 8;
  ::google::protobuf::uint32 encrypt() const;
  void set_encrypt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.MESGrpChat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> snotifyusers_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint32 nnotifycount_;
  ::google::protobuf::uint32 msgtype_;
  ::google::protobuf::uint64 msgtime_;
  ::google::protobuf::uint32 encrypt_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class _MESGrpInterChatCancel : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im._MESGrpInterChatCancel) */ {
 public:
  _MESGrpInterChatCancel();
  virtual ~_MESGrpInterChatCancel();

  _MESGrpInterChatCancel(const _MESGrpInterChatCancel& from);

  inline _MESGrpInterChatCancel& operator=(const _MESGrpInterChatCancel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  _MESGrpInterChatCancel(_MESGrpInterChatCancel&& from) noexcept
    : _MESGrpInterChatCancel() {
    *this = ::std::move(from);
  }

  inline _MESGrpInterChatCancel& operator=(_MESGrpInterChatCancel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const _MESGrpInterChatCancel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const _MESGrpInterChatCancel* internal_default_instance() {
    return reinterpret_cast<const _MESGrpInterChatCancel*>(
               &__MESGrpInterChatCancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(_MESGrpInterChatCancel* other);
  friend void swap(_MESGrpInterChatCancel& a, _MESGrpInterChatCancel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline _MESGrpInterChatCancel* New() const final {
    return CreateMaybeMessage<_MESGrpInterChatCancel>(NULL);
  }

  _MESGrpInterChatCancel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<_MESGrpInterChatCancel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const _MESGrpInterChatCancel& from);
  void MergeFrom(const _MESGrpInterChatCancel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(_MESGrpInterChatCancel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sToId = 3;
  int stoid_size() const;
  void clear_stoid();
  static const int kSToIdFieldNumber = 3;
  const ::std::string& stoid(int index) const;
  ::std::string* mutable_stoid(int index);
  void set_stoid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(int index, ::std::string&& value);
  #endif
  void set_stoid(int index, const char* value);
  void set_stoid(int index, const char* value, size_t size);
  ::std::string* add_stoid();
  void add_stoid(const ::std::string& value);
  #if LANG_CXX11
  void add_stoid(::std::string&& value);
  #endif
  void add_stoid(const char* value);
  void add_stoid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stoid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stoid();

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sGrpId = 2;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 2;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 4;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 4;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // uint64 msgTime = 5;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 5;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // uint64 cancelTime = 6;
  void clear_canceltime();
  static const int kCancelTimeFieldNumber = 6;
  ::google::protobuf::uint64 canceltime() const;
  void set_canceltime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:im._MESGrpInterChatCancel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stoid_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::uint64 msgtime_;
  ::google::protobuf::uint64 canceltime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class _MESGrpInterChatCancelAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im._MESGrpInterChatCancelAck) */ {
 public:
  _MESGrpInterChatCancelAck();
  virtual ~_MESGrpInterChatCancelAck();

  _MESGrpInterChatCancelAck(const _MESGrpInterChatCancelAck& from);

  inline _MESGrpInterChatCancelAck& operator=(const _MESGrpInterChatCancelAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  _MESGrpInterChatCancelAck(_MESGrpInterChatCancelAck&& from) noexcept
    : _MESGrpInterChatCancelAck() {
    *this = ::std::move(from);
  }

  inline _MESGrpInterChatCancelAck& operator=(_MESGrpInterChatCancelAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const _MESGrpInterChatCancelAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const _MESGrpInterChatCancelAck* internal_default_instance() {
    return reinterpret_cast<const _MESGrpInterChatCancelAck*>(
               &__MESGrpInterChatCancelAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(_MESGrpInterChatCancelAck* other);
  friend void swap(_MESGrpInterChatCancelAck& a, _MESGrpInterChatCancelAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline _MESGrpInterChatCancelAck* New() const final {
    return CreateMaybeMessage<_MESGrpInterChatCancelAck>(NULL);
  }

  _MESGrpInterChatCancelAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<_MESGrpInterChatCancelAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const _MESGrpInterChatCancelAck& from);
  void MergeFrom(const _MESGrpInterChatCancelAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(_MESGrpInterChatCancelAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sGrpId = 2;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 2;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 4;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 4;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im._MESGrpInterChatCancelAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESChatCancel : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESChatCancel) */ {
 public:
  MESChatCancel();
  virtual ~MESChatCancel();

  MESChatCancel(const MESChatCancel& from);

  inline MESChatCancel& operator=(const MESChatCancel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESChatCancel(MESChatCancel&& from) noexcept
    : MESChatCancel() {
    *this = ::std::move(from);
  }

  inline MESChatCancel& operator=(MESChatCancel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESChatCancel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESChatCancel* internal_default_instance() {
    return reinterpret_cast<const MESChatCancel*>(
               &_MESChatCancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(MESChatCancel* other);
  friend void swap(MESChatCancel& a, MESChatCancel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESChatCancel* New() const final {
    return CreateMaybeMessage<MESChatCancel>(NULL);
  }

  MESChatCancel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESChatCancel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESChatCancel& from);
  void MergeFrom(const MESChatCancel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESChatCancel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sGroupId = 4;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 4;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // string sMsgId = 5;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 5;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // uint32 nCancelType = 3;
  void clear_ncanceltype();
  static const int kNCancelTypeFieldNumber = 3;
  ::google::protobuf::uint32 ncanceltype() const;
  void set_ncanceltype(::google::protobuf::uint32 value);

  // uint32 sendState = 8;
  void clear_sendstate();
  static const int kSendStateFieldNumber = 8;
  ::google::protobuf::uint32 sendstate() const;
  void set_sendstate(::google::protobuf::uint32 value);

  // uint64 msgTime = 6;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 6;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // uint64 cancelTime = 7;
  void clear_canceltime();
  static const int kCancelTimeFieldNumber = 7;
  ::google::protobuf::uint64 canceltime() const;
  void set_canceltime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:im.MESChatCancel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::uint32 ncanceltype_;
  ::google::protobuf::uint32 sendstate_;
  ::google::protobuf::uint64 msgtime_;
  ::google::protobuf::uint64 canceltime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MESChatCancelAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MESChatCancelAck) */ {
 public:
  MESChatCancelAck();
  virtual ~MESChatCancelAck();

  MESChatCancelAck(const MESChatCancelAck& from);

  inline MESChatCancelAck& operator=(const MESChatCancelAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MESChatCancelAck(MESChatCancelAck&& from) noexcept
    : MESChatCancelAck() {
    *this = ::std::move(from);
  }

  inline MESChatCancelAck& operator=(MESChatCancelAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MESChatCancelAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MESChatCancelAck* internal_default_instance() {
    return reinterpret_cast<const MESChatCancelAck*>(
               &_MESChatCancelAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(MESChatCancelAck* other);
  friend void swap(MESChatCancelAck& a, MESChatCancelAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MESChatCancelAck* New() const final {
    return CreateMaybeMessage<MESChatCancelAck>(NULL);
  }

  MESChatCancelAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MESChatCancelAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MESChatCancelAck& from);
  void MergeFrom(const MESChatCancelAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MESChatCancelAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 3;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.MESChatCancelAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MSGCommonNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MSGCommonNotify) */ {
 public:
  MSGCommonNotify();
  virtual ~MSGCommonNotify();

  MSGCommonNotify(const MSGCommonNotify& from);

  inline MSGCommonNotify& operator=(const MSGCommonNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MSGCommonNotify(MSGCommonNotify&& from) noexcept
    : MSGCommonNotify() {
    *this = ::std::move(from);
  }

  inline MSGCommonNotify& operator=(MSGCommonNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MSGCommonNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSGCommonNotify* internal_default_instance() {
    return reinterpret_cast<const MSGCommonNotify*>(
               &_MSGCommonNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(MSGCommonNotify* other);
  friend void swap(MSGCommonNotify& a, MSGCommonNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MSGCommonNotify* New() const final {
    return CreateMaybeMessage<MSGCommonNotify>(NULL);
  }

  MSGCommonNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MSGCommonNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MSGCommonNotify& from);
  void MergeFrom(const MSGCommonNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MSGCommonNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sToIds = 2;
  int stoids_size() const;
  void clear_stoids();
  static const int kSToIdsFieldNumber = 2;
  const ::std::string& stoids(int index) const;
  ::std::string* mutable_stoids(int index);
  void set_stoids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_stoids(int index, ::std::string&& value);
  #endif
  void set_stoids(int index, const char* value);
  void set_stoids(int index, const char* value, size_t size);
  ::std::string* add_stoids();
  void add_stoids(const ::std::string& value);
  #if LANG_CXX11
  void add_stoids(::std::string&& value);
  #endif
  void add_stoids(const char* value);
  void add_stoids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stoids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stoids();

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sContent = 5;
  void clear_scontent();
  static const int kSContentFieldNumber = 5;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // string sToId = 7;
  void clear_stoid();
  static const int kSToIdFieldNumber = 7;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // uint64 msgTime = 6;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 6;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .im.CommonNotifyType notifyType = 4;
  void clear_notifytype();
  static const int kNotifyTypeFieldNumber = 4;
  ::im::CommonNotifyType notifytype() const;
  void set_notifytype(::im::CommonNotifyType value);

  // @@protoc_insertion_point(class_scope:im.MSGCommonNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stoids_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::uint64 msgtime_;
  int notifytype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MSGCommonNotifyACK : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.MSGCommonNotifyACK) */ {
 public:
  MSGCommonNotifyACK();
  virtual ~MSGCommonNotifyACK();

  MSGCommonNotifyACK(const MSGCommonNotifyACK& from);

  inline MSGCommonNotifyACK& operator=(const MSGCommonNotifyACK& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MSGCommonNotifyACK(MSGCommonNotifyACK&& from) noexcept
    : MSGCommonNotifyACK() {
    *this = ::std::move(from);
  }

  inline MSGCommonNotifyACK& operator=(MSGCommonNotifyACK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const MSGCommonNotifyACK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSGCommonNotifyACK* internal_default_instance() {
    return reinterpret_cast<const MSGCommonNotifyACK*>(
               &_MSGCommonNotifyACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(MSGCommonNotifyACK* other);
  friend void swap(MSGCommonNotifyACK& a, MSGCommonNotifyACK& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MSGCommonNotifyACK* New() const final {
    return CreateMaybeMessage<MSGCommonNotifyACK>(NULL);
  }

  MSGCommonNotifyACK* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MSGCommonNotifyACK>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const MSGCommonNotifyACK& from);
  void MergeFrom(const MSGCommonNotifyACK& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MSGCommonNotifyACK* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 3;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.MSGCommonNotifyACK)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SVRMSGGroupRelationNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SVRMSGGroupRelationNotify) */ {
 public:
  SVRMSGGroupRelationNotify();
  virtual ~SVRMSGGroupRelationNotify();

  SVRMSGGroupRelationNotify(const SVRMSGGroupRelationNotify& from);

  inline SVRMSGGroupRelationNotify& operator=(const SVRMSGGroupRelationNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SVRMSGGroupRelationNotify(SVRMSGGroupRelationNotify&& from) noexcept
    : SVRMSGGroupRelationNotify() {
    *this = ::std::move(from);
  }

  inline SVRMSGGroupRelationNotify& operator=(SVRMSGGroupRelationNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SVRMSGGroupRelationNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SVRMSGGroupRelationNotify* internal_default_instance() {
    return reinterpret_cast<const SVRMSGGroupRelationNotify*>(
               &_SVRMSGGroupRelationNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(SVRMSGGroupRelationNotify* other);
  friend void swap(SVRMSGGroupRelationNotify& a, SVRMSGGroupRelationNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SVRMSGGroupRelationNotify* New() const final {
    return CreateMaybeMessage<SVRMSGGroupRelationNotify>(NULL);
  }

  SVRMSGGroupRelationNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SVRMSGGroupRelationNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SVRMSGGroupRelationNotify& from);
  void MergeFrom(const SVRMSGGroupRelationNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SVRMSGGroupRelationNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sToIds = 3;
  int stoids_size() const;
  void clear_stoids();
  static const int kSToIdsFieldNumber = 3;
  const ::std::string& stoids(int index) const;
  ::std::string* mutable_stoids(int index);
  void set_stoids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_stoids(int index, ::std::string&& value);
  #endif
  void set_stoids(int index, const char* value);
  void set_stoids(int index, const char* value, size_t size);
  ::std::string* add_stoids();
  void add_stoids(const ::std::string& value);
  #if LANG_CXX11
  void add_stoids(::std::string&& value);
  #endif
  void add_stoids(const char* value);
  void add_stoids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stoids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stoids();

  // repeated string sMnpledUserId = 6;
  int smnpleduserid_size() const;
  void clear_smnpleduserid();
  static const int kSMnpledUserIdFieldNumber = 6;
  const ::std::string& smnpleduserid(int index) const;
  ::std::string* mutable_smnpleduserid(int index);
  void set_smnpleduserid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_smnpleduserid(int index, ::std::string&& value);
  #endif
  void set_smnpleduserid(int index, const char* value);
  void set_smnpleduserid(int index, const char* value, size_t size);
  ::std::string* add_smnpleduserid();
  void add_smnpleduserid(const ::std::string& value);
  #if LANG_CXX11
  void add_smnpleduserid(::std::string&& value);
  #endif
  void add_smnpleduserid(const char* value);
  void add_smnpleduserid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& smnpleduserid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_smnpleduserid();

  // string sGrpId = 1;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 1;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sOprUserId = 5;
  void clear_sopruserid();
  static const int kSOprUserIdFieldNumber = 5;
  const ::std::string& sopruserid() const;
  void set_sopruserid(const ::std::string& value);
  #if LANG_CXX11
  void set_sopruserid(::std::string&& value);
  #endif
  void set_sopruserid(const char* value);
  void set_sopruserid(const char* value, size_t size);
  ::std::string* mutable_sopruserid();
  ::std::string* release_sopruserid();
  void set_allocated_sopruserid(::std::string* sopruserid);

  // string sContent = 7;
  void clear_scontent();
  static const int kSContentFieldNumber = 7;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // string extend = 9;
  void clear_extend();
  static const int kExtendFieldNumber = 9;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint64 msgTime = 4;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 4;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .im.SVRGroupRelationNotifyType notifyType = 8;
  void clear_notifytype();
  static const int kNotifyTypeFieldNumber = 8;
  ::im::SVRGroupRelationNotifyType notifytype() const;
  void set_notifytype(::im::SVRGroupRelationNotifyType value);

  // @@protoc_insertion_point(class_scope:im.SVRMSGGroupRelationNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stoids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> smnpleduserid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr sopruserid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint64 msgtime_;
  int notifytype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SVRMSGFriendRelationNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SVRMSGFriendRelationNotify) */ {
 public:
  SVRMSGFriendRelationNotify();
  virtual ~SVRMSGFriendRelationNotify();

  SVRMSGFriendRelationNotify(const SVRMSGFriendRelationNotify& from);

  inline SVRMSGFriendRelationNotify& operator=(const SVRMSGFriendRelationNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SVRMSGFriendRelationNotify(SVRMSGFriendRelationNotify&& from) noexcept
    : SVRMSGFriendRelationNotify() {
    *this = ::std::move(from);
  }

  inline SVRMSGFriendRelationNotify& operator=(SVRMSGFriendRelationNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SVRMSGFriendRelationNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SVRMSGFriendRelationNotify* internal_default_instance() {
    return reinterpret_cast<const SVRMSGFriendRelationNotify*>(
               &_SVRMSGFriendRelationNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(SVRMSGFriendRelationNotify* other);
  friend void swap(SVRMSGFriendRelationNotify& a, SVRMSGFriendRelationNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SVRMSGFriendRelationNotify* New() const final {
    return CreateMaybeMessage<SVRMSGFriendRelationNotify>(NULL);
  }

  SVRMSGFriendRelationNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SVRMSGFriendRelationNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SVRMSGFriendRelationNotify& from);
  void MergeFrom(const SVRMSGFriendRelationNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SVRMSGFriendRelationNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sMemoName = 4;
  void clear_smemoname();
  static const int kSMemoNameFieldNumber = 4;
  const ::std::string& smemoname() const;
  void set_smemoname(const ::std::string& value);
  #if LANG_CXX11
  void set_smemoname(::std::string&& value);
  #endif
  void set_smemoname(const char* value);
  void set_smemoname(const char* value, size_t size);
  ::std::string* mutable_smemoname();
  ::std::string* release_smemoname();
  void set_allocated_smemoname(::std::string* smemoname);

  // string sSelfIntroduce = 6;
  void clear_sselfintroduce();
  static const int kSSelfIntroduceFieldNumber = 6;
  const ::std::string& sselfintroduce() const;
  void set_sselfintroduce(const ::std::string& value);
  #if LANG_CXX11
  void set_sselfintroduce(::std::string&& value);
  #endif
  void set_sselfintroduce(const char* value);
  void set_sselfintroduce(const char* value, size_t size);
  ::std::string* mutable_sselfintroduce();
  ::std::string* release_sselfintroduce();
  void set_allocated_sselfintroduce(::std::string* sselfintroduce);

  // string extend = 8;
  void clear_extend();
  static const int kExtendFieldNumber = 8;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint64 msgTime = 7;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 7;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .im.SVRFriendRelationNotifyType notifyType = 5;
  void clear_notifytype();
  static const int kNotifyTypeFieldNumber = 5;
  ::im::SVRFriendRelationNotifyType notifytype() const;
  void set_notifytype(::im::SVRFriendRelationNotifyType value);

  // @@protoc_insertion_point(class_scope:im.SVRMSGFriendRelationNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr smemoname_;
  ::google::protobuf::internal::ArenaStringPtr sselfintroduce_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint64 msgtime_;
  int notifytype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SVRMSGCommonMsgNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SVRMSGCommonMsgNotify) */ {
 public:
  SVRMSGCommonMsgNotify();
  virtual ~SVRMSGCommonMsgNotify();

  SVRMSGCommonMsgNotify(const SVRMSGCommonMsgNotify& from);

  inline SVRMSGCommonMsgNotify& operator=(const SVRMSGCommonMsgNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SVRMSGCommonMsgNotify(SVRMSGCommonMsgNotify&& from) noexcept
    : SVRMSGCommonMsgNotify() {
    *this = ::std::move(from);
  }

  inline SVRMSGCommonMsgNotify& operator=(SVRMSGCommonMsgNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SVRMSGCommonMsgNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SVRMSGCommonMsgNotify* internal_default_instance() {
    return reinterpret_cast<const SVRMSGCommonMsgNotify*>(
               &_SVRMSGCommonMsgNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(SVRMSGCommonMsgNotify* other);
  friend void swap(SVRMSGCommonMsgNotify& a, SVRMSGCommonMsgNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SVRMSGCommonMsgNotify* New() const final {
    return CreateMaybeMessage<SVRMSGCommonMsgNotify>(NULL);
  }

  SVRMSGCommonMsgNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SVRMSGCommonMsgNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SVRMSGCommonMsgNotify& from);
  void MergeFrom(const SVRMSGCommonMsgNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SVRMSGCommonMsgNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sToIds = 2;
  int stoids_size() const;
  void clear_stoids();
  static const int kSToIdsFieldNumber = 2;
  const ::std::string& stoids(int index) const;
  ::std::string* mutable_stoids(int index);
  void set_stoids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_stoids(int index, ::std::string&& value);
  #endif
  void set_stoids(int index, const char* value);
  void set_stoids(int index, const char* value, size_t size);
  ::std::string* add_stoids();
  void add_stoids(const ::std::string& value);
  #if LANG_CXX11
  void add_stoids(::std::string&& value);
  #endif
  void add_stoids(const char* value);
  void add_stoids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stoids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stoids();

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sContent = 5;
  void clear_scontent();
  static const int kSContentFieldNumber = 5;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // string extend = 7;
  void clear_extend();
  static const int kExtendFieldNumber = 7;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint64 msgTime = 6;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 6;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .im.SVRCommonNotifyType notifyType = 4;
  void clear_notifytype();
  static const int kNotifyTypeFieldNumber = 4;
  ::im::SVRCommonNotifyType notifytype() const;
  void set_notifytype(::im::SVRCommonNotifyType value);

  // @@protoc_insertion_point(class_scope:im.SVRMSGCommonMsgNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stoids_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint64 msgtime_;
  int notifytype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SVRMSGNotifyACK : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SVRMSGNotifyACK) */ {
 public:
  SVRMSGNotifyACK();
  virtual ~SVRMSGNotifyACK();

  SVRMSGNotifyACK(const SVRMSGNotifyACK& from);

  inline SVRMSGNotifyACK& operator=(const SVRMSGNotifyACK& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SVRMSGNotifyACK(SVRMSGNotifyACK&& from) noexcept
    : SVRMSGNotifyACK() {
    *this = ::std::move(from);
  }

  inline SVRMSGNotifyACK& operator=(SVRMSGNotifyACK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SVRMSGNotifyACK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SVRMSGNotifyACK* internal_default_instance() {
    return reinterpret_cast<const SVRMSGNotifyACK*>(
               &_SVRMSGNotifyACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(SVRMSGNotifyACK* other);
  friend void swap(SVRMSGNotifyACK& a, SVRMSGNotifyACK& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SVRMSGNotifyACK* New() const final {
    return CreateMaybeMessage<SVRMSGNotifyACK>(NULL);
  }

  SVRMSGNotifyACK* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SVRMSGNotifyACK>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SVRMSGNotifyACK& from);
  void MergeFrom(const SVRMSGNotifyACK& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SVRMSGNotifyACK* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sMsgId = 1;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 1;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // uint64 msgTime = 2;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 2;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .im.ErrCode errcode = 3;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.SVRMSGNotifyACK)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::uint64 msgtime_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2emes_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MESChat

// string sFromId = 1;
inline void MESChat::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChat::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MESChat.sFromId)
  return sfromid_.GetNoArena();
}
inline void MESChat::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChat.sFromId)
}
#if LANG_CXX11
inline void MESChat::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChat.sFromId)
}
#endif
inline void MESChat::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChat.sFromId)
}
inline void MESChat::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChat.sFromId)
}
inline ::std::string* MESChat::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChat.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChat::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MESChat.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChat::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChat.sFromId)
}

// string sToId = 2;
inline void MESChat::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChat::stoid() const {
  // @@protoc_insertion_point(field_get:im.MESChat.sToId)
  return stoid_.GetNoArena();
}
inline void MESChat::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChat.sToId)
}
#if LANG_CXX11
inline void MESChat::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChat.sToId)
}
#endif
inline void MESChat::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChat.sToId)
}
inline void MESChat::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChat.sToId)
}
inline ::std::string* MESChat::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChat.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChat::release_stoid() {
  // @@protoc_insertion_point(field_release:im.MESChat.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChat::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChat.sToId)
}

// string sMsgId = 3;
inline void MESChat::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChat::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESChat.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESChat::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChat.sMsgId)
}
#if LANG_CXX11
inline void MESChat::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChat.sMsgId)
}
#endif
inline void MESChat::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChat.sMsgId)
}
inline void MESChat::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChat.sMsgId)
}
inline ::std::string* MESChat::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChat.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChat::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESChat.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChat::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChat.sMsgId)
}

// uint32 msgType = 4;
inline void MESChat::clear_msgtype() {
  msgtype_ = 0u;
}
inline ::google::protobuf::uint32 MESChat::msgtype() const {
  // @@protoc_insertion_point(field_get:im.MESChat.msgType)
  return msgtype_;
}
inline void MESChat::set_msgtype(::google::protobuf::uint32 value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:im.MESChat.msgType)
}

// uint64 msgTime = 5;
inline void MESChat::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MESChat::msgtime() const {
  // @@protoc_insertion_point(field_get:im.MESChat.msgTime)
  return msgtime_;
}
inline void MESChat::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.MESChat.msgTime)
}

// uint32 encrypt = 6;
inline void MESChat::clear_encrypt() {
  encrypt_ = 0u;
}
inline ::google::protobuf::uint32 MESChat::encrypt() const {
  // @@protoc_insertion_point(field_get:im.MESChat.encrypt)
  return encrypt_;
}
inline void MESChat::set_encrypt(::google::protobuf::uint32 value) {
  
  encrypt_ = value;
  // @@protoc_insertion_point(field_set:im.MESChat.encrypt)
}

// string sContent = 7;
inline void MESChat::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChat::scontent() const {
  // @@protoc_insertion_point(field_get:im.MESChat.sContent)
  return scontent_.GetNoArena();
}
inline void MESChat::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChat.sContent)
}
#if LANG_CXX11
inline void MESChat::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChat.sContent)
}
#endif
inline void MESChat::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChat.sContent)
}
inline void MESChat::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChat.sContent)
}
inline ::std::string* MESChat::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChat.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChat::release_scontent() {
  // @@protoc_insertion_point(field_release:im.MESChat.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChat::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im.MESChat.sContent)
}

// string sServiceId = 8;
inline void MESChat::clear_sserviceid() {
  sserviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChat::sserviceid() const {
  // @@protoc_insertion_point(field_get:im.MESChat.sServiceId)
  return sserviceid_.GetNoArena();
}
inline void MESChat::set_sserviceid(const ::std::string& value) {
  
  sserviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChat.sServiceId)
}
#if LANG_CXX11
inline void MESChat::set_sserviceid(::std::string&& value) {
  
  sserviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChat.sServiceId)
}
#endif
inline void MESChat::set_sserviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sserviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChat.sServiceId)
}
inline void MESChat::set_sserviceid(const char* value, size_t size) {
  
  sserviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChat.sServiceId)
}
inline ::std::string* MESChat::mutable_sserviceid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChat.sServiceId)
  return sserviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChat::release_sserviceid() {
  // @@protoc_insertion_point(field_release:im.MESChat.sServiceId)
  
  return sserviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChat::set_allocated_sserviceid(::std::string* sserviceid) {
  if (sserviceid != NULL) {
    
  } else {
    
  }
  sserviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sserviceid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChat.sServiceId)
}

// string sQuestionId = 9;
inline void MESChat::clear_squestionid() {
  squestionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChat::squestionid() const {
  // @@protoc_insertion_point(field_get:im.MESChat.sQuestionId)
  return squestionid_.GetNoArena();
}
inline void MESChat::set_squestionid(const ::std::string& value) {
  
  squestionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChat.sQuestionId)
}
#if LANG_CXX11
inline void MESChat::set_squestionid(::std::string&& value) {
  
  squestionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChat.sQuestionId)
}
#endif
inline void MESChat::set_squestionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  squestionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChat.sQuestionId)
}
inline void MESChat::set_squestionid(const char* value, size_t size) {
  
  squestionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChat.sQuestionId)
}
inline ::std::string* MESChat::mutable_squestionid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChat.sQuestionId)
  return squestionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChat::release_squestionid() {
  // @@protoc_insertion_point(field_release:im.MESChat.sQuestionId)
  
  return squestionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChat::set_allocated_squestionid(::std::string* squestionid) {
  if (squestionid != NULL) {
    
  } else {
    
  }
  squestionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), squestionid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChat.sQuestionId)
}

// string extend = 10;
inline void MESChat::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChat::extend() const {
  // @@protoc_insertion_point(field_get:im.MESChat.extend)
  return extend_.GetNoArena();
}
inline void MESChat::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChat.extend)
}
#if LANG_CXX11
inline void MESChat::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChat.extend)
}
#endif
inline void MESChat::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChat.extend)
}
inline void MESChat::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChat.extend)
}
inline ::std::string* MESChat::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChat.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChat::release_extend() {
  // @@protoc_insertion_point(field_release:im.MESChat.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChat::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.MESChat.extend)
}

// -------------------------------------------------------------------

// MESChatAck

// string sUserId = 1;
inline void MESChatAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChatAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.MESChatAck.sUserId)
  return suserid_.GetNoArena();
}
inline void MESChatAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChatAck.sUserId)
}
#if LANG_CXX11
inline void MESChatAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChatAck.sUserId)
}
#endif
inline void MESChatAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChatAck.sUserId)
}
inline void MESChatAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChatAck.sUserId)
}
inline ::std::string* MESChatAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChatAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChatAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MESChatAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChatAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChatAck.sUserId)
}

// string sMsgId = 2;
inline void MESChatAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChatAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESChatAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESChatAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChatAck.sMsgId)
}
#if LANG_CXX11
inline void MESChatAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChatAck.sMsgId)
}
#endif
inline void MESChatAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChatAck.sMsgId)
}
inline void MESChatAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChatAck.sMsgId)
}
inline ::std::string* MESChatAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChatAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChatAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESChatAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChatAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChatAck.sMsgId)
}

// uint64 sendtime = 3;
inline void MESChatAck::clear_sendtime() {
  sendtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MESChatAck::sendtime() const {
  // @@protoc_insertion_point(field_get:im.MESChatAck.sendtime)
  return sendtime_;
}
inline void MESChatAck::set_sendtime(::google::protobuf::uint64 value) {
  
  sendtime_ = value;
  // @@protoc_insertion_point(field_set:im.MESChatAck.sendtime)
}

// .im.ErrCode errcode = 4;
inline void MESChatAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode MESChatAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.MESChatAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void MESChatAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.MESChatAck.errcode)
}

// -------------------------------------------------------------------

// MESChatDeliveredAck

// string sFromId = 1;
inline void MESChatDeliveredAck::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChatDeliveredAck::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MESChatDeliveredAck.sFromId)
  return sfromid_.GetNoArena();
}
inline void MESChatDeliveredAck::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChatDeliveredAck.sFromId)
}
#if LANG_CXX11
inline void MESChatDeliveredAck::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChatDeliveredAck.sFromId)
}
#endif
inline void MESChatDeliveredAck::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChatDeliveredAck.sFromId)
}
inline void MESChatDeliveredAck::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChatDeliveredAck.sFromId)
}
inline ::std::string* MESChatDeliveredAck::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChatDeliveredAck.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChatDeliveredAck::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MESChatDeliveredAck.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChatDeliveredAck::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChatDeliveredAck.sFromId)
}

// string sToId = 2;
inline void MESChatDeliveredAck::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChatDeliveredAck::stoid() const {
  // @@protoc_insertion_point(field_get:im.MESChatDeliveredAck.sToId)
  return stoid_.GetNoArena();
}
inline void MESChatDeliveredAck::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChatDeliveredAck.sToId)
}
#if LANG_CXX11
inline void MESChatDeliveredAck::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChatDeliveredAck.sToId)
}
#endif
inline void MESChatDeliveredAck::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChatDeliveredAck.sToId)
}
inline void MESChatDeliveredAck::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChatDeliveredAck.sToId)
}
inline ::std::string* MESChatDeliveredAck::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChatDeliveredAck.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChatDeliveredAck::release_stoid() {
  // @@protoc_insertion_point(field_release:im.MESChatDeliveredAck.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChatDeliveredAck::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChatDeliveredAck.sToId)
}

// string sMsgId = 3;
inline void MESChatDeliveredAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChatDeliveredAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESChatDeliveredAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESChatDeliveredAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChatDeliveredAck.sMsgId)
}
#if LANG_CXX11
inline void MESChatDeliveredAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChatDeliveredAck.sMsgId)
}
#endif
inline void MESChatDeliveredAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChatDeliveredAck.sMsgId)
}
inline void MESChatDeliveredAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChatDeliveredAck.sMsgId)
}
inline ::std::string* MESChatDeliveredAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChatDeliveredAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChatDeliveredAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESChatDeliveredAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChatDeliveredAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChatDeliveredAck.sMsgId)
}

// -------------------------------------------------------------------

// MESChatDeliveredNotificationAck

// string sUserId = 1;
inline void MESChatDeliveredNotificationAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChatDeliveredNotificationAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.MESChatDeliveredNotificationAck.sUserId)
  return suserid_.GetNoArena();
}
inline void MESChatDeliveredNotificationAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChatDeliveredNotificationAck.sUserId)
}
#if LANG_CXX11
inline void MESChatDeliveredNotificationAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChatDeliveredNotificationAck.sUserId)
}
#endif
inline void MESChatDeliveredNotificationAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChatDeliveredNotificationAck.sUserId)
}
inline void MESChatDeliveredNotificationAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChatDeliveredNotificationAck.sUserId)
}
inline ::std::string* MESChatDeliveredNotificationAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChatDeliveredNotificationAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChatDeliveredNotificationAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MESChatDeliveredNotificationAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChatDeliveredNotificationAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChatDeliveredNotificationAck.sUserId)
}

// string sMsgId = 2;
inline void MESChatDeliveredNotificationAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChatDeliveredNotificationAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESChatDeliveredNotificationAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESChatDeliveredNotificationAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChatDeliveredNotificationAck.sMsgId)
}
#if LANG_CXX11
inline void MESChatDeliveredNotificationAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChatDeliveredNotificationAck.sMsgId)
}
#endif
inline void MESChatDeliveredNotificationAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChatDeliveredNotificationAck.sMsgId)
}
inline void MESChatDeliveredNotificationAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChatDeliveredNotificationAck.sMsgId)
}
inline ::std::string* MESChatDeliveredNotificationAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChatDeliveredNotificationAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChatDeliveredNotificationAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESChatDeliveredNotificationAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChatDeliveredNotificationAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChatDeliveredNotificationAck.sMsgId)
}

// -------------------------------------------------------------------

// MsgReadResult

// string sMsgId = 1;
inline void MsgReadResult::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgReadResult::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MsgReadResult.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MsgReadResult::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MsgReadResult.sMsgId)
}
#if LANG_CXX11
inline void MsgReadResult::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MsgReadResult.sMsgId)
}
#endif
inline void MsgReadResult::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MsgReadResult.sMsgId)
}
inline void MsgReadResult::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MsgReadResult.sMsgId)
}
inline ::std::string* MsgReadResult::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MsgReadResult.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgReadResult::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MsgReadResult.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgReadResult::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MsgReadResult.sMsgId)
}

// .im.ErrCode errcode = 2;
inline void MsgReadResult::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode MsgReadResult::errcode() const {
  // @@protoc_insertion_point(field_get:im.MsgReadResult.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void MsgReadResult::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.MsgReadResult.errcode)
}

// -------------------------------------------------------------------

// MESChatRead

// string sFromId = 1;
inline void MESChatRead::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChatRead::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MESChatRead.sFromId)
  return sfromid_.GetNoArena();
}
inline void MESChatRead::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChatRead.sFromId)
}
#if LANG_CXX11
inline void MESChatRead::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChatRead.sFromId)
}
#endif
inline void MESChatRead::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChatRead.sFromId)
}
inline void MESChatRead::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChatRead.sFromId)
}
inline ::std::string* MESChatRead::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChatRead.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChatRead::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MESChatRead.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChatRead::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChatRead.sFromId)
}

// string sToId = 2;
inline void MESChatRead::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChatRead::stoid() const {
  // @@protoc_insertion_point(field_get:im.MESChatRead.sToId)
  return stoid_.GetNoArena();
}
inline void MESChatRead::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChatRead.sToId)
}
#if LANG_CXX11
inline void MESChatRead::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChatRead.sToId)
}
#endif
inline void MESChatRead::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChatRead.sToId)
}
inline void MESChatRead::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChatRead.sToId)
}
inline ::std::string* MESChatRead::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChatRead.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChatRead::release_stoid() {
  // @@protoc_insertion_point(field_release:im.MESChatRead.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChatRead::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChatRead.sToId)
}

// string sMsgId = 3;
inline void MESChatRead::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChatRead::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESChatRead.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESChatRead::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChatRead.sMsgId)
}
#if LANG_CXX11
inline void MESChatRead::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChatRead.sMsgId)
}
#endif
inline void MESChatRead::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChatRead.sMsgId)
}
inline void MESChatRead::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChatRead.sMsgId)
}
inline ::std::string* MESChatRead::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChatRead.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChatRead::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESChatRead.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChatRead::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChatRead.sMsgId)
}

// repeated .im.MsgReadResult readResults = 4;
inline int MESChatRead::readresults_size() const {
  return readresults_.size();
}
inline void MESChatRead::clear_readresults() {
  readresults_.Clear();
}
inline ::im::MsgReadResult* MESChatRead::mutable_readresults(int index) {
  // @@protoc_insertion_point(field_mutable:im.MESChatRead.readResults)
  return readresults_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::im::MsgReadResult >*
MESChatRead::mutable_readresults() {
  // @@protoc_insertion_point(field_mutable_list:im.MESChatRead.readResults)
  return &readresults_;
}
inline const ::im::MsgReadResult& MESChatRead::readresults(int index) const {
  // @@protoc_insertion_point(field_get:im.MESChatRead.readResults)
  return readresults_.Get(index);
}
inline ::im::MsgReadResult* MESChatRead::add_readresults() {
  // @@protoc_insertion_point(field_add:im.MESChatRead.readResults)
  return readresults_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::im::MsgReadResult >&
MESChatRead::readresults() const {
  // @@protoc_insertion_point(field_list:im.MESChatRead.readResults)
  return readresults_;
}

// uint32 readReceiptOff = 5;
inline void MESChatRead::clear_readreceiptoff() {
  readreceiptoff_ = 0u;
}
inline ::google::protobuf::uint32 MESChatRead::readreceiptoff() const {
  // @@protoc_insertion_point(field_get:im.MESChatRead.readReceiptOff)
  return readreceiptoff_;
}
inline void MESChatRead::set_readreceiptoff(::google::protobuf::uint32 value) {
  
  readreceiptoff_ = value;
  // @@protoc_insertion_point(field_set:im.MESChatRead.readReceiptOff)
}

// -------------------------------------------------------------------

// MESChatReadAck

// string sUserId = 1;
inline void MESChatReadAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChatReadAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.MESChatReadAck.sUserId)
  return suserid_.GetNoArena();
}
inline void MESChatReadAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChatReadAck.sUserId)
}
#if LANG_CXX11
inline void MESChatReadAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChatReadAck.sUserId)
}
#endif
inline void MESChatReadAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChatReadAck.sUserId)
}
inline void MESChatReadAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChatReadAck.sUserId)
}
inline ::std::string* MESChatReadAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChatReadAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChatReadAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MESChatReadAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChatReadAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChatReadAck.sUserId)
}

// string sMsgId = 2;
inline void MESChatReadAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChatReadAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESChatReadAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESChatReadAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChatReadAck.sMsgId)
}
#if LANG_CXX11
inline void MESChatReadAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChatReadAck.sMsgId)
}
#endif
inline void MESChatReadAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChatReadAck.sMsgId)
}
inline void MESChatReadAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChatReadAck.sMsgId)
}
inline ::std::string* MESChatReadAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChatReadAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChatReadAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESChatReadAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChatReadAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChatReadAck.sMsgId)
}

// .im.ErrCode errcode = 3;
inline void MESChatReadAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode MESChatReadAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.MESChatReadAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void MESChatReadAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.MESChatReadAck.errcode)
}

// -------------------------------------------------------------------

// MESChatReadDelivereAck

// string sUserId = 1;
inline void MESChatReadDelivereAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChatReadDelivereAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.MESChatReadDelivereAck.sUserId)
  return suserid_.GetNoArena();
}
inline void MESChatReadDelivereAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChatReadDelivereAck.sUserId)
}
#if LANG_CXX11
inline void MESChatReadDelivereAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChatReadDelivereAck.sUserId)
}
#endif
inline void MESChatReadDelivereAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChatReadDelivereAck.sUserId)
}
inline void MESChatReadDelivereAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChatReadDelivereAck.sUserId)
}
inline ::std::string* MESChatReadDelivereAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChatReadDelivereAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChatReadDelivereAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MESChatReadDelivereAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChatReadDelivereAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChatReadDelivereAck.sUserId)
}

// string sMsgId = 2;
inline void MESChatReadDelivereAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChatReadDelivereAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESChatReadDelivereAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESChatReadDelivereAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChatReadDelivereAck.sMsgId)
}
#if LANG_CXX11
inline void MESChatReadDelivereAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChatReadDelivereAck.sMsgId)
}
#endif
inline void MESChatReadDelivereAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChatReadDelivereAck.sMsgId)
}
inline void MESChatReadDelivereAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChatReadDelivereAck.sMsgId)
}
inline ::std::string* MESChatReadDelivereAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChatReadDelivereAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChatReadDelivereAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESChatReadDelivereAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChatReadDelivereAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChatReadDelivereAck.sMsgId)
}

// -------------------------------------------------------------------

// OfflineTotal

// uint32 cmdId = 1;
inline void OfflineTotal::clear_cmdid() {
  cmdid_ = 0u;
}
inline ::google::protobuf::uint32 OfflineTotal::cmdid() const {
  // @@protoc_insertion_point(field_get:im.OfflineTotal.cmdId)
  return cmdid_;
}
inline void OfflineTotal::set_cmdid(::google::protobuf::uint32 value) {
  
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:im.OfflineTotal.cmdId)
}

// string sFromId = 2;
inline void OfflineTotal::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OfflineTotal::sfromid() const {
  // @@protoc_insertion_point(field_get:im.OfflineTotal.sFromId)
  return sfromid_.GetNoArena();
}
inline void OfflineTotal::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.OfflineTotal.sFromId)
}
#if LANG_CXX11
inline void OfflineTotal::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.OfflineTotal.sFromId)
}
#endif
inline void OfflineTotal::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.OfflineTotal.sFromId)
}
inline void OfflineTotal::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.OfflineTotal.sFromId)
}
inline ::std::string* OfflineTotal::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.OfflineTotal.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfflineTotal::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.OfflineTotal.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfflineTotal::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.OfflineTotal.sFromId)
}

// string sToId = 3;
inline void OfflineTotal::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OfflineTotal::stoid() const {
  // @@protoc_insertion_point(field_get:im.OfflineTotal.sToId)
  return stoid_.GetNoArena();
}
inline void OfflineTotal::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.OfflineTotal.sToId)
}
#if LANG_CXX11
inline void OfflineTotal::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.OfflineTotal.sToId)
}
#endif
inline void OfflineTotal::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.OfflineTotal.sToId)
}
inline void OfflineTotal::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.OfflineTotal.sToId)
}
inline ::std::string* OfflineTotal::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.OfflineTotal.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfflineTotal::release_stoid() {
  // @@protoc_insertion_point(field_release:im.OfflineTotal.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfflineTotal::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.OfflineTotal.sToId)
}

// int32 unreadTotal = 4;
inline void OfflineTotal::clear_unreadtotal() {
  unreadtotal_ = 0;
}
inline ::google::protobuf::int32 OfflineTotal::unreadtotal() const {
  // @@protoc_insertion_point(field_get:im.OfflineTotal.unreadTotal)
  return unreadtotal_;
}
inline void OfflineTotal::set_unreadtotal(::google::protobuf::int32 value) {
  
  unreadtotal_ = value;
  // @@protoc_insertion_point(field_set:im.OfflineTotal.unreadTotal)
}

// int32 unreadChatCount = 5;
inline void OfflineTotal::clear_unreadchatcount() {
  unreadchatcount_ = 0;
}
inline ::google::protobuf::int32 OfflineTotal::unreadchatcount() const {
  // @@protoc_insertion_point(field_get:im.OfflineTotal.unreadChatCount)
  return unreadchatcount_;
}
inline void OfflineTotal::set_unreadchatcount(::google::protobuf::int32 value) {
  
  unreadchatcount_ = value;
  // @@protoc_insertion_point(field_set:im.OfflineTotal.unreadChatCount)
}

// bytes sRecentcontent = 6;
inline void OfflineTotal::clear_srecentcontent() {
  srecentcontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OfflineTotal::srecentcontent() const {
  // @@protoc_insertion_point(field_get:im.OfflineTotal.sRecentcontent)
  return srecentcontent_.GetNoArena();
}
inline void OfflineTotal::set_srecentcontent(const ::std::string& value) {
  
  srecentcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.OfflineTotal.sRecentcontent)
}
#if LANG_CXX11
inline void OfflineTotal::set_srecentcontent(::std::string&& value) {
  
  srecentcontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.OfflineTotal.sRecentcontent)
}
#endif
inline void OfflineTotal::set_srecentcontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  srecentcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.OfflineTotal.sRecentcontent)
}
inline void OfflineTotal::set_srecentcontent(const void* value, size_t size) {
  
  srecentcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.OfflineTotal.sRecentcontent)
}
inline ::std::string* OfflineTotal::mutable_srecentcontent() {
  
  // @@protoc_insertion_point(field_mutable:im.OfflineTotal.sRecentcontent)
  return srecentcontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfflineTotal::release_srecentcontent() {
  // @@protoc_insertion_point(field_release:im.OfflineTotal.sRecentcontent)
  
  return srecentcontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfflineTotal::set_allocated_srecentcontent(::std::string* srecentcontent) {
  if (srecentcontent != NULL) {
    
  } else {
    
  }
  srecentcontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), srecentcontent);
  // @@protoc_insertion_point(field_set_allocated:im.OfflineTotal.sRecentcontent)
}

// uint64 recenttimestamp = 7;
inline void OfflineTotal::clear_recenttimestamp() {
  recenttimestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 OfflineTotal::recenttimestamp() const {
  // @@protoc_insertion_point(field_get:im.OfflineTotal.recenttimestamp)
  return recenttimestamp_;
}
inline void OfflineTotal::set_recenttimestamp(::google::protobuf::uint64 value) {
  
  recenttimestamp_ = value;
  // @@protoc_insertion_point(field_set:im.OfflineTotal.recenttimestamp)
}

// string sRecentMsgId = 8;
inline void OfflineTotal::clear_srecentmsgid() {
  srecentmsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OfflineTotal::srecentmsgid() const {
  // @@protoc_insertion_point(field_get:im.OfflineTotal.sRecentMsgId)
  return srecentmsgid_.GetNoArena();
}
inline void OfflineTotal::set_srecentmsgid(const ::std::string& value) {
  
  srecentmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.OfflineTotal.sRecentMsgId)
}
#if LANG_CXX11
inline void OfflineTotal::set_srecentmsgid(::std::string&& value) {
  
  srecentmsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.OfflineTotal.sRecentMsgId)
}
#endif
inline void OfflineTotal::set_srecentmsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  srecentmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.OfflineTotal.sRecentMsgId)
}
inline void OfflineTotal::set_srecentmsgid(const char* value, size_t size) {
  
  srecentmsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.OfflineTotal.sRecentMsgId)
}
inline ::std::string* OfflineTotal::mutable_srecentmsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.OfflineTotal.sRecentMsgId)
  return srecentmsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfflineTotal::release_srecentmsgid() {
  // @@protoc_insertion_point(field_release:im.OfflineTotal.sRecentMsgId)
  
  return srecentmsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfflineTotal::set_allocated_srecentmsgid(::std::string* srecentmsgid) {
  if (srecentmsgid != NULL) {
    
  } else {
    
  }
  srecentmsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), srecentmsgid);
  // @@protoc_insertion_point(field_set_allocated:im.OfflineTotal.sRecentMsgId)
}

// -------------------------------------------------------------------

// MESOfflineSummary

// string sUserId = 1;
inline void MESOfflineSummary::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESOfflineSummary::suserid() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineSummary.sUserId)
  return suserid_.GetNoArena();
}
inline void MESOfflineSummary::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESOfflineSummary.sUserId)
}
#if LANG_CXX11
inline void MESOfflineSummary::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESOfflineSummary.sUserId)
}
#endif
inline void MESOfflineSummary::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESOfflineSummary.sUserId)
}
inline void MESOfflineSummary::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESOfflineSummary.sUserId)
}
inline ::std::string* MESOfflineSummary::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESOfflineSummary.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESOfflineSummary::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MESOfflineSummary.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESOfflineSummary::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESOfflineSummary.sUserId)
}

// -------------------------------------------------------------------

// MESOfflineSummaryAck

// string sUserId = 1;
inline void MESOfflineSummaryAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESOfflineSummaryAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineSummaryAck.sUserId)
  return suserid_.GetNoArena();
}
inline void MESOfflineSummaryAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESOfflineSummaryAck.sUserId)
}
#if LANG_CXX11
inline void MESOfflineSummaryAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESOfflineSummaryAck.sUserId)
}
#endif
inline void MESOfflineSummaryAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESOfflineSummaryAck.sUserId)
}
inline void MESOfflineSummaryAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESOfflineSummaryAck.sUserId)
}
inline ::std::string* MESOfflineSummaryAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESOfflineSummaryAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESOfflineSummaryAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MESOfflineSummaryAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESOfflineSummaryAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESOfflineSummaryAck.sUserId)
}

// repeated .im.OfflineTotal offlineTotals = 2;
inline int MESOfflineSummaryAck::offlinetotals_size() const {
  return offlinetotals_.size();
}
inline void MESOfflineSummaryAck::clear_offlinetotals() {
  offlinetotals_.Clear();
}
inline ::im::OfflineTotal* MESOfflineSummaryAck::mutable_offlinetotals(int index) {
  // @@protoc_insertion_point(field_mutable:im.MESOfflineSummaryAck.offlineTotals)
  return offlinetotals_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::im::OfflineTotal >*
MESOfflineSummaryAck::mutable_offlinetotals() {
  // @@protoc_insertion_point(field_mutable_list:im.MESOfflineSummaryAck.offlineTotals)
  return &offlinetotals_;
}
inline const ::im::OfflineTotal& MESOfflineSummaryAck::offlinetotals(int index) const {
  // @@protoc_insertion_point(field_get:im.MESOfflineSummaryAck.offlineTotals)
  return offlinetotals_.Get(index);
}
inline ::im::OfflineTotal* MESOfflineSummaryAck::add_offlinetotals() {
  // @@protoc_insertion_point(field_add:im.MESOfflineSummaryAck.offlineTotals)
  return offlinetotals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::im::OfflineTotal >&
MESOfflineSummaryAck::offlinetotals() const {
  // @@protoc_insertion_point(field_list:im.MESOfflineSummaryAck.offlineTotals)
  return offlinetotals_;
}

// .im.ErrCode errcode = 3;
inline void MESOfflineSummaryAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode MESOfflineSummaryAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineSummaryAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void MESOfflineSummaryAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.MESOfflineSummaryAck.errcode)
}

// -------------------------------------------------------------------

// MESOfflineTotal

// uint32 cmdId = 1;
inline void MESOfflineTotal::clear_cmdid() {
  cmdid_ = 0u;
}
inline ::google::protobuf::uint32 MESOfflineTotal::cmdid() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineTotal.cmdId)
  return cmdid_;
}
inline void MESOfflineTotal::set_cmdid(::google::protobuf::uint32 value) {
  
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:im.MESOfflineTotal.cmdId)
}

// string sFromId = 2;
inline void MESOfflineTotal::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESOfflineTotal::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineTotal.sFromId)
  return sfromid_.GetNoArena();
}
inline void MESOfflineTotal::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESOfflineTotal.sFromId)
}
#if LANG_CXX11
inline void MESOfflineTotal::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESOfflineTotal.sFromId)
}
#endif
inline void MESOfflineTotal::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESOfflineTotal.sFromId)
}
inline void MESOfflineTotal::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESOfflineTotal.sFromId)
}
inline ::std::string* MESOfflineTotal::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESOfflineTotal.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESOfflineTotal::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MESOfflineTotal.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESOfflineTotal::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MESOfflineTotal.sFromId)
}

// string sToId = 3;
inline void MESOfflineTotal::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESOfflineTotal::stoid() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineTotal.sToId)
  return stoid_.GetNoArena();
}
inline void MESOfflineTotal::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESOfflineTotal.sToId)
}
#if LANG_CXX11
inline void MESOfflineTotal::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESOfflineTotal.sToId)
}
#endif
inline void MESOfflineTotal::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESOfflineTotal.sToId)
}
inline void MESOfflineTotal::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESOfflineTotal.sToId)
}
inline ::std::string* MESOfflineTotal::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESOfflineTotal.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESOfflineTotal::release_stoid() {
  // @@protoc_insertion_point(field_release:im.MESOfflineTotal.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESOfflineTotal::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.MESOfflineTotal.sToId)
}

// -------------------------------------------------------------------

// MESOfflineMsg

// uint32 cmdId = 1;
inline void MESOfflineMsg::clear_cmdid() {
  cmdid_ = 0u;
}
inline ::google::protobuf::uint32 MESOfflineMsg::cmdid() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsg.cmdId)
  return cmdid_;
}
inline void MESOfflineMsg::set_cmdid(::google::protobuf::uint32 value) {
  
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:im.MESOfflineMsg.cmdId)
}

// string sFromId = 2;
inline void MESOfflineMsg::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESOfflineMsg::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsg.sFromId)
  return sfromid_.GetNoArena();
}
inline void MESOfflineMsg::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESOfflineMsg.sFromId)
}
#if LANG_CXX11
inline void MESOfflineMsg::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESOfflineMsg.sFromId)
}
#endif
inline void MESOfflineMsg::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESOfflineMsg.sFromId)
}
inline void MESOfflineMsg::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESOfflineMsg.sFromId)
}
inline ::std::string* MESOfflineMsg::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESOfflineMsg.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESOfflineMsg::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MESOfflineMsg.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESOfflineMsg::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MESOfflineMsg.sFromId)
}

// string sToId = 3;
inline void MESOfflineMsg::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESOfflineMsg::stoid() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsg.sToId)
  return stoid_.GetNoArena();
}
inline void MESOfflineMsg::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESOfflineMsg.sToId)
}
#if LANG_CXX11
inline void MESOfflineMsg::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESOfflineMsg.sToId)
}
#endif
inline void MESOfflineMsg::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESOfflineMsg.sToId)
}
inline void MESOfflineMsg::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESOfflineMsg.sToId)
}
inline ::std::string* MESOfflineMsg::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESOfflineMsg.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESOfflineMsg::release_stoid() {
  // @@protoc_insertion_point(field_release:im.MESOfflineMsg.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESOfflineMsg::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.MESOfflineMsg.sToId)
}

// int32 count = 4;
inline void MESOfflineMsg::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 MESOfflineMsg::count() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsg.count)
  return count_;
}
inline void MESOfflineMsg::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:im.MESOfflineMsg.count)
}

// string sMsgId = 5;
inline void MESOfflineMsg::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESOfflineMsg::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsg.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESOfflineMsg::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESOfflineMsg.sMsgId)
}
#if LANG_CXX11
inline void MESOfflineMsg::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESOfflineMsg.sMsgId)
}
#endif
inline void MESOfflineMsg::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESOfflineMsg.sMsgId)
}
inline void MESOfflineMsg::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESOfflineMsg.sMsgId)
}
inline ::std::string* MESOfflineMsg::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESOfflineMsg.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESOfflineMsg::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESOfflineMsg.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESOfflineMsg::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESOfflineMsg.sMsgId)
}

// repeated .im.OfflineDeliveredMsg lsMsgs = 6;
inline int MESOfflineMsg::lsmsgs_size() const {
  return lsmsgs_.size();
}
inline void MESOfflineMsg::clear_lsmsgs() {
  lsmsgs_.Clear();
}
inline ::im::OfflineDeliveredMsg* MESOfflineMsg::mutable_lsmsgs(int index) {
  // @@protoc_insertion_point(field_mutable:im.MESOfflineMsg.lsMsgs)
  return lsmsgs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::im::OfflineDeliveredMsg >*
MESOfflineMsg::mutable_lsmsgs() {
  // @@protoc_insertion_point(field_mutable_list:im.MESOfflineMsg.lsMsgs)
  return &lsmsgs_;
}
inline const ::im::OfflineDeliveredMsg& MESOfflineMsg::lsmsgs(int index) const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsg.lsMsgs)
  return lsmsgs_.Get(index);
}
inline ::im::OfflineDeliveredMsg* MESOfflineMsg::add_lsmsgs() {
  // @@protoc_insertion_point(field_add:im.MESOfflineMsg.lsMsgs)
  return lsmsgs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::im::OfflineDeliveredMsg >&
MESOfflineMsg::lsmsgs() const {
  // @@protoc_insertion_point(field_list:im.MESOfflineMsg.lsMsgs)
  return lsmsgs_;
}

// -------------------------------------------------------------------

// OfflineMsgData

// uint32 cmdId = 1;
inline void OfflineMsgData::clear_cmdid() {
  cmdid_ = 0u;
}
inline ::google::protobuf::uint32 OfflineMsgData::cmdid() const {
  // @@protoc_insertion_point(field_get:im.OfflineMsgData.cmdId)
  return cmdid_;
}
inline void OfflineMsgData::set_cmdid(::google::protobuf::uint32 value) {
  
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:im.OfflineMsgData.cmdId)
}

// bytes sMsgData = 2;
inline void OfflineMsgData::clear_smsgdata() {
  smsgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OfflineMsgData::smsgdata() const {
  // @@protoc_insertion_point(field_get:im.OfflineMsgData.sMsgData)
  return smsgdata_.GetNoArena();
}
inline void OfflineMsgData::set_smsgdata(const ::std::string& value) {
  
  smsgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.OfflineMsgData.sMsgData)
}
#if LANG_CXX11
inline void OfflineMsgData::set_smsgdata(::std::string&& value) {
  
  smsgdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.OfflineMsgData.sMsgData)
}
#endif
inline void OfflineMsgData::set_smsgdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.OfflineMsgData.sMsgData)
}
inline void OfflineMsgData::set_smsgdata(const void* value, size_t size) {
  
  smsgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.OfflineMsgData.sMsgData)
}
inline ::std::string* OfflineMsgData::mutable_smsgdata() {
  
  // @@protoc_insertion_point(field_mutable:im.OfflineMsgData.sMsgData)
  return smsgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfflineMsgData::release_smsgdata() {
  // @@protoc_insertion_point(field_release:im.OfflineMsgData.sMsgData)
  
  return smsgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfflineMsgData::set_allocated_smsgdata(::std::string* smsgdata) {
  if (smsgdata != NULL) {
    
  } else {
    
  }
  smsgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgdata);
  // @@protoc_insertion_point(field_set_allocated:im.OfflineMsgData.sMsgData)
}

// string sMsgId = 3;
inline void OfflineMsgData::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OfflineMsgData::smsgid() const {
  // @@protoc_insertion_point(field_get:im.OfflineMsgData.sMsgId)
  return smsgid_.GetNoArena();
}
inline void OfflineMsgData::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.OfflineMsgData.sMsgId)
}
#if LANG_CXX11
inline void OfflineMsgData::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.OfflineMsgData.sMsgId)
}
#endif
inline void OfflineMsgData::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.OfflineMsgData.sMsgId)
}
inline void OfflineMsgData::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.OfflineMsgData.sMsgId)
}
inline ::std::string* OfflineMsgData::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.OfflineMsgData.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfflineMsgData::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.OfflineMsgData.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfflineMsgData::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.OfflineMsgData.sMsgId)
}

// string sFromId = 4;
inline void OfflineMsgData::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OfflineMsgData::sfromid() const {
  // @@protoc_insertion_point(field_get:im.OfflineMsgData.sFromId)
  return sfromid_.GetNoArena();
}
inline void OfflineMsgData::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.OfflineMsgData.sFromId)
}
#if LANG_CXX11
inline void OfflineMsgData::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.OfflineMsgData.sFromId)
}
#endif
inline void OfflineMsgData::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.OfflineMsgData.sFromId)
}
inline void OfflineMsgData::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.OfflineMsgData.sFromId)
}
inline ::std::string* OfflineMsgData::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.OfflineMsgData.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfflineMsgData::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.OfflineMsgData.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfflineMsgData::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.OfflineMsgData.sFromId)
}

// uint32 status = 5;
inline void OfflineMsgData::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 OfflineMsgData::status() const {
  // @@protoc_insertion_point(field_get:im.OfflineMsgData.status)
  return status_;
}
inline void OfflineMsgData::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:im.OfflineMsgData.status)
}

// uint64 uCreateTime = 6;
inline void OfflineMsgData::clear_ucreatetime() {
  ucreatetime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 OfflineMsgData::ucreatetime() const {
  // @@protoc_insertion_point(field_get:im.OfflineMsgData.uCreateTime)
  return ucreatetime_;
}
inline void OfflineMsgData::set_ucreatetime(::google::protobuf::uint64 value) {
  
  ucreatetime_ = value;
  // @@protoc_insertion_point(field_set:im.OfflineMsgData.uCreateTime)
}

// -------------------------------------------------------------------

// MESOfflineMsgAck

// string sFromId = 1;
inline void MESOfflineMsgAck::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESOfflineMsgAck::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsgAck.sFromId)
  return sfromid_.GetNoArena();
}
inline void MESOfflineMsgAck::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESOfflineMsgAck.sFromId)
}
#if LANG_CXX11
inline void MESOfflineMsgAck::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESOfflineMsgAck.sFromId)
}
#endif
inline void MESOfflineMsgAck::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESOfflineMsgAck.sFromId)
}
inline void MESOfflineMsgAck::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESOfflineMsgAck.sFromId)
}
inline ::std::string* MESOfflineMsgAck::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESOfflineMsgAck.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESOfflineMsgAck::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MESOfflineMsgAck.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESOfflineMsgAck::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MESOfflineMsgAck.sFromId)
}

// string sToId = 2;
inline void MESOfflineMsgAck::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESOfflineMsgAck::stoid() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsgAck.sToId)
  return stoid_.GetNoArena();
}
inline void MESOfflineMsgAck::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESOfflineMsgAck.sToId)
}
#if LANG_CXX11
inline void MESOfflineMsgAck::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESOfflineMsgAck.sToId)
}
#endif
inline void MESOfflineMsgAck::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESOfflineMsgAck.sToId)
}
inline void MESOfflineMsgAck::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESOfflineMsgAck.sToId)
}
inline ::std::string* MESOfflineMsgAck::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESOfflineMsgAck.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESOfflineMsgAck::release_stoid() {
  // @@protoc_insertion_point(field_release:im.MESOfflineMsgAck.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESOfflineMsgAck::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.MESOfflineMsgAck.sToId)
}

// .im.ErrCode errcode = 4;
inline void MESOfflineMsgAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode MESOfflineMsgAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsgAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void MESOfflineMsgAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.MESOfflineMsgAck.errcode)
}

// string sMsgId = 5;
inline void MESOfflineMsgAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESOfflineMsgAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsgAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESOfflineMsgAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESOfflineMsgAck.sMsgId)
}
#if LANG_CXX11
inline void MESOfflineMsgAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESOfflineMsgAck.sMsgId)
}
#endif
inline void MESOfflineMsgAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESOfflineMsgAck.sMsgId)
}
inline void MESOfflineMsgAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESOfflineMsgAck.sMsgId)
}
inline ::std::string* MESOfflineMsgAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESOfflineMsgAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESOfflineMsgAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESOfflineMsgAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESOfflineMsgAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESOfflineMsgAck.sMsgId)
}

// uint64 msgTime = 6;
inline void MESOfflineMsgAck::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MESOfflineMsgAck::msgtime() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsgAck.msgTime)
  return msgtime_;
}
inline void MESOfflineMsgAck::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.MESOfflineMsgAck.msgTime)
}

// repeated .im.OfflineMsgData msglist = 13;
inline int MESOfflineMsgAck::msglist_size() const {
  return msglist_.size();
}
inline void MESOfflineMsgAck::clear_msglist() {
  msglist_.Clear();
}
inline ::im::OfflineMsgData* MESOfflineMsgAck::mutable_msglist(int index) {
  // @@protoc_insertion_point(field_mutable:im.MESOfflineMsgAck.msglist)
  return msglist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::im::OfflineMsgData >*
MESOfflineMsgAck::mutable_msglist() {
  // @@protoc_insertion_point(field_mutable_list:im.MESOfflineMsgAck.msglist)
  return &msglist_;
}
inline const ::im::OfflineMsgData& MESOfflineMsgAck::msglist(int index) const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsgAck.msglist)
  return msglist_.Get(index);
}
inline ::im::OfflineMsgData* MESOfflineMsgAck::add_msglist() {
  // @@protoc_insertion_point(field_add:im.MESOfflineMsgAck.msglist)
  return msglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::im::OfflineMsgData >&
MESOfflineMsgAck::msglist() const {
  // @@protoc_insertion_point(field_list:im.MESOfflineMsgAck.msglist)
  return msglist_;
}

// uint32 msgTotal = 14;
inline void MESOfflineMsgAck::clear_msgtotal() {
  msgtotal_ = 0u;
}
inline ::google::protobuf::uint32 MESOfflineMsgAck::msgtotal() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsgAck.msgTotal)
  return msgtotal_;
}
inline void MESOfflineMsgAck::set_msgtotal(::google::protobuf::uint32 value) {
  
  msgtotal_ = value;
  // @@protoc_insertion_point(field_set:im.MESOfflineMsgAck.msgTotal)
}

// -------------------------------------------------------------------

// OfflineDeliveredMsg

// uint32 cmdId = 1;
inline void OfflineDeliveredMsg::clear_cmdid() {
  cmdid_ = 0u;
}
inline ::google::protobuf::uint32 OfflineDeliveredMsg::cmdid() const {
  // @@protoc_insertion_point(field_get:im.OfflineDeliveredMsg.cmdId)
  return cmdid_;
}
inline void OfflineDeliveredMsg::set_cmdid(::google::protobuf::uint32 value) {
  
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:im.OfflineDeliveredMsg.cmdId)
}

// string sFromId = 2;
inline void OfflineDeliveredMsg::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OfflineDeliveredMsg::sfromid() const {
  // @@protoc_insertion_point(field_get:im.OfflineDeliveredMsg.sFromId)
  return sfromid_.GetNoArena();
}
inline void OfflineDeliveredMsg::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.OfflineDeliveredMsg.sFromId)
}
#if LANG_CXX11
inline void OfflineDeliveredMsg::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.OfflineDeliveredMsg.sFromId)
}
#endif
inline void OfflineDeliveredMsg::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.OfflineDeliveredMsg.sFromId)
}
inline void OfflineDeliveredMsg::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.OfflineDeliveredMsg.sFromId)
}
inline ::std::string* OfflineDeliveredMsg::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.OfflineDeliveredMsg.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfflineDeliveredMsg::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.OfflineDeliveredMsg.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfflineDeliveredMsg::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.OfflineDeliveredMsg.sFromId)
}

// string sToId = 3;
inline void OfflineDeliveredMsg::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OfflineDeliveredMsg::stoid() const {
  // @@protoc_insertion_point(field_get:im.OfflineDeliveredMsg.sToId)
  return stoid_.GetNoArena();
}
inline void OfflineDeliveredMsg::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.OfflineDeliveredMsg.sToId)
}
#if LANG_CXX11
inline void OfflineDeliveredMsg::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.OfflineDeliveredMsg.sToId)
}
#endif
inline void OfflineDeliveredMsg::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.OfflineDeliveredMsg.sToId)
}
inline void OfflineDeliveredMsg::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.OfflineDeliveredMsg.sToId)
}
inline ::std::string* OfflineDeliveredMsg::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.OfflineDeliveredMsg.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfflineDeliveredMsg::release_stoid() {
  // @@protoc_insertion_point(field_release:im.OfflineDeliveredMsg.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfflineDeliveredMsg::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.OfflineDeliveredMsg.sToId)
}

// string sMsgId = 4;
inline void OfflineDeliveredMsg::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OfflineDeliveredMsg::smsgid() const {
  // @@protoc_insertion_point(field_get:im.OfflineDeliveredMsg.sMsgId)
  return smsgid_.GetNoArena();
}
inline void OfflineDeliveredMsg::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.OfflineDeliveredMsg.sMsgId)
}
#if LANG_CXX11
inline void OfflineDeliveredMsg::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.OfflineDeliveredMsg.sMsgId)
}
#endif
inline void OfflineDeliveredMsg::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.OfflineDeliveredMsg.sMsgId)
}
inline void OfflineDeliveredMsg::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.OfflineDeliveredMsg.sMsgId)
}
inline ::std::string* OfflineDeliveredMsg::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.OfflineDeliveredMsg.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfflineDeliveredMsg::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.OfflineDeliveredMsg.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfflineDeliveredMsg::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.OfflineDeliveredMsg.sMsgId)
}

// -------------------------------------------------------------------

// MESOfflineMsgDelivered

// string sFromId = 1;
inline void MESOfflineMsgDelivered::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESOfflineMsgDelivered::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsgDelivered.sFromId)
  return sfromid_.GetNoArena();
}
inline void MESOfflineMsgDelivered::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESOfflineMsgDelivered.sFromId)
}
#if LANG_CXX11
inline void MESOfflineMsgDelivered::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESOfflineMsgDelivered.sFromId)
}
#endif
inline void MESOfflineMsgDelivered::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESOfflineMsgDelivered.sFromId)
}
inline void MESOfflineMsgDelivered::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESOfflineMsgDelivered.sFromId)
}
inline ::std::string* MESOfflineMsgDelivered::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESOfflineMsgDelivered.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESOfflineMsgDelivered::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MESOfflineMsgDelivered.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESOfflineMsgDelivered::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MESOfflineMsgDelivered.sFromId)
}

// string sToId = 2;
inline void MESOfflineMsgDelivered::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESOfflineMsgDelivered::stoid() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsgDelivered.sToId)
  return stoid_.GetNoArena();
}
inline void MESOfflineMsgDelivered::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESOfflineMsgDelivered.sToId)
}
#if LANG_CXX11
inline void MESOfflineMsgDelivered::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESOfflineMsgDelivered.sToId)
}
#endif
inline void MESOfflineMsgDelivered::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESOfflineMsgDelivered.sToId)
}
inline void MESOfflineMsgDelivered::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESOfflineMsgDelivered.sToId)
}
inline ::std::string* MESOfflineMsgDelivered::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESOfflineMsgDelivered.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESOfflineMsgDelivered::release_stoid() {
  // @@protoc_insertion_point(field_release:im.MESOfflineMsgDelivered.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESOfflineMsgDelivered::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.MESOfflineMsgDelivered.sToId)
}

// string sMsgId = 3;
inline void MESOfflineMsgDelivered::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESOfflineMsgDelivered::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsgDelivered.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESOfflineMsgDelivered::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESOfflineMsgDelivered.sMsgId)
}
#if LANG_CXX11
inline void MESOfflineMsgDelivered::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESOfflineMsgDelivered.sMsgId)
}
#endif
inline void MESOfflineMsgDelivered::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESOfflineMsgDelivered.sMsgId)
}
inline void MESOfflineMsgDelivered::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESOfflineMsgDelivered.sMsgId)
}
inline ::std::string* MESOfflineMsgDelivered::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESOfflineMsgDelivered.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESOfflineMsgDelivered::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESOfflineMsgDelivered.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESOfflineMsgDelivered::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESOfflineMsgDelivered.sMsgId)
}

// repeated .im.OfflineDeliveredMsg lsMsgs = 4;
inline int MESOfflineMsgDelivered::lsmsgs_size() const {
  return lsmsgs_.size();
}
inline void MESOfflineMsgDelivered::clear_lsmsgs() {
  lsmsgs_.Clear();
}
inline ::im::OfflineDeliveredMsg* MESOfflineMsgDelivered::mutable_lsmsgs(int index) {
  // @@protoc_insertion_point(field_mutable:im.MESOfflineMsgDelivered.lsMsgs)
  return lsmsgs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::im::OfflineDeliveredMsg >*
MESOfflineMsgDelivered::mutable_lsmsgs() {
  // @@protoc_insertion_point(field_mutable_list:im.MESOfflineMsgDelivered.lsMsgs)
  return &lsmsgs_;
}
inline const ::im::OfflineDeliveredMsg& MESOfflineMsgDelivered::lsmsgs(int index) const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsgDelivered.lsMsgs)
  return lsmsgs_.Get(index);
}
inline ::im::OfflineDeliveredMsg* MESOfflineMsgDelivered::add_lsmsgs() {
  // @@protoc_insertion_point(field_add:im.MESOfflineMsgDelivered.lsMsgs)
  return lsmsgs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::im::OfflineDeliveredMsg >&
MESOfflineMsgDelivered::lsmsgs() const {
  // @@protoc_insertion_point(field_list:im.MESOfflineMsgDelivered.lsMsgs)
  return lsmsgs_;
}

// -------------------------------------------------------------------

// MESOfflineMsgDelivereddAck

// string sUserId = 1;
inline void MESOfflineMsgDelivereddAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESOfflineMsgDelivereddAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsgDelivereddAck.sUserId)
  return suserid_.GetNoArena();
}
inline void MESOfflineMsgDelivereddAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESOfflineMsgDelivereddAck.sUserId)
}
#if LANG_CXX11
inline void MESOfflineMsgDelivereddAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESOfflineMsgDelivereddAck.sUserId)
}
#endif
inline void MESOfflineMsgDelivereddAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESOfflineMsgDelivereddAck.sUserId)
}
inline void MESOfflineMsgDelivereddAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESOfflineMsgDelivereddAck.sUserId)
}
inline ::std::string* MESOfflineMsgDelivereddAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESOfflineMsgDelivereddAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESOfflineMsgDelivereddAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MESOfflineMsgDelivereddAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESOfflineMsgDelivereddAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESOfflineMsgDelivereddAck.sUserId)
}

// string sMsgId = 2;
inline void MESOfflineMsgDelivereddAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESOfflineMsgDelivereddAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsgDelivereddAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESOfflineMsgDelivereddAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESOfflineMsgDelivereddAck.sMsgId)
}
#if LANG_CXX11
inline void MESOfflineMsgDelivereddAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESOfflineMsgDelivereddAck.sMsgId)
}
#endif
inline void MESOfflineMsgDelivereddAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESOfflineMsgDelivereddAck.sMsgId)
}
inline void MESOfflineMsgDelivereddAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESOfflineMsgDelivereddAck.sMsgId)
}
inline ::std::string* MESOfflineMsgDelivereddAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESOfflineMsgDelivereddAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESOfflineMsgDelivereddAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESOfflineMsgDelivereddAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESOfflineMsgDelivereddAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESOfflineMsgDelivereddAck.sMsgId)
}

// .im.ErrCode errcode = 3;
inline void MESOfflineMsgDelivereddAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode MESOfflineMsgDelivereddAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsgDelivereddAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void MESOfflineMsgDelivereddAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.MESOfflineMsgDelivereddAck.errcode)
}

// -------------------------------------------------------------------

// MESOfflineMsgDeliveredNotifyAck

// string sMsgId = 1;
inline void MESOfflineMsgDeliveredNotifyAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESOfflineMsgDeliveredNotifyAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsgDeliveredNotifyAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESOfflineMsgDeliveredNotifyAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESOfflineMsgDeliveredNotifyAck.sMsgId)
}
#if LANG_CXX11
inline void MESOfflineMsgDeliveredNotifyAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESOfflineMsgDeliveredNotifyAck.sMsgId)
}
#endif
inline void MESOfflineMsgDeliveredNotifyAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESOfflineMsgDeliveredNotifyAck.sMsgId)
}
inline void MESOfflineMsgDeliveredNotifyAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESOfflineMsgDeliveredNotifyAck.sMsgId)
}
inline ::std::string* MESOfflineMsgDeliveredNotifyAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESOfflineMsgDeliveredNotifyAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESOfflineMsgDeliveredNotifyAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESOfflineMsgDeliveredNotifyAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESOfflineMsgDeliveredNotifyAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESOfflineMsgDeliveredNotifyAck.sMsgId)
}

// string sFromId = 2;
inline void MESOfflineMsgDeliveredNotifyAck::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESOfflineMsgDeliveredNotifyAck::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsgDeliveredNotifyAck.sFromId)
  return sfromid_.GetNoArena();
}
inline void MESOfflineMsgDeliveredNotifyAck::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESOfflineMsgDeliveredNotifyAck.sFromId)
}
#if LANG_CXX11
inline void MESOfflineMsgDeliveredNotifyAck::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESOfflineMsgDeliveredNotifyAck.sFromId)
}
#endif
inline void MESOfflineMsgDeliveredNotifyAck::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESOfflineMsgDeliveredNotifyAck.sFromId)
}
inline void MESOfflineMsgDeliveredNotifyAck::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESOfflineMsgDeliveredNotifyAck.sFromId)
}
inline ::std::string* MESOfflineMsgDeliveredNotifyAck::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESOfflineMsgDeliveredNotifyAck.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESOfflineMsgDeliveredNotifyAck::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MESOfflineMsgDeliveredNotifyAck.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESOfflineMsgDeliveredNotifyAck::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MESOfflineMsgDeliveredNotifyAck.sFromId)
}

// repeated .im.OfflineDeliveredMsg lsMsgs = 3;
inline int MESOfflineMsgDeliveredNotifyAck::lsmsgs_size() const {
  return lsmsgs_.size();
}
inline void MESOfflineMsgDeliveredNotifyAck::clear_lsmsgs() {
  lsmsgs_.Clear();
}
inline ::im::OfflineDeliveredMsg* MESOfflineMsgDeliveredNotifyAck::mutable_lsmsgs(int index) {
  // @@protoc_insertion_point(field_mutable:im.MESOfflineMsgDeliveredNotifyAck.lsMsgs)
  return lsmsgs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::im::OfflineDeliveredMsg >*
MESOfflineMsgDeliveredNotifyAck::mutable_lsmsgs() {
  // @@protoc_insertion_point(field_mutable_list:im.MESOfflineMsgDeliveredNotifyAck.lsMsgs)
  return &lsmsgs_;
}
inline const ::im::OfflineDeliveredMsg& MESOfflineMsgDeliveredNotifyAck::lsmsgs(int index) const {
  // @@protoc_insertion_point(field_get:im.MESOfflineMsgDeliveredNotifyAck.lsMsgs)
  return lsmsgs_.Get(index);
}
inline ::im::OfflineDeliveredMsg* MESOfflineMsgDeliveredNotifyAck::add_lsmsgs() {
  // @@protoc_insertion_point(field_add:im.MESOfflineMsgDeliveredNotifyAck.lsMsgs)
  return lsmsgs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::im::OfflineDeliveredMsg >&
MESOfflineMsgDeliveredNotifyAck::lsmsgs() const {
  // @@protoc_insertion_point(field_list:im.MESOfflineMsgDeliveredNotifyAck.lsMsgs)
  return lsmsgs_;
}

// -------------------------------------------------------------------

// MESAddFriend

// string sFromId = 1;
inline void MESAddFriend::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriend::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriend.sFromId)
  return sfromid_.GetNoArena();
}
inline void MESAddFriend::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriend.sFromId)
}
#if LANG_CXX11
inline void MESAddFriend::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriend.sFromId)
}
#endif
inline void MESAddFriend::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriend.sFromId)
}
inline void MESAddFriend::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriend.sFromId)
}
inline ::std::string* MESAddFriend::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriend.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriend::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MESAddFriend.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriend::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriend.sFromId)
}

// string sToId = 2;
inline void MESAddFriend::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriend::stoid() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriend.sToId)
  return stoid_.GetNoArena();
}
inline void MESAddFriend::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriend.sToId)
}
#if LANG_CXX11
inline void MESAddFriend::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriend.sToId)
}
#endif
inline void MESAddFriend::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriend.sToId)
}
inline void MESAddFriend::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriend.sToId)
}
inline ::std::string* MESAddFriend::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriend.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriend::release_stoid() {
  // @@protoc_insertion_point(field_release:im.MESAddFriend.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriend::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriend.sToId)
}

// string sMsgId = 3;
inline void MESAddFriend::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriend::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriend.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESAddFriend::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriend.sMsgId)
}
#if LANG_CXX11
inline void MESAddFriend::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriend.sMsgId)
}
#endif
inline void MESAddFriend::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriend.sMsgId)
}
inline void MESAddFriend::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriend.sMsgId)
}
inline ::std::string* MESAddFriend::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriend.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriend::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESAddFriend.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriend::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriend.sMsgId)
}

// string sDesc = 4;
inline void MESAddFriend::clear_sdesc() {
  sdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriend::sdesc() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriend.sDesc)
  return sdesc_.GetNoArena();
}
inline void MESAddFriend::set_sdesc(const ::std::string& value) {
  
  sdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriend.sDesc)
}
#if LANG_CXX11
inline void MESAddFriend::set_sdesc(::std::string&& value) {
  
  sdesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriend.sDesc)
}
#endif
inline void MESAddFriend::set_sdesc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriend.sDesc)
}
inline void MESAddFriend::set_sdesc(const char* value, size_t size) {
  
  sdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriend.sDesc)
}
inline ::std::string* MESAddFriend::mutable_sdesc() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriend.sDesc)
  return sdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriend::release_sdesc() {
  // @@protoc_insertion_point(field_release:im.MESAddFriend.sDesc)
  
  return sdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriend::set_allocated_sdesc(::std::string* sdesc) {
  if (sdesc != NULL) {
    
  } else {
    
  }
  sdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdesc);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriend.sDesc)
}

// string sMemoName = 5;
inline void MESAddFriend::clear_smemoname() {
  smemoname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriend::smemoname() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriend.sMemoName)
  return smemoname_.GetNoArena();
}
inline void MESAddFriend::set_smemoname(const ::std::string& value) {
  
  smemoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriend.sMemoName)
}
#if LANG_CXX11
inline void MESAddFriend::set_smemoname(::std::string&& value) {
  
  smemoname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriend.sMemoName)
}
#endif
inline void MESAddFriend::set_smemoname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smemoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriend.sMemoName)
}
inline void MESAddFriend::set_smemoname(const char* value, size_t size) {
  
  smemoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriend.sMemoName)
}
inline ::std::string* MESAddFriend::mutable_smemoname() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriend.sMemoName)
  return smemoname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriend::release_smemoname() {
  // @@protoc_insertion_point(field_release:im.MESAddFriend.sMemoName)
  
  return smemoname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriend::set_allocated_smemoname(::std::string* smemoname) {
  if (smemoname != NULL) {
    
  } else {
    
  }
  smemoname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smemoname);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriend.sMemoName)
}

// uint32 packetId = 6;
inline void MESAddFriend::clear_packetid() {
  packetid_ = 0u;
}
inline ::google::protobuf::uint32 MESAddFriend::packetid() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriend.packetId)
  return packetid_;
}
inline void MESAddFriend::set_packetid(::google::protobuf::uint32 value) {
  
  packetid_ = value;
  // @@protoc_insertion_point(field_set:im.MESAddFriend.packetId)
}

// string sSelfIntroduce = 7;
inline void MESAddFriend::clear_sselfintroduce() {
  sselfintroduce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriend::sselfintroduce() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriend.sSelfIntroduce)
  return sselfintroduce_.GetNoArena();
}
inline void MESAddFriend::set_sselfintroduce(const ::std::string& value) {
  
  sselfintroduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriend.sSelfIntroduce)
}
#if LANG_CXX11
inline void MESAddFriend::set_sselfintroduce(::std::string&& value) {
  
  sselfintroduce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriend.sSelfIntroduce)
}
#endif
inline void MESAddFriend::set_sselfintroduce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sselfintroduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriend.sSelfIntroduce)
}
inline void MESAddFriend::set_sselfintroduce(const char* value, size_t size) {
  
  sselfintroduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriend.sSelfIntroduce)
}
inline ::std::string* MESAddFriend::mutable_sselfintroduce() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriend.sSelfIntroduce)
  return sselfintroduce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriend::release_sselfintroduce() {
  // @@protoc_insertion_point(field_release:im.MESAddFriend.sSelfIntroduce)
  
  return sselfintroduce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriend::set_allocated_sselfintroduce(::std::string* sselfintroduce) {
  if (sselfintroduce != NULL) {
    
  } else {
    
  }
  sselfintroduce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sselfintroduce);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriend.sSelfIntroduce)
}

// uint64 msgTime = 8;
inline void MESAddFriend::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MESAddFriend::msgtime() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriend.msgTime)
  return msgtime_;
}
inline void MESAddFriend::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.MESAddFriend.msgTime)
}

// string extend = 9;
inline void MESAddFriend::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriend::extend() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriend.extend)
  return extend_.GetNoArena();
}
inline void MESAddFriend::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriend.extend)
}
#if LANG_CXX11
inline void MESAddFriend::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriend.extend)
}
#endif
inline void MESAddFriend::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriend.extend)
}
inline void MESAddFriend::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriend.extend)
}
inline ::std::string* MESAddFriend::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriend.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriend::release_extend() {
  // @@protoc_insertion_point(field_release:im.MESAddFriend.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriend::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriend.extend)
}

// -------------------------------------------------------------------

// MESAddFriendAck

// string sUserId = 1;
inline void MESAddFriendAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriendAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriendAck.sUserId)
  return suserid_.GetNoArena();
}
inline void MESAddFriendAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriendAck.sUserId)
}
#if LANG_CXX11
inline void MESAddFriendAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriendAck.sUserId)
}
#endif
inline void MESAddFriendAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriendAck.sUserId)
}
inline void MESAddFriendAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriendAck.sUserId)
}
inline ::std::string* MESAddFriendAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriendAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriendAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MESAddFriendAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriendAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriendAck.sUserId)
}

// string sMsgId = 2;
inline void MESAddFriendAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriendAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriendAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESAddFriendAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriendAck.sMsgId)
}
#if LANG_CXX11
inline void MESAddFriendAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriendAck.sMsgId)
}
#endif
inline void MESAddFriendAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriendAck.sMsgId)
}
inline void MESAddFriendAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriendAck.sMsgId)
}
inline ::std::string* MESAddFriendAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriendAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriendAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESAddFriendAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriendAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriendAck.sMsgId)
}

// .im.ErrCode errcode = 3;
inline void MESAddFriendAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode MESAddFriendAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriendAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void MESAddFriendAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.MESAddFriendAck.errcode)
}

// -------------------------------------------------------------------

// MESAddFriendDeliverAck

// string sUserId = 1;
inline void MESAddFriendDeliverAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriendDeliverAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriendDeliverAck.sUserId)
  return suserid_.GetNoArena();
}
inline void MESAddFriendDeliverAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriendDeliverAck.sUserId)
}
#if LANG_CXX11
inline void MESAddFriendDeliverAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriendDeliverAck.sUserId)
}
#endif
inline void MESAddFriendDeliverAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriendDeliverAck.sUserId)
}
inline void MESAddFriendDeliverAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriendDeliverAck.sUserId)
}
inline ::std::string* MESAddFriendDeliverAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriendDeliverAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriendDeliverAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MESAddFriendDeliverAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriendDeliverAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriendDeliverAck.sUserId)
}

// string sMsgId = 2;
inline void MESAddFriendDeliverAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriendDeliverAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriendDeliverAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESAddFriendDeliverAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriendDeliverAck.sMsgId)
}
#if LANG_CXX11
inline void MESAddFriendDeliverAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriendDeliverAck.sMsgId)
}
#endif
inline void MESAddFriendDeliverAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriendDeliverAck.sMsgId)
}
inline void MESAddFriendDeliverAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriendDeliverAck.sMsgId)
}
inline ::std::string* MESAddFriendDeliverAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriendDeliverAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriendDeliverAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESAddFriendDeliverAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriendDeliverAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriendDeliverAck.sMsgId)
}

// -------------------------------------------------------------------

// MESAddFriendAns

// string sFromId = 1;
inline void MESAddFriendAns::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriendAns::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriendAns.sFromId)
  return sfromid_.GetNoArena();
}
inline void MESAddFriendAns::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriendAns.sFromId)
}
#if LANG_CXX11
inline void MESAddFriendAns::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriendAns.sFromId)
}
#endif
inline void MESAddFriendAns::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriendAns.sFromId)
}
inline void MESAddFriendAns::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriendAns.sFromId)
}
inline ::std::string* MESAddFriendAns::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriendAns.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriendAns::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MESAddFriendAns.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriendAns::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriendAns.sFromId)
}

// string sToId = 2;
inline void MESAddFriendAns::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriendAns::stoid() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriendAns.sToId)
  return stoid_.GetNoArena();
}
inline void MESAddFriendAns::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriendAns.sToId)
}
#if LANG_CXX11
inline void MESAddFriendAns::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriendAns.sToId)
}
#endif
inline void MESAddFriendAns::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriendAns.sToId)
}
inline void MESAddFriendAns::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriendAns.sToId)
}
inline ::std::string* MESAddFriendAns::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriendAns.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriendAns::release_stoid() {
  // @@protoc_insertion_point(field_release:im.MESAddFriendAns.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriendAns::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriendAns.sToId)
}

// string sMsgId = 3;
inline void MESAddFriendAns::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriendAns::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriendAns.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESAddFriendAns::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriendAns.sMsgId)
}
#if LANG_CXX11
inline void MESAddFriendAns::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriendAns.sMsgId)
}
#endif
inline void MESAddFriendAns::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriendAns.sMsgId)
}
inline void MESAddFriendAns::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriendAns.sMsgId)
}
inline ::std::string* MESAddFriendAns::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriendAns.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriendAns::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESAddFriendAns.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriendAns::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriendAns.sMsgId)
}

// string sAns = 4;
inline void MESAddFriendAns::clear_sans() {
  sans_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriendAns::sans() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriendAns.sAns)
  return sans_.GetNoArena();
}
inline void MESAddFriendAns::set_sans(const ::std::string& value) {
  
  sans_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriendAns.sAns)
}
#if LANG_CXX11
inline void MESAddFriendAns::set_sans(::std::string&& value) {
  
  sans_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriendAns.sAns)
}
#endif
inline void MESAddFriendAns::set_sans(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sans_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriendAns.sAns)
}
inline void MESAddFriendAns::set_sans(const char* value, size_t size) {
  
  sans_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriendAns.sAns)
}
inline ::std::string* MESAddFriendAns::mutable_sans() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriendAns.sAns)
  return sans_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriendAns::release_sans() {
  // @@protoc_insertion_point(field_release:im.MESAddFriendAns.sAns)
  
  return sans_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriendAns::set_allocated_sans(::std::string* sans) {
  if (sans != NULL) {
    
  } else {
    
  }
  sans_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sans);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriendAns.sAns)
}

// .im.ErrCode errcode = 5;
inline void MESAddFriendAns::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode MESAddFriendAns::errcode() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriendAns.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void MESAddFriendAns::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.MESAddFriendAns.errcode)
}

// string sMemoName = 6;
inline void MESAddFriendAns::clear_smemoname() {
  smemoname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriendAns::smemoname() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriendAns.sMemoName)
  return smemoname_.GetNoArena();
}
inline void MESAddFriendAns::set_smemoname(const ::std::string& value) {
  
  smemoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriendAns.sMemoName)
}
#if LANG_CXX11
inline void MESAddFriendAns::set_smemoname(::std::string&& value) {
  
  smemoname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriendAns.sMemoName)
}
#endif
inline void MESAddFriendAns::set_smemoname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smemoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriendAns.sMemoName)
}
inline void MESAddFriendAns::set_smemoname(const char* value, size_t size) {
  
  smemoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriendAns.sMemoName)
}
inline ::std::string* MESAddFriendAns::mutable_smemoname() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriendAns.sMemoName)
  return smemoname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriendAns::release_smemoname() {
  // @@protoc_insertion_point(field_release:im.MESAddFriendAns.sMemoName)
  
  return smemoname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriendAns::set_allocated_smemoname(::std::string* smemoname) {
  if (smemoname != NULL) {
    
  } else {
    
  }
  smemoname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smemoname);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriendAns.sMemoName)
}

// uint32 packetId = 7;
inline void MESAddFriendAns::clear_packetid() {
  packetid_ = 0u;
}
inline ::google::protobuf::uint32 MESAddFriendAns::packetid() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriendAns.packetId)
  return packetid_;
}
inline void MESAddFriendAns::set_packetid(::google::protobuf::uint32 value) {
  
  packetid_ = value;
  // @@protoc_insertion_point(field_set:im.MESAddFriendAns.packetId)
}

// uint64 msgTime = 8;
inline void MESAddFriendAns::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MESAddFriendAns::msgtime() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriendAns.msgTime)
  return msgtime_;
}
inline void MESAddFriendAns::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.MESAddFriendAns.msgTime)
}

// string extend = 9;
inline void MESAddFriendAns::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriendAns::extend() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriendAns.extend)
  return extend_.GetNoArena();
}
inline void MESAddFriendAns::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriendAns.extend)
}
#if LANG_CXX11
inline void MESAddFriendAns::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriendAns.extend)
}
#endif
inline void MESAddFriendAns::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriendAns.extend)
}
inline void MESAddFriendAns::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriendAns.extend)
}
inline ::std::string* MESAddFriendAns::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriendAns.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriendAns::release_extend() {
  // @@protoc_insertion_point(field_release:im.MESAddFriendAns.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriendAns::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriendAns.extend)
}

// -------------------------------------------------------------------

// MESAddFriendAnsAck

// string sUserId = 1;
inline void MESAddFriendAnsAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriendAnsAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriendAnsAck.sUserId)
  return suserid_.GetNoArena();
}
inline void MESAddFriendAnsAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriendAnsAck.sUserId)
}
#if LANG_CXX11
inline void MESAddFriendAnsAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriendAnsAck.sUserId)
}
#endif
inline void MESAddFriendAnsAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriendAnsAck.sUserId)
}
inline void MESAddFriendAnsAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriendAnsAck.sUserId)
}
inline ::std::string* MESAddFriendAnsAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriendAnsAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriendAnsAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MESAddFriendAnsAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriendAnsAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriendAnsAck.sUserId)
}

// string sMsgId = 2;
inline void MESAddFriendAnsAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriendAnsAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriendAnsAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESAddFriendAnsAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriendAnsAck.sMsgId)
}
#if LANG_CXX11
inline void MESAddFriendAnsAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriendAnsAck.sMsgId)
}
#endif
inline void MESAddFriendAnsAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriendAnsAck.sMsgId)
}
inline void MESAddFriendAnsAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriendAnsAck.sMsgId)
}
inline ::std::string* MESAddFriendAnsAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriendAnsAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriendAnsAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESAddFriendAnsAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriendAnsAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriendAnsAck.sMsgId)
}

// .im.ErrCode errcode = 3;
inline void MESAddFriendAnsAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode MESAddFriendAnsAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriendAnsAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void MESAddFriendAnsAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.MESAddFriendAnsAck.errcode)
}

// -------------------------------------------------------------------

// MESAddFriendAnsDeliverACK

// string sUserId = 1;
inline void MESAddFriendAnsDeliverACK::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriendAnsDeliverACK::suserid() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriendAnsDeliverACK.sUserId)
  return suserid_.GetNoArena();
}
inline void MESAddFriendAnsDeliverACK::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriendAnsDeliverACK.sUserId)
}
#if LANG_CXX11
inline void MESAddFriendAnsDeliverACK::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriendAnsDeliverACK.sUserId)
}
#endif
inline void MESAddFriendAnsDeliverACK::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriendAnsDeliverACK.sUserId)
}
inline void MESAddFriendAnsDeliverACK::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriendAnsDeliverACK.sUserId)
}
inline ::std::string* MESAddFriendAnsDeliverACK::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriendAnsDeliverACK.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriendAnsDeliverACK::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MESAddFriendAnsDeliverACK.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriendAnsDeliverACK::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriendAnsDeliverACK.sUserId)
}

// string sMsgId = 2;
inline void MESAddFriendAnsDeliverACK::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESAddFriendAnsDeliverACK::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESAddFriendAnsDeliverACK.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESAddFriendAnsDeliverACK::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESAddFriendAnsDeliverACK.sMsgId)
}
#if LANG_CXX11
inline void MESAddFriendAnsDeliverACK::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESAddFriendAnsDeliverACK.sMsgId)
}
#endif
inline void MESAddFriendAnsDeliverACK::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESAddFriendAnsDeliverACK.sMsgId)
}
inline void MESAddFriendAnsDeliverACK::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESAddFriendAnsDeliverACK.sMsgId)
}
inline ::std::string* MESAddFriendAnsDeliverACK::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESAddFriendAnsDeliverACK.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESAddFriendAnsDeliverACK::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESAddFriendAnsDeliverACK.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESAddFriendAnsDeliverACK::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESAddFriendAnsDeliverACK.sMsgId)
}

// -------------------------------------------------------------------

// MESDelFriend

// string sFromId = 1;
inline void MESDelFriend::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESDelFriend::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MESDelFriend.sFromId)
  return sfromid_.GetNoArena();
}
inline void MESDelFriend::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESDelFriend.sFromId)
}
#if LANG_CXX11
inline void MESDelFriend::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESDelFriend.sFromId)
}
#endif
inline void MESDelFriend::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESDelFriend.sFromId)
}
inline void MESDelFriend::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESDelFriend.sFromId)
}
inline ::std::string* MESDelFriend::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESDelFriend.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESDelFriend::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MESDelFriend.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESDelFriend::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MESDelFriend.sFromId)
}

// string sToId = 2;
inline void MESDelFriend::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESDelFriend::stoid() const {
  // @@protoc_insertion_point(field_get:im.MESDelFriend.sToId)
  return stoid_.GetNoArena();
}
inline void MESDelFriend::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESDelFriend.sToId)
}
#if LANG_CXX11
inline void MESDelFriend::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESDelFriend.sToId)
}
#endif
inline void MESDelFriend::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESDelFriend.sToId)
}
inline void MESDelFriend::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESDelFriend.sToId)
}
inline ::std::string* MESDelFriend::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESDelFriend.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESDelFriend::release_stoid() {
  // @@protoc_insertion_point(field_release:im.MESDelFriend.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESDelFriend::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.MESDelFriend.sToId)
}

// string sMsgId = 3;
inline void MESDelFriend::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESDelFriend::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESDelFriend.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESDelFriend::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESDelFriend.sMsgId)
}
#if LANG_CXX11
inline void MESDelFriend::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESDelFriend.sMsgId)
}
#endif
inline void MESDelFriend::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESDelFriend.sMsgId)
}
inline void MESDelFriend::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESDelFriend.sMsgId)
}
inline ::std::string* MESDelFriend::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESDelFriend.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESDelFriend::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESDelFriend.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESDelFriend::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESDelFriend.sMsgId)
}

// -------------------------------------------------------------------

// MESDelFriendAck

// string sUserId = 1;
inline void MESDelFriendAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESDelFriendAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.MESDelFriendAck.sUserId)
  return suserid_.GetNoArena();
}
inline void MESDelFriendAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESDelFriendAck.sUserId)
}
#if LANG_CXX11
inline void MESDelFriendAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESDelFriendAck.sUserId)
}
#endif
inline void MESDelFriendAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESDelFriendAck.sUserId)
}
inline void MESDelFriendAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESDelFriendAck.sUserId)
}
inline ::std::string* MESDelFriendAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESDelFriendAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESDelFriendAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MESDelFriendAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESDelFriendAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESDelFriendAck.sUserId)
}

// string sMsgId = 2;
inline void MESDelFriendAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESDelFriendAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESDelFriendAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESDelFriendAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESDelFriendAck.sMsgId)
}
#if LANG_CXX11
inline void MESDelFriendAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESDelFriendAck.sMsgId)
}
#endif
inline void MESDelFriendAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESDelFriendAck.sMsgId)
}
inline void MESDelFriendAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESDelFriendAck.sMsgId)
}
inline ::std::string* MESDelFriendAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESDelFriendAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESDelFriendAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESDelFriendAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESDelFriendAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESDelFriendAck.sMsgId)
}

// .im.ErrCode errcode = 3;
inline void MESDelFriendAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode MESDelFriendAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.MESDelFriendAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void MESDelFriendAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.MESDelFriendAck.errcode)
}

// -------------------------------------------------------------------

// MESIncBlacklist

// string sFromId = 1;
inline void MESIncBlacklist::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESIncBlacklist::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MESIncBlacklist.sFromId)
  return sfromid_.GetNoArena();
}
inline void MESIncBlacklist::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESIncBlacklist.sFromId)
}
#if LANG_CXX11
inline void MESIncBlacklist::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESIncBlacklist.sFromId)
}
#endif
inline void MESIncBlacklist::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESIncBlacklist.sFromId)
}
inline void MESIncBlacklist::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESIncBlacklist.sFromId)
}
inline ::std::string* MESIncBlacklist::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESIncBlacklist.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESIncBlacklist::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MESIncBlacklist.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESIncBlacklist::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MESIncBlacklist.sFromId)
}

// string sToId = 2;
inline void MESIncBlacklist::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESIncBlacklist::stoid() const {
  // @@protoc_insertion_point(field_get:im.MESIncBlacklist.sToId)
  return stoid_.GetNoArena();
}
inline void MESIncBlacklist::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESIncBlacklist.sToId)
}
#if LANG_CXX11
inline void MESIncBlacklist::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESIncBlacklist.sToId)
}
#endif
inline void MESIncBlacklist::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESIncBlacklist.sToId)
}
inline void MESIncBlacklist::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESIncBlacklist.sToId)
}
inline ::std::string* MESIncBlacklist::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESIncBlacklist.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESIncBlacklist::release_stoid() {
  // @@protoc_insertion_point(field_release:im.MESIncBlacklist.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESIncBlacklist::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.MESIncBlacklist.sToId)
}

// string sMsgId = 3;
inline void MESIncBlacklist::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESIncBlacklist::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESIncBlacklist.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESIncBlacklist::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESIncBlacklist.sMsgId)
}
#if LANG_CXX11
inline void MESIncBlacklist::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESIncBlacklist.sMsgId)
}
#endif
inline void MESIncBlacklist::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESIncBlacklist.sMsgId)
}
inline void MESIncBlacklist::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESIncBlacklist.sMsgId)
}
inline ::std::string* MESIncBlacklist::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESIncBlacklist.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESIncBlacklist::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESIncBlacklist.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESIncBlacklist::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESIncBlacklist.sMsgId)
}

// -------------------------------------------------------------------

// MESIncBlacklistAck

// string sUserId = 1;
inline void MESIncBlacklistAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESIncBlacklistAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.MESIncBlacklistAck.sUserId)
  return suserid_.GetNoArena();
}
inline void MESIncBlacklistAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESIncBlacklistAck.sUserId)
}
#if LANG_CXX11
inline void MESIncBlacklistAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESIncBlacklistAck.sUserId)
}
#endif
inline void MESIncBlacklistAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESIncBlacklistAck.sUserId)
}
inline void MESIncBlacklistAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESIncBlacklistAck.sUserId)
}
inline ::std::string* MESIncBlacklistAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESIncBlacklistAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESIncBlacklistAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MESIncBlacklistAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESIncBlacklistAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESIncBlacklistAck.sUserId)
}

// string sMsgId = 2;
inline void MESIncBlacklistAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESIncBlacklistAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESIncBlacklistAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESIncBlacklistAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESIncBlacklistAck.sMsgId)
}
#if LANG_CXX11
inline void MESIncBlacklistAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESIncBlacklistAck.sMsgId)
}
#endif
inline void MESIncBlacklistAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESIncBlacklistAck.sMsgId)
}
inline void MESIncBlacklistAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESIncBlacklistAck.sMsgId)
}
inline ::std::string* MESIncBlacklistAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESIncBlacklistAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESIncBlacklistAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESIncBlacklistAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESIncBlacklistAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESIncBlacklistAck.sMsgId)
}

// .im.ErrCode errcode = 3;
inline void MESIncBlacklistAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode MESIncBlacklistAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.MESIncBlacklistAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void MESIncBlacklistAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.MESIncBlacklistAck.errcode)
}

// -------------------------------------------------------------------

// MESDecBlacklist

// string sFromId = 1;
inline void MESDecBlacklist::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESDecBlacklist::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MESDecBlacklist.sFromId)
  return sfromid_.GetNoArena();
}
inline void MESDecBlacklist::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESDecBlacklist.sFromId)
}
#if LANG_CXX11
inline void MESDecBlacklist::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESDecBlacklist.sFromId)
}
#endif
inline void MESDecBlacklist::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESDecBlacklist.sFromId)
}
inline void MESDecBlacklist::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESDecBlacklist.sFromId)
}
inline ::std::string* MESDecBlacklist::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESDecBlacklist.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESDecBlacklist::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MESDecBlacklist.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESDecBlacklist::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MESDecBlacklist.sFromId)
}

// string sToId = 2;
inline void MESDecBlacklist::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESDecBlacklist::stoid() const {
  // @@protoc_insertion_point(field_get:im.MESDecBlacklist.sToId)
  return stoid_.GetNoArena();
}
inline void MESDecBlacklist::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESDecBlacklist.sToId)
}
#if LANG_CXX11
inline void MESDecBlacklist::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESDecBlacklist.sToId)
}
#endif
inline void MESDecBlacklist::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESDecBlacklist.sToId)
}
inline void MESDecBlacklist::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESDecBlacklist.sToId)
}
inline ::std::string* MESDecBlacklist::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESDecBlacklist.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESDecBlacklist::release_stoid() {
  // @@protoc_insertion_point(field_release:im.MESDecBlacklist.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESDecBlacklist::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.MESDecBlacklist.sToId)
}

// string sMsgId = 3;
inline void MESDecBlacklist::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESDecBlacklist::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESDecBlacklist.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESDecBlacklist::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESDecBlacklist.sMsgId)
}
#if LANG_CXX11
inline void MESDecBlacklist::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESDecBlacklist.sMsgId)
}
#endif
inline void MESDecBlacklist::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESDecBlacklist.sMsgId)
}
inline void MESDecBlacklist::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESDecBlacklist.sMsgId)
}
inline ::std::string* MESDecBlacklist::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESDecBlacklist.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESDecBlacklist::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESDecBlacklist.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESDecBlacklist::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESDecBlacklist.sMsgId)
}

// -------------------------------------------------------------------

// MESDecBlacklistAck

// string sUserId = 1;
inline void MESDecBlacklistAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESDecBlacklistAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.MESDecBlacklistAck.sUserId)
  return suserid_.GetNoArena();
}
inline void MESDecBlacklistAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESDecBlacklistAck.sUserId)
}
#if LANG_CXX11
inline void MESDecBlacklistAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESDecBlacklistAck.sUserId)
}
#endif
inline void MESDecBlacklistAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESDecBlacklistAck.sUserId)
}
inline void MESDecBlacklistAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESDecBlacklistAck.sUserId)
}
inline ::std::string* MESDecBlacklistAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESDecBlacklistAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESDecBlacklistAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MESDecBlacklistAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESDecBlacklistAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESDecBlacklistAck.sUserId)
}

// string sMsgId = 2;
inline void MESDecBlacklistAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESDecBlacklistAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESDecBlacklistAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESDecBlacklistAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESDecBlacklistAck.sMsgId)
}
#if LANG_CXX11
inline void MESDecBlacklistAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESDecBlacklistAck.sMsgId)
}
#endif
inline void MESDecBlacklistAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESDecBlacklistAck.sMsgId)
}
inline void MESDecBlacklistAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESDecBlacklistAck.sMsgId)
}
inline ::std::string* MESDecBlacklistAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESDecBlacklistAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESDecBlacklistAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESDecBlacklistAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESDecBlacklistAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESDecBlacklistAck.sMsgId)
}

// .im.ErrCode errcode = 3;
inline void MESDecBlacklistAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode MESDecBlacklistAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.MESDecBlacklistAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void MESDecBlacklistAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.MESDecBlacklistAck.errcode)
}

// -------------------------------------------------------------------

// MESJoinGrp

// string sFromId = 1;
inline void MESJoinGrp::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESJoinGrp::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MESJoinGrp.sFromId)
  return sfromid_.GetNoArena();
}
inline void MESJoinGrp::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESJoinGrp.sFromId)
}
#if LANG_CXX11
inline void MESJoinGrp::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESJoinGrp.sFromId)
}
#endif
inline void MESJoinGrp::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESJoinGrp.sFromId)
}
inline void MESJoinGrp::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESJoinGrp.sFromId)
}
inline ::std::string* MESJoinGrp::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESJoinGrp.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESJoinGrp::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MESJoinGrp.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESJoinGrp::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MESJoinGrp.sFromId)
}

// string sToId = 2;
inline void MESJoinGrp::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESJoinGrp::stoid() const {
  // @@protoc_insertion_point(field_get:im.MESJoinGrp.sToId)
  return stoid_.GetNoArena();
}
inline void MESJoinGrp::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESJoinGrp.sToId)
}
#if LANG_CXX11
inline void MESJoinGrp::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESJoinGrp.sToId)
}
#endif
inline void MESJoinGrp::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESJoinGrp.sToId)
}
inline void MESJoinGrp::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESJoinGrp.sToId)
}
inline ::std::string* MESJoinGrp::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESJoinGrp.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESJoinGrp::release_stoid() {
  // @@protoc_insertion_point(field_release:im.MESJoinGrp.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESJoinGrp::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.MESJoinGrp.sToId)
}

// string sGrpId = 3;
inline void MESJoinGrp::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESJoinGrp::sgrpid() const {
  // @@protoc_insertion_point(field_get:im.MESJoinGrp.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void MESJoinGrp::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESJoinGrp.sGrpId)
}
#if LANG_CXX11
inline void MESJoinGrp::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESJoinGrp.sGrpId)
}
#endif
inline void MESJoinGrp::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESJoinGrp.sGrpId)
}
inline void MESJoinGrp::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESJoinGrp.sGrpId)
}
inline ::std::string* MESJoinGrp::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESJoinGrp.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESJoinGrp::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im.MESJoinGrp.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESJoinGrp::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im.MESJoinGrp.sGrpId)
}

// string sMsgId = 4;
inline void MESJoinGrp::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESJoinGrp::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESJoinGrp.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESJoinGrp::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESJoinGrp.sMsgId)
}
#if LANG_CXX11
inline void MESJoinGrp::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESJoinGrp.sMsgId)
}
#endif
inline void MESJoinGrp::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESJoinGrp.sMsgId)
}
inline void MESJoinGrp::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESJoinGrp.sMsgId)
}
inline ::std::string* MESJoinGrp::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESJoinGrp.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESJoinGrp::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESJoinGrp.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESJoinGrp::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESJoinGrp.sMsgId)
}

// uint32 reqType = 5;
inline void MESJoinGrp::clear_reqtype() {
  reqtype_ = 0u;
}
inline ::google::protobuf::uint32 MESJoinGrp::reqtype() const {
  // @@protoc_insertion_point(field_get:im.MESJoinGrp.reqType)
  return reqtype_;
}
inline void MESJoinGrp::set_reqtype(::google::protobuf::uint32 value) {
  
  reqtype_ = value;
  // @@protoc_insertion_point(field_set:im.MESJoinGrp.reqType)
}

// string sSelfIntroduce = 6;
inline void MESJoinGrp::clear_sselfintroduce() {
  sselfintroduce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESJoinGrp::sselfintroduce() const {
  // @@protoc_insertion_point(field_get:im.MESJoinGrp.sSelfIntroduce)
  return sselfintroduce_.GetNoArena();
}
inline void MESJoinGrp::set_sselfintroduce(const ::std::string& value) {
  
  sselfintroduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESJoinGrp.sSelfIntroduce)
}
#if LANG_CXX11
inline void MESJoinGrp::set_sselfintroduce(::std::string&& value) {
  
  sselfintroduce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESJoinGrp.sSelfIntroduce)
}
#endif
inline void MESJoinGrp::set_sselfintroduce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sselfintroduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESJoinGrp.sSelfIntroduce)
}
inline void MESJoinGrp::set_sselfintroduce(const char* value, size_t size) {
  
  sselfintroduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESJoinGrp.sSelfIntroduce)
}
inline ::std::string* MESJoinGrp::mutable_sselfintroduce() {
  
  // @@protoc_insertion_point(field_mutable:im.MESJoinGrp.sSelfIntroduce)
  return sselfintroduce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESJoinGrp::release_sselfintroduce() {
  // @@protoc_insertion_point(field_release:im.MESJoinGrp.sSelfIntroduce)
  
  return sselfintroduce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESJoinGrp::set_allocated_sselfintroduce(::std::string* sselfintroduce) {
  if (sselfintroduce != NULL) {
    
  } else {
    
  }
  sselfintroduce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sselfintroduce);
  // @@protoc_insertion_point(field_set_allocated:im.MESJoinGrp.sSelfIntroduce)
}

// string sDesc = 7;
inline void MESJoinGrp::clear_sdesc() {
  sdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESJoinGrp::sdesc() const {
  // @@protoc_insertion_point(field_get:im.MESJoinGrp.sDesc)
  return sdesc_.GetNoArena();
}
inline void MESJoinGrp::set_sdesc(const ::std::string& value) {
  
  sdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESJoinGrp.sDesc)
}
#if LANG_CXX11
inline void MESJoinGrp::set_sdesc(::std::string&& value) {
  
  sdesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESJoinGrp.sDesc)
}
#endif
inline void MESJoinGrp::set_sdesc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESJoinGrp.sDesc)
}
inline void MESJoinGrp::set_sdesc(const char* value, size_t size) {
  
  sdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESJoinGrp.sDesc)
}
inline ::std::string* MESJoinGrp::mutable_sdesc() {
  
  // @@protoc_insertion_point(field_mutable:im.MESJoinGrp.sDesc)
  return sdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESJoinGrp::release_sdesc() {
  // @@protoc_insertion_point(field_release:im.MESJoinGrp.sDesc)
  
  return sdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESJoinGrp::set_allocated_sdesc(::std::string* sdesc) {
  if (sdesc != NULL) {
    
  } else {
    
  }
  sdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdesc);
  // @@protoc_insertion_point(field_set_allocated:im.MESJoinGrp.sDesc)
}

// uint64 msgTime = 8;
inline void MESJoinGrp::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MESJoinGrp::msgtime() const {
  // @@protoc_insertion_point(field_get:im.MESJoinGrp.msgTime)
  return msgtime_;
}
inline void MESJoinGrp::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.MESJoinGrp.msgTime)
}

// string extend = 9;
inline void MESJoinGrp::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESJoinGrp::extend() const {
  // @@protoc_insertion_point(field_get:im.MESJoinGrp.extend)
  return extend_.GetNoArena();
}
inline void MESJoinGrp::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESJoinGrp.extend)
}
#if LANG_CXX11
inline void MESJoinGrp::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESJoinGrp.extend)
}
#endif
inline void MESJoinGrp::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESJoinGrp.extend)
}
inline void MESJoinGrp::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESJoinGrp.extend)
}
inline ::std::string* MESJoinGrp::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.MESJoinGrp.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESJoinGrp::release_extend() {
  // @@protoc_insertion_point(field_release:im.MESJoinGrp.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESJoinGrp::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.MESJoinGrp.extend)
}

// -------------------------------------------------------------------

// MESJoinGrpAck

// string sUserId = 1;
inline void MESJoinGrpAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESJoinGrpAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.MESJoinGrpAck.sUserId)
  return suserid_.GetNoArena();
}
inline void MESJoinGrpAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESJoinGrpAck.sUserId)
}
#if LANG_CXX11
inline void MESJoinGrpAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESJoinGrpAck.sUserId)
}
#endif
inline void MESJoinGrpAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESJoinGrpAck.sUserId)
}
inline void MESJoinGrpAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESJoinGrpAck.sUserId)
}
inline ::std::string* MESJoinGrpAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESJoinGrpAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESJoinGrpAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MESJoinGrpAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESJoinGrpAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESJoinGrpAck.sUserId)
}

// string sGrpId = 2;
inline void MESJoinGrpAck::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESJoinGrpAck::sgrpid() const {
  // @@protoc_insertion_point(field_get:im.MESJoinGrpAck.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void MESJoinGrpAck::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESJoinGrpAck.sGrpId)
}
#if LANG_CXX11
inline void MESJoinGrpAck::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESJoinGrpAck.sGrpId)
}
#endif
inline void MESJoinGrpAck::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESJoinGrpAck.sGrpId)
}
inline void MESJoinGrpAck::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESJoinGrpAck.sGrpId)
}
inline ::std::string* MESJoinGrpAck::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESJoinGrpAck.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESJoinGrpAck::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im.MESJoinGrpAck.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESJoinGrpAck::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im.MESJoinGrpAck.sGrpId)
}

// string sMsgId = 3;
inline void MESJoinGrpAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESJoinGrpAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESJoinGrpAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESJoinGrpAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESJoinGrpAck.sMsgId)
}
#if LANG_CXX11
inline void MESJoinGrpAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESJoinGrpAck.sMsgId)
}
#endif
inline void MESJoinGrpAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESJoinGrpAck.sMsgId)
}
inline void MESJoinGrpAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESJoinGrpAck.sMsgId)
}
inline ::std::string* MESJoinGrpAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESJoinGrpAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESJoinGrpAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESJoinGrpAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESJoinGrpAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESJoinGrpAck.sMsgId)
}

// .im.ErrCode errcode = 4;
inline void MESJoinGrpAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode MESJoinGrpAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.MESJoinGrpAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void MESJoinGrpAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.MESJoinGrpAck.errcode)
}

// -------------------------------------------------------------------

// MESJoinGrpDeliverAck

// string sUserId = 1;
inline void MESJoinGrpDeliverAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESJoinGrpDeliverAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.MESJoinGrpDeliverAck.sUserId)
  return suserid_.GetNoArena();
}
inline void MESJoinGrpDeliverAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESJoinGrpDeliverAck.sUserId)
}
#if LANG_CXX11
inline void MESJoinGrpDeliverAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESJoinGrpDeliverAck.sUserId)
}
#endif
inline void MESJoinGrpDeliverAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESJoinGrpDeliverAck.sUserId)
}
inline void MESJoinGrpDeliverAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESJoinGrpDeliverAck.sUserId)
}
inline ::std::string* MESJoinGrpDeliverAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESJoinGrpDeliverAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESJoinGrpDeliverAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MESJoinGrpDeliverAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESJoinGrpDeliverAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESJoinGrpDeliverAck.sUserId)
}

// string sGrpId = 2;
inline void MESJoinGrpDeliverAck::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESJoinGrpDeliverAck::sgrpid() const {
  // @@protoc_insertion_point(field_get:im.MESJoinGrpDeliverAck.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void MESJoinGrpDeliverAck::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESJoinGrpDeliverAck.sGrpId)
}
#if LANG_CXX11
inline void MESJoinGrpDeliverAck::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESJoinGrpDeliverAck.sGrpId)
}
#endif
inline void MESJoinGrpDeliverAck::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESJoinGrpDeliverAck.sGrpId)
}
inline void MESJoinGrpDeliverAck::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESJoinGrpDeliverAck.sGrpId)
}
inline ::std::string* MESJoinGrpDeliverAck::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESJoinGrpDeliverAck.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESJoinGrpDeliverAck::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im.MESJoinGrpDeliverAck.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESJoinGrpDeliverAck::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im.MESJoinGrpDeliverAck.sGrpId)
}

// string sMsgId = 3;
inline void MESJoinGrpDeliverAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESJoinGrpDeliverAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESJoinGrpDeliverAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESJoinGrpDeliverAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESJoinGrpDeliverAck.sMsgId)
}
#if LANG_CXX11
inline void MESJoinGrpDeliverAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESJoinGrpDeliverAck.sMsgId)
}
#endif
inline void MESJoinGrpDeliverAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESJoinGrpDeliverAck.sMsgId)
}
inline void MESJoinGrpDeliverAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESJoinGrpDeliverAck.sMsgId)
}
inline ::std::string* MESJoinGrpDeliverAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESJoinGrpDeliverAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESJoinGrpDeliverAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESJoinGrpDeliverAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESJoinGrpDeliverAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESJoinGrpDeliverAck.sMsgId)
}

// -------------------------------------------------------------------

// UserKey

// string sUserId = 1;
inline void UserKey::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserKey::suserid() const {
  // @@protoc_insertion_point(field_get:im.UserKey.sUserId)
  return suserid_.GetNoArena();
}
inline void UserKey::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.UserKey.sUserId)
}
#if LANG_CXX11
inline void UserKey::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.UserKey.sUserId)
}
#endif
inline void UserKey::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.UserKey.sUserId)
}
inline void UserKey::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.UserKey.sUserId)
}
inline ::std::string* UserKey::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.UserKey.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserKey::release_suserid() {
  // @@protoc_insertion_point(field_release:im.UserKey.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserKey::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.UserKey.sUserId)
}

// string sKey = 2;
inline void UserKey::clear_skey() {
  skey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserKey::skey() const {
  // @@protoc_insertion_point(field_get:im.UserKey.sKey)
  return skey_.GetNoArena();
}
inline void UserKey::set_skey(const ::std::string& value) {
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.UserKey.sKey)
}
#if LANG_CXX11
inline void UserKey::set_skey(::std::string&& value) {
  
  skey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.UserKey.sKey)
}
#endif
inline void UserKey::set_skey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.UserKey.sKey)
}
inline void UserKey::set_skey(const char* value, size_t size) {
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.UserKey.sKey)
}
inline ::std::string* UserKey::mutable_skey() {
  
  // @@protoc_insertion_point(field_mutable:im.UserKey.sKey)
  return skey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserKey::release_skey() {
  // @@protoc_insertion_point(field_release:im.UserKey.sKey)
  
  return skey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserKey::set_allocated_skey(::std::string* skey) {
  if (skey != NULL) {
    
  } else {
    
  }
  skey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skey);
  // @@protoc_insertion_point(field_set_allocated:im.UserKey.sKey)
}

// -------------------------------------------------------------------

// MESExchangeKey

// string sFromId = 1;
inline void MESExchangeKey::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKey::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKey.sFromId)
  return sfromid_.GetNoArena();
}
inline void MESExchangeKey::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKey.sFromId)
}
#if LANG_CXX11
inline void MESExchangeKey::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKey.sFromId)
}
#endif
inline void MESExchangeKey::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKey.sFromId)
}
inline void MESExchangeKey::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKey.sFromId)
}
inline ::std::string* MESExchangeKey::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKey.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKey::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKey.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKey::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKey.sFromId)
}

// string sGrpId = 3;
inline void MESExchangeKey::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKey::sgrpid() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKey.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void MESExchangeKey::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKey.sGrpId)
}
#if LANG_CXX11
inline void MESExchangeKey::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKey.sGrpId)
}
#endif
inline void MESExchangeKey::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKey.sGrpId)
}
inline void MESExchangeKey::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKey.sGrpId)
}
inline ::std::string* MESExchangeKey::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKey.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKey::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKey.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKey::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKey.sGrpId)
}

// string sMsgId = 4;
inline void MESExchangeKey::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKey::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKey.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESExchangeKey::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKey.sMsgId)
}
#if LANG_CXX11
inline void MESExchangeKey::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKey.sMsgId)
}
#endif
inline void MESExchangeKey::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKey.sMsgId)
}
inline void MESExchangeKey::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKey.sMsgId)
}
inline ::std::string* MESExchangeKey::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKey.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKey::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKey.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKey::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKey.sMsgId)
}

// uint32 encrypt = 5;
inline void MESExchangeKey::clear_encrypt() {
  encrypt_ = 0u;
}
inline ::google::protobuf::uint32 MESExchangeKey::encrypt() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKey.encrypt)
  return encrypt_;
}
inline void MESExchangeKey::set_encrypt(::google::protobuf::uint32 value) {
  
  encrypt_ = value;
  // @@protoc_insertion_point(field_set:im.MESExchangeKey.encrypt)
}

// uint32 exchangeMode = 6;
inline void MESExchangeKey::clear_exchangemode() {
  exchangemode_ = 0u;
}
inline ::google::protobuf::uint32 MESExchangeKey::exchangemode() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKey.exchangeMode)
  return exchangemode_;
}
inline void MESExchangeKey::set_exchangemode(::google::protobuf::uint32 value) {
  
  exchangemode_ = value;
  // @@protoc_insertion_point(field_set:im.MESExchangeKey.exchangeMode)
}

// string sOprUserId = 7;
inline void MESExchangeKey::clear_sopruserid() {
  sopruserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKey::sopruserid() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKey.sOprUserId)
  return sopruserid_.GetNoArena();
}
inline void MESExchangeKey::set_sopruserid(const ::std::string& value) {
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKey.sOprUserId)
}
#if LANG_CXX11
inline void MESExchangeKey::set_sopruserid(::std::string&& value) {
  
  sopruserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKey.sOprUserId)
}
#endif
inline void MESExchangeKey::set_sopruserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKey.sOprUserId)
}
inline void MESExchangeKey::set_sopruserid(const char* value, size_t size) {
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKey.sOprUserId)
}
inline ::std::string* MESExchangeKey::mutable_sopruserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKey.sOprUserId)
  return sopruserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKey::release_sopruserid() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKey.sOprUserId)
  
  return sopruserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKey::set_allocated_sopruserid(::std::string* sopruserid) {
  if (sopruserid != NULL) {
    
  } else {
    
  }
  sopruserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sopruserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKey.sOprUserId)
}

// uint64 msgTime = 8;
inline void MESExchangeKey::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MESExchangeKey::msgtime() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKey.msgTime)
  return msgtime_;
}
inline void MESExchangeKey::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.MESExchangeKey.msgTime)
}

// repeated .im.UserKey lsUserKeys = 12;
inline int MESExchangeKey::lsuserkeys_size() const {
  return lsuserkeys_.size();
}
inline void MESExchangeKey::clear_lsuserkeys() {
  lsuserkeys_.Clear();
}
inline ::im::UserKey* MESExchangeKey::mutable_lsuserkeys(int index) {
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKey.lsUserKeys)
  return lsuserkeys_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::im::UserKey >*
MESExchangeKey::mutable_lsuserkeys() {
  // @@protoc_insertion_point(field_mutable_list:im.MESExchangeKey.lsUserKeys)
  return &lsuserkeys_;
}
inline const ::im::UserKey& MESExchangeKey::lsuserkeys(int index) const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKey.lsUserKeys)
  return lsuserkeys_.Get(index);
}
inline ::im::UserKey* MESExchangeKey::add_lsuserkeys() {
  // @@protoc_insertion_point(field_add:im.MESExchangeKey.lsUserKeys)
  return lsuserkeys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::im::UserKey >&
MESExchangeKey::lsuserkeys() const {
  // @@protoc_insertion_point(field_list:im.MESExchangeKey.lsUserKeys)
  return lsuserkeys_;
}

// -------------------------------------------------------------------

// MESExchangeKeyAck

// string sUserId = 1;
inline void MESExchangeKeyAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKeyAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyAck.sUserId)
  return suserid_.GetNoArena();
}
inline void MESExchangeKeyAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyAck.sUserId)
}
#if LANG_CXX11
inline void MESExchangeKeyAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKeyAck.sUserId)
}
#endif
inline void MESExchangeKeyAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKeyAck.sUserId)
}
inline void MESExchangeKeyAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKeyAck.sUserId)
}
inline ::std::string* MESExchangeKeyAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKeyAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKeyAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKeyAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKeyAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKeyAck.sUserId)
}

// string sGrpId = 2;
inline void MESExchangeKeyAck::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKeyAck::sgrpid() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyAck.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void MESExchangeKeyAck::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyAck.sGrpId)
}
#if LANG_CXX11
inline void MESExchangeKeyAck::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKeyAck.sGrpId)
}
#endif
inline void MESExchangeKeyAck::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKeyAck.sGrpId)
}
inline void MESExchangeKeyAck::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKeyAck.sGrpId)
}
inline ::std::string* MESExchangeKeyAck::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKeyAck.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKeyAck::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKeyAck.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKeyAck::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKeyAck.sGrpId)
}

// string sMsgId = 3;
inline void MESExchangeKeyAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKeyAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESExchangeKeyAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyAck.sMsgId)
}
#if LANG_CXX11
inline void MESExchangeKeyAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKeyAck.sMsgId)
}
#endif
inline void MESExchangeKeyAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKeyAck.sMsgId)
}
inline void MESExchangeKeyAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKeyAck.sMsgId)
}
inline ::std::string* MESExchangeKeyAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKeyAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKeyAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKeyAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKeyAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKeyAck.sMsgId)
}

// .im.ErrCode errcode = 4;
inline void MESExchangeKeyAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode MESExchangeKeyAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void MESExchangeKeyAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyAck.errcode)
}

// -------------------------------------------------------------------

// MESExchangeKeyDeliver

// string sFromId = 1;
inline void MESExchangeKeyDeliver::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKeyDeliver::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyDeliver.sFromId)
  return sfromid_.GetNoArena();
}
inline void MESExchangeKeyDeliver::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyDeliver.sFromId)
}
#if LANG_CXX11
inline void MESExchangeKeyDeliver::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKeyDeliver.sFromId)
}
#endif
inline void MESExchangeKeyDeliver::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKeyDeliver.sFromId)
}
inline void MESExchangeKeyDeliver::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKeyDeliver.sFromId)
}
inline ::std::string* MESExchangeKeyDeliver::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKeyDeliver.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKeyDeliver::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKeyDeliver.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKeyDeliver::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKeyDeliver.sFromId)
}

// string sToId = 2;
inline void MESExchangeKeyDeliver::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKeyDeliver::stoid() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyDeliver.sToId)
  return stoid_.GetNoArena();
}
inline void MESExchangeKeyDeliver::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyDeliver.sToId)
}
#if LANG_CXX11
inline void MESExchangeKeyDeliver::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKeyDeliver.sToId)
}
#endif
inline void MESExchangeKeyDeliver::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKeyDeliver.sToId)
}
inline void MESExchangeKeyDeliver::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKeyDeliver.sToId)
}
inline ::std::string* MESExchangeKeyDeliver::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKeyDeliver.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKeyDeliver::release_stoid() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKeyDeliver.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKeyDeliver::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKeyDeliver.sToId)
}

// string sGrpId = 3;
inline void MESExchangeKeyDeliver::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKeyDeliver::sgrpid() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyDeliver.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void MESExchangeKeyDeliver::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyDeliver.sGrpId)
}
#if LANG_CXX11
inline void MESExchangeKeyDeliver::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKeyDeliver.sGrpId)
}
#endif
inline void MESExchangeKeyDeliver::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKeyDeliver.sGrpId)
}
inline void MESExchangeKeyDeliver::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKeyDeliver.sGrpId)
}
inline ::std::string* MESExchangeKeyDeliver::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKeyDeliver.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKeyDeliver::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKeyDeliver.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKeyDeliver::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKeyDeliver.sGrpId)
}

// string sMsgId = 4;
inline void MESExchangeKeyDeliver::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKeyDeliver::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyDeliver.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESExchangeKeyDeliver::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyDeliver.sMsgId)
}
#if LANG_CXX11
inline void MESExchangeKeyDeliver::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKeyDeliver.sMsgId)
}
#endif
inline void MESExchangeKeyDeliver::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKeyDeliver.sMsgId)
}
inline void MESExchangeKeyDeliver::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKeyDeliver.sMsgId)
}
inline ::std::string* MESExchangeKeyDeliver::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKeyDeliver.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKeyDeliver::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKeyDeliver.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKeyDeliver::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKeyDeliver.sMsgId)
}

// uint32 exchangeMode = 5;
inline void MESExchangeKeyDeliver::clear_exchangemode() {
  exchangemode_ = 0u;
}
inline ::google::protobuf::uint32 MESExchangeKeyDeliver::exchangemode() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyDeliver.exchangeMode)
  return exchangemode_;
}
inline void MESExchangeKeyDeliver::set_exchangemode(::google::protobuf::uint32 value) {
  
  exchangemode_ = value;
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyDeliver.exchangeMode)
}

// string sKey = 6;
inline void MESExchangeKeyDeliver::clear_skey() {
  skey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKeyDeliver::skey() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyDeliver.sKey)
  return skey_.GetNoArena();
}
inline void MESExchangeKeyDeliver::set_skey(const ::std::string& value) {
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyDeliver.sKey)
}
#if LANG_CXX11
inline void MESExchangeKeyDeliver::set_skey(::std::string&& value) {
  
  skey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKeyDeliver.sKey)
}
#endif
inline void MESExchangeKeyDeliver::set_skey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKeyDeliver.sKey)
}
inline void MESExchangeKeyDeliver::set_skey(const char* value, size_t size) {
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKeyDeliver.sKey)
}
inline ::std::string* MESExchangeKeyDeliver::mutable_skey() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKeyDeliver.sKey)
  return skey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKeyDeliver::release_skey() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKeyDeliver.sKey)
  
  return skey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKeyDeliver::set_allocated_skey(::std::string* skey) {
  if (skey != NULL) {
    
  } else {
    
  }
  skey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skey);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKeyDeliver.sKey)
}

// uint32 encrypt = 7;
inline void MESExchangeKeyDeliver::clear_encrypt() {
  encrypt_ = 0u;
}
inline ::google::protobuf::uint32 MESExchangeKeyDeliver::encrypt() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyDeliver.encrypt)
  return encrypt_;
}
inline void MESExchangeKeyDeliver::set_encrypt(::google::protobuf::uint32 value) {
  
  encrypt_ = value;
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyDeliver.encrypt)
}

// string sOprUserId = 8;
inline void MESExchangeKeyDeliver::clear_sopruserid() {
  sopruserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKeyDeliver::sopruserid() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyDeliver.sOprUserId)
  return sopruserid_.GetNoArena();
}
inline void MESExchangeKeyDeliver::set_sopruserid(const ::std::string& value) {
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyDeliver.sOprUserId)
}
#if LANG_CXX11
inline void MESExchangeKeyDeliver::set_sopruserid(::std::string&& value) {
  
  sopruserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKeyDeliver.sOprUserId)
}
#endif
inline void MESExchangeKeyDeliver::set_sopruserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKeyDeliver.sOprUserId)
}
inline void MESExchangeKeyDeliver::set_sopruserid(const char* value, size_t size) {
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKeyDeliver.sOprUserId)
}
inline ::std::string* MESExchangeKeyDeliver::mutable_sopruserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKeyDeliver.sOprUserId)
  return sopruserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKeyDeliver::release_sopruserid() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKeyDeliver.sOprUserId)
  
  return sopruserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKeyDeliver::set_allocated_sopruserid(::std::string* sopruserid) {
  if (sopruserid != NULL) {
    
  } else {
    
  }
  sopruserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sopruserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKeyDeliver.sOprUserId)
}

// uint64 msgTime = 9;
inline void MESExchangeKeyDeliver::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MESExchangeKeyDeliver::msgtime() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyDeliver.msgTime)
  return msgtime_;
}
inline void MESExchangeKeyDeliver::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyDeliver.msgTime)
}

// string extend = 10;
inline void MESExchangeKeyDeliver::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKeyDeliver::extend() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyDeliver.extend)
  return extend_.GetNoArena();
}
inline void MESExchangeKeyDeliver::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyDeliver.extend)
}
#if LANG_CXX11
inline void MESExchangeKeyDeliver::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKeyDeliver.extend)
}
#endif
inline void MESExchangeKeyDeliver::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKeyDeliver.extend)
}
inline void MESExchangeKeyDeliver::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKeyDeliver.extend)
}
inline ::std::string* MESExchangeKeyDeliver::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKeyDeliver.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKeyDeliver::release_extend() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKeyDeliver.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKeyDeliver::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKeyDeliver.extend)
}

// -------------------------------------------------------------------

// MESExchangeKeyDeliverAck

// string sFromId = 1;
inline void MESExchangeKeyDeliverAck::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKeyDeliverAck::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyDeliverAck.sFromId)
  return sfromid_.GetNoArena();
}
inline void MESExchangeKeyDeliverAck::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyDeliverAck.sFromId)
}
#if LANG_CXX11
inline void MESExchangeKeyDeliverAck::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKeyDeliverAck.sFromId)
}
#endif
inline void MESExchangeKeyDeliverAck::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKeyDeliverAck.sFromId)
}
inline void MESExchangeKeyDeliverAck::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKeyDeliverAck.sFromId)
}
inline ::std::string* MESExchangeKeyDeliverAck::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKeyDeliverAck.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKeyDeliverAck::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKeyDeliverAck.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKeyDeliverAck::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKeyDeliverAck.sFromId)
}

// string sToId = 2;
inline void MESExchangeKeyDeliverAck::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKeyDeliverAck::stoid() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyDeliverAck.sToId)
  return stoid_.GetNoArena();
}
inline void MESExchangeKeyDeliverAck::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyDeliverAck.sToId)
}
#if LANG_CXX11
inline void MESExchangeKeyDeliverAck::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKeyDeliverAck.sToId)
}
#endif
inline void MESExchangeKeyDeliverAck::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKeyDeliverAck.sToId)
}
inline void MESExchangeKeyDeliverAck::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKeyDeliverAck.sToId)
}
inline ::std::string* MESExchangeKeyDeliverAck::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKeyDeliverAck.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKeyDeliverAck::release_stoid() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKeyDeliverAck.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKeyDeliverAck::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKeyDeliverAck.sToId)
}

// string sGrpId = 3;
inline void MESExchangeKeyDeliverAck::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKeyDeliverAck::sgrpid() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyDeliverAck.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void MESExchangeKeyDeliverAck::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyDeliverAck.sGrpId)
}
#if LANG_CXX11
inline void MESExchangeKeyDeliverAck::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKeyDeliverAck.sGrpId)
}
#endif
inline void MESExchangeKeyDeliverAck::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKeyDeliverAck.sGrpId)
}
inline void MESExchangeKeyDeliverAck::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKeyDeliverAck.sGrpId)
}
inline ::std::string* MESExchangeKeyDeliverAck::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKeyDeliverAck.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKeyDeliverAck::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKeyDeliverAck.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKeyDeliverAck::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKeyDeliverAck.sGrpId)
}

// string sMsgId = 4;
inline void MESExchangeKeyDeliverAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKeyDeliverAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyDeliverAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESExchangeKeyDeliverAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyDeliverAck.sMsgId)
}
#if LANG_CXX11
inline void MESExchangeKeyDeliverAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKeyDeliverAck.sMsgId)
}
#endif
inline void MESExchangeKeyDeliverAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKeyDeliverAck.sMsgId)
}
inline void MESExchangeKeyDeliverAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKeyDeliverAck.sMsgId)
}
inline ::std::string* MESExchangeKeyDeliverAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKeyDeliverAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKeyDeliverAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKeyDeliverAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKeyDeliverAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKeyDeliverAck.sMsgId)
}

// string sKey = 5;
inline void MESExchangeKeyDeliverAck::clear_skey() {
  skey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKeyDeliverAck::skey() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyDeliverAck.sKey)
  return skey_.GetNoArena();
}
inline void MESExchangeKeyDeliverAck::set_skey(const ::std::string& value) {
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyDeliverAck.sKey)
}
#if LANG_CXX11
inline void MESExchangeKeyDeliverAck::set_skey(::std::string&& value) {
  
  skey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKeyDeliverAck.sKey)
}
#endif
inline void MESExchangeKeyDeliverAck::set_skey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKeyDeliverAck.sKey)
}
inline void MESExchangeKeyDeliverAck::set_skey(const char* value, size_t size) {
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKeyDeliverAck.sKey)
}
inline ::std::string* MESExchangeKeyDeliverAck::mutable_skey() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKeyDeliverAck.sKey)
  return skey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKeyDeliverAck::release_skey() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKeyDeliverAck.sKey)
  
  return skey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKeyDeliverAck::set_allocated_skey(::std::string* skey) {
  if (skey != NULL) {
    
  } else {
    
  }
  skey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skey);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKeyDeliverAck.sKey)
}

// uint32 encrypt = 6;
inline void MESExchangeKeyDeliverAck::clear_encrypt() {
  encrypt_ = 0u;
}
inline ::google::protobuf::uint32 MESExchangeKeyDeliverAck::encrypt() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyDeliverAck.encrypt)
  return encrypt_;
}
inline void MESExchangeKeyDeliverAck::set_encrypt(::google::protobuf::uint32 value) {
  
  encrypt_ = value;
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyDeliverAck.encrypt)
}

// .im.ErrCode errcode = 7;
inline void MESExchangeKeyDeliverAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode MESExchangeKeyDeliverAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyDeliverAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void MESExchangeKeyDeliverAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyDeliverAck.errcode)
}

// uint64 msgTime = 8;
inline void MESExchangeKeyDeliverAck::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MESExchangeKeyDeliverAck::msgtime() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyDeliverAck.msgTime)
  return msgtime_;
}
inline void MESExchangeKeyDeliverAck::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyDeliverAck.msgTime)
}

// -------------------------------------------------------------------

// MESExchangeKeyDeliverNotifyAck

// string sUserId = 1;
inline void MESExchangeKeyDeliverNotifyAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKeyDeliverNotifyAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyDeliverNotifyAck.sUserId)
  return suserid_.GetNoArena();
}
inline void MESExchangeKeyDeliverNotifyAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyDeliverNotifyAck.sUserId)
}
#if LANG_CXX11
inline void MESExchangeKeyDeliverNotifyAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKeyDeliverNotifyAck.sUserId)
}
#endif
inline void MESExchangeKeyDeliverNotifyAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKeyDeliverNotifyAck.sUserId)
}
inline void MESExchangeKeyDeliverNotifyAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKeyDeliverNotifyAck.sUserId)
}
inline ::std::string* MESExchangeKeyDeliverNotifyAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKeyDeliverNotifyAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKeyDeliverNotifyAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKeyDeliverNotifyAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKeyDeliverNotifyAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKeyDeliverNotifyAck.sUserId)
}

// string sMsgId = 2;
inline void MESExchangeKeyDeliverNotifyAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESExchangeKeyDeliverNotifyAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESExchangeKeyDeliverNotifyAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESExchangeKeyDeliverNotifyAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESExchangeKeyDeliverNotifyAck.sMsgId)
}
#if LANG_CXX11
inline void MESExchangeKeyDeliverNotifyAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESExchangeKeyDeliverNotifyAck.sMsgId)
}
#endif
inline void MESExchangeKeyDeliverNotifyAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESExchangeKeyDeliverNotifyAck.sMsgId)
}
inline void MESExchangeKeyDeliverNotifyAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESExchangeKeyDeliverNotifyAck.sMsgId)
}
inline ::std::string* MESExchangeKeyDeliverNotifyAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESExchangeKeyDeliverNotifyAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESExchangeKeyDeliverNotifyAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESExchangeKeyDeliverNotifyAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESExchangeKeyDeliverNotifyAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESExchangeKeyDeliverNotifyAck.sMsgId)
}

// -------------------------------------------------------------------

// _InnerGrpNotify

// string sGrpId = 1;
inline void _InnerGrpNotify::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _InnerGrpNotify::sgrpid() const {
  // @@protoc_insertion_point(field_get:im._InnerGrpNotify.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void _InnerGrpNotify::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._InnerGrpNotify.sGrpId)
}
#if LANG_CXX11
inline void _InnerGrpNotify::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._InnerGrpNotify.sGrpId)
}
#endif
inline void _InnerGrpNotify::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._InnerGrpNotify.sGrpId)
}
inline void _InnerGrpNotify::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._InnerGrpNotify.sGrpId)
}
inline ::std::string* _InnerGrpNotify::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im._InnerGrpNotify.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _InnerGrpNotify::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im._InnerGrpNotify.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _InnerGrpNotify::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im._InnerGrpNotify.sGrpId)
}

// repeated string lsToId = 2;
inline int _InnerGrpNotify::lstoid_size() const {
  return lstoid_.size();
}
inline void _InnerGrpNotify::clear_lstoid() {
  lstoid_.Clear();
}
inline const ::std::string& _InnerGrpNotify::lstoid(int index) const {
  // @@protoc_insertion_point(field_get:im._InnerGrpNotify.lsToId)
  return lstoid_.Get(index);
}
inline ::std::string* _InnerGrpNotify::mutable_lstoid(int index) {
  // @@protoc_insertion_point(field_mutable:im._InnerGrpNotify.lsToId)
  return lstoid_.Mutable(index);
}
inline void _InnerGrpNotify::set_lstoid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im._InnerGrpNotify.lsToId)
  lstoid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void _InnerGrpNotify::set_lstoid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:im._InnerGrpNotify.lsToId)
  lstoid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void _InnerGrpNotify::set_lstoid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  lstoid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im._InnerGrpNotify.lsToId)
}
inline void _InnerGrpNotify::set_lstoid(int index, const char* value, size_t size) {
  lstoid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im._InnerGrpNotify.lsToId)
}
inline ::std::string* _InnerGrpNotify::add_lstoid() {
  // @@protoc_insertion_point(field_add_mutable:im._InnerGrpNotify.lsToId)
  return lstoid_.Add();
}
inline void _InnerGrpNotify::add_lstoid(const ::std::string& value) {
  lstoid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im._InnerGrpNotify.lsToId)
}
#if LANG_CXX11
inline void _InnerGrpNotify::add_lstoid(::std::string&& value) {
  lstoid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:im._InnerGrpNotify.lsToId)
}
#endif
inline void _InnerGrpNotify::add_lstoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  lstoid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im._InnerGrpNotify.lsToId)
}
inline void _InnerGrpNotify::add_lstoid(const char* value, size_t size) {
  lstoid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im._InnerGrpNotify.lsToId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
_InnerGrpNotify::lstoid() const {
  // @@protoc_insertion_point(field_list:im._InnerGrpNotify.lsToId)
  return lstoid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
_InnerGrpNotify::mutable_lstoid() {
  // @@protoc_insertion_point(field_mutable_list:im._InnerGrpNotify.lsToId)
  return &lstoid_;
}

// string sMsgId = 3;
inline void _InnerGrpNotify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _InnerGrpNotify::smsgid() const {
  // @@protoc_insertion_point(field_get:im._InnerGrpNotify.sMsgId)
  return smsgid_.GetNoArena();
}
inline void _InnerGrpNotify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._InnerGrpNotify.sMsgId)
}
#if LANG_CXX11
inline void _InnerGrpNotify::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._InnerGrpNotify.sMsgId)
}
#endif
inline void _InnerGrpNotify::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._InnerGrpNotify.sMsgId)
}
inline void _InnerGrpNotify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._InnerGrpNotify.sMsgId)
}
inline ::std::string* _InnerGrpNotify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im._InnerGrpNotify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _InnerGrpNotify::release_smsgid() {
  // @@protoc_insertion_point(field_release:im._InnerGrpNotify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _InnerGrpNotify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im._InnerGrpNotify.sMsgId)
}

// uint64 msgTime = 4;
inline void _InnerGrpNotify::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 _InnerGrpNotify::msgtime() const {
  // @@protoc_insertion_point(field_get:im._InnerGrpNotify.msgTime)
  return msgtime_;
}
inline void _InnerGrpNotify::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im._InnerGrpNotify.msgTime)
}

// string sOprUserId = 5;
inline void _InnerGrpNotify::clear_sopruserid() {
  sopruserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _InnerGrpNotify::sopruserid() const {
  // @@protoc_insertion_point(field_get:im._InnerGrpNotify.sOprUserId)
  return sopruserid_.GetNoArena();
}
inline void _InnerGrpNotify::set_sopruserid(const ::std::string& value) {
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._InnerGrpNotify.sOprUserId)
}
#if LANG_CXX11
inline void _InnerGrpNotify::set_sopruserid(::std::string&& value) {
  
  sopruserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._InnerGrpNotify.sOprUserId)
}
#endif
inline void _InnerGrpNotify::set_sopruserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._InnerGrpNotify.sOprUserId)
}
inline void _InnerGrpNotify::set_sopruserid(const char* value, size_t size) {
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._InnerGrpNotify.sOprUserId)
}
inline ::std::string* _InnerGrpNotify::mutable_sopruserid() {
  
  // @@protoc_insertion_point(field_mutable:im._InnerGrpNotify.sOprUserId)
  return sopruserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _InnerGrpNotify::release_sopruserid() {
  // @@protoc_insertion_point(field_release:im._InnerGrpNotify.sOprUserId)
  
  return sopruserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _InnerGrpNotify::set_allocated_sopruserid(::std::string* sopruserid) {
  if (sopruserid != NULL) {
    
  } else {
    
  }
  sopruserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sopruserid);
  // @@protoc_insertion_point(field_set_allocated:im._InnerGrpNotify.sOprUserId)
}

// repeated string sMnpledUserId = 6;
inline int _InnerGrpNotify::smnpleduserid_size() const {
  return smnpleduserid_.size();
}
inline void _InnerGrpNotify::clear_smnpleduserid() {
  smnpleduserid_.Clear();
}
inline const ::std::string& _InnerGrpNotify::smnpleduserid(int index) const {
  // @@protoc_insertion_point(field_get:im._InnerGrpNotify.sMnpledUserId)
  return smnpleduserid_.Get(index);
}
inline ::std::string* _InnerGrpNotify::mutable_smnpleduserid(int index) {
  // @@protoc_insertion_point(field_mutable:im._InnerGrpNotify.sMnpledUserId)
  return smnpleduserid_.Mutable(index);
}
inline void _InnerGrpNotify::set_smnpleduserid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im._InnerGrpNotify.sMnpledUserId)
  smnpleduserid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void _InnerGrpNotify::set_smnpleduserid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:im._InnerGrpNotify.sMnpledUserId)
  smnpleduserid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void _InnerGrpNotify::set_smnpleduserid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  smnpleduserid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im._InnerGrpNotify.sMnpledUserId)
}
inline void _InnerGrpNotify::set_smnpleduserid(int index, const char* value, size_t size) {
  smnpleduserid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im._InnerGrpNotify.sMnpledUserId)
}
inline ::std::string* _InnerGrpNotify::add_smnpleduserid() {
  // @@protoc_insertion_point(field_add_mutable:im._InnerGrpNotify.sMnpledUserId)
  return smnpleduserid_.Add();
}
inline void _InnerGrpNotify::add_smnpleduserid(const ::std::string& value) {
  smnpleduserid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im._InnerGrpNotify.sMnpledUserId)
}
#if LANG_CXX11
inline void _InnerGrpNotify::add_smnpleduserid(::std::string&& value) {
  smnpleduserid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:im._InnerGrpNotify.sMnpledUserId)
}
#endif
inline void _InnerGrpNotify::add_smnpleduserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  smnpleduserid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im._InnerGrpNotify.sMnpledUserId)
}
inline void _InnerGrpNotify::add_smnpleduserid(const char* value, size_t size) {
  smnpleduserid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im._InnerGrpNotify.sMnpledUserId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
_InnerGrpNotify::smnpleduserid() const {
  // @@protoc_insertion_point(field_list:im._InnerGrpNotify.sMnpledUserId)
  return smnpleduserid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
_InnerGrpNotify::mutable_smnpleduserid() {
  // @@protoc_insertion_point(field_mutable_list:im._InnerGrpNotify.sMnpledUserId)
  return &smnpleduserid_;
}

// string sContent = 7;
inline void _InnerGrpNotify::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _InnerGrpNotify::scontent() const {
  // @@protoc_insertion_point(field_get:im._InnerGrpNotify.sContent)
  return scontent_.GetNoArena();
}
inline void _InnerGrpNotify::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._InnerGrpNotify.sContent)
}
#if LANG_CXX11
inline void _InnerGrpNotify::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._InnerGrpNotify.sContent)
}
#endif
inline void _InnerGrpNotify::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._InnerGrpNotify.sContent)
}
inline void _InnerGrpNotify::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._InnerGrpNotify.sContent)
}
inline ::std::string* _InnerGrpNotify::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im._InnerGrpNotify.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _InnerGrpNotify::release_scontent() {
  // @@protoc_insertion_point(field_release:im._InnerGrpNotify.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _InnerGrpNotify::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im._InnerGrpNotify.sContent)
}

// .im.NotifyType notifyType = 8;
inline void _InnerGrpNotify::clear_notifytype() {
  notifytype_ = 0;
}
inline ::im::NotifyType _InnerGrpNotify::notifytype() const {
  // @@protoc_insertion_point(field_get:im._InnerGrpNotify.notifyType)
  return static_cast< ::im::NotifyType >(notifytype_);
}
inline void _InnerGrpNotify::set_notifytype(::im::NotifyType value) {
  
  notifytype_ = value;
  // @@protoc_insertion_point(field_set:im._InnerGrpNotify.notifyType)
}

// .im.ErrCode errcode = 9;
inline void _InnerGrpNotify::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode _InnerGrpNotify::errcode() const {
  // @@protoc_insertion_point(field_get:im._InnerGrpNotify.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void _InnerGrpNotify::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im._InnerGrpNotify.errcode)
}

// string extend = 10;
inline void _InnerGrpNotify::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _InnerGrpNotify::extend() const {
  // @@protoc_insertion_point(field_get:im._InnerGrpNotify.extend)
  return extend_.GetNoArena();
}
inline void _InnerGrpNotify::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._InnerGrpNotify.extend)
}
#if LANG_CXX11
inline void _InnerGrpNotify::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._InnerGrpNotify.extend)
}
#endif
inline void _InnerGrpNotify::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._InnerGrpNotify.extend)
}
inline void _InnerGrpNotify::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._InnerGrpNotify.extend)
}
inline ::std::string* _InnerGrpNotify::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im._InnerGrpNotify.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _InnerGrpNotify::release_extend() {
  // @@protoc_insertion_point(field_release:im._InnerGrpNotify.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _InnerGrpNotify::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im._InnerGrpNotify.extend)
}

// -------------------------------------------------------------------

// _MESGrpInterNotify

// string sGrpId = 1;
inline void _MESGrpInterNotify::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterNotify::sgrpid() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterNotify.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void _MESGrpInterNotify::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterNotify.sGrpId)
}
#if LANG_CXX11
inline void _MESGrpInterNotify::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterNotify.sGrpId)
}
#endif
inline void _MESGrpInterNotify::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterNotify.sGrpId)
}
inline void _MESGrpInterNotify::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterNotify.sGrpId)
}
inline ::std::string* _MESGrpInterNotify::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterNotify.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterNotify::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterNotify.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterNotify::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterNotify.sGrpId)
}

// repeated string sToId = 2;
inline int _MESGrpInterNotify::stoid_size() const {
  return stoid_.size();
}
inline void _MESGrpInterNotify::clear_stoid() {
  stoid_.Clear();
}
inline const ::std::string& _MESGrpInterNotify::stoid(int index) const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterNotify.sToId)
  return stoid_.Get(index);
}
inline ::std::string* _MESGrpInterNotify::mutable_stoid(int index) {
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterNotify.sToId)
  return stoid_.Mutable(index);
}
inline void _MESGrpInterNotify::set_stoid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im._MESGrpInterNotify.sToId)
  stoid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void _MESGrpInterNotify::set_stoid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:im._MESGrpInterNotify.sToId)
  stoid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void _MESGrpInterNotify::set_stoid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stoid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterNotify.sToId)
}
inline void _MESGrpInterNotify::set_stoid(int index, const char* value, size_t size) {
  stoid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterNotify.sToId)
}
inline ::std::string* _MESGrpInterNotify::add_stoid() {
  // @@protoc_insertion_point(field_add_mutable:im._MESGrpInterNotify.sToId)
  return stoid_.Add();
}
inline void _MESGrpInterNotify::add_stoid(const ::std::string& value) {
  stoid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im._MESGrpInterNotify.sToId)
}
#if LANG_CXX11
inline void _MESGrpInterNotify::add_stoid(::std::string&& value) {
  stoid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:im._MESGrpInterNotify.sToId)
}
#endif
inline void _MESGrpInterNotify::add_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stoid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im._MESGrpInterNotify.sToId)
}
inline void _MESGrpInterNotify::add_stoid(const char* value, size_t size) {
  stoid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im._MESGrpInterNotify.sToId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
_MESGrpInterNotify::stoid() const {
  // @@protoc_insertion_point(field_list:im._MESGrpInterNotify.sToId)
  return stoid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
_MESGrpInterNotify::mutable_stoid() {
  // @@protoc_insertion_point(field_mutable_list:im._MESGrpInterNotify.sToId)
  return &stoid_;
}

// string sMsgId = 3;
inline void _MESGrpInterNotify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterNotify::smsgid() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterNotify.sMsgId)
  return smsgid_.GetNoArena();
}
inline void _MESGrpInterNotify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterNotify.sMsgId)
}
#if LANG_CXX11
inline void _MESGrpInterNotify::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterNotify.sMsgId)
}
#endif
inline void _MESGrpInterNotify::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterNotify.sMsgId)
}
inline void _MESGrpInterNotify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterNotify.sMsgId)
}
inline ::std::string* _MESGrpInterNotify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterNotify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterNotify::release_smsgid() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterNotify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterNotify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterNotify.sMsgId)
}

// uint64 msgTime = 4;
inline void _MESGrpInterNotify::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 _MESGrpInterNotify::msgtime() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterNotify.msgTime)
  return msgtime_;
}
inline void _MESGrpInterNotify::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im._MESGrpInterNotify.msgTime)
}

// string sOprUserId = 5;
inline void _MESGrpInterNotify::clear_sopruserid() {
  sopruserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterNotify::sopruserid() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterNotify.sOprUserId)
  return sopruserid_.GetNoArena();
}
inline void _MESGrpInterNotify::set_sopruserid(const ::std::string& value) {
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterNotify.sOprUserId)
}
#if LANG_CXX11
inline void _MESGrpInterNotify::set_sopruserid(::std::string&& value) {
  
  sopruserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterNotify.sOprUserId)
}
#endif
inline void _MESGrpInterNotify::set_sopruserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterNotify.sOprUserId)
}
inline void _MESGrpInterNotify::set_sopruserid(const char* value, size_t size) {
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterNotify.sOprUserId)
}
inline ::std::string* _MESGrpInterNotify::mutable_sopruserid() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterNotify.sOprUserId)
  return sopruserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterNotify::release_sopruserid() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterNotify.sOprUserId)
  
  return sopruserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterNotify::set_allocated_sopruserid(::std::string* sopruserid) {
  if (sopruserid != NULL) {
    
  } else {
    
  }
  sopruserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sopruserid);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterNotify.sOprUserId)
}

// repeated string sMnpledUserId = 6;
inline int _MESGrpInterNotify::smnpleduserid_size() const {
  return smnpleduserid_.size();
}
inline void _MESGrpInterNotify::clear_smnpleduserid() {
  smnpleduserid_.Clear();
}
inline const ::std::string& _MESGrpInterNotify::smnpleduserid(int index) const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterNotify.sMnpledUserId)
  return smnpleduserid_.Get(index);
}
inline ::std::string* _MESGrpInterNotify::mutable_smnpleduserid(int index) {
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterNotify.sMnpledUserId)
  return smnpleduserid_.Mutable(index);
}
inline void _MESGrpInterNotify::set_smnpleduserid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im._MESGrpInterNotify.sMnpledUserId)
  smnpleduserid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void _MESGrpInterNotify::set_smnpleduserid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:im._MESGrpInterNotify.sMnpledUserId)
  smnpleduserid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void _MESGrpInterNotify::set_smnpleduserid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  smnpleduserid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterNotify.sMnpledUserId)
}
inline void _MESGrpInterNotify::set_smnpleduserid(int index, const char* value, size_t size) {
  smnpleduserid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterNotify.sMnpledUserId)
}
inline ::std::string* _MESGrpInterNotify::add_smnpleduserid() {
  // @@protoc_insertion_point(field_add_mutable:im._MESGrpInterNotify.sMnpledUserId)
  return smnpleduserid_.Add();
}
inline void _MESGrpInterNotify::add_smnpleduserid(const ::std::string& value) {
  smnpleduserid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im._MESGrpInterNotify.sMnpledUserId)
}
#if LANG_CXX11
inline void _MESGrpInterNotify::add_smnpleduserid(::std::string&& value) {
  smnpleduserid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:im._MESGrpInterNotify.sMnpledUserId)
}
#endif
inline void _MESGrpInterNotify::add_smnpleduserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  smnpleduserid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im._MESGrpInterNotify.sMnpledUserId)
}
inline void _MESGrpInterNotify::add_smnpleduserid(const char* value, size_t size) {
  smnpleduserid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im._MESGrpInterNotify.sMnpledUserId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
_MESGrpInterNotify::smnpleduserid() const {
  // @@protoc_insertion_point(field_list:im._MESGrpInterNotify.sMnpledUserId)
  return smnpleduserid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
_MESGrpInterNotify::mutable_smnpleduserid() {
  // @@protoc_insertion_point(field_mutable_list:im._MESGrpInterNotify.sMnpledUserId)
  return &smnpleduserid_;
}

// string sContent = 7;
inline void _MESGrpInterNotify::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterNotify::scontent() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterNotify.sContent)
  return scontent_.GetNoArena();
}
inline void _MESGrpInterNotify::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterNotify.sContent)
}
#if LANG_CXX11
inline void _MESGrpInterNotify::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterNotify.sContent)
}
#endif
inline void _MESGrpInterNotify::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterNotify.sContent)
}
inline void _MESGrpInterNotify::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterNotify.sContent)
}
inline ::std::string* _MESGrpInterNotify::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterNotify.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterNotify::release_scontent() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterNotify.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterNotify::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterNotify.sContent)
}

// .im.NotifyType notifyType = 8;
inline void _MESGrpInterNotify::clear_notifytype() {
  notifytype_ = 0;
}
inline ::im::NotifyType _MESGrpInterNotify::notifytype() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterNotify.notifyType)
  return static_cast< ::im::NotifyType >(notifytype_);
}
inline void _MESGrpInterNotify::set_notifytype(::im::NotifyType value) {
  
  notifytype_ = value;
  // @@protoc_insertion_point(field_set:im._MESGrpInterNotify.notifyType)
}

// .im.ErrCode errcode = 9;
inline void _MESGrpInterNotify::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode _MESGrpInterNotify::errcode() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterNotify.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void _MESGrpInterNotify::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im._MESGrpInterNotify.errcode)
}

// string extend = 10;
inline void _MESGrpInterNotify::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterNotify::extend() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterNotify.extend)
  return extend_.GetNoArena();
}
inline void _MESGrpInterNotify::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterNotify.extend)
}
#if LANG_CXX11
inline void _MESGrpInterNotify::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterNotify.extend)
}
#endif
inline void _MESGrpInterNotify::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterNotify.extend)
}
inline void _MESGrpInterNotify::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterNotify.extend)
}
inline ::std::string* _MESGrpInterNotify::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterNotify.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterNotify::release_extend() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterNotify.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterNotify::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterNotify.extend)
}

// -------------------------------------------------------------------

// _MESGrpInterNotifyAck

// string sUserId = 1;
inline void _MESGrpInterNotifyAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterNotifyAck::suserid() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterNotifyAck.sUserId)
  return suserid_.GetNoArena();
}
inline void _MESGrpInterNotifyAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterNotifyAck.sUserId)
}
#if LANG_CXX11
inline void _MESGrpInterNotifyAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterNotifyAck.sUserId)
}
#endif
inline void _MESGrpInterNotifyAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterNotifyAck.sUserId)
}
inline void _MESGrpInterNotifyAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterNotifyAck.sUserId)
}
inline ::std::string* _MESGrpInterNotifyAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterNotifyAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterNotifyAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterNotifyAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterNotifyAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterNotifyAck.sUserId)
}

// string sGrpId = 2;
inline void _MESGrpInterNotifyAck::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterNotifyAck::sgrpid() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterNotifyAck.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void _MESGrpInterNotifyAck::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterNotifyAck.sGrpId)
}
#if LANG_CXX11
inline void _MESGrpInterNotifyAck::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterNotifyAck.sGrpId)
}
#endif
inline void _MESGrpInterNotifyAck::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterNotifyAck.sGrpId)
}
inline void _MESGrpInterNotifyAck::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterNotifyAck.sGrpId)
}
inline ::std::string* _MESGrpInterNotifyAck::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterNotifyAck.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterNotifyAck::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterNotifyAck.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterNotifyAck::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterNotifyAck.sGrpId)
}

// string sMsgId = 3;
inline void _MESGrpInterNotifyAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterNotifyAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterNotifyAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void _MESGrpInterNotifyAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterNotifyAck.sMsgId)
}
#if LANG_CXX11
inline void _MESGrpInterNotifyAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterNotifyAck.sMsgId)
}
#endif
inline void _MESGrpInterNotifyAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterNotifyAck.sMsgId)
}
inline void _MESGrpInterNotifyAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterNotifyAck.sMsgId)
}
inline ::std::string* _MESGrpInterNotifyAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterNotifyAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterNotifyAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterNotifyAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterNotifyAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterNotifyAck.sMsgId)
}

// .im.ErrCode errcode = 4;
inline void _MESGrpInterNotifyAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode _MESGrpInterNotifyAck::errcode() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterNotifyAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void _MESGrpInterNotifyAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im._MESGrpInterNotifyAck.errcode)
}

// -------------------------------------------------------------------

// MESGrpNotify

// string sGrpId = 1;
inline void MESGrpNotify::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESGrpNotify::sgrpid() const {
  // @@protoc_insertion_point(field_get:im.MESGrpNotify.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void MESGrpNotify::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESGrpNotify.sGrpId)
}
#if LANG_CXX11
inline void MESGrpNotify::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESGrpNotify.sGrpId)
}
#endif
inline void MESGrpNotify::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESGrpNotify.sGrpId)
}
inline void MESGrpNotify::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESGrpNotify.sGrpId)
}
inline ::std::string* MESGrpNotify::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESGrpNotify.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESGrpNotify::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im.MESGrpNotify.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESGrpNotify::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im.MESGrpNotify.sGrpId)
}

// string sToId = 2;
inline void MESGrpNotify::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESGrpNotify::stoid() const {
  // @@protoc_insertion_point(field_get:im.MESGrpNotify.sToId)
  return stoid_.GetNoArena();
}
inline void MESGrpNotify::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESGrpNotify.sToId)
}
#if LANG_CXX11
inline void MESGrpNotify::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESGrpNotify.sToId)
}
#endif
inline void MESGrpNotify::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESGrpNotify.sToId)
}
inline void MESGrpNotify::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESGrpNotify.sToId)
}
inline ::std::string* MESGrpNotify::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESGrpNotify.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESGrpNotify::release_stoid() {
  // @@protoc_insertion_point(field_release:im.MESGrpNotify.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESGrpNotify::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.MESGrpNotify.sToId)
}

// string sMsgId = 3;
inline void MESGrpNotify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESGrpNotify::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESGrpNotify.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESGrpNotify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESGrpNotify.sMsgId)
}
#if LANG_CXX11
inline void MESGrpNotify::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESGrpNotify.sMsgId)
}
#endif
inline void MESGrpNotify::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESGrpNotify.sMsgId)
}
inline void MESGrpNotify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESGrpNotify.sMsgId)
}
inline ::std::string* MESGrpNotify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESGrpNotify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESGrpNotify::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESGrpNotify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESGrpNotify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESGrpNotify.sMsgId)
}

// uint64 msgTime = 4;
inline void MESGrpNotify::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MESGrpNotify::msgtime() const {
  // @@protoc_insertion_point(field_get:im.MESGrpNotify.msgTime)
  return msgtime_;
}
inline void MESGrpNotify::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.MESGrpNotify.msgTime)
}

// string sOprUserId = 5;
inline void MESGrpNotify::clear_sopruserid() {
  sopruserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESGrpNotify::sopruserid() const {
  // @@protoc_insertion_point(field_get:im.MESGrpNotify.sOprUserId)
  return sopruserid_.GetNoArena();
}
inline void MESGrpNotify::set_sopruserid(const ::std::string& value) {
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESGrpNotify.sOprUserId)
}
#if LANG_CXX11
inline void MESGrpNotify::set_sopruserid(::std::string&& value) {
  
  sopruserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESGrpNotify.sOprUserId)
}
#endif
inline void MESGrpNotify::set_sopruserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESGrpNotify.sOprUserId)
}
inline void MESGrpNotify::set_sopruserid(const char* value, size_t size) {
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESGrpNotify.sOprUserId)
}
inline ::std::string* MESGrpNotify::mutable_sopruserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESGrpNotify.sOprUserId)
  return sopruserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESGrpNotify::release_sopruserid() {
  // @@protoc_insertion_point(field_release:im.MESGrpNotify.sOprUserId)
  
  return sopruserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESGrpNotify::set_allocated_sopruserid(::std::string* sopruserid) {
  if (sopruserid != NULL) {
    
  } else {
    
  }
  sopruserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sopruserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESGrpNotify.sOprUserId)
}

// repeated string sMnpledUserId = 6;
inline int MESGrpNotify::smnpleduserid_size() const {
  return smnpleduserid_.size();
}
inline void MESGrpNotify::clear_smnpleduserid() {
  smnpleduserid_.Clear();
}
inline const ::std::string& MESGrpNotify::smnpleduserid(int index) const {
  // @@protoc_insertion_point(field_get:im.MESGrpNotify.sMnpledUserId)
  return smnpleduserid_.Get(index);
}
inline ::std::string* MESGrpNotify::mutable_smnpleduserid(int index) {
  // @@protoc_insertion_point(field_mutable:im.MESGrpNotify.sMnpledUserId)
  return smnpleduserid_.Mutable(index);
}
inline void MESGrpNotify::set_smnpleduserid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im.MESGrpNotify.sMnpledUserId)
  smnpleduserid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MESGrpNotify::set_smnpleduserid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:im.MESGrpNotify.sMnpledUserId)
  smnpleduserid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MESGrpNotify::set_smnpleduserid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  smnpleduserid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im.MESGrpNotify.sMnpledUserId)
}
inline void MESGrpNotify::set_smnpleduserid(int index, const char* value, size_t size) {
  smnpleduserid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im.MESGrpNotify.sMnpledUserId)
}
inline ::std::string* MESGrpNotify::add_smnpleduserid() {
  // @@protoc_insertion_point(field_add_mutable:im.MESGrpNotify.sMnpledUserId)
  return smnpleduserid_.Add();
}
inline void MESGrpNotify::add_smnpleduserid(const ::std::string& value) {
  smnpleduserid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im.MESGrpNotify.sMnpledUserId)
}
#if LANG_CXX11
inline void MESGrpNotify::add_smnpleduserid(::std::string&& value) {
  smnpleduserid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:im.MESGrpNotify.sMnpledUserId)
}
#endif
inline void MESGrpNotify::add_smnpleduserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  smnpleduserid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im.MESGrpNotify.sMnpledUserId)
}
inline void MESGrpNotify::add_smnpleduserid(const char* value, size_t size) {
  smnpleduserid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im.MESGrpNotify.sMnpledUserId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MESGrpNotify::smnpleduserid() const {
  // @@protoc_insertion_point(field_list:im.MESGrpNotify.sMnpledUserId)
  return smnpleduserid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MESGrpNotify::mutable_smnpleduserid() {
  // @@protoc_insertion_point(field_mutable_list:im.MESGrpNotify.sMnpledUserId)
  return &smnpleduserid_;
}

// string sContent = 7;
inline void MESGrpNotify::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESGrpNotify::scontent() const {
  // @@protoc_insertion_point(field_get:im.MESGrpNotify.sContent)
  return scontent_.GetNoArena();
}
inline void MESGrpNotify::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESGrpNotify.sContent)
}
#if LANG_CXX11
inline void MESGrpNotify::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESGrpNotify.sContent)
}
#endif
inline void MESGrpNotify::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESGrpNotify.sContent)
}
inline void MESGrpNotify::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESGrpNotify.sContent)
}
inline ::std::string* MESGrpNotify::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im.MESGrpNotify.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESGrpNotify::release_scontent() {
  // @@protoc_insertion_point(field_release:im.MESGrpNotify.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESGrpNotify::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im.MESGrpNotify.sContent)
}

// .im.NotifyType notifyType = 8;
inline void MESGrpNotify::clear_notifytype() {
  notifytype_ = 0;
}
inline ::im::NotifyType MESGrpNotify::notifytype() const {
  // @@protoc_insertion_point(field_get:im.MESGrpNotify.notifyType)
  return static_cast< ::im::NotifyType >(notifytype_);
}
inline void MESGrpNotify::set_notifytype(::im::NotifyType value) {
  
  notifytype_ = value;
  // @@protoc_insertion_point(field_set:im.MESGrpNotify.notifyType)
}

// .im.ErrCode errcode = 9;
inline void MESGrpNotify::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode MESGrpNotify::errcode() const {
  // @@protoc_insertion_point(field_get:im.MESGrpNotify.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void MESGrpNotify::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.MESGrpNotify.errcode)
}

// string extend = 10;
inline void MESGrpNotify::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESGrpNotify::extend() const {
  // @@protoc_insertion_point(field_get:im.MESGrpNotify.extend)
  return extend_.GetNoArena();
}
inline void MESGrpNotify::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESGrpNotify.extend)
}
#if LANG_CXX11
inline void MESGrpNotify::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESGrpNotify.extend)
}
#endif
inline void MESGrpNotify::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESGrpNotify.extend)
}
inline void MESGrpNotify::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESGrpNotify.extend)
}
inline ::std::string* MESGrpNotify::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.MESGrpNotify.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESGrpNotify::release_extend() {
  // @@protoc_insertion_point(field_release:im.MESGrpNotify.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESGrpNotify::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.MESGrpNotify.extend)
}

// -------------------------------------------------------------------

// MESGrpNotifyDeliverAck

// string sUserId = 1;
inline void MESGrpNotifyDeliverAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESGrpNotifyDeliverAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.MESGrpNotifyDeliverAck.sUserId)
  return suserid_.GetNoArena();
}
inline void MESGrpNotifyDeliverAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESGrpNotifyDeliverAck.sUserId)
}
#if LANG_CXX11
inline void MESGrpNotifyDeliverAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESGrpNotifyDeliverAck.sUserId)
}
#endif
inline void MESGrpNotifyDeliverAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESGrpNotifyDeliverAck.sUserId)
}
inline void MESGrpNotifyDeliverAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESGrpNotifyDeliverAck.sUserId)
}
inline ::std::string* MESGrpNotifyDeliverAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESGrpNotifyDeliverAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESGrpNotifyDeliverAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MESGrpNotifyDeliverAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESGrpNotifyDeliverAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESGrpNotifyDeliverAck.sUserId)
}

// string sGrpId = 2;
inline void MESGrpNotifyDeliverAck::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESGrpNotifyDeliverAck::sgrpid() const {
  // @@protoc_insertion_point(field_get:im.MESGrpNotifyDeliverAck.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void MESGrpNotifyDeliverAck::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESGrpNotifyDeliverAck.sGrpId)
}
#if LANG_CXX11
inline void MESGrpNotifyDeliverAck::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESGrpNotifyDeliverAck.sGrpId)
}
#endif
inline void MESGrpNotifyDeliverAck::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESGrpNotifyDeliverAck.sGrpId)
}
inline void MESGrpNotifyDeliverAck::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESGrpNotifyDeliverAck.sGrpId)
}
inline ::std::string* MESGrpNotifyDeliverAck::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESGrpNotifyDeliverAck.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESGrpNotifyDeliverAck::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im.MESGrpNotifyDeliverAck.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESGrpNotifyDeliverAck::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im.MESGrpNotifyDeliverAck.sGrpId)
}

// string sMsgId = 3;
inline void MESGrpNotifyDeliverAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESGrpNotifyDeliverAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESGrpNotifyDeliverAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESGrpNotifyDeliverAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESGrpNotifyDeliverAck.sMsgId)
}
#if LANG_CXX11
inline void MESGrpNotifyDeliverAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESGrpNotifyDeliverAck.sMsgId)
}
#endif
inline void MESGrpNotifyDeliverAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESGrpNotifyDeliverAck.sMsgId)
}
inline void MESGrpNotifyDeliverAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESGrpNotifyDeliverAck.sMsgId)
}
inline ::std::string* MESGrpNotifyDeliverAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESGrpNotifyDeliverAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESGrpNotifyDeliverAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESGrpNotifyDeliverAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESGrpNotifyDeliverAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESGrpNotifyDeliverAck.sMsgId)
}

// -------------------------------------------------------------------

// _MESGrpInterChat

// string sFromId = 1;
inline void _MESGrpInterChat::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterChat::sfromid() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChat.sFromId)
  return sfromid_.GetNoArena();
}
inline void _MESGrpInterChat::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterChat.sFromId)
}
#if LANG_CXX11
inline void _MESGrpInterChat::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterChat.sFromId)
}
#endif
inline void _MESGrpInterChat::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterChat.sFromId)
}
inline void _MESGrpInterChat::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterChat.sFromId)
}
inline ::std::string* _MESGrpInterChat::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterChat.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterChat::release_sfromid() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterChat.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterChat::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterChat.sFromId)
}

// string sGrpId = 2;
inline void _MESGrpInterChat::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterChat::sgrpid() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChat.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void _MESGrpInterChat::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterChat.sGrpId)
}
#if LANG_CXX11
inline void _MESGrpInterChat::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterChat.sGrpId)
}
#endif
inline void _MESGrpInterChat::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterChat.sGrpId)
}
inline void _MESGrpInterChat::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterChat.sGrpId)
}
inline ::std::string* _MESGrpInterChat::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterChat.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterChat::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterChat.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterChat::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterChat.sGrpId)
}

// repeated string sToId = 3;
inline int _MESGrpInterChat::stoid_size() const {
  return stoid_.size();
}
inline void _MESGrpInterChat::clear_stoid() {
  stoid_.Clear();
}
inline const ::std::string& _MESGrpInterChat::stoid(int index) const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChat.sToId)
  return stoid_.Get(index);
}
inline ::std::string* _MESGrpInterChat::mutable_stoid(int index) {
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterChat.sToId)
  return stoid_.Mutable(index);
}
inline void _MESGrpInterChat::set_stoid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im._MESGrpInterChat.sToId)
  stoid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void _MESGrpInterChat::set_stoid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:im._MESGrpInterChat.sToId)
  stoid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void _MESGrpInterChat::set_stoid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stoid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterChat.sToId)
}
inline void _MESGrpInterChat::set_stoid(int index, const char* value, size_t size) {
  stoid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterChat.sToId)
}
inline ::std::string* _MESGrpInterChat::add_stoid() {
  // @@protoc_insertion_point(field_add_mutable:im._MESGrpInterChat.sToId)
  return stoid_.Add();
}
inline void _MESGrpInterChat::add_stoid(const ::std::string& value) {
  stoid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im._MESGrpInterChat.sToId)
}
#if LANG_CXX11
inline void _MESGrpInterChat::add_stoid(::std::string&& value) {
  stoid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:im._MESGrpInterChat.sToId)
}
#endif
inline void _MESGrpInterChat::add_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stoid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im._MESGrpInterChat.sToId)
}
inline void _MESGrpInterChat::add_stoid(const char* value, size_t size) {
  stoid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im._MESGrpInterChat.sToId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
_MESGrpInterChat::stoid() const {
  // @@protoc_insertion_point(field_list:im._MESGrpInterChat.sToId)
  return stoid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
_MESGrpInterChat::mutable_stoid() {
  // @@protoc_insertion_point(field_mutable_list:im._MESGrpInterChat.sToId)
  return &stoid_;
}

// uint32 nNotifyCount = 4;
inline void _MESGrpInterChat::clear_nnotifycount() {
  nnotifycount_ = 0u;
}
inline ::google::protobuf::uint32 _MESGrpInterChat::nnotifycount() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChat.nNotifyCount)
  return nnotifycount_;
}
inline void _MESGrpInterChat::set_nnotifycount(::google::protobuf::uint32 value) {
  
  nnotifycount_ = value;
  // @@protoc_insertion_point(field_set:im._MESGrpInterChat.nNotifyCount)
}

// string sMsgId = 5;
inline void _MESGrpInterChat::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterChat::smsgid() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChat.sMsgId)
  return smsgid_.GetNoArena();
}
inline void _MESGrpInterChat::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterChat.sMsgId)
}
#if LANG_CXX11
inline void _MESGrpInterChat::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterChat.sMsgId)
}
#endif
inline void _MESGrpInterChat::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterChat.sMsgId)
}
inline void _MESGrpInterChat::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterChat.sMsgId)
}
inline ::std::string* _MESGrpInterChat::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterChat.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterChat::release_smsgid() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterChat.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterChat::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterChat.sMsgId)
}

// uint32 msgType = 6;
inline void _MESGrpInterChat::clear_msgtype() {
  msgtype_ = 0u;
}
inline ::google::protobuf::uint32 _MESGrpInterChat::msgtype() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChat.msgType)
  return msgtype_;
}
inline void _MESGrpInterChat::set_msgtype(::google::protobuf::uint32 value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:im._MESGrpInterChat.msgType)
}

// uint64 msgTime = 7;
inline void _MESGrpInterChat::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 _MESGrpInterChat::msgtime() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChat.msgTime)
  return msgtime_;
}
inline void _MESGrpInterChat::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im._MESGrpInterChat.msgTime)
}

// uint32 encrypt = 8;
inline void _MESGrpInterChat::clear_encrypt() {
  encrypt_ = 0u;
}
inline ::google::protobuf::uint32 _MESGrpInterChat::encrypt() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChat.encrypt)
  return encrypt_;
}
inline void _MESGrpInterChat::set_encrypt(::google::protobuf::uint32 value) {
  
  encrypt_ = value;
  // @@protoc_insertion_point(field_set:im._MESGrpInterChat.encrypt)
}

// string sContent = 9;
inline void _MESGrpInterChat::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterChat::scontent() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChat.sContent)
  return scontent_.GetNoArena();
}
inline void _MESGrpInterChat::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterChat.sContent)
}
#if LANG_CXX11
inline void _MESGrpInterChat::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterChat.sContent)
}
#endif
inline void _MESGrpInterChat::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterChat.sContent)
}
inline void _MESGrpInterChat::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterChat.sContent)
}
inline ::std::string* _MESGrpInterChat::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterChat.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterChat::release_scontent() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterChat.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterChat::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterChat.sContent)
}

// repeated string sNotifyUsers = 10;
inline int _MESGrpInterChat::snotifyusers_size() const {
  return snotifyusers_.size();
}
inline void _MESGrpInterChat::clear_snotifyusers() {
  snotifyusers_.Clear();
}
inline const ::std::string& _MESGrpInterChat::snotifyusers(int index) const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChat.sNotifyUsers)
  return snotifyusers_.Get(index);
}
inline ::std::string* _MESGrpInterChat::mutable_snotifyusers(int index) {
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterChat.sNotifyUsers)
  return snotifyusers_.Mutable(index);
}
inline void _MESGrpInterChat::set_snotifyusers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im._MESGrpInterChat.sNotifyUsers)
  snotifyusers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void _MESGrpInterChat::set_snotifyusers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:im._MESGrpInterChat.sNotifyUsers)
  snotifyusers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void _MESGrpInterChat::set_snotifyusers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  snotifyusers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterChat.sNotifyUsers)
}
inline void _MESGrpInterChat::set_snotifyusers(int index, const char* value, size_t size) {
  snotifyusers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterChat.sNotifyUsers)
}
inline ::std::string* _MESGrpInterChat::add_snotifyusers() {
  // @@protoc_insertion_point(field_add_mutable:im._MESGrpInterChat.sNotifyUsers)
  return snotifyusers_.Add();
}
inline void _MESGrpInterChat::add_snotifyusers(const ::std::string& value) {
  snotifyusers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im._MESGrpInterChat.sNotifyUsers)
}
#if LANG_CXX11
inline void _MESGrpInterChat::add_snotifyusers(::std::string&& value) {
  snotifyusers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:im._MESGrpInterChat.sNotifyUsers)
}
#endif
inline void _MESGrpInterChat::add_snotifyusers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  snotifyusers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im._MESGrpInterChat.sNotifyUsers)
}
inline void _MESGrpInterChat::add_snotifyusers(const char* value, size_t size) {
  snotifyusers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im._MESGrpInterChat.sNotifyUsers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
_MESGrpInterChat::snotifyusers() const {
  // @@protoc_insertion_point(field_list:im._MESGrpInterChat.sNotifyUsers)
  return snotifyusers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
_MESGrpInterChat::mutable_snotifyusers() {
  // @@protoc_insertion_point(field_mutable_list:im._MESGrpInterChat.sNotifyUsers)
  return &snotifyusers_;
}

// string extend = 11;
inline void _MESGrpInterChat::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterChat::extend() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChat.extend)
  return extend_.GetNoArena();
}
inline void _MESGrpInterChat::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterChat.extend)
}
#if LANG_CXX11
inline void _MESGrpInterChat::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterChat.extend)
}
#endif
inline void _MESGrpInterChat::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterChat.extend)
}
inline void _MESGrpInterChat::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterChat.extend)
}
inline ::std::string* _MESGrpInterChat::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterChat.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterChat::release_extend() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterChat.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterChat::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterChat.extend)
}

// -------------------------------------------------------------------

// _MESGrpInterChatAck

// string sUserId = 1;
inline void _MESGrpInterChatAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterChatAck::suserid() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChatAck.sUserId)
  return suserid_.GetNoArena();
}
inline void _MESGrpInterChatAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterChatAck.sUserId)
}
#if LANG_CXX11
inline void _MESGrpInterChatAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterChatAck.sUserId)
}
#endif
inline void _MESGrpInterChatAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterChatAck.sUserId)
}
inline void _MESGrpInterChatAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterChatAck.sUserId)
}
inline ::std::string* _MESGrpInterChatAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterChatAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterChatAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterChatAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterChatAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterChatAck.sUserId)
}

// string sGrpId = 2;
inline void _MESGrpInterChatAck::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterChatAck::sgrpid() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChatAck.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void _MESGrpInterChatAck::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterChatAck.sGrpId)
}
#if LANG_CXX11
inline void _MESGrpInterChatAck::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterChatAck.sGrpId)
}
#endif
inline void _MESGrpInterChatAck::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterChatAck.sGrpId)
}
inline void _MESGrpInterChatAck::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterChatAck.sGrpId)
}
inline ::std::string* _MESGrpInterChatAck::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterChatAck.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterChatAck::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterChatAck.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterChatAck::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterChatAck.sGrpId)
}

// string sMsgId = 3;
inline void _MESGrpInterChatAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterChatAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChatAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void _MESGrpInterChatAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterChatAck.sMsgId)
}
#if LANG_CXX11
inline void _MESGrpInterChatAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterChatAck.sMsgId)
}
#endif
inline void _MESGrpInterChatAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterChatAck.sMsgId)
}
inline void _MESGrpInterChatAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterChatAck.sMsgId)
}
inline ::std::string* _MESGrpInterChatAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterChatAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterChatAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterChatAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterChatAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterChatAck.sMsgId)
}

// .im.ErrCode errcode = 4;
inline void _MESGrpInterChatAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode _MESGrpInterChatAck::errcode() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChatAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void _MESGrpInterChatAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im._MESGrpInterChatAck.errcode)
}

// -------------------------------------------------------------------

// MESGrpChatDeliveredAck

// string sFromId = 1;
inline void MESGrpChatDeliveredAck::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESGrpChatDeliveredAck::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MESGrpChatDeliveredAck.sFromId)
  return sfromid_.GetNoArena();
}
inline void MESGrpChatDeliveredAck::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESGrpChatDeliveredAck.sFromId)
}
#if LANG_CXX11
inline void MESGrpChatDeliveredAck::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESGrpChatDeliveredAck.sFromId)
}
#endif
inline void MESGrpChatDeliveredAck::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESGrpChatDeliveredAck.sFromId)
}
inline void MESGrpChatDeliveredAck::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESGrpChatDeliveredAck.sFromId)
}
inline ::std::string* MESGrpChatDeliveredAck::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESGrpChatDeliveredAck.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESGrpChatDeliveredAck::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MESGrpChatDeliveredAck.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESGrpChatDeliveredAck::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MESGrpChatDeliveredAck.sFromId)
}

// string sGrpId = 2;
inline void MESGrpChatDeliveredAck::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESGrpChatDeliveredAck::sgrpid() const {
  // @@protoc_insertion_point(field_get:im.MESGrpChatDeliveredAck.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void MESGrpChatDeliveredAck::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESGrpChatDeliveredAck.sGrpId)
}
#if LANG_CXX11
inline void MESGrpChatDeliveredAck::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESGrpChatDeliveredAck.sGrpId)
}
#endif
inline void MESGrpChatDeliveredAck::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESGrpChatDeliveredAck.sGrpId)
}
inline void MESGrpChatDeliveredAck::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESGrpChatDeliveredAck.sGrpId)
}
inline ::std::string* MESGrpChatDeliveredAck::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESGrpChatDeliveredAck.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESGrpChatDeliveredAck::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im.MESGrpChatDeliveredAck.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESGrpChatDeliveredAck::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im.MESGrpChatDeliveredAck.sGrpId)
}

// string sMsgId = 3;
inline void MESGrpChatDeliveredAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESGrpChatDeliveredAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESGrpChatDeliveredAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESGrpChatDeliveredAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESGrpChatDeliveredAck.sMsgId)
}
#if LANG_CXX11
inline void MESGrpChatDeliveredAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESGrpChatDeliveredAck.sMsgId)
}
#endif
inline void MESGrpChatDeliveredAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESGrpChatDeliveredAck.sMsgId)
}
inline void MESGrpChatDeliveredAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESGrpChatDeliveredAck.sMsgId)
}
inline ::std::string* MESGrpChatDeliveredAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESGrpChatDeliveredAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESGrpChatDeliveredAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESGrpChatDeliveredAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESGrpChatDeliveredAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESGrpChatDeliveredAck.sMsgId)
}

// .im.ErrCode errcode = 4;
inline void MESGrpChatDeliveredAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode MESGrpChatDeliveredAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.MESGrpChatDeliveredAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void MESGrpChatDeliveredAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.MESGrpChatDeliveredAck.errcode)
}

// -------------------------------------------------------------------

// MESGrpChat

// string sFromId = 1;
inline void MESGrpChat::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESGrpChat::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MESGrpChat.sFromId)
  return sfromid_.GetNoArena();
}
inline void MESGrpChat::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESGrpChat.sFromId)
}
#if LANG_CXX11
inline void MESGrpChat::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESGrpChat.sFromId)
}
#endif
inline void MESGrpChat::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESGrpChat.sFromId)
}
inline void MESGrpChat::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESGrpChat.sFromId)
}
inline ::std::string* MESGrpChat::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESGrpChat.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESGrpChat::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MESGrpChat.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESGrpChat::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MESGrpChat.sFromId)
}

// string sGrpId = 2;
inline void MESGrpChat::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESGrpChat::sgrpid() const {
  // @@protoc_insertion_point(field_get:im.MESGrpChat.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void MESGrpChat::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESGrpChat.sGrpId)
}
#if LANG_CXX11
inline void MESGrpChat::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESGrpChat.sGrpId)
}
#endif
inline void MESGrpChat::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESGrpChat.sGrpId)
}
inline void MESGrpChat::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESGrpChat.sGrpId)
}
inline ::std::string* MESGrpChat::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESGrpChat.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESGrpChat::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im.MESGrpChat.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESGrpChat::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im.MESGrpChat.sGrpId)
}

// string sToId = 3;
inline void MESGrpChat::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESGrpChat::stoid() const {
  // @@protoc_insertion_point(field_get:im.MESGrpChat.sToId)
  return stoid_.GetNoArena();
}
inline void MESGrpChat::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESGrpChat.sToId)
}
#if LANG_CXX11
inline void MESGrpChat::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESGrpChat.sToId)
}
#endif
inline void MESGrpChat::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESGrpChat.sToId)
}
inline void MESGrpChat::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESGrpChat.sToId)
}
inline ::std::string* MESGrpChat::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESGrpChat.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESGrpChat::release_stoid() {
  // @@protoc_insertion_point(field_release:im.MESGrpChat.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESGrpChat::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.MESGrpChat.sToId)
}

// uint32 nNotifyCount = 4;
inline void MESGrpChat::clear_nnotifycount() {
  nnotifycount_ = 0u;
}
inline ::google::protobuf::uint32 MESGrpChat::nnotifycount() const {
  // @@protoc_insertion_point(field_get:im.MESGrpChat.nNotifyCount)
  return nnotifycount_;
}
inline void MESGrpChat::set_nnotifycount(::google::protobuf::uint32 value) {
  
  nnotifycount_ = value;
  // @@protoc_insertion_point(field_set:im.MESGrpChat.nNotifyCount)
}

// string sMsgId = 5;
inline void MESGrpChat::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESGrpChat::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESGrpChat.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESGrpChat::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESGrpChat.sMsgId)
}
#if LANG_CXX11
inline void MESGrpChat::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESGrpChat.sMsgId)
}
#endif
inline void MESGrpChat::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESGrpChat.sMsgId)
}
inline void MESGrpChat::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESGrpChat.sMsgId)
}
inline ::std::string* MESGrpChat::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESGrpChat.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESGrpChat::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESGrpChat.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESGrpChat::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESGrpChat.sMsgId)
}

// uint32 msgType = 6;
inline void MESGrpChat::clear_msgtype() {
  msgtype_ = 0u;
}
inline ::google::protobuf::uint32 MESGrpChat::msgtype() const {
  // @@protoc_insertion_point(field_get:im.MESGrpChat.msgType)
  return msgtype_;
}
inline void MESGrpChat::set_msgtype(::google::protobuf::uint32 value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:im.MESGrpChat.msgType)
}

// uint64 msgTime = 7;
inline void MESGrpChat::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MESGrpChat::msgtime() const {
  // @@protoc_insertion_point(field_get:im.MESGrpChat.msgTime)
  return msgtime_;
}
inline void MESGrpChat::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.MESGrpChat.msgTime)
}

// uint32 encrypt = 8;
inline void MESGrpChat::clear_encrypt() {
  encrypt_ = 0u;
}
inline ::google::protobuf::uint32 MESGrpChat::encrypt() const {
  // @@protoc_insertion_point(field_get:im.MESGrpChat.encrypt)
  return encrypt_;
}
inline void MESGrpChat::set_encrypt(::google::protobuf::uint32 value) {
  
  encrypt_ = value;
  // @@protoc_insertion_point(field_set:im.MESGrpChat.encrypt)
}

// string sContent = 9;
inline void MESGrpChat::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESGrpChat::scontent() const {
  // @@protoc_insertion_point(field_get:im.MESGrpChat.sContent)
  return scontent_.GetNoArena();
}
inline void MESGrpChat::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESGrpChat.sContent)
}
#if LANG_CXX11
inline void MESGrpChat::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESGrpChat.sContent)
}
#endif
inline void MESGrpChat::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESGrpChat.sContent)
}
inline void MESGrpChat::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESGrpChat.sContent)
}
inline ::std::string* MESGrpChat::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im.MESGrpChat.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESGrpChat::release_scontent() {
  // @@protoc_insertion_point(field_release:im.MESGrpChat.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESGrpChat::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im.MESGrpChat.sContent)
}

// repeated string sNotifyUsers = 10;
inline int MESGrpChat::snotifyusers_size() const {
  return snotifyusers_.size();
}
inline void MESGrpChat::clear_snotifyusers() {
  snotifyusers_.Clear();
}
inline const ::std::string& MESGrpChat::snotifyusers(int index) const {
  // @@protoc_insertion_point(field_get:im.MESGrpChat.sNotifyUsers)
  return snotifyusers_.Get(index);
}
inline ::std::string* MESGrpChat::mutable_snotifyusers(int index) {
  // @@protoc_insertion_point(field_mutable:im.MESGrpChat.sNotifyUsers)
  return snotifyusers_.Mutable(index);
}
inline void MESGrpChat::set_snotifyusers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im.MESGrpChat.sNotifyUsers)
  snotifyusers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MESGrpChat::set_snotifyusers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:im.MESGrpChat.sNotifyUsers)
  snotifyusers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MESGrpChat::set_snotifyusers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  snotifyusers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im.MESGrpChat.sNotifyUsers)
}
inline void MESGrpChat::set_snotifyusers(int index, const char* value, size_t size) {
  snotifyusers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im.MESGrpChat.sNotifyUsers)
}
inline ::std::string* MESGrpChat::add_snotifyusers() {
  // @@protoc_insertion_point(field_add_mutable:im.MESGrpChat.sNotifyUsers)
  return snotifyusers_.Add();
}
inline void MESGrpChat::add_snotifyusers(const ::std::string& value) {
  snotifyusers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im.MESGrpChat.sNotifyUsers)
}
#if LANG_CXX11
inline void MESGrpChat::add_snotifyusers(::std::string&& value) {
  snotifyusers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:im.MESGrpChat.sNotifyUsers)
}
#endif
inline void MESGrpChat::add_snotifyusers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  snotifyusers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im.MESGrpChat.sNotifyUsers)
}
inline void MESGrpChat::add_snotifyusers(const char* value, size_t size) {
  snotifyusers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im.MESGrpChat.sNotifyUsers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MESGrpChat::snotifyusers() const {
  // @@protoc_insertion_point(field_list:im.MESGrpChat.sNotifyUsers)
  return snotifyusers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MESGrpChat::mutable_snotifyusers() {
  // @@protoc_insertion_point(field_mutable_list:im.MESGrpChat.sNotifyUsers)
  return &snotifyusers_;
}

// string extend = 11;
inline void MESGrpChat::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESGrpChat::extend() const {
  // @@protoc_insertion_point(field_get:im.MESGrpChat.extend)
  return extend_.GetNoArena();
}
inline void MESGrpChat::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESGrpChat.extend)
}
#if LANG_CXX11
inline void MESGrpChat::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESGrpChat.extend)
}
#endif
inline void MESGrpChat::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESGrpChat.extend)
}
inline void MESGrpChat::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESGrpChat.extend)
}
inline ::std::string* MESGrpChat::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.MESGrpChat.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESGrpChat::release_extend() {
  // @@protoc_insertion_point(field_release:im.MESGrpChat.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESGrpChat::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.MESGrpChat.extend)
}

// -------------------------------------------------------------------

// _MESGrpInterChatCancel

// string sFromId = 1;
inline void _MESGrpInterChatCancel::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterChatCancel::sfromid() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChatCancel.sFromId)
  return sfromid_.GetNoArena();
}
inline void _MESGrpInterChatCancel::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterChatCancel.sFromId)
}
#if LANG_CXX11
inline void _MESGrpInterChatCancel::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterChatCancel.sFromId)
}
#endif
inline void _MESGrpInterChatCancel::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterChatCancel.sFromId)
}
inline void _MESGrpInterChatCancel::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterChatCancel.sFromId)
}
inline ::std::string* _MESGrpInterChatCancel::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterChatCancel.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterChatCancel::release_sfromid() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterChatCancel.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterChatCancel::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterChatCancel.sFromId)
}

// string sGrpId = 2;
inline void _MESGrpInterChatCancel::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterChatCancel::sgrpid() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChatCancel.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void _MESGrpInterChatCancel::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterChatCancel.sGrpId)
}
#if LANG_CXX11
inline void _MESGrpInterChatCancel::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterChatCancel.sGrpId)
}
#endif
inline void _MESGrpInterChatCancel::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterChatCancel.sGrpId)
}
inline void _MESGrpInterChatCancel::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterChatCancel.sGrpId)
}
inline ::std::string* _MESGrpInterChatCancel::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterChatCancel.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterChatCancel::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterChatCancel.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterChatCancel::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterChatCancel.sGrpId)
}

// repeated string sToId = 3;
inline int _MESGrpInterChatCancel::stoid_size() const {
  return stoid_.size();
}
inline void _MESGrpInterChatCancel::clear_stoid() {
  stoid_.Clear();
}
inline const ::std::string& _MESGrpInterChatCancel::stoid(int index) const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChatCancel.sToId)
  return stoid_.Get(index);
}
inline ::std::string* _MESGrpInterChatCancel::mutable_stoid(int index) {
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterChatCancel.sToId)
  return stoid_.Mutable(index);
}
inline void _MESGrpInterChatCancel::set_stoid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im._MESGrpInterChatCancel.sToId)
  stoid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void _MESGrpInterChatCancel::set_stoid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:im._MESGrpInterChatCancel.sToId)
  stoid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void _MESGrpInterChatCancel::set_stoid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stoid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterChatCancel.sToId)
}
inline void _MESGrpInterChatCancel::set_stoid(int index, const char* value, size_t size) {
  stoid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterChatCancel.sToId)
}
inline ::std::string* _MESGrpInterChatCancel::add_stoid() {
  // @@protoc_insertion_point(field_add_mutable:im._MESGrpInterChatCancel.sToId)
  return stoid_.Add();
}
inline void _MESGrpInterChatCancel::add_stoid(const ::std::string& value) {
  stoid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im._MESGrpInterChatCancel.sToId)
}
#if LANG_CXX11
inline void _MESGrpInterChatCancel::add_stoid(::std::string&& value) {
  stoid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:im._MESGrpInterChatCancel.sToId)
}
#endif
inline void _MESGrpInterChatCancel::add_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stoid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im._MESGrpInterChatCancel.sToId)
}
inline void _MESGrpInterChatCancel::add_stoid(const char* value, size_t size) {
  stoid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im._MESGrpInterChatCancel.sToId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
_MESGrpInterChatCancel::stoid() const {
  // @@protoc_insertion_point(field_list:im._MESGrpInterChatCancel.sToId)
  return stoid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
_MESGrpInterChatCancel::mutable_stoid() {
  // @@protoc_insertion_point(field_mutable_list:im._MESGrpInterChatCancel.sToId)
  return &stoid_;
}

// string sMsgId = 4;
inline void _MESGrpInterChatCancel::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterChatCancel::smsgid() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChatCancel.sMsgId)
  return smsgid_.GetNoArena();
}
inline void _MESGrpInterChatCancel::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterChatCancel.sMsgId)
}
#if LANG_CXX11
inline void _MESGrpInterChatCancel::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterChatCancel.sMsgId)
}
#endif
inline void _MESGrpInterChatCancel::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterChatCancel.sMsgId)
}
inline void _MESGrpInterChatCancel::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterChatCancel.sMsgId)
}
inline ::std::string* _MESGrpInterChatCancel::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterChatCancel.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterChatCancel::release_smsgid() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterChatCancel.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterChatCancel::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterChatCancel.sMsgId)
}

// uint64 msgTime = 5;
inline void _MESGrpInterChatCancel::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 _MESGrpInterChatCancel::msgtime() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChatCancel.msgTime)
  return msgtime_;
}
inline void _MESGrpInterChatCancel::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im._MESGrpInterChatCancel.msgTime)
}

// uint64 cancelTime = 6;
inline void _MESGrpInterChatCancel::clear_canceltime() {
  canceltime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 _MESGrpInterChatCancel::canceltime() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChatCancel.cancelTime)
  return canceltime_;
}
inline void _MESGrpInterChatCancel::set_canceltime(::google::protobuf::uint64 value) {
  
  canceltime_ = value;
  // @@protoc_insertion_point(field_set:im._MESGrpInterChatCancel.cancelTime)
}

// -------------------------------------------------------------------

// _MESGrpInterChatCancelAck

// string sUserId = 1;
inline void _MESGrpInterChatCancelAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterChatCancelAck::suserid() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChatCancelAck.sUserId)
  return suserid_.GetNoArena();
}
inline void _MESGrpInterChatCancelAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterChatCancelAck.sUserId)
}
#if LANG_CXX11
inline void _MESGrpInterChatCancelAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterChatCancelAck.sUserId)
}
#endif
inline void _MESGrpInterChatCancelAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterChatCancelAck.sUserId)
}
inline void _MESGrpInterChatCancelAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterChatCancelAck.sUserId)
}
inline ::std::string* _MESGrpInterChatCancelAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterChatCancelAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterChatCancelAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterChatCancelAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterChatCancelAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterChatCancelAck.sUserId)
}

// string sGrpId = 2;
inline void _MESGrpInterChatCancelAck::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterChatCancelAck::sgrpid() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChatCancelAck.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void _MESGrpInterChatCancelAck::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterChatCancelAck.sGrpId)
}
#if LANG_CXX11
inline void _MESGrpInterChatCancelAck::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterChatCancelAck.sGrpId)
}
#endif
inline void _MESGrpInterChatCancelAck::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterChatCancelAck.sGrpId)
}
inline void _MESGrpInterChatCancelAck::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterChatCancelAck.sGrpId)
}
inline ::std::string* _MESGrpInterChatCancelAck::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterChatCancelAck.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterChatCancelAck::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterChatCancelAck.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterChatCancelAck::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterChatCancelAck.sGrpId)
}

// string sMsgId = 3;
inline void _MESGrpInterChatCancelAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& _MESGrpInterChatCancelAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChatCancelAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void _MESGrpInterChatCancelAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im._MESGrpInterChatCancelAck.sMsgId)
}
#if LANG_CXX11
inline void _MESGrpInterChatCancelAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im._MESGrpInterChatCancelAck.sMsgId)
}
#endif
inline void _MESGrpInterChatCancelAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im._MESGrpInterChatCancelAck.sMsgId)
}
inline void _MESGrpInterChatCancelAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im._MESGrpInterChatCancelAck.sMsgId)
}
inline ::std::string* _MESGrpInterChatCancelAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im._MESGrpInterChatCancelAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* _MESGrpInterChatCancelAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im._MESGrpInterChatCancelAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void _MESGrpInterChatCancelAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im._MESGrpInterChatCancelAck.sMsgId)
}

// .im.ErrCode errcode = 4;
inline void _MESGrpInterChatCancelAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode _MESGrpInterChatCancelAck::errcode() const {
  // @@protoc_insertion_point(field_get:im._MESGrpInterChatCancelAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void _MESGrpInterChatCancelAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im._MESGrpInterChatCancelAck.errcode)
}

// -------------------------------------------------------------------

// MESChatCancel

// string sFromId = 1;
inline void MESChatCancel::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChatCancel::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MESChatCancel.sFromId)
  return sfromid_.GetNoArena();
}
inline void MESChatCancel::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChatCancel.sFromId)
}
#if LANG_CXX11
inline void MESChatCancel::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChatCancel.sFromId)
}
#endif
inline void MESChatCancel::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChatCancel.sFromId)
}
inline void MESChatCancel::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChatCancel.sFromId)
}
inline ::std::string* MESChatCancel::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChatCancel.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChatCancel::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MESChatCancel.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChatCancel::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChatCancel.sFromId)
}

// string sToId = 2;
inline void MESChatCancel::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChatCancel::stoid() const {
  // @@protoc_insertion_point(field_get:im.MESChatCancel.sToId)
  return stoid_.GetNoArena();
}
inline void MESChatCancel::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChatCancel.sToId)
}
#if LANG_CXX11
inline void MESChatCancel::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChatCancel.sToId)
}
#endif
inline void MESChatCancel::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChatCancel.sToId)
}
inline void MESChatCancel::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChatCancel.sToId)
}
inline ::std::string* MESChatCancel::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChatCancel.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChatCancel::release_stoid() {
  // @@protoc_insertion_point(field_release:im.MESChatCancel.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChatCancel::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChatCancel.sToId)
}

// uint32 nCancelType = 3;
inline void MESChatCancel::clear_ncanceltype() {
  ncanceltype_ = 0u;
}
inline ::google::protobuf::uint32 MESChatCancel::ncanceltype() const {
  // @@protoc_insertion_point(field_get:im.MESChatCancel.nCancelType)
  return ncanceltype_;
}
inline void MESChatCancel::set_ncanceltype(::google::protobuf::uint32 value) {
  
  ncanceltype_ = value;
  // @@protoc_insertion_point(field_set:im.MESChatCancel.nCancelType)
}

// string sGroupId = 4;
inline void MESChatCancel::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChatCancel::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.MESChatCancel.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void MESChatCancel::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChatCancel.sGroupId)
}
#if LANG_CXX11
inline void MESChatCancel::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChatCancel.sGroupId)
}
#endif
inline void MESChatCancel::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChatCancel.sGroupId)
}
inline void MESChatCancel::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChatCancel.sGroupId)
}
inline ::std::string* MESChatCancel::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChatCancel.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChatCancel::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.MESChatCancel.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChatCancel::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChatCancel.sGroupId)
}

// string sMsgId = 5;
inline void MESChatCancel::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChatCancel::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESChatCancel.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESChatCancel::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChatCancel.sMsgId)
}
#if LANG_CXX11
inline void MESChatCancel::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChatCancel.sMsgId)
}
#endif
inline void MESChatCancel::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChatCancel.sMsgId)
}
inline void MESChatCancel::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChatCancel.sMsgId)
}
inline ::std::string* MESChatCancel::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChatCancel.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChatCancel::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESChatCancel.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChatCancel::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChatCancel.sMsgId)
}

// uint64 msgTime = 6;
inline void MESChatCancel::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MESChatCancel::msgtime() const {
  // @@protoc_insertion_point(field_get:im.MESChatCancel.msgTime)
  return msgtime_;
}
inline void MESChatCancel::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.MESChatCancel.msgTime)
}

// uint64 cancelTime = 7;
inline void MESChatCancel::clear_canceltime() {
  canceltime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MESChatCancel::canceltime() const {
  // @@protoc_insertion_point(field_get:im.MESChatCancel.cancelTime)
  return canceltime_;
}
inline void MESChatCancel::set_canceltime(::google::protobuf::uint64 value) {
  
  canceltime_ = value;
  // @@protoc_insertion_point(field_set:im.MESChatCancel.cancelTime)
}

// uint32 sendState = 8;
inline void MESChatCancel::clear_sendstate() {
  sendstate_ = 0u;
}
inline ::google::protobuf::uint32 MESChatCancel::sendstate() const {
  // @@protoc_insertion_point(field_get:im.MESChatCancel.sendState)
  return sendstate_;
}
inline void MESChatCancel::set_sendstate(::google::protobuf::uint32 value) {
  
  sendstate_ = value;
  // @@protoc_insertion_point(field_set:im.MESChatCancel.sendState)
}

// -------------------------------------------------------------------

// MESChatCancelAck

// string sUserId = 1;
inline void MESChatCancelAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChatCancelAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.MESChatCancelAck.sUserId)
  return suserid_.GetNoArena();
}
inline void MESChatCancelAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChatCancelAck.sUserId)
}
#if LANG_CXX11
inline void MESChatCancelAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChatCancelAck.sUserId)
}
#endif
inline void MESChatCancelAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChatCancelAck.sUserId)
}
inline void MESChatCancelAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChatCancelAck.sUserId)
}
inline ::std::string* MESChatCancelAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChatCancelAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChatCancelAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MESChatCancelAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChatCancelAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChatCancelAck.sUserId)
}

// string sMsgId = 2;
inline void MESChatCancelAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MESChatCancelAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MESChatCancelAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MESChatCancelAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MESChatCancelAck.sMsgId)
}
#if LANG_CXX11
inline void MESChatCancelAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MESChatCancelAck.sMsgId)
}
#endif
inline void MESChatCancelAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MESChatCancelAck.sMsgId)
}
inline void MESChatCancelAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MESChatCancelAck.sMsgId)
}
inline ::std::string* MESChatCancelAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MESChatCancelAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MESChatCancelAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MESChatCancelAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MESChatCancelAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MESChatCancelAck.sMsgId)
}

// .im.ErrCode errcode = 3;
inline void MESChatCancelAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode MESChatCancelAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.MESChatCancelAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void MESChatCancelAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.MESChatCancelAck.errcode)
}

// -------------------------------------------------------------------

// MSGCommonNotify

// string sFromId = 1;
inline void MSGCommonNotify::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MSGCommonNotify::sfromid() const {
  // @@protoc_insertion_point(field_get:im.MSGCommonNotify.sFromId)
  return sfromid_.GetNoArena();
}
inline void MSGCommonNotify::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MSGCommonNotify.sFromId)
}
#if LANG_CXX11
inline void MSGCommonNotify::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MSGCommonNotify.sFromId)
}
#endif
inline void MSGCommonNotify::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MSGCommonNotify.sFromId)
}
inline void MSGCommonNotify::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MSGCommonNotify.sFromId)
}
inline ::std::string* MSGCommonNotify::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.MSGCommonNotify.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MSGCommonNotify::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.MSGCommonNotify.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MSGCommonNotify::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.MSGCommonNotify.sFromId)
}

// repeated string sToIds = 2;
inline int MSGCommonNotify::stoids_size() const {
  return stoids_.size();
}
inline void MSGCommonNotify::clear_stoids() {
  stoids_.Clear();
}
inline const ::std::string& MSGCommonNotify::stoids(int index) const {
  // @@protoc_insertion_point(field_get:im.MSGCommonNotify.sToIds)
  return stoids_.Get(index);
}
inline ::std::string* MSGCommonNotify::mutable_stoids(int index) {
  // @@protoc_insertion_point(field_mutable:im.MSGCommonNotify.sToIds)
  return stoids_.Mutable(index);
}
inline void MSGCommonNotify::set_stoids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im.MSGCommonNotify.sToIds)
  stoids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MSGCommonNotify::set_stoids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:im.MSGCommonNotify.sToIds)
  stoids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MSGCommonNotify::set_stoids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stoids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im.MSGCommonNotify.sToIds)
}
inline void MSGCommonNotify::set_stoids(int index, const char* value, size_t size) {
  stoids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im.MSGCommonNotify.sToIds)
}
inline ::std::string* MSGCommonNotify::add_stoids() {
  // @@protoc_insertion_point(field_add_mutable:im.MSGCommonNotify.sToIds)
  return stoids_.Add();
}
inline void MSGCommonNotify::add_stoids(const ::std::string& value) {
  stoids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im.MSGCommonNotify.sToIds)
}
#if LANG_CXX11
inline void MSGCommonNotify::add_stoids(::std::string&& value) {
  stoids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:im.MSGCommonNotify.sToIds)
}
#endif
inline void MSGCommonNotify::add_stoids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stoids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im.MSGCommonNotify.sToIds)
}
inline void MSGCommonNotify::add_stoids(const char* value, size_t size) {
  stoids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im.MSGCommonNotify.sToIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MSGCommonNotify::stoids() const {
  // @@protoc_insertion_point(field_list:im.MSGCommonNotify.sToIds)
  return stoids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MSGCommonNotify::mutable_stoids() {
  // @@protoc_insertion_point(field_mutable_list:im.MSGCommonNotify.sToIds)
  return &stoids_;
}

// string sMsgId = 3;
inline void MSGCommonNotify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MSGCommonNotify::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MSGCommonNotify.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MSGCommonNotify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MSGCommonNotify.sMsgId)
}
#if LANG_CXX11
inline void MSGCommonNotify::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MSGCommonNotify.sMsgId)
}
#endif
inline void MSGCommonNotify::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MSGCommonNotify.sMsgId)
}
inline void MSGCommonNotify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MSGCommonNotify.sMsgId)
}
inline ::std::string* MSGCommonNotify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MSGCommonNotify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MSGCommonNotify::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MSGCommonNotify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MSGCommonNotify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MSGCommonNotify.sMsgId)
}

// .im.CommonNotifyType notifyType = 4;
inline void MSGCommonNotify::clear_notifytype() {
  notifytype_ = 0;
}
inline ::im::CommonNotifyType MSGCommonNotify::notifytype() const {
  // @@protoc_insertion_point(field_get:im.MSGCommonNotify.notifyType)
  return static_cast< ::im::CommonNotifyType >(notifytype_);
}
inline void MSGCommonNotify::set_notifytype(::im::CommonNotifyType value) {
  
  notifytype_ = value;
  // @@protoc_insertion_point(field_set:im.MSGCommonNotify.notifyType)
}

// string sContent = 5;
inline void MSGCommonNotify::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MSGCommonNotify::scontent() const {
  // @@protoc_insertion_point(field_get:im.MSGCommonNotify.sContent)
  return scontent_.GetNoArena();
}
inline void MSGCommonNotify::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MSGCommonNotify.sContent)
}
#if LANG_CXX11
inline void MSGCommonNotify::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MSGCommonNotify.sContent)
}
#endif
inline void MSGCommonNotify::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MSGCommonNotify.sContent)
}
inline void MSGCommonNotify::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MSGCommonNotify.sContent)
}
inline ::std::string* MSGCommonNotify::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im.MSGCommonNotify.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MSGCommonNotify::release_scontent() {
  // @@protoc_insertion_point(field_release:im.MSGCommonNotify.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MSGCommonNotify::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im.MSGCommonNotify.sContent)
}

// uint64 msgTime = 6;
inline void MSGCommonNotify::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MSGCommonNotify::msgtime() const {
  // @@protoc_insertion_point(field_get:im.MSGCommonNotify.msgTime)
  return msgtime_;
}
inline void MSGCommonNotify::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.MSGCommonNotify.msgTime)
}

// string sToId = 7;
inline void MSGCommonNotify::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MSGCommonNotify::stoid() const {
  // @@protoc_insertion_point(field_get:im.MSGCommonNotify.sToId)
  return stoid_.GetNoArena();
}
inline void MSGCommonNotify::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MSGCommonNotify.sToId)
}
#if LANG_CXX11
inline void MSGCommonNotify::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MSGCommonNotify.sToId)
}
#endif
inline void MSGCommonNotify::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MSGCommonNotify.sToId)
}
inline void MSGCommonNotify::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MSGCommonNotify.sToId)
}
inline ::std::string* MSGCommonNotify::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.MSGCommonNotify.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MSGCommonNotify::release_stoid() {
  // @@protoc_insertion_point(field_release:im.MSGCommonNotify.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MSGCommonNotify::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.MSGCommonNotify.sToId)
}

// -------------------------------------------------------------------

// MSGCommonNotifyACK

// string sUserId = 1;
inline void MSGCommonNotifyACK::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MSGCommonNotifyACK::suserid() const {
  // @@protoc_insertion_point(field_get:im.MSGCommonNotifyACK.sUserId)
  return suserid_.GetNoArena();
}
inline void MSGCommonNotifyACK::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MSGCommonNotifyACK.sUserId)
}
#if LANG_CXX11
inline void MSGCommonNotifyACK::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MSGCommonNotifyACK.sUserId)
}
#endif
inline void MSGCommonNotifyACK::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MSGCommonNotifyACK.sUserId)
}
inline void MSGCommonNotifyACK::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MSGCommonNotifyACK.sUserId)
}
inline ::std::string* MSGCommonNotifyACK::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.MSGCommonNotifyACK.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MSGCommonNotifyACK::release_suserid() {
  // @@protoc_insertion_point(field_release:im.MSGCommonNotifyACK.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MSGCommonNotifyACK::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.MSGCommonNotifyACK.sUserId)
}

// string sMsgId = 2;
inline void MSGCommonNotifyACK::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MSGCommonNotifyACK::smsgid() const {
  // @@protoc_insertion_point(field_get:im.MSGCommonNotifyACK.sMsgId)
  return smsgid_.GetNoArena();
}
inline void MSGCommonNotifyACK::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.MSGCommonNotifyACK.sMsgId)
}
#if LANG_CXX11
inline void MSGCommonNotifyACK::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.MSGCommonNotifyACK.sMsgId)
}
#endif
inline void MSGCommonNotifyACK::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.MSGCommonNotifyACK.sMsgId)
}
inline void MSGCommonNotifyACK::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.MSGCommonNotifyACK.sMsgId)
}
inline ::std::string* MSGCommonNotifyACK::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.MSGCommonNotifyACK.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MSGCommonNotifyACK::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.MSGCommonNotifyACK.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MSGCommonNotifyACK::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.MSGCommonNotifyACK.sMsgId)
}

// .im.ErrCode errcode = 3;
inline void MSGCommonNotifyACK::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode MSGCommonNotifyACK::errcode() const {
  // @@protoc_insertion_point(field_get:im.MSGCommonNotifyACK.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void MSGCommonNotifyACK::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.MSGCommonNotifyACK.errcode)
}

// -------------------------------------------------------------------

// SVRMSGGroupRelationNotify

// string sGrpId = 1;
inline void SVRMSGGroupRelationNotify::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGGroupRelationNotify::sgrpid() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGGroupRelationNotify.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void SVRMSGGroupRelationNotify::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.sGrpId)
}
#if LANG_CXX11
inline void SVRMSGGroupRelationNotify::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGGroupRelationNotify.sGrpId)
}
#endif
inline void SVRMSGGroupRelationNotify::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGGroupRelationNotify.sGrpId)
}
inline void SVRMSGGroupRelationNotify::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGGroupRelationNotify.sGrpId)
}
inline ::std::string* SVRMSGGroupRelationNotify::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGGroupRelationNotify.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGGroupRelationNotify::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im.SVRMSGGroupRelationNotify.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGGroupRelationNotify::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGGroupRelationNotify.sGrpId)
}

// string sMsgId = 2;
inline void SVRMSGGroupRelationNotify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGGroupRelationNotify::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGGroupRelationNotify.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SVRMSGGroupRelationNotify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.sMsgId)
}
#if LANG_CXX11
inline void SVRMSGGroupRelationNotify::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGGroupRelationNotify.sMsgId)
}
#endif
inline void SVRMSGGroupRelationNotify::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGGroupRelationNotify.sMsgId)
}
inline void SVRMSGGroupRelationNotify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGGroupRelationNotify.sMsgId)
}
inline ::std::string* SVRMSGGroupRelationNotify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGGroupRelationNotify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGGroupRelationNotify::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SVRMSGGroupRelationNotify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGGroupRelationNotify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGGroupRelationNotify.sMsgId)
}

// repeated string sToIds = 3;
inline int SVRMSGGroupRelationNotify::stoids_size() const {
  return stoids_.size();
}
inline void SVRMSGGroupRelationNotify::clear_stoids() {
  stoids_.Clear();
}
inline const ::std::string& SVRMSGGroupRelationNotify::stoids(int index) const {
  // @@protoc_insertion_point(field_get:im.SVRMSGGroupRelationNotify.sToIds)
  return stoids_.Get(index);
}
inline ::std::string* SVRMSGGroupRelationNotify::mutable_stoids(int index) {
  // @@protoc_insertion_point(field_mutable:im.SVRMSGGroupRelationNotify.sToIds)
  return stoids_.Mutable(index);
}
inline void SVRMSGGroupRelationNotify::set_stoids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.sToIds)
  stoids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SVRMSGGroupRelationNotify::set_stoids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.sToIds)
  stoids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SVRMSGGroupRelationNotify::set_stoids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stoids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im.SVRMSGGroupRelationNotify.sToIds)
}
inline void SVRMSGGroupRelationNotify::set_stoids(int index, const char* value, size_t size) {
  stoids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGGroupRelationNotify.sToIds)
}
inline ::std::string* SVRMSGGroupRelationNotify::add_stoids() {
  // @@protoc_insertion_point(field_add_mutable:im.SVRMSGGroupRelationNotify.sToIds)
  return stoids_.Add();
}
inline void SVRMSGGroupRelationNotify::add_stoids(const ::std::string& value) {
  stoids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im.SVRMSGGroupRelationNotify.sToIds)
}
#if LANG_CXX11
inline void SVRMSGGroupRelationNotify::add_stoids(::std::string&& value) {
  stoids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:im.SVRMSGGroupRelationNotify.sToIds)
}
#endif
inline void SVRMSGGroupRelationNotify::add_stoids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stoids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im.SVRMSGGroupRelationNotify.sToIds)
}
inline void SVRMSGGroupRelationNotify::add_stoids(const char* value, size_t size) {
  stoids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im.SVRMSGGroupRelationNotify.sToIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SVRMSGGroupRelationNotify::stoids() const {
  // @@protoc_insertion_point(field_list:im.SVRMSGGroupRelationNotify.sToIds)
  return stoids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SVRMSGGroupRelationNotify::mutable_stoids() {
  // @@protoc_insertion_point(field_mutable_list:im.SVRMSGGroupRelationNotify.sToIds)
  return &stoids_;
}

// uint64 msgTime = 4;
inline void SVRMSGGroupRelationNotify::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SVRMSGGroupRelationNotify::msgtime() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGGroupRelationNotify.msgTime)
  return msgtime_;
}
inline void SVRMSGGroupRelationNotify::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.msgTime)
}

// string sOprUserId = 5;
inline void SVRMSGGroupRelationNotify::clear_sopruserid() {
  sopruserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGGroupRelationNotify::sopruserid() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGGroupRelationNotify.sOprUserId)
  return sopruserid_.GetNoArena();
}
inline void SVRMSGGroupRelationNotify::set_sopruserid(const ::std::string& value) {
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.sOprUserId)
}
#if LANG_CXX11
inline void SVRMSGGroupRelationNotify::set_sopruserid(::std::string&& value) {
  
  sopruserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGGroupRelationNotify.sOprUserId)
}
#endif
inline void SVRMSGGroupRelationNotify::set_sopruserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGGroupRelationNotify.sOprUserId)
}
inline void SVRMSGGroupRelationNotify::set_sopruserid(const char* value, size_t size) {
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGGroupRelationNotify.sOprUserId)
}
inline ::std::string* SVRMSGGroupRelationNotify::mutable_sopruserid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGGroupRelationNotify.sOprUserId)
  return sopruserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGGroupRelationNotify::release_sopruserid() {
  // @@protoc_insertion_point(field_release:im.SVRMSGGroupRelationNotify.sOprUserId)
  
  return sopruserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGGroupRelationNotify::set_allocated_sopruserid(::std::string* sopruserid) {
  if (sopruserid != NULL) {
    
  } else {
    
  }
  sopruserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sopruserid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGGroupRelationNotify.sOprUserId)
}

// repeated string sMnpledUserId = 6;
inline int SVRMSGGroupRelationNotify::smnpleduserid_size() const {
  return smnpleduserid_.size();
}
inline void SVRMSGGroupRelationNotify::clear_smnpleduserid() {
  smnpleduserid_.Clear();
}
inline const ::std::string& SVRMSGGroupRelationNotify::smnpleduserid(int index) const {
  // @@protoc_insertion_point(field_get:im.SVRMSGGroupRelationNotify.sMnpledUserId)
  return smnpleduserid_.Get(index);
}
inline ::std::string* SVRMSGGroupRelationNotify::mutable_smnpleduserid(int index) {
  // @@protoc_insertion_point(field_mutable:im.SVRMSGGroupRelationNotify.sMnpledUserId)
  return smnpleduserid_.Mutable(index);
}
inline void SVRMSGGroupRelationNotify::set_smnpleduserid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.sMnpledUserId)
  smnpleduserid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SVRMSGGroupRelationNotify::set_smnpleduserid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.sMnpledUserId)
  smnpleduserid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SVRMSGGroupRelationNotify::set_smnpleduserid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  smnpleduserid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im.SVRMSGGroupRelationNotify.sMnpledUserId)
}
inline void SVRMSGGroupRelationNotify::set_smnpleduserid(int index, const char* value, size_t size) {
  smnpleduserid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGGroupRelationNotify.sMnpledUserId)
}
inline ::std::string* SVRMSGGroupRelationNotify::add_smnpleduserid() {
  // @@protoc_insertion_point(field_add_mutable:im.SVRMSGGroupRelationNotify.sMnpledUserId)
  return smnpleduserid_.Add();
}
inline void SVRMSGGroupRelationNotify::add_smnpleduserid(const ::std::string& value) {
  smnpleduserid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im.SVRMSGGroupRelationNotify.sMnpledUserId)
}
#if LANG_CXX11
inline void SVRMSGGroupRelationNotify::add_smnpleduserid(::std::string&& value) {
  smnpleduserid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:im.SVRMSGGroupRelationNotify.sMnpledUserId)
}
#endif
inline void SVRMSGGroupRelationNotify::add_smnpleduserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  smnpleduserid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im.SVRMSGGroupRelationNotify.sMnpledUserId)
}
inline void SVRMSGGroupRelationNotify::add_smnpleduserid(const char* value, size_t size) {
  smnpleduserid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im.SVRMSGGroupRelationNotify.sMnpledUserId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SVRMSGGroupRelationNotify::smnpleduserid() const {
  // @@protoc_insertion_point(field_list:im.SVRMSGGroupRelationNotify.sMnpledUserId)
  return smnpleduserid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SVRMSGGroupRelationNotify::mutable_smnpleduserid() {
  // @@protoc_insertion_point(field_mutable_list:im.SVRMSGGroupRelationNotify.sMnpledUserId)
  return &smnpleduserid_;
}

// string sContent = 7;
inline void SVRMSGGroupRelationNotify::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGGroupRelationNotify::scontent() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGGroupRelationNotify.sContent)
  return scontent_.GetNoArena();
}
inline void SVRMSGGroupRelationNotify::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.sContent)
}
#if LANG_CXX11
inline void SVRMSGGroupRelationNotify::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGGroupRelationNotify.sContent)
}
#endif
inline void SVRMSGGroupRelationNotify::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGGroupRelationNotify.sContent)
}
inline void SVRMSGGroupRelationNotify::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGGroupRelationNotify.sContent)
}
inline ::std::string* SVRMSGGroupRelationNotify::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGGroupRelationNotify.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGGroupRelationNotify::release_scontent() {
  // @@protoc_insertion_point(field_release:im.SVRMSGGroupRelationNotify.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGGroupRelationNotify::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGGroupRelationNotify.sContent)
}

// .im.SVRGroupRelationNotifyType notifyType = 8;
inline void SVRMSGGroupRelationNotify::clear_notifytype() {
  notifytype_ = 0;
}
inline ::im::SVRGroupRelationNotifyType SVRMSGGroupRelationNotify::notifytype() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGGroupRelationNotify.notifyType)
  return static_cast< ::im::SVRGroupRelationNotifyType >(notifytype_);
}
inline void SVRMSGGroupRelationNotify::set_notifytype(::im::SVRGroupRelationNotifyType value) {
  
  notifytype_ = value;
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.notifyType)
}

// string extend = 9;
inline void SVRMSGGroupRelationNotify::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGGroupRelationNotify::extend() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGGroupRelationNotify.extend)
  return extend_.GetNoArena();
}
inline void SVRMSGGroupRelationNotify::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.extend)
}
#if LANG_CXX11
inline void SVRMSGGroupRelationNotify::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGGroupRelationNotify.extend)
}
#endif
inline void SVRMSGGroupRelationNotify::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGGroupRelationNotify.extend)
}
inline void SVRMSGGroupRelationNotify::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGGroupRelationNotify.extend)
}
inline ::std::string* SVRMSGGroupRelationNotify::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGGroupRelationNotify.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGGroupRelationNotify::release_extend() {
  // @@protoc_insertion_point(field_release:im.SVRMSGGroupRelationNotify.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGGroupRelationNotify::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGGroupRelationNotify.extend)
}

// -------------------------------------------------------------------

// SVRMSGFriendRelationNotify

// string sFromId = 1;
inline void SVRMSGFriendRelationNotify::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGFriendRelationNotify::sfromid() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGFriendRelationNotify.sFromId)
  return sfromid_.GetNoArena();
}
inline void SVRMSGFriendRelationNotify::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGFriendRelationNotify.sFromId)
}
#if LANG_CXX11
inline void SVRMSGFriendRelationNotify::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGFriendRelationNotify.sFromId)
}
#endif
inline void SVRMSGFriendRelationNotify::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGFriendRelationNotify.sFromId)
}
inline void SVRMSGFriendRelationNotify::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGFriendRelationNotify.sFromId)
}
inline ::std::string* SVRMSGFriendRelationNotify::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGFriendRelationNotify.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGFriendRelationNotify::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.SVRMSGFriendRelationNotify.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGFriendRelationNotify::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGFriendRelationNotify.sFromId)
}

// string sToId = 2;
inline void SVRMSGFriendRelationNotify::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGFriendRelationNotify::stoid() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGFriendRelationNotify.sToId)
  return stoid_.GetNoArena();
}
inline void SVRMSGFriendRelationNotify::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGFriendRelationNotify.sToId)
}
#if LANG_CXX11
inline void SVRMSGFriendRelationNotify::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGFriendRelationNotify.sToId)
}
#endif
inline void SVRMSGFriendRelationNotify::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGFriendRelationNotify.sToId)
}
inline void SVRMSGFriendRelationNotify::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGFriendRelationNotify.sToId)
}
inline ::std::string* SVRMSGFriendRelationNotify::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGFriendRelationNotify.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGFriendRelationNotify::release_stoid() {
  // @@protoc_insertion_point(field_release:im.SVRMSGFriendRelationNotify.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGFriendRelationNotify::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGFriendRelationNotify.sToId)
}

// string sMsgId = 3;
inline void SVRMSGFriendRelationNotify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGFriendRelationNotify::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGFriendRelationNotify.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SVRMSGFriendRelationNotify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGFriendRelationNotify.sMsgId)
}
#if LANG_CXX11
inline void SVRMSGFriendRelationNotify::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGFriendRelationNotify.sMsgId)
}
#endif
inline void SVRMSGFriendRelationNotify::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGFriendRelationNotify.sMsgId)
}
inline void SVRMSGFriendRelationNotify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGFriendRelationNotify.sMsgId)
}
inline ::std::string* SVRMSGFriendRelationNotify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGFriendRelationNotify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGFriendRelationNotify::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SVRMSGFriendRelationNotify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGFriendRelationNotify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGFriendRelationNotify.sMsgId)
}

// string sMemoName = 4;
inline void SVRMSGFriendRelationNotify::clear_smemoname() {
  smemoname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGFriendRelationNotify::smemoname() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGFriendRelationNotify.sMemoName)
  return smemoname_.GetNoArena();
}
inline void SVRMSGFriendRelationNotify::set_smemoname(const ::std::string& value) {
  
  smemoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGFriendRelationNotify.sMemoName)
}
#if LANG_CXX11
inline void SVRMSGFriendRelationNotify::set_smemoname(::std::string&& value) {
  
  smemoname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGFriendRelationNotify.sMemoName)
}
#endif
inline void SVRMSGFriendRelationNotify::set_smemoname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smemoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGFriendRelationNotify.sMemoName)
}
inline void SVRMSGFriendRelationNotify::set_smemoname(const char* value, size_t size) {
  
  smemoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGFriendRelationNotify.sMemoName)
}
inline ::std::string* SVRMSGFriendRelationNotify::mutable_smemoname() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGFriendRelationNotify.sMemoName)
  return smemoname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGFriendRelationNotify::release_smemoname() {
  // @@protoc_insertion_point(field_release:im.SVRMSGFriendRelationNotify.sMemoName)
  
  return smemoname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGFriendRelationNotify::set_allocated_smemoname(::std::string* smemoname) {
  if (smemoname != NULL) {
    
  } else {
    
  }
  smemoname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smemoname);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGFriendRelationNotify.sMemoName)
}

// .im.SVRFriendRelationNotifyType notifyType = 5;
inline void SVRMSGFriendRelationNotify::clear_notifytype() {
  notifytype_ = 0;
}
inline ::im::SVRFriendRelationNotifyType SVRMSGFriendRelationNotify::notifytype() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGFriendRelationNotify.notifyType)
  return static_cast< ::im::SVRFriendRelationNotifyType >(notifytype_);
}
inline void SVRMSGFriendRelationNotify::set_notifytype(::im::SVRFriendRelationNotifyType value) {
  
  notifytype_ = value;
  // @@protoc_insertion_point(field_set:im.SVRMSGFriendRelationNotify.notifyType)
}

// string sSelfIntroduce = 6;
inline void SVRMSGFriendRelationNotify::clear_sselfintroduce() {
  sselfintroduce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGFriendRelationNotify::sselfintroduce() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGFriendRelationNotify.sSelfIntroduce)
  return sselfintroduce_.GetNoArena();
}
inline void SVRMSGFriendRelationNotify::set_sselfintroduce(const ::std::string& value) {
  
  sselfintroduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGFriendRelationNotify.sSelfIntroduce)
}
#if LANG_CXX11
inline void SVRMSGFriendRelationNotify::set_sselfintroduce(::std::string&& value) {
  
  sselfintroduce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGFriendRelationNotify.sSelfIntroduce)
}
#endif
inline void SVRMSGFriendRelationNotify::set_sselfintroduce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sselfintroduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGFriendRelationNotify.sSelfIntroduce)
}
inline void SVRMSGFriendRelationNotify::set_sselfintroduce(const char* value, size_t size) {
  
  sselfintroduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGFriendRelationNotify.sSelfIntroduce)
}
inline ::std::string* SVRMSGFriendRelationNotify::mutable_sselfintroduce() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGFriendRelationNotify.sSelfIntroduce)
  return sselfintroduce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGFriendRelationNotify::release_sselfintroduce() {
  // @@protoc_insertion_point(field_release:im.SVRMSGFriendRelationNotify.sSelfIntroduce)
  
  return sselfintroduce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGFriendRelationNotify::set_allocated_sselfintroduce(::std::string* sselfintroduce) {
  if (sselfintroduce != NULL) {
    
  } else {
    
  }
  sselfintroduce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sselfintroduce);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGFriendRelationNotify.sSelfIntroduce)
}

// uint64 msgTime = 7;
inline void SVRMSGFriendRelationNotify::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SVRMSGFriendRelationNotify::msgtime() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGFriendRelationNotify.msgTime)
  return msgtime_;
}
inline void SVRMSGFriendRelationNotify::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.SVRMSGFriendRelationNotify.msgTime)
}

// string extend = 8;
inline void SVRMSGFriendRelationNotify::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGFriendRelationNotify::extend() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGFriendRelationNotify.extend)
  return extend_.GetNoArena();
}
inline void SVRMSGFriendRelationNotify::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGFriendRelationNotify.extend)
}
#if LANG_CXX11
inline void SVRMSGFriendRelationNotify::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGFriendRelationNotify.extend)
}
#endif
inline void SVRMSGFriendRelationNotify::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGFriendRelationNotify.extend)
}
inline void SVRMSGFriendRelationNotify::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGFriendRelationNotify.extend)
}
inline ::std::string* SVRMSGFriendRelationNotify::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGFriendRelationNotify.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGFriendRelationNotify::release_extend() {
  // @@protoc_insertion_point(field_release:im.SVRMSGFriendRelationNotify.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGFriendRelationNotify::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGFriendRelationNotify.extend)
}

// -------------------------------------------------------------------

// SVRMSGCommonMsgNotify

// string sFromId = 1;
inline void SVRMSGCommonMsgNotify::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGCommonMsgNotify::sfromid() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGCommonMsgNotify.sFromId)
  return sfromid_.GetNoArena();
}
inline void SVRMSGCommonMsgNotify::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGCommonMsgNotify.sFromId)
}
#if LANG_CXX11
inline void SVRMSGCommonMsgNotify::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGCommonMsgNotify.sFromId)
}
#endif
inline void SVRMSGCommonMsgNotify::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGCommonMsgNotify.sFromId)
}
inline void SVRMSGCommonMsgNotify::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGCommonMsgNotify.sFromId)
}
inline ::std::string* SVRMSGCommonMsgNotify::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGCommonMsgNotify.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGCommonMsgNotify::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.SVRMSGCommonMsgNotify.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGCommonMsgNotify::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGCommonMsgNotify.sFromId)
}

// repeated string sToIds = 2;
inline int SVRMSGCommonMsgNotify::stoids_size() const {
  return stoids_.size();
}
inline void SVRMSGCommonMsgNotify::clear_stoids() {
  stoids_.Clear();
}
inline const ::std::string& SVRMSGCommonMsgNotify::stoids(int index) const {
  // @@protoc_insertion_point(field_get:im.SVRMSGCommonMsgNotify.sToIds)
  return stoids_.Get(index);
}
inline ::std::string* SVRMSGCommonMsgNotify::mutable_stoids(int index) {
  // @@protoc_insertion_point(field_mutable:im.SVRMSGCommonMsgNotify.sToIds)
  return stoids_.Mutable(index);
}
inline void SVRMSGCommonMsgNotify::set_stoids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im.SVRMSGCommonMsgNotify.sToIds)
  stoids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SVRMSGCommonMsgNotify::set_stoids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:im.SVRMSGCommonMsgNotify.sToIds)
  stoids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SVRMSGCommonMsgNotify::set_stoids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stoids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im.SVRMSGCommonMsgNotify.sToIds)
}
inline void SVRMSGCommonMsgNotify::set_stoids(int index, const char* value, size_t size) {
  stoids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGCommonMsgNotify.sToIds)
}
inline ::std::string* SVRMSGCommonMsgNotify::add_stoids() {
  // @@protoc_insertion_point(field_add_mutable:im.SVRMSGCommonMsgNotify.sToIds)
  return stoids_.Add();
}
inline void SVRMSGCommonMsgNotify::add_stoids(const ::std::string& value) {
  stoids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im.SVRMSGCommonMsgNotify.sToIds)
}
#if LANG_CXX11
inline void SVRMSGCommonMsgNotify::add_stoids(::std::string&& value) {
  stoids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:im.SVRMSGCommonMsgNotify.sToIds)
}
#endif
inline void SVRMSGCommonMsgNotify::add_stoids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stoids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im.SVRMSGCommonMsgNotify.sToIds)
}
inline void SVRMSGCommonMsgNotify::add_stoids(const char* value, size_t size) {
  stoids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im.SVRMSGCommonMsgNotify.sToIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SVRMSGCommonMsgNotify::stoids() const {
  // @@protoc_insertion_point(field_list:im.SVRMSGCommonMsgNotify.sToIds)
  return stoids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SVRMSGCommonMsgNotify::mutable_stoids() {
  // @@protoc_insertion_point(field_mutable_list:im.SVRMSGCommonMsgNotify.sToIds)
  return &stoids_;
}

// string sMsgId = 3;
inline void SVRMSGCommonMsgNotify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGCommonMsgNotify::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGCommonMsgNotify.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SVRMSGCommonMsgNotify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGCommonMsgNotify.sMsgId)
}
#if LANG_CXX11
inline void SVRMSGCommonMsgNotify::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGCommonMsgNotify.sMsgId)
}
#endif
inline void SVRMSGCommonMsgNotify::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGCommonMsgNotify.sMsgId)
}
inline void SVRMSGCommonMsgNotify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGCommonMsgNotify.sMsgId)
}
inline ::std::string* SVRMSGCommonMsgNotify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGCommonMsgNotify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGCommonMsgNotify::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SVRMSGCommonMsgNotify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGCommonMsgNotify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGCommonMsgNotify.sMsgId)
}

// .im.SVRCommonNotifyType notifyType = 4;
inline void SVRMSGCommonMsgNotify::clear_notifytype() {
  notifytype_ = 0;
}
inline ::im::SVRCommonNotifyType SVRMSGCommonMsgNotify::notifytype() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGCommonMsgNotify.notifyType)
  return static_cast< ::im::SVRCommonNotifyType >(notifytype_);
}
inline void SVRMSGCommonMsgNotify::set_notifytype(::im::SVRCommonNotifyType value) {
  
  notifytype_ = value;
  // @@protoc_insertion_point(field_set:im.SVRMSGCommonMsgNotify.notifyType)
}

// string sContent = 5;
inline void SVRMSGCommonMsgNotify::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGCommonMsgNotify::scontent() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGCommonMsgNotify.sContent)
  return scontent_.GetNoArena();
}
inline void SVRMSGCommonMsgNotify::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGCommonMsgNotify.sContent)
}
#if LANG_CXX11
inline void SVRMSGCommonMsgNotify::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGCommonMsgNotify.sContent)
}
#endif
inline void SVRMSGCommonMsgNotify::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGCommonMsgNotify.sContent)
}
inline void SVRMSGCommonMsgNotify::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGCommonMsgNotify.sContent)
}
inline ::std::string* SVRMSGCommonMsgNotify::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGCommonMsgNotify.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGCommonMsgNotify::release_scontent() {
  // @@protoc_insertion_point(field_release:im.SVRMSGCommonMsgNotify.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGCommonMsgNotify::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGCommonMsgNotify.sContent)
}

// uint64 msgTime = 6;
inline void SVRMSGCommonMsgNotify::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SVRMSGCommonMsgNotify::msgtime() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGCommonMsgNotify.msgTime)
  return msgtime_;
}
inline void SVRMSGCommonMsgNotify::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.SVRMSGCommonMsgNotify.msgTime)
}

// string extend = 7;
inline void SVRMSGCommonMsgNotify::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGCommonMsgNotify::extend() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGCommonMsgNotify.extend)
  return extend_.GetNoArena();
}
inline void SVRMSGCommonMsgNotify::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGCommonMsgNotify.extend)
}
#if LANG_CXX11
inline void SVRMSGCommonMsgNotify::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGCommonMsgNotify.extend)
}
#endif
inline void SVRMSGCommonMsgNotify::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGCommonMsgNotify.extend)
}
inline void SVRMSGCommonMsgNotify::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGCommonMsgNotify.extend)
}
inline ::std::string* SVRMSGCommonMsgNotify::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGCommonMsgNotify.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGCommonMsgNotify::release_extend() {
  // @@protoc_insertion_point(field_release:im.SVRMSGCommonMsgNotify.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGCommonMsgNotify::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGCommonMsgNotify.extend)
}

// -------------------------------------------------------------------

// SVRMSGNotifyACK

// string sMsgId = 1;
inline void SVRMSGNotifyACK::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGNotifyACK::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGNotifyACK.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SVRMSGNotifyACK::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGNotifyACK.sMsgId)
}
#if LANG_CXX11
inline void SVRMSGNotifyACK::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGNotifyACK.sMsgId)
}
#endif
inline void SVRMSGNotifyACK::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGNotifyACK.sMsgId)
}
inline void SVRMSGNotifyACK::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGNotifyACK.sMsgId)
}
inline ::std::string* SVRMSGNotifyACK::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGNotifyACK.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGNotifyACK::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SVRMSGNotifyACK.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGNotifyACK::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGNotifyACK.sMsgId)
}

// uint64 msgTime = 2;
inline void SVRMSGNotifyACK::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SVRMSGNotifyACK::msgtime() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGNotifyACK.msgTime)
  return msgtime_;
}
inline void SVRMSGNotifyACK::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.SVRMSGNotifyACK.msgTime)
}

// .im.ErrCode errcode = 3;
inline void SVRMSGNotifyACK::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode SVRMSGNotifyACK::errcode() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGNotifyACK.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void SVRMSGNotifyACK::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.SVRMSGNotifyACK.errcode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace im

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::im::SVRGroupRelationNotifyType> : ::std::true_type {};
template <> struct is_proto_enum< ::im::SVRFriendRelationNotifyType> : ::std::true_type {};
template <> struct is_proto_enum< ::im::SVRCommonNotifyType> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_im_2emes_2eproto
