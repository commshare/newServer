// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.sig.proto

#ifndef PROTOBUF_INCLUDED_im_2esig_2eproto
#define PROTOBUF_INCLUDED_im_2esig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "im.pub.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_im_2esig_2eproto 

namespace protobuf_im_2esig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[15];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_im_2esig_2eproto
namespace im {
class SIGHangUp;
class SIGHangUpDefaultTypeInternal;
extern SIGHangUpDefaultTypeInternal _SIGHangUp_default_instance_;
class SIGHangUpAck;
class SIGHangUpAckDefaultTypeInternal;
extern SIGHangUpAckDefaultTypeInternal _SIGHangUpAck_default_instance_;
class SIGHangUpDeliverAck;
class SIGHangUpDeliverAckDefaultTypeInternal;
extern SIGHangUpDeliverAckDefaultTypeInternal _SIGHangUpDeliverAck_default_instance_;
class SIGP2PCallExchangeNatInfo;
class SIGP2PCallExchangeNatInfoDefaultTypeInternal;
extern SIGP2PCallExchangeNatInfoDefaultTypeInternal _SIGP2PCallExchangeNatInfo_default_instance_;
class SIGP2PCallExchangeNatInfoAck;
class SIGP2PCallExchangeNatInfoAckDefaultTypeInternal;
extern SIGP2PCallExchangeNatInfoAckDefaultTypeInternal _SIGP2PCallExchangeNatInfoAck_default_instance_;
class SIGP2PCallExchangeNatInfoDeliverAck;
class SIGP2PCallExchangeNatInfoDeliverAckDefaultTypeInternal;
extern SIGP2PCallExchangeNatInfoDeliverAckDefaultTypeInternal _SIGP2PCallExchangeNatInfoDeliverAck_default_instance_;
class SIGP2PCallStateNotify;
class SIGP2PCallStateNotifyDefaultTypeInternal;
extern SIGP2PCallStateNotifyDefaultTypeInternal _SIGP2PCallStateNotify_default_instance_;
class SIGP2PCallStateNotifyACK;
class SIGP2PCallStateNotifyACKDefaultTypeInternal;
extern SIGP2PCallStateNotifyACKDefaultTypeInternal _SIGP2PCallStateNotifyACK_default_instance_;
class SIGP2PCallStateNotifyDeliverAck;
class SIGP2PCallStateNotifyDeliverAckDefaultTypeInternal;
extern SIGP2PCallStateNotifyDeliverAckDefaultTypeInternal _SIGP2PCallStateNotifyDeliverAck_default_instance_;
class SIGSponsorCall;
class SIGSponsorCallDefaultTypeInternal;
extern SIGSponsorCallDefaultTypeInternal _SIGSponsorCall_default_instance_;
class SIGSponsorCallAck;
class SIGSponsorCallAckDefaultTypeInternal;
extern SIGSponsorCallAckDefaultTypeInternal _SIGSponsorCallAck_default_instance_;
class SIGSponsorCallAns;
class SIGSponsorCallAnsDefaultTypeInternal;
extern SIGSponsorCallAnsDefaultTypeInternal _SIGSponsorCallAns_default_instance_;
class SIGSponsorCallAnsAck;
class SIGSponsorCallAnsAckDefaultTypeInternal;
extern SIGSponsorCallAnsAckDefaultTypeInternal _SIGSponsorCallAnsAck_default_instance_;
class SIGSponsorCallAnsDeliverACK;
class SIGSponsorCallAnsDeliverACKDefaultTypeInternal;
extern SIGSponsorCallAnsDeliverACKDefaultTypeInternal _SIGSponsorCallAnsDeliverACK_default_instance_;
class SIGSponsorCallDeliverAck;
class SIGSponsorCallDeliverAckDefaultTypeInternal;
extern SIGSponsorCallDeliverAckDefaultTypeInternal _SIGSponsorCallDeliverAck_default_instance_;
}  // namespace im
namespace google {
namespace protobuf {
template<> ::im::SIGHangUp* Arena::CreateMaybeMessage<::im::SIGHangUp>(Arena*);
template<> ::im::SIGHangUpAck* Arena::CreateMaybeMessage<::im::SIGHangUpAck>(Arena*);
template<> ::im::SIGHangUpDeliverAck* Arena::CreateMaybeMessage<::im::SIGHangUpDeliverAck>(Arena*);
template<> ::im::SIGP2PCallExchangeNatInfo* Arena::CreateMaybeMessage<::im::SIGP2PCallExchangeNatInfo>(Arena*);
template<> ::im::SIGP2PCallExchangeNatInfoAck* Arena::CreateMaybeMessage<::im::SIGP2PCallExchangeNatInfoAck>(Arena*);
template<> ::im::SIGP2PCallExchangeNatInfoDeliverAck* Arena::CreateMaybeMessage<::im::SIGP2PCallExchangeNatInfoDeliverAck>(Arena*);
template<> ::im::SIGP2PCallStateNotify* Arena::CreateMaybeMessage<::im::SIGP2PCallStateNotify>(Arena*);
template<> ::im::SIGP2PCallStateNotifyACK* Arena::CreateMaybeMessage<::im::SIGP2PCallStateNotifyACK>(Arena*);
template<> ::im::SIGP2PCallStateNotifyDeliverAck* Arena::CreateMaybeMessage<::im::SIGP2PCallStateNotifyDeliverAck>(Arena*);
template<> ::im::SIGSponsorCall* Arena::CreateMaybeMessage<::im::SIGSponsorCall>(Arena*);
template<> ::im::SIGSponsorCallAck* Arena::CreateMaybeMessage<::im::SIGSponsorCallAck>(Arena*);
template<> ::im::SIGSponsorCallAns* Arena::CreateMaybeMessage<::im::SIGSponsorCallAns>(Arena*);
template<> ::im::SIGSponsorCallAnsAck* Arena::CreateMaybeMessage<::im::SIGSponsorCallAnsAck>(Arena*);
template<> ::im::SIGSponsorCallAnsDeliverACK* Arena::CreateMaybeMessage<::im::SIGSponsorCallAnsDeliverACK>(Arena*);
template<> ::im::SIGSponsorCallDeliverAck* Arena::CreateMaybeMessage<::im::SIGSponsorCallDeliverAck>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace im {

// ===================================================================

class SIGSponsorCall : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SIGSponsorCall) */ {
 public:
  SIGSponsorCall();
  virtual ~SIGSponsorCall();

  SIGSponsorCall(const SIGSponsorCall& from);

  inline SIGSponsorCall& operator=(const SIGSponsorCall& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SIGSponsorCall(SIGSponsorCall&& from) noexcept
    : SIGSponsorCall() {
    *this = ::std::move(from);
  }

  inline SIGSponsorCall& operator=(SIGSponsorCall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SIGSponsorCall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SIGSponsorCall* internal_default_instance() {
    return reinterpret_cast<const SIGSponsorCall*>(
               &_SIGSponsorCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SIGSponsorCall* other);
  friend void swap(SIGSponsorCall& a, SIGSponsorCall& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SIGSponsorCall* New() const final {
    return CreateMaybeMessage<SIGSponsorCall>(NULL);
  }

  SIGSponsorCall* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SIGSponsorCall>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SIGSponsorCall& from);
  void MergeFrom(const SIGSponsorCall& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SIGSponsorCall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sInviteId = 2;
  void clear_sinviteid();
  static const int kSInviteIdFieldNumber = 2;
  const ::std::string& sinviteid() const;
  void set_sinviteid(const ::std::string& value);
  #if LANG_CXX11
  void set_sinviteid(::std::string&& value);
  #endif
  void set_sinviteid(const char* value);
  void set_sinviteid(const char* value, size_t size);
  ::std::string* mutable_sinviteid();
  ::std::string* release_sinviteid();
  void set_allocated_sinviteid(::std::string* sinviteid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sContent = 6;
  void clear_scontent();
  static const int kSContentFieldNumber = 6;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // string scallId = 8;
  void clear_scallid();
  static const int kScallIdFieldNumber = 8;
  const ::std::string& scallid() const;
  void set_scallid(const ::std::string& value);
  #if LANG_CXX11
  void set_scallid(::std::string&& value);
  #endif
  void set_scallid(const char* value);
  void set_scallid(const char* value, size_t size);
  ::std::string* mutable_scallid();
  ::std::string* release_scallid();
  void set_allocated_scallid(::std::string* scallid);

  // uint64 msgTime = 4;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 4;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // uint32 encrypt = 5;
  void clear_encrypt();
  static const int kEncryptFieldNumber = 5;
  ::google::protobuf::uint32 encrypt() const;
  void set_encrypt(::google::protobuf::uint32 value);

  // uint32 callType = 7;
  void clear_calltype();
  static const int kCallTypeFieldNumber = 7;
  ::google::protobuf::uint32 calltype() const;
  void set_calltype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.SIGSponsorCall)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr sinviteid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::internal::ArenaStringPtr scallid_;
  ::google::protobuf::uint64 msgtime_;
  ::google::protobuf::uint32 encrypt_;
  ::google::protobuf::uint32 calltype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2esig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SIGSponsorCallAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SIGSponsorCallAck) */ {
 public:
  SIGSponsorCallAck();
  virtual ~SIGSponsorCallAck();

  SIGSponsorCallAck(const SIGSponsorCallAck& from);

  inline SIGSponsorCallAck& operator=(const SIGSponsorCallAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SIGSponsorCallAck(SIGSponsorCallAck&& from) noexcept
    : SIGSponsorCallAck() {
    *this = ::std::move(from);
  }

  inline SIGSponsorCallAck& operator=(SIGSponsorCallAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SIGSponsorCallAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SIGSponsorCallAck* internal_default_instance() {
    return reinterpret_cast<const SIGSponsorCallAck*>(
               &_SIGSponsorCallAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SIGSponsorCallAck* other);
  friend void swap(SIGSponsorCallAck& a, SIGSponsorCallAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SIGSponsorCallAck* New() const final {
    return CreateMaybeMessage<SIGSponsorCallAck>(NULL);
  }

  SIGSponsorCallAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SIGSponsorCallAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SIGSponsorCallAck& from);
  void MergeFrom(const SIGSponsorCallAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SIGSponsorCallAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sToId = 1;
  void clear_stoid();
  static const int kSToIdFieldNumber = 1;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 3;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.SIGSponsorCallAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2esig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SIGSponsorCallDeliverAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SIGSponsorCallDeliverAck) */ {
 public:
  SIGSponsorCallDeliverAck();
  virtual ~SIGSponsorCallDeliverAck();

  SIGSponsorCallDeliverAck(const SIGSponsorCallDeliverAck& from);

  inline SIGSponsorCallDeliverAck& operator=(const SIGSponsorCallDeliverAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SIGSponsorCallDeliverAck(SIGSponsorCallDeliverAck&& from) noexcept
    : SIGSponsorCallDeliverAck() {
    *this = ::std::move(from);
  }

  inline SIGSponsorCallDeliverAck& operator=(SIGSponsorCallDeliverAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SIGSponsorCallDeliverAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SIGSponsorCallDeliverAck* internal_default_instance() {
    return reinterpret_cast<const SIGSponsorCallDeliverAck*>(
               &_SIGSponsorCallDeliverAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SIGSponsorCallDeliverAck* other);
  friend void swap(SIGSponsorCallDeliverAck& a, SIGSponsorCallDeliverAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SIGSponsorCallDeliverAck* New() const final {
    return CreateMaybeMessage<SIGSponsorCallDeliverAck>(NULL);
  }

  SIGSponsorCallDeliverAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SIGSponsorCallDeliverAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SIGSponsorCallDeliverAck& from);
  void MergeFrom(const SIGSponsorCallDeliverAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SIGSponsorCallDeliverAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // @@protoc_insertion_point(class_scope:im.SIGSponsorCallDeliverAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2esig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SIGSponsorCallAns : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SIGSponsorCallAns) */ {
 public:
  SIGSponsorCallAns();
  virtual ~SIGSponsorCallAns();

  SIGSponsorCallAns(const SIGSponsorCallAns& from);

  inline SIGSponsorCallAns& operator=(const SIGSponsorCallAns& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SIGSponsorCallAns(SIGSponsorCallAns&& from) noexcept
    : SIGSponsorCallAns() {
    *this = ::std::move(from);
  }

  inline SIGSponsorCallAns& operator=(SIGSponsorCallAns&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SIGSponsorCallAns& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SIGSponsorCallAns* internal_default_instance() {
    return reinterpret_cast<const SIGSponsorCallAns*>(
               &_SIGSponsorCallAns_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SIGSponsorCallAns* other);
  friend void swap(SIGSponsorCallAns& a, SIGSponsorCallAns& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SIGSponsorCallAns* New() const final {
    return CreateMaybeMessage<SIGSponsorCallAns>(NULL);
  }

  SIGSponsorCallAns* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SIGSponsorCallAns>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SIGSponsorCallAns& from);
  void MergeFrom(const SIGSponsorCallAns& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SIGSponsorCallAns* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sContent = 6;
  void clear_scontent();
  static const int kSContentFieldNumber = 6;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // string scallId = 8;
  void clear_scallid();
  static const int kScallIdFieldNumber = 8;
  const ::std::string& scallid() const;
  void set_scallid(const ::std::string& value);
  #if LANG_CXX11
  void set_scallid(::std::string&& value);
  #endif
  void set_scallid(const char* value);
  void set_scallid(const char* value, size_t size);
  ::std::string* mutable_scallid();
  ::std::string* release_scallid();
  void set_allocated_scallid(::std::string* scallid);

  // uint64 msgTime = 4;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 4;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // uint32 encrypt = 5;
  void clear_encrypt();
  static const int kEncryptFieldNumber = 5;
  ::google::protobuf::uint32 encrypt() const;
  void set_encrypt(::google::protobuf::uint32 value);

  // .im.ErrCode errcode = 7;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 7;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.SIGSponsorCallAns)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::internal::ArenaStringPtr scallid_;
  ::google::protobuf::uint64 msgtime_;
  ::google::protobuf::uint32 encrypt_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2esig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SIGSponsorCallAnsAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SIGSponsorCallAnsAck) */ {
 public:
  SIGSponsorCallAnsAck();
  virtual ~SIGSponsorCallAnsAck();

  SIGSponsorCallAnsAck(const SIGSponsorCallAnsAck& from);

  inline SIGSponsorCallAnsAck& operator=(const SIGSponsorCallAnsAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SIGSponsorCallAnsAck(SIGSponsorCallAnsAck&& from) noexcept
    : SIGSponsorCallAnsAck() {
    *this = ::std::move(from);
  }

  inline SIGSponsorCallAnsAck& operator=(SIGSponsorCallAnsAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SIGSponsorCallAnsAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SIGSponsorCallAnsAck* internal_default_instance() {
    return reinterpret_cast<const SIGSponsorCallAnsAck*>(
               &_SIGSponsorCallAnsAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SIGSponsorCallAnsAck* other);
  friend void swap(SIGSponsorCallAnsAck& a, SIGSponsorCallAnsAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SIGSponsorCallAnsAck* New() const final {
    return CreateMaybeMessage<SIGSponsorCallAnsAck>(NULL);
  }

  SIGSponsorCallAnsAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SIGSponsorCallAnsAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SIGSponsorCallAnsAck& from);
  void MergeFrom(const SIGSponsorCallAnsAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SIGSponsorCallAnsAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sToId = 1;
  void clear_stoid();
  static const int kSToIdFieldNumber = 1;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 3;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.SIGSponsorCallAnsAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2esig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SIGSponsorCallAnsDeliverACK : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SIGSponsorCallAnsDeliverACK) */ {
 public:
  SIGSponsorCallAnsDeliverACK();
  virtual ~SIGSponsorCallAnsDeliverACK();

  SIGSponsorCallAnsDeliverACK(const SIGSponsorCallAnsDeliverACK& from);

  inline SIGSponsorCallAnsDeliverACK& operator=(const SIGSponsorCallAnsDeliverACK& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SIGSponsorCallAnsDeliverACK(SIGSponsorCallAnsDeliverACK&& from) noexcept
    : SIGSponsorCallAnsDeliverACK() {
    *this = ::std::move(from);
  }

  inline SIGSponsorCallAnsDeliverACK& operator=(SIGSponsorCallAnsDeliverACK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SIGSponsorCallAnsDeliverACK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SIGSponsorCallAnsDeliverACK* internal_default_instance() {
    return reinterpret_cast<const SIGSponsorCallAnsDeliverACK*>(
               &_SIGSponsorCallAnsDeliverACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SIGSponsorCallAnsDeliverACK* other);
  friend void swap(SIGSponsorCallAnsDeliverACK& a, SIGSponsorCallAnsDeliverACK& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SIGSponsorCallAnsDeliverACK* New() const final {
    return CreateMaybeMessage<SIGSponsorCallAnsDeliverACK>(NULL);
  }

  SIGSponsorCallAnsDeliverACK* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SIGSponsorCallAnsDeliverACK>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SIGSponsorCallAnsDeliverACK& from);
  void MergeFrom(const SIGSponsorCallAnsDeliverACK& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SIGSponsorCallAnsDeliverACK* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // @@protoc_insertion_point(class_scope:im.SIGSponsorCallAnsDeliverACK)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2esig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SIGP2PCallExchangeNatInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SIGP2PCallExchangeNatInfo) */ {
 public:
  SIGP2PCallExchangeNatInfo();
  virtual ~SIGP2PCallExchangeNatInfo();

  SIGP2PCallExchangeNatInfo(const SIGP2PCallExchangeNatInfo& from);

  inline SIGP2PCallExchangeNatInfo& operator=(const SIGP2PCallExchangeNatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SIGP2PCallExchangeNatInfo(SIGP2PCallExchangeNatInfo&& from) noexcept
    : SIGP2PCallExchangeNatInfo() {
    *this = ::std::move(from);
  }

  inline SIGP2PCallExchangeNatInfo& operator=(SIGP2PCallExchangeNatInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SIGP2PCallExchangeNatInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SIGP2PCallExchangeNatInfo* internal_default_instance() {
    return reinterpret_cast<const SIGP2PCallExchangeNatInfo*>(
               &_SIGP2PCallExchangeNatInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SIGP2PCallExchangeNatInfo* other);
  friend void swap(SIGP2PCallExchangeNatInfo& a, SIGP2PCallExchangeNatInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SIGP2PCallExchangeNatInfo* New() const final {
    return CreateMaybeMessage<SIGP2PCallExchangeNatInfo>(NULL);
  }

  SIGP2PCallExchangeNatInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SIGP2PCallExchangeNatInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SIGP2PCallExchangeNatInfo& from);
  void MergeFrom(const SIGP2PCallExchangeNatInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SIGP2PCallExchangeNatInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sContent = 4;
  void clear_scontent();
  static const int kSContentFieldNumber = 4;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // string scallId = 6;
  void clear_scallid();
  static const int kScallIdFieldNumber = 6;
  const ::std::string& scallid() const;
  void set_scallid(const ::std::string& value);
  #if LANG_CXX11
  void set_scallid(::std::string&& value);
  #endif
  void set_scallid(const char* value);
  void set_scallid(const char* value, size_t size);
  ::std::string* mutable_scallid();
  ::std::string* release_scallid();
  void set_allocated_scallid(::std::string* scallid);

  // uint64 msgTime = 5;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 5;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:im.SIGP2PCallExchangeNatInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::internal::ArenaStringPtr scallid_;
  ::google::protobuf::uint64 msgtime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2esig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SIGP2PCallExchangeNatInfoAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SIGP2PCallExchangeNatInfoAck) */ {
 public:
  SIGP2PCallExchangeNatInfoAck();
  virtual ~SIGP2PCallExchangeNatInfoAck();

  SIGP2PCallExchangeNatInfoAck(const SIGP2PCallExchangeNatInfoAck& from);

  inline SIGP2PCallExchangeNatInfoAck& operator=(const SIGP2PCallExchangeNatInfoAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SIGP2PCallExchangeNatInfoAck(SIGP2PCallExchangeNatInfoAck&& from) noexcept
    : SIGP2PCallExchangeNatInfoAck() {
    *this = ::std::move(from);
  }

  inline SIGP2PCallExchangeNatInfoAck& operator=(SIGP2PCallExchangeNatInfoAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SIGP2PCallExchangeNatInfoAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SIGP2PCallExchangeNatInfoAck* internal_default_instance() {
    return reinterpret_cast<const SIGP2PCallExchangeNatInfoAck*>(
               &_SIGP2PCallExchangeNatInfoAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(SIGP2PCallExchangeNatInfoAck* other);
  friend void swap(SIGP2PCallExchangeNatInfoAck& a, SIGP2PCallExchangeNatInfoAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SIGP2PCallExchangeNatInfoAck* New() const final {
    return CreateMaybeMessage<SIGP2PCallExchangeNatInfoAck>(NULL);
  }

  SIGP2PCallExchangeNatInfoAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SIGP2PCallExchangeNatInfoAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SIGP2PCallExchangeNatInfoAck& from);
  void MergeFrom(const SIGP2PCallExchangeNatInfoAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SIGP2PCallExchangeNatInfoAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sToId = 1;
  void clear_stoid();
  static const int kSToIdFieldNumber = 1;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 3;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.SIGP2PCallExchangeNatInfoAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2esig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SIGP2PCallExchangeNatInfoDeliverAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SIGP2PCallExchangeNatInfoDeliverAck) */ {
 public:
  SIGP2PCallExchangeNatInfoDeliverAck();
  virtual ~SIGP2PCallExchangeNatInfoDeliverAck();

  SIGP2PCallExchangeNatInfoDeliverAck(const SIGP2PCallExchangeNatInfoDeliverAck& from);

  inline SIGP2PCallExchangeNatInfoDeliverAck& operator=(const SIGP2PCallExchangeNatInfoDeliverAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SIGP2PCallExchangeNatInfoDeliverAck(SIGP2PCallExchangeNatInfoDeliverAck&& from) noexcept
    : SIGP2PCallExchangeNatInfoDeliverAck() {
    *this = ::std::move(from);
  }

  inline SIGP2PCallExchangeNatInfoDeliverAck& operator=(SIGP2PCallExchangeNatInfoDeliverAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SIGP2PCallExchangeNatInfoDeliverAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SIGP2PCallExchangeNatInfoDeliverAck* internal_default_instance() {
    return reinterpret_cast<const SIGP2PCallExchangeNatInfoDeliverAck*>(
               &_SIGP2PCallExchangeNatInfoDeliverAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SIGP2PCallExchangeNatInfoDeliverAck* other);
  friend void swap(SIGP2PCallExchangeNatInfoDeliverAck& a, SIGP2PCallExchangeNatInfoDeliverAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SIGP2PCallExchangeNatInfoDeliverAck* New() const final {
    return CreateMaybeMessage<SIGP2PCallExchangeNatInfoDeliverAck>(NULL);
  }

  SIGP2PCallExchangeNatInfoDeliverAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SIGP2PCallExchangeNatInfoDeliverAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SIGP2PCallExchangeNatInfoDeliverAck& from);
  void MergeFrom(const SIGP2PCallExchangeNatInfoDeliverAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SIGP2PCallExchangeNatInfoDeliverAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // @@protoc_insertion_point(class_scope:im.SIGP2PCallExchangeNatInfoDeliverAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2esig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SIGHangUp : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SIGHangUp) */ {
 public:
  SIGHangUp();
  virtual ~SIGHangUp();

  SIGHangUp(const SIGHangUp& from);

  inline SIGHangUp& operator=(const SIGHangUp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SIGHangUp(SIGHangUp&& from) noexcept
    : SIGHangUp() {
    *this = ::std::move(from);
  }

  inline SIGHangUp& operator=(SIGHangUp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SIGHangUp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SIGHangUp* internal_default_instance() {
    return reinterpret_cast<const SIGHangUp*>(
               &_SIGHangUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SIGHangUp* other);
  friend void swap(SIGHangUp& a, SIGHangUp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SIGHangUp* New() const final {
    return CreateMaybeMessage<SIGHangUp>(NULL);
  }

  SIGHangUp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SIGHangUp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SIGHangUp& from);
  void MergeFrom(const SIGHangUp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SIGHangUp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string scallId = 5;
  void clear_scallid();
  static const int kScallIdFieldNumber = 5;
  const ::std::string& scallid() const;
  void set_scallid(const ::std::string& value);
  #if LANG_CXX11
  void set_scallid(::std::string&& value);
  #endif
  void set_scallid(const char* value);
  void set_scallid(const char* value, size_t size);
  ::std::string* mutable_scallid();
  ::std::string* release_scallid();
  void set_allocated_scallid(::std::string* scallid);

  // uint64 msgTime = 4;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 4;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:im.SIGHangUp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr scallid_;
  ::google::protobuf::uint64 msgtime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2esig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SIGHangUpAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SIGHangUpAck) */ {
 public:
  SIGHangUpAck();
  virtual ~SIGHangUpAck();

  SIGHangUpAck(const SIGHangUpAck& from);

  inline SIGHangUpAck& operator=(const SIGHangUpAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SIGHangUpAck(SIGHangUpAck&& from) noexcept
    : SIGHangUpAck() {
    *this = ::std::move(from);
  }

  inline SIGHangUpAck& operator=(SIGHangUpAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SIGHangUpAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SIGHangUpAck* internal_default_instance() {
    return reinterpret_cast<const SIGHangUpAck*>(
               &_SIGHangUpAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(SIGHangUpAck* other);
  friend void swap(SIGHangUpAck& a, SIGHangUpAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SIGHangUpAck* New() const final {
    return CreateMaybeMessage<SIGHangUpAck>(NULL);
  }

  SIGHangUpAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SIGHangUpAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SIGHangUpAck& from);
  void MergeFrom(const SIGHangUpAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SIGHangUpAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sToId = 1;
  void clear_stoid();
  static const int kSToIdFieldNumber = 1;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 5;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 5;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.SIGHangUpAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2esig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SIGHangUpDeliverAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SIGHangUpDeliverAck) */ {
 public:
  SIGHangUpDeliverAck();
  virtual ~SIGHangUpDeliverAck();

  SIGHangUpDeliverAck(const SIGHangUpDeliverAck& from);

  inline SIGHangUpDeliverAck& operator=(const SIGHangUpDeliverAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SIGHangUpDeliverAck(SIGHangUpDeliverAck&& from) noexcept
    : SIGHangUpDeliverAck() {
    *this = ::std::move(from);
  }

  inline SIGHangUpDeliverAck& operator=(SIGHangUpDeliverAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SIGHangUpDeliverAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SIGHangUpDeliverAck* internal_default_instance() {
    return reinterpret_cast<const SIGHangUpDeliverAck*>(
               &_SIGHangUpDeliverAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SIGHangUpDeliverAck* other);
  friend void swap(SIGHangUpDeliverAck& a, SIGHangUpDeliverAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SIGHangUpDeliverAck* New() const final {
    return CreateMaybeMessage<SIGHangUpDeliverAck>(NULL);
  }

  SIGHangUpDeliverAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SIGHangUpDeliverAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SIGHangUpDeliverAck& from);
  void MergeFrom(const SIGHangUpDeliverAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SIGHangUpDeliverAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // @@protoc_insertion_point(class_scope:im.SIGHangUpDeliverAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2esig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SIGP2PCallStateNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SIGP2PCallStateNotify) */ {
 public:
  SIGP2PCallStateNotify();
  virtual ~SIGP2PCallStateNotify();

  SIGP2PCallStateNotify(const SIGP2PCallStateNotify& from);

  inline SIGP2PCallStateNotify& operator=(const SIGP2PCallStateNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SIGP2PCallStateNotify(SIGP2PCallStateNotify&& from) noexcept
    : SIGP2PCallStateNotify() {
    *this = ::std::move(from);
  }

  inline SIGP2PCallStateNotify& operator=(SIGP2PCallStateNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SIGP2PCallStateNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SIGP2PCallStateNotify* internal_default_instance() {
    return reinterpret_cast<const SIGP2PCallStateNotify*>(
               &_SIGP2PCallStateNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(SIGP2PCallStateNotify* other);
  friend void swap(SIGP2PCallStateNotify& a, SIGP2PCallStateNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SIGP2PCallStateNotify* New() const final {
    return CreateMaybeMessage<SIGP2PCallStateNotify>(NULL);
  }

  SIGP2PCallStateNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SIGP2PCallStateNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SIGP2PCallStateNotify& from);
  void MergeFrom(const SIGP2PCallStateNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SIGP2PCallStateNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string scallId = 10;
  void clear_scallid();
  static const int kScallIdFieldNumber = 10;
  const ::std::string& scallid() const;
  void set_scallid(const ::std::string& value);
  #if LANG_CXX11
  void set_scallid(::std::string&& value);
  #endif
  void set_scallid(const char* value);
  void set_scallid(const char* value, size_t size);
  ::std::string* mutable_scallid();
  ::std::string* release_scallid();
  void set_allocated_scallid(::std::string* scallid);

  // uint64 msgTime = 4;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 4;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // uint32 notifyType = 8;
  void clear_notifytype();
  static const int kNotifyTypeFieldNumber = 8;
  ::google::protobuf::uint32 notifytype() const;
  void set_notifytype(::google::protobuf::uint32 value);

  // uint32 notifyValue = 9;
  void clear_notifyvalue();
  static const int kNotifyValueFieldNumber = 9;
  ::google::protobuf::uint32 notifyvalue() const;
  void set_notifyvalue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.SIGP2PCallStateNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr scallid_;
  ::google::protobuf::uint64 msgtime_;
  ::google::protobuf::uint32 notifytype_;
  ::google::protobuf::uint32 notifyvalue_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2esig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SIGP2PCallStateNotifyACK : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SIGP2PCallStateNotifyACK) */ {
 public:
  SIGP2PCallStateNotifyACK();
  virtual ~SIGP2PCallStateNotifyACK();

  SIGP2PCallStateNotifyACK(const SIGP2PCallStateNotifyACK& from);

  inline SIGP2PCallStateNotifyACK& operator=(const SIGP2PCallStateNotifyACK& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SIGP2PCallStateNotifyACK(SIGP2PCallStateNotifyACK&& from) noexcept
    : SIGP2PCallStateNotifyACK() {
    *this = ::std::move(from);
  }

  inline SIGP2PCallStateNotifyACK& operator=(SIGP2PCallStateNotifyACK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SIGP2PCallStateNotifyACK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SIGP2PCallStateNotifyACK* internal_default_instance() {
    return reinterpret_cast<const SIGP2PCallStateNotifyACK*>(
               &_SIGP2PCallStateNotifyACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(SIGP2PCallStateNotifyACK* other);
  friend void swap(SIGP2PCallStateNotifyACK& a, SIGP2PCallStateNotifyACK& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SIGP2PCallStateNotifyACK* New() const final {
    return CreateMaybeMessage<SIGP2PCallStateNotifyACK>(NULL);
  }

  SIGP2PCallStateNotifyACK* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SIGP2PCallStateNotifyACK>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SIGP2PCallStateNotifyACK& from);
  void MergeFrom(const SIGP2PCallStateNotifyACK& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SIGP2PCallStateNotifyACK* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sToId = 1;
  void clear_stoid();
  static const int kSToIdFieldNumber = 1;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 3;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.SIGP2PCallStateNotifyACK)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2esig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SIGP2PCallStateNotifyDeliverAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SIGP2PCallStateNotifyDeliverAck) */ {
 public:
  SIGP2PCallStateNotifyDeliverAck();
  virtual ~SIGP2PCallStateNotifyDeliverAck();

  SIGP2PCallStateNotifyDeliverAck(const SIGP2PCallStateNotifyDeliverAck& from);

  inline SIGP2PCallStateNotifyDeliverAck& operator=(const SIGP2PCallStateNotifyDeliverAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SIGP2PCallStateNotifyDeliverAck(SIGP2PCallStateNotifyDeliverAck&& from) noexcept
    : SIGP2PCallStateNotifyDeliverAck() {
    *this = ::std::move(from);
  }

  inline SIGP2PCallStateNotifyDeliverAck& operator=(SIGP2PCallStateNotifyDeliverAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SIGP2PCallStateNotifyDeliverAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SIGP2PCallStateNotifyDeliverAck* internal_default_instance() {
    return reinterpret_cast<const SIGP2PCallStateNotifyDeliverAck*>(
               &_SIGP2PCallStateNotifyDeliverAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(SIGP2PCallStateNotifyDeliverAck* other);
  friend void swap(SIGP2PCallStateNotifyDeliverAck& a, SIGP2PCallStateNotifyDeliverAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SIGP2PCallStateNotifyDeliverAck* New() const final {
    return CreateMaybeMessage<SIGP2PCallStateNotifyDeliverAck>(NULL);
  }

  SIGP2PCallStateNotifyDeliverAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SIGP2PCallStateNotifyDeliverAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SIGP2PCallStateNotifyDeliverAck& from);
  void MergeFrom(const SIGP2PCallStateNotifyDeliverAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SIGP2PCallStateNotifyDeliverAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // @@protoc_insertion_point(class_scope:im.SIGP2PCallStateNotifyDeliverAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2esig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SIGSponsorCall

// string sFromId = 1;
inline void SIGSponsorCall::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGSponsorCall::sfromid() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCall.sFromId)
  return sfromid_.GetNoArena();
}
inline void SIGSponsorCall::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGSponsorCall.sFromId)
}
#if LANG_CXX11
inline void SIGSponsorCall::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGSponsorCall.sFromId)
}
#endif
inline void SIGSponsorCall::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGSponsorCall.sFromId)
}
inline void SIGSponsorCall::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGSponsorCall.sFromId)
}
inline ::std::string* SIGSponsorCall::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGSponsorCall.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGSponsorCall::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.SIGSponsorCall.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGSponsorCall::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGSponsorCall.sFromId)
}

// string sInviteId = 2;
inline void SIGSponsorCall::clear_sinviteid() {
  sinviteid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGSponsorCall::sinviteid() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCall.sInviteId)
  return sinviteid_.GetNoArena();
}
inline void SIGSponsorCall::set_sinviteid(const ::std::string& value) {
  
  sinviteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGSponsorCall.sInviteId)
}
#if LANG_CXX11
inline void SIGSponsorCall::set_sinviteid(::std::string&& value) {
  
  sinviteid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGSponsorCall.sInviteId)
}
#endif
inline void SIGSponsorCall::set_sinviteid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sinviteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGSponsorCall.sInviteId)
}
inline void SIGSponsorCall::set_sinviteid(const char* value, size_t size) {
  
  sinviteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGSponsorCall.sInviteId)
}
inline ::std::string* SIGSponsorCall::mutable_sinviteid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGSponsorCall.sInviteId)
  return sinviteid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGSponsorCall::release_sinviteid() {
  // @@protoc_insertion_point(field_release:im.SIGSponsorCall.sInviteId)
  
  return sinviteid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGSponsorCall::set_allocated_sinviteid(::std::string* sinviteid) {
  if (sinviteid != NULL) {
    
  } else {
    
  }
  sinviteid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sinviteid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGSponsorCall.sInviteId)
}

// string sMsgId = 3;
inline void SIGSponsorCall::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGSponsorCall::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCall.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SIGSponsorCall::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGSponsorCall.sMsgId)
}
#if LANG_CXX11
inline void SIGSponsorCall::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGSponsorCall.sMsgId)
}
#endif
inline void SIGSponsorCall::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGSponsorCall.sMsgId)
}
inline void SIGSponsorCall::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGSponsorCall.sMsgId)
}
inline ::std::string* SIGSponsorCall::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGSponsorCall.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGSponsorCall::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SIGSponsorCall.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGSponsorCall::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGSponsorCall.sMsgId)
}

// uint64 msgTime = 4;
inline void SIGSponsorCall::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SIGSponsorCall::msgtime() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCall.msgTime)
  return msgtime_;
}
inline void SIGSponsorCall::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.SIGSponsorCall.msgTime)
}

// uint32 encrypt = 5;
inline void SIGSponsorCall::clear_encrypt() {
  encrypt_ = 0u;
}
inline ::google::protobuf::uint32 SIGSponsorCall::encrypt() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCall.encrypt)
  return encrypt_;
}
inline void SIGSponsorCall::set_encrypt(::google::protobuf::uint32 value) {
  
  encrypt_ = value;
  // @@protoc_insertion_point(field_set:im.SIGSponsorCall.encrypt)
}

// string sContent = 6;
inline void SIGSponsorCall::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGSponsorCall::scontent() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCall.sContent)
  return scontent_.GetNoArena();
}
inline void SIGSponsorCall::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGSponsorCall.sContent)
}
#if LANG_CXX11
inline void SIGSponsorCall::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGSponsorCall.sContent)
}
#endif
inline void SIGSponsorCall::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGSponsorCall.sContent)
}
inline void SIGSponsorCall::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGSponsorCall.sContent)
}
inline ::std::string* SIGSponsorCall::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGSponsorCall.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGSponsorCall::release_scontent() {
  // @@protoc_insertion_point(field_release:im.SIGSponsorCall.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGSponsorCall::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im.SIGSponsorCall.sContent)
}

// uint32 callType = 7;
inline void SIGSponsorCall::clear_calltype() {
  calltype_ = 0u;
}
inline ::google::protobuf::uint32 SIGSponsorCall::calltype() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCall.callType)
  return calltype_;
}
inline void SIGSponsorCall::set_calltype(::google::protobuf::uint32 value) {
  
  calltype_ = value;
  // @@protoc_insertion_point(field_set:im.SIGSponsorCall.callType)
}

// string scallId = 8;
inline void SIGSponsorCall::clear_scallid() {
  scallid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGSponsorCall::scallid() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCall.scallId)
  return scallid_.GetNoArena();
}
inline void SIGSponsorCall::set_scallid(const ::std::string& value) {
  
  scallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGSponsorCall.scallId)
}
#if LANG_CXX11
inline void SIGSponsorCall::set_scallid(::std::string&& value) {
  
  scallid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGSponsorCall.scallId)
}
#endif
inline void SIGSponsorCall::set_scallid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGSponsorCall.scallId)
}
inline void SIGSponsorCall::set_scallid(const char* value, size_t size) {
  
  scallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGSponsorCall.scallId)
}
inline ::std::string* SIGSponsorCall::mutable_scallid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGSponsorCall.scallId)
  return scallid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGSponsorCall::release_scallid() {
  // @@protoc_insertion_point(field_release:im.SIGSponsorCall.scallId)
  
  return scallid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGSponsorCall::set_allocated_scallid(::std::string* scallid) {
  if (scallid != NULL) {
    
  } else {
    
  }
  scallid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scallid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGSponsorCall.scallId)
}

// -------------------------------------------------------------------

// SIGSponsorCallAck

// string sToId = 1;
inline void SIGSponsorCallAck::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGSponsorCallAck::stoid() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCallAck.sToId)
  return stoid_.GetNoArena();
}
inline void SIGSponsorCallAck::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGSponsorCallAck.sToId)
}
#if LANG_CXX11
inline void SIGSponsorCallAck::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGSponsorCallAck.sToId)
}
#endif
inline void SIGSponsorCallAck::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGSponsorCallAck.sToId)
}
inline void SIGSponsorCallAck::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGSponsorCallAck.sToId)
}
inline ::std::string* SIGSponsorCallAck::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGSponsorCallAck.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGSponsorCallAck::release_stoid() {
  // @@protoc_insertion_point(field_release:im.SIGSponsorCallAck.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGSponsorCallAck::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGSponsorCallAck.sToId)
}

// string sMsgId = 2;
inline void SIGSponsorCallAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGSponsorCallAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCallAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SIGSponsorCallAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGSponsorCallAck.sMsgId)
}
#if LANG_CXX11
inline void SIGSponsorCallAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGSponsorCallAck.sMsgId)
}
#endif
inline void SIGSponsorCallAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGSponsorCallAck.sMsgId)
}
inline void SIGSponsorCallAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGSponsorCallAck.sMsgId)
}
inline ::std::string* SIGSponsorCallAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGSponsorCallAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGSponsorCallAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SIGSponsorCallAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGSponsorCallAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGSponsorCallAck.sMsgId)
}

// .im.ErrCode errcode = 3;
inline void SIGSponsorCallAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode SIGSponsorCallAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCallAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void SIGSponsorCallAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.SIGSponsorCallAck.errcode)
}

// -------------------------------------------------------------------

// SIGSponsorCallDeliverAck

// string sUserId = 1;
inline void SIGSponsorCallDeliverAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGSponsorCallDeliverAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCallDeliverAck.sUserId)
  return suserid_.GetNoArena();
}
inline void SIGSponsorCallDeliverAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGSponsorCallDeliverAck.sUserId)
}
#if LANG_CXX11
inline void SIGSponsorCallDeliverAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGSponsorCallDeliverAck.sUserId)
}
#endif
inline void SIGSponsorCallDeliverAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGSponsorCallDeliverAck.sUserId)
}
inline void SIGSponsorCallDeliverAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGSponsorCallDeliverAck.sUserId)
}
inline ::std::string* SIGSponsorCallDeliverAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGSponsorCallDeliverAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGSponsorCallDeliverAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.SIGSponsorCallDeliverAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGSponsorCallDeliverAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGSponsorCallDeliverAck.sUserId)
}

// string sMsgId = 2;
inline void SIGSponsorCallDeliverAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGSponsorCallDeliverAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCallDeliverAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SIGSponsorCallDeliverAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGSponsorCallDeliverAck.sMsgId)
}
#if LANG_CXX11
inline void SIGSponsorCallDeliverAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGSponsorCallDeliverAck.sMsgId)
}
#endif
inline void SIGSponsorCallDeliverAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGSponsorCallDeliverAck.sMsgId)
}
inline void SIGSponsorCallDeliverAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGSponsorCallDeliverAck.sMsgId)
}
inline ::std::string* SIGSponsorCallDeliverAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGSponsorCallDeliverAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGSponsorCallDeliverAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SIGSponsorCallDeliverAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGSponsorCallDeliverAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGSponsorCallDeliverAck.sMsgId)
}

// -------------------------------------------------------------------

// SIGSponsorCallAns

// string sFromId = 1;
inline void SIGSponsorCallAns::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGSponsorCallAns::sfromid() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCallAns.sFromId)
  return sfromid_.GetNoArena();
}
inline void SIGSponsorCallAns::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGSponsorCallAns.sFromId)
}
#if LANG_CXX11
inline void SIGSponsorCallAns::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGSponsorCallAns.sFromId)
}
#endif
inline void SIGSponsorCallAns::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGSponsorCallAns.sFromId)
}
inline void SIGSponsorCallAns::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGSponsorCallAns.sFromId)
}
inline ::std::string* SIGSponsorCallAns::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGSponsorCallAns.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGSponsorCallAns::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.SIGSponsorCallAns.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGSponsorCallAns::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGSponsorCallAns.sFromId)
}

// string sToId = 2;
inline void SIGSponsorCallAns::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGSponsorCallAns::stoid() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCallAns.sToId)
  return stoid_.GetNoArena();
}
inline void SIGSponsorCallAns::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGSponsorCallAns.sToId)
}
#if LANG_CXX11
inline void SIGSponsorCallAns::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGSponsorCallAns.sToId)
}
#endif
inline void SIGSponsorCallAns::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGSponsorCallAns.sToId)
}
inline void SIGSponsorCallAns::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGSponsorCallAns.sToId)
}
inline ::std::string* SIGSponsorCallAns::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGSponsorCallAns.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGSponsorCallAns::release_stoid() {
  // @@protoc_insertion_point(field_release:im.SIGSponsorCallAns.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGSponsorCallAns::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGSponsorCallAns.sToId)
}

// string sMsgId = 3;
inline void SIGSponsorCallAns::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGSponsorCallAns::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCallAns.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SIGSponsorCallAns::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGSponsorCallAns.sMsgId)
}
#if LANG_CXX11
inline void SIGSponsorCallAns::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGSponsorCallAns.sMsgId)
}
#endif
inline void SIGSponsorCallAns::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGSponsorCallAns.sMsgId)
}
inline void SIGSponsorCallAns::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGSponsorCallAns.sMsgId)
}
inline ::std::string* SIGSponsorCallAns::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGSponsorCallAns.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGSponsorCallAns::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SIGSponsorCallAns.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGSponsorCallAns::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGSponsorCallAns.sMsgId)
}

// uint64 msgTime = 4;
inline void SIGSponsorCallAns::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SIGSponsorCallAns::msgtime() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCallAns.msgTime)
  return msgtime_;
}
inline void SIGSponsorCallAns::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.SIGSponsorCallAns.msgTime)
}

// uint32 encrypt = 5;
inline void SIGSponsorCallAns::clear_encrypt() {
  encrypt_ = 0u;
}
inline ::google::protobuf::uint32 SIGSponsorCallAns::encrypt() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCallAns.encrypt)
  return encrypt_;
}
inline void SIGSponsorCallAns::set_encrypt(::google::protobuf::uint32 value) {
  
  encrypt_ = value;
  // @@protoc_insertion_point(field_set:im.SIGSponsorCallAns.encrypt)
}

// string sContent = 6;
inline void SIGSponsorCallAns::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGSponsorCallAns::scontent() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCallAns.sContent)
  return scontent_.GetNoArena();
}
inline void SIGSponsorCallAns::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGSponsorCallAns.sContent)
}
#if LANG_CXX11
inline void SIGSponsorCallAns::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGSponsorCallAns.sContent)
}
#endif
inline void SIGSponsorCallAns::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGSponsorCallAns.sContent)
}
inline void SIGSponsorCallAns::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGSponsorCallAns.sContent)
}
inline ::std::string* SIGSponsorCallAns::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGSponsorCallAns.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGSponsorCallAns::release_scontent() {
  // @@protoc_insertion_point(field_release:im.SIGSponsorCallAns.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGSponsorCallAns::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im.SIGSponsorCallAns.sContent)
}

// .im.ErrCode errcode = 7;
inline void SIGSponsorCallAns::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode SIGSponsorCallAns::errcode() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCallAns.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void SIGSponsorCallAns::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.SIGSponsorCallAns.errcode)
}

// string scallId = 8;
inline void SIGSponsorCallAns::clear_scallid() {
  scallid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGSponsorCallAns::scallid() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCallAns.scallId)
  return scallid_.GetNoArena();
}
inline void SIGSponsorCallAns::set_scallid(const ::std::string& value) {
  
  scallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGSponsorCallAns.scallId)
}
#if LANG_CXX11
inline void SIGSponsorCallAns::set_scallid(::std::string&& value) {
  
  scallid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGSponsorCallAns.scallId)
}
#endif
inline void SIGSponsorCallAns::set_scallid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGSponsorCallAns.scallId)
}
inline void SIGSponsorCallAns::set_scallid(const char* value, size_t size) {
  
  scallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGSponsorCallAns.scallId)
}
inline ::std::string* SIGSponsorCallAns::mutable_scallid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGSponsorCallAns.scallId)
  return scallid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGSponsorCallAns::release_scallid() {
  // @@protoc_insertion_point(field_release:im.SIGSponsorCallAns.scallId)
  
  return scallid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGSponsorCallAns::set_allocated_scallid(::std::string* scallid) {
  if (scallid != NULL) {
    
  } else {
    
  }
  scallid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scallid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGSponsorCallAns.scallId)
}

// -------------------------------------------------------------------

// SIGSponsorCallAnsAck

// string sToId = 1;
inline void SIGSponsorCallAnsAck::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGSponsorCallAnsAck::stoid() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCallAnsAck.sToId)
  return stoid_.GetNoArena();
}
inline void SIGSponsorCallAnsAck::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGSponsorCallAnsAck.sToId)
}
#if LANG_CXX11
inline void SIGSponsorCallAnsAck::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGSponsorCallAnsAck.sToId)
}
#endif
inline void SIGSponsorCallAnsAck::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGSponsorCallAnsAck.sToId)
}
inline void SIGSponsorCallAnsAck::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGSponsorCallAnsAck.sToId)
}
inline ::std::string* SIGSponsorCallAnsAck::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGSponsorCallAnsAck.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGSponsorCallAnsAck::release_stoid() {
  // @@protoc_insertion_point(field_release:im.SIGSponsorCallAnsAck.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGSponsorCallAnsAck::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGSponsorCallAnsAck.sToId)
}

// string sMsgId = 2;
inline void SIGSponsorCallAnsAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGSponsorCallAnsAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCallAnsAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SIGSponsorCallAnsAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGSponsorCallAnsAck.sMsgId)
}
#if LANG_CXX11
inline void SIGSponsorCallAnsAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGSponsorCallAnsAck.sMsgId)
}
#endif
inline void SIGSponsorCallAnsAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGSponsorCallAnsAck.sMsgId)
}
inline void SIGSponsorCallAnsAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGSponsorCallAnsAck.sMsgId)
}
inline ::std::string* SIGSponsorCallAnsAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGSponsorCallAnsAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGSponsorCallAnsAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SIGSponsorCallAnsAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGSponsorCallAnsAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGSponsorCallAnsAck.sMsgId)
}

// .im.ErrCode errcode = 3;
inline void SIGSponsorCallAnsAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode SIGSponsorCallAnsAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCallAnsAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void SIGSponsorCallAnsAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.SIGSponsorCallAnsAck.errcode)
}

// -------------------------------------------------------------------

// SIGSponsorCallAnsDeliverACK

// string sUserId = 1;
inline void SIGSponsorCallAnsDeliverACK::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGSponsorCallAnsDeliverACK::suserid() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCallAnsDeliverACK.sUserId)
  return suserid_.GetNoArena();
}
inline void SIGSponsorCallAnsDeliverACK::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGSponsorCallAnsDeliverACK.sUserId)
}
#if LANG_CXX11
inline void SIGSponsorCallAnsDeliverACK::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGSponsorCallAnsDeliverACK.sUserId)
}
#endif
inline void SIGSponsorCallAnsDeliverACK::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGSponsorCallAnsDeliverACK.sUserId)
}
inline void SIGSponsorCallAnsDeliverACK::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGSponsorCallAnsDeliverACK.sUserId)
}
inline ::std::string* SIGSponsorCallAnsDeliverACK::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGSponsorCallAnsDeliverACK.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGSponsorCallAnsDeliverACK::release_suserid() {
  // @@protoc_insertion_point(field_release:im.SIGSponsorCallAnsDeliverACK.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGSponsorCallAnsDeliverACK::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGSponsorCallAnsDeliverACK.sUserId)
}

// string sMsgId = 2;
inline void SIGSponsorCallAnsDeliverACK::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGSponsorCallAnsDeliverACK::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SIGSponsorCallAnsDeliverACK.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SIGSponsorCallAnsDeliverACK::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGSponsorCallAnsDeliverACK.sMsgId)
}
#if LANG_CXX11
inline void SIGSponsorCallAnsDeliverACK::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGSponsorCallAnsDeliverACK.sMsgId)
}
#endif
inline void SIGSponsorCallAnsDeliverACK::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGSponsorCallAnsDeliverACK.sMsgId)
}
inline void SIGSponsorCallAnsDeliverACK::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGSponsorCallAnsDeliverACK.sMsgId)
}
inline ::std::string* SIGSponsorCallAnsDeliverACK::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGSponsorCallAnsDeliverACK.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGSponsorCallAnsDeliverACK::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SIGSponsorCallAnsDeliverACK.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGSponsorCallAnsDeliverACK::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGSponsorCallAnsDeliverACK.sMsgId)
}

// -------------------------------------------------------------------

// SIGP2PCallExchangeNatInfo

// string sFromId = 1;
inline void SIGP2PCallExchangeNatInfo::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGP2PCallExchangeNatInfo::sfromid() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallExchangeNatInfo.sFromId)
  return sfromid_.GetNoArena();
}
inline void SIGP2PCallExchangeNatInfo::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGP2PCallExchangeNatInfo.sFromId)
}
#if LANG_CXX11
inline void SIGP2PCallExchangeNatInfo::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGP2PCallExchangeNatInfo.sFromId)
}
#endif
inline void SIGP2PCallExchangeNatInfo::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGP2PCallExchangeNatInfo.sFromId)
}
inline void SIGP2PCallExchangeNatInfo::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGP2PCallExchangeNatInfo.sFromId)
}
inline ::std::string* SIGP2PCallExchangeNatInfo::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGP2PCallExchangeNatInfo.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGP2PCallExchangeNatInfo::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.SIGP2PCallExchangeNatInfo.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGP2PCallExchangeNatInfo::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGP2PCallExchangeNatInfo.sFromId)
}

// string sToId = 2;
inline void SIGP2PCallExchangeNatInfo::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGP2PCallExchangeNatInfo::stoid() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallExchangeNatInfo.sToId)
  return stoid_.GetNoArena();
}
inline void SIGP2PCallExchangeNatInfo::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGP2PCallExchangeNatInfo.sToId)
}
#if LANG_CXX11
inline void SIGP2PCallExchangeNatInfo::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGP2PCallExchangeNatInfo.sToId)
}
#endif
inline void SIGP2PCallExchangeNatInfo::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGP2PCallExchangeNatInfo.sToId)
}
inline void SIGP2PCallExchangeNatInfo::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGP2PCallExchangeNatInfo.sToId)
}
inline ::std::string* SIGP2PCallExchangeNatInfo::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGP2PCallExchangeNatInfo.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGP2PCallExchangeNatInfo::release_stoid() {
  // @@protoc_insertion_point(field_release:im.SIGP2PCallExchangeNatInfo.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGP2PCallExchangeNatInfo::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGP2PCallExchangeNatInfo.sToId)
}

// string sMsgId = 3;
inline void SIGP2PCallExchangeNatInfo::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGP2PCallExchangeNatInfo::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallExchangeNatInfo.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SIGP2PCallExchangeNatInfo::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGP2PCallExchangeNatInfo.sMsgId)
}
#if LANG_CXX11
inline void SIGP2PCallExchangeNatInfo::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGP2PCallExchangeNatInfo.sMsgId)
}
#endif
inline void SIGP2PCallExchangeNatInfo::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGP2PCallExchangeNatInfo.sMsgId)
}
inline void SIGP2PCallExchangeNatInfo::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGP2PCallExchangeNatInfo.sMsgId)
}
inline ::std::string* SIGP2PCallExchangeNatInfo::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGP2PCallExchangeNatInfo.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGP2PCallExchangeNatInfo::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SIGP2PCallExchangeNatInfo.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGP2PCallExchangeNatInfo::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGP2PCallExchangeNatInfo.sMsgId)
}

// string sContent = 4;
inline void SIGP2PCallExchangeNatInfo::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGP2PCallExchangeNatInfo::scontent() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallExchangeNatInfo.sContent)
  return scontent_.GetNoArena();
}
inline void SIGP2PCallExchangeNatInfo::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGP2PCallExchangeNatInfo.sContent)
}
#if LANG_CXX11
inline void SIGP2PCallExchangeNatInfo::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGP2PCallExchangeNatInfo.sContent)
}
#endif
inline void SIGP2PCallExchangeNatInfo::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGP2PCallExchangeNatInfo.sContent)
}
inline void SIGP2PCallExchangeNatInfo::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGP2PCallExchangeNatInfo.sContent)
}
inline ::std::string* SIGP2PCallExchangeNatInfo::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGP2PCallExchangeNatInfo.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGP2PCallExchangeNatInfo::release_scontent() {
  // @@protoc_insertion_point(field_release:im.SIGP2PCallExchangeNatInfo.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGP2PCallExchangeNatInfo::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im.SIGP2PCallExchangeNatInfo.sContent)
}

// uint64 msgTime = 5;
inline void SIGP2PCallExchangeNatInfo::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SIGP2PCallExchangeNatInfo::msgtime() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallExchangeNatInfo.msgTime)
  return msgtime_;
}
inline void SIGP2PCallExchangeNatInfo::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.SIGP2PCallExchangeNatInfo.msgTime)
}

// string scallId = 6;
inline void SIGP2PCallExchangeNatInfo::clear_scallid() {
  scallid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGP2PCallExchangeNatInfo::scallid() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallExchangeNatInfo.scallId)
  return scallid_.GetNoArena();
}
inline void SIGP2PCallExchangeNatInfo::set_scallid(const ::std::string& value) {
  
  scallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGP2PCallExchangeNatInfo.scallId)
}
#if LANG_CXX11
inline void SIGP2PCallExchangeNatInfo::set_scallid(::std::string&& value) {
  
  scallid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGP2PCallExchangeNatInfo.scallId)
}
#endif
inline void SIGP2PCallExchangeNatInfo::set_scallid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGP2PCallExchangeNatInfo.scallId)
}
inline void SIGP2PCallExchangeNatInfo::set_scallid(const char* value, size_t size) {
  
  scallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGP2PCallExchangeNatInfo.scallId)
}
inline ::std::string* SIGP2PCallExchangeNatInfo::mutable_scallid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGP2PCallExchangeNatInfo.scallId)
  return scallid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGP2PCallExchangeNatInfo::release_scallid() {
  // @@protoc_insertion_point(field_release:im.SIGP2PCallExchangeNatInfo.scallId)
  
  return scallid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGP2PCallExchangeNatInfo::set_allocated_scallid(::std::string* scallid) {
  if (scallid != NULL) {
    
  } else {
    
  }
  scallid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scallid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGP2PCallExchangeNatInfo.scallId)
}

// -------------------------------------------------------------------

// SIGP2PCallExchangeNatInfoAck

// string sToId = 1;
inline void SIGP2PCallExchangeNatInfoAck::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGP2PCallExchangeNatInfoAck::stoid() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallExchangeNatInfoAck.sToId)
  return stoid_.GetNoArena();
}
inline void SIGP2PCallExchangeNatInfoAck::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGP2PCallExchangeNatInfoAck.sToId)
}
#if LANG_CXX11
inline void SIGP2PCallExchangeNatInfoAck::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGP2PCallExchangeNatInfoAck.sToId)
}
#endif
inline void SIGP2PCallExchangeNatInfoAck::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGP2PCallExchangeNatInfoAck.sToId)
}
inline void SIGP2PCallExchangeNatInfoAck::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGP2PCallExchangeNatInfoAck.sToId)
}
inline ::std::string* SIGP2PCallExchangeNatInfoAck::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGP2PCallExchangeNatInfoAck.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGP2PCallExchangeNatInfoAck::release_stoid() {
  // @@protoc_insertion_point(field_release:im.SIGP2PCallExchangeNatInfoAck.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGP2PCallExchangeNatInfoAck::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGP2PCallExchangeNatInfoAck.sToId)
}

// string sMsgId = 2;
inline void SIGP2PCallExchangeNatInfoAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGP2PCallExchangeNatInfoAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallExchangeNatInfoAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SIGP2PCallExchangeNatInfoAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGP2PCallExchangeNatInfoAck.sMsgId)
}
#if LANG_CXX11
inline void SIGP2PCallExchangeNatInfoAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGP2PCallExchangeNatInfoAck.sMsgId)
}
#endif
inline void SIGP2PCallExchangeNatInfoAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGP2PCallExchangeNatInfoAck.sMsgId)
}
inline void SIGP2PCallExchangeNatInfoAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGP2PCallExchangeNatInfoAck.sMsgId)
}
inline ::std::string* SIGP2PCallExchangeNatInfoAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGP2PCallExchangeNatInfoAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGP2PCallExchangeNatInfoAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SIGP2PCallExchangeNatInfoAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGP2PCallExchangeNatInfoAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGP2PCallExchangeNatInfoAck.sMsgId)
}

// .im.ErrCode errcode = 3;
inline void SIGP2PCallExchangeNatInfoAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode SIGP2PCallExchangeNatInfoAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallExchangeNatInfoAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void SIGP2PCallExchangeNatInfoAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.SIGP2PCallExchangeNatInfoAck.errcode)
}

// -------------------------------------------------------------------

// SIGP2PCallExchangeNatInfoDeliverAck

// string sUserId = 1;
inline void SIGP2PCallExchangeNatInfoDeliverAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGP2PCallExchangeNatInfoDeliverAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallExchangeNatInfoDeliverAck.sUserId)
  return suserid_.GetNoArena();
}
inline void SIGP2PCallExchangeNatInfoDeliverAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGP2PCallExchangeNatInfoDeliverAck.sUserId)
}
#if LANG_CXX11
inline void SIGP2PCallExchangeNatInfoDeliverAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGP2PCallExchangeNatInfoDeliverAck.sUserId)
}
#endif
inline void SIGP2PCallExchangeNatInfoDeliverAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGP2PCallExchangeNatInfoDeliverAck.sUserId)
}
inline void SIGP2PCallExchangeNatInfoDeliverAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGP2PCallExchangeNatInfoDeliverAck.sUserId)
}
inline ::std::string* SIGP2PCallExchangeNatInfoDeliverAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGP2PCallExchangeNatInfoDeliverAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGP2PCallExchangeNatInfoDeliverAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.SIGP2PCallExchangeNatInfoDeliverAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGP2PCallExchangeNatInfoDeliverAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGP2PCallExchangeNatInfoDeliverAck.sUserId)
}

// string sMsgId = 2;
inline void SIGP2PCallExchangeNatInfoDeliverAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGP2PCallExchangeNatInfoDeliverAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallExchangeNatInfoDeliverAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SIGP2PCallExchangeNatInfoDeliverAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGP2PCallExchangeNatInfoDeliverAck.sMsgId)
}
#if LANG_CXX11
inline void SIGP2PCallExchangeNatInfoDeliverAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGP2PCallExchangeNatInfoDeliverAck.sMsgId)
}
#endif
inline void SIGP2PCallExchangeNatInfoDeliverAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGP2PCallExchangeNatInfoDeliverAck.sMsgId)
}
inline void SIGP2PCallExchangeNatInfoDeliverAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGP2PCallExchangeNatInfoDeliverAck.sMsgId)
}
inline ::std::string* SIGP2PCallExchangeNatInfoDeliverAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGP2PCallExchangeNatInfoDeliverAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGP2PCallExchangeNatInfoDeliverAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SIGP2PCallExchangeNatInfoDeliverAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGP2PCallExchangeNatInfoDeliverAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGP2PCallExchangeNatInfoDeliverAck.sMsgId)
}

// -------------------------------------------------------------------

// SIGHangUp

// string sFromId = 1;
inline void SIGHangUp::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGHangUp::sfromid() const {
  // @@protoc_insertion_point(field_get:im.SIGHangUp.sFromId)
  return sfromid_.GetNoArena();
}
inline void SIGHangUp::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGHangUp.sFromId)
}
#if LANG_CXX11
inline void SIGHangUp::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGHangUp.sFromId)
}
#endif
inline void SIGHangUp::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGHangUp.sFromId)
}
inline void SIGHangUp::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGHangUp.sFromId)
}
inline ::std::string* SIGHangUp::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGHangUp.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGHangUp::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.SIGHangUp.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGHangUp::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGHangUp.sFromId)
}

// string sToId = 2;
inline void SIGHangUp::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGHangUp::stoid() const {
  // @@protoc_insertion_point(field_get:im.SIGHangUp.sToId)
  return stoid_.GetNoArena();
}
inline void SIGHangUp::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGHangUp.sToId)
}
#if LANG_CXX11
inline void SIGHangUp::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGHangUp.sToId)
}
#endif
inline void SIGHangUp::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGHangUp.sToId)
}
inline void SIGHangUp::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGHangUp.sToId)
}
inline ::std::string* SIGHangUp::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGHangUp.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGHangUp::release_stoid() {
  // @@protoc_insertion_point(field_release:im.SIGHangUp.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGHangUp::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGHangUp.sToId)
}

// string sMsgId = 3;
inline void SIGHangUp::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGHangUp::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SIGHangUp.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SIGHangUp::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGHangUp.sMsgId)
}
#if LANG_CXX11
inline void SIGHangUp::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGHangUp.sMsgId)
}
#endif
inline void SIGHangUp::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGHangUp.sMsgId)
}
inline void SIGHangUp::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGHangUp.sMsgId)
}
inline ::std::string* SIGHangUp::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGHangUp.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGHangUp::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SIGHangUp.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGHangUp::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGHangUp.sMsgId)
}

// uint64 msgTime = 4;
inline void SIGHangUp::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SIGHangUp::msgtime() const {
  // @@protoc_insertion_point(field_get:im.SIGHangUp.msgTime)
  return msgtime_;
}
inline void SIGHangUp::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.SIGHangUp.msgTime)
}

// string scallId = 5;
inline void SIGHangUp::clear_scallid() {
  scallid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGHangUp::scallid() const {
  // @@protoc_insertion_point(field_get:im.SIGHangUp.scallId)
  return scallid_.GetNoArena();
}
inline void SIGHangUp::set_scallid(const ::std::string& value) {
  
  scallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGHangUp.scallId)
}
#if LANG_CXX11
inline void SIGHangUp::set_scallid(::std::string&& value) {
  
  scallid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGHangUp.scallId)
}
#endif
inline void SIGHangUp::set_scallid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGHangUp.scallId)
}
inline void SIGHangUp::set_scallid(const char* value, size_t size) {
  
  scallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGHangUp.scallId)
}
inline ::std::string* SIGHangUp::mutable_scallid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGHangUp.scallId)
  return scallid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGHangUp::release_scallid() {
  // @@protoc_insertion_point(field_release:im.SIGHangUp.scallId)
  
  return scallid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGHangUp::set_allocated_scallid(::std::string* scallid) {
  if (scallid != NULL) {
    
  } else {
    
  }
  scallid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scallid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGHangUp.scallId)
}

// -------------------------------------------------------------------

// SIGHangUpAck

// string sToId = 1;
inline void SIGHangUpAck::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGHangUpAck::stoid() const {
  // @@protoc_insertion_point(field_get:im.SIGHangUpAck.sToId)
  return stoid_.GetNoArena();
}
inline void SIGHangUpAck::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGHangUpAck.sToId)
}
#if LANG_CXX11
inline void SIGHangUpAck::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGHangUpAck.sToId)
}
#endif
inline void SIGHangUpAck::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGHangUpAck.sToId)
}
inline void SIGHangUpAck::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGHangUpAck.sToId)
}
inline ::std::string* SIGHangUpAck::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGHangUpAck.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGHangUpAck::release_stoid() {
  // @@protoc_insertion_point(field_release:im.SIGHangUpAck.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGHangUpAck::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGHangUpAck.sToId)
}

// string sMsgId = 2;
inline void SIGHangUpAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGHangUpAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SIGHangUpAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SIGHangUpAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGHangUpAck.sMsgId)
}
#if LANG_CXX11
inline void SIGHangUpAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGHangUpAck.sMsgId)
}
#endif
inline void SIGHangUpAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGHangUpAck.sMsgId)
}
inline void SIGHangUpAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGHangUpAck.sMsgId)
}
inline ::std::string* SIGHangUpAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGHangUpAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGHangUpAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SIGHangUpAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGHangUpAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGHangUpAck.sMsgId)
}

// .im.ErrCode errcode = 5;
inline void SIGHangUpAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode SIGHangUpAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.SIGHangUpAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void SIGHangUpAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.SIGHangUpAck.errcode)
}

// -------------------------------------------------------------------

// SIGHangUpDeliverAck

// string sUserId = 1;
inline void SIGHangUpDeliverAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGHangUpDeliverAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.SIGHangUpDeliverAck.sUserId)
  return suserid_.GetNoArena();
}
inline void SIGHangUpDeliverAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGHangUpDeliverAck.sUserId)
}
#if LANG_CXX11
inline void SIGHangUpDeliverAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGHangUpDeliverAck.sUserId)
}
#endif
inline void SIGHangUpDeliverAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGHangUpDeliverAck.sUserId)
}
inline void SIGHangUpDeliverAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGHangUpDeliverAck.sUserId)
}
inline ::std::string* SIGHangUpDeliverAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGHangUpDeliverAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGHangUpDeliverAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.SIGHangUpDeliverAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGHangUpDeliverAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGHangUpDeliverAck.sUserId)
}

// string sMsgId = 2;
inline void SIGHangUpDeliverAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGHangUpDeliverAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SIGHangUpDeliverAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SIGHangUpDeliverAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGHangUpDeliverAck.sMsgId)
}
#if LANG_CXX11
inline void SIGHangUpDeliverAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGHangUpDeliverAck.sMsgId)
}
#endif
inline void SIGHangUpDeliverAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGHangUpDeliverAck.sMsgId)
}
inline void SIGHangUpDeliverAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGHangUpDeliverAck.sMsgId)
}
inline ::std::string* SIGHangUpDeliverAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGHangUpDeliverAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGHangUpDeliverAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SIGHangUpDeliverAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGHangUpDeliverAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGHangUpDeliverAck.sMsgId)
}

// -------------------------------------------------------------------

// SIGP2PCallStateNotify

// string sFromId = 1;
inline void SIGP2PCallStateNotify::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGP2PCallStateNotify::sfromid() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallStateNotify.sFromId)
  return sfromid_.GetNoArena();
}
inline void SIGP2PCallStateNotify::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGP2PCallStateNotify.sFromId)
}
#if LANG_CXX11
inline void SIGP2PCallStateNotify::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGP2PCallStateNotify.sFromId)
}
#endif
inline void SIGP2PCallStateNotify::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGP2PCallStateNotify.sFromId)
}
inline void SIGP2PCallStateNotify::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGP2PCallStateNotify.sFromId)
}
inline ::std::string* SIGP2PCallStateNotify::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGP2PCallStateNotify.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGP2PCallStateNotify::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.SIGP2PCallStateNotify.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGP2PCallStateNotify::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGP2PCallStateNotify.sFromId)
}

// string sToId = 2;
inline void SIGP2PCallStateNotify::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGP2PCallStateNotify::stoid() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallStateNotify.sToId)
  return stoid_.GetNoArena();
}
inline void SIGP2PCallStateNotify::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGP2PCallStateNotify.sToId)
}
#if LANG_CXX11
inline void SIGP2PCallStateNotify::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGP2PCallStateNotify.sToId)
}
#endif
inline void SIGP2PCallStateNotify::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGP2PCallStateNotify.sToId)
}
inline void SIGP2PCallStateNotify::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGP2PCallStateNotify.sToId)
}
inline ::std::string* SIGP2PCallStateNotify::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGP2PCallStateNotify.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGP2PCallStateNotify::release_stoid() {
  // @@protoc_insertion_point(field_release:im.SIGP2PCallStateNotify.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGP2PCallStateNotify::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGP2PCallStateNotify.sToId)
}

// string sMsgId = 3;
inline void SIGP2PCallStateNotify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGP2PCallStateNotify::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallStateNotify.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SIGP2PCallStateNotify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGP2PCallStateNotify.sMsgId)
}
#if LANG_CXX11
inline void SIGP2PCallStateNotify::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGP2PCallStateNotify.sMsgId)
}
#endif
inline void SIGP2PCallStateNotify::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGP2PCallStateNotify.sMsgId)
}
inline void SIGP2PCallStateNotify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGP2PCallStateNotify.sMsgId)
}
inline ::std::string* SIGP2PCallStateNotify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGP2PCallStateNotify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGP2PCallStateNotify::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SIGP2PCallStateNotify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGP2PCallStateNotify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGP2PCallStateNotify.sMsgId)
}

// uint64 msgTime = 4;
inline void SIGP2PCallStateNotify::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SIGP2PCallStateNotify::msgtime() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallStateNotify.msgTime)
  return msgtime_;
}
inline void SIGP2PCallStateNotify::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.SIGP2PCallStateNotify.msgTime)
}

// uint32 notifyType = 8;
inline void SIGP2PCallStateNotify::clear_notifytype() {
  notifytype_ = 0u;
}
inline ::google::protobuf::uint32 SIGP2PCallStateNotify::notifytype() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallStateNotify.notifyType)
  return notifytype_;
}
inline void SIGP2PCallStateNotify::set_notifytype(::google::protobuf::uint32 value) {
  
  notifytype_ = value;
  // @@protoc_insertion_point(field_set:im.SIGP2PCallStateNotify.notifyType)
}

// uint32 notifyValue = 9;
inline void SIGP2PCallStateNotify::clear_notifyvalue() {
  notifyvalue_ = 0u;
}
inline ::google::protobuf::uint32 SIGP2PCallStateNotify::notifyvalue() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallStateNotify.notifyValue)
  return notifyvalue_;
}
inline void SIGP2PCallStateNotify::set_notifyvalue(::google::protobuf::uint32 value) {
  
  notifyvalue_ = value;
  // @@protoc_insertion_point(field_set:im.SIGP2PCallStateNotify.notifyValue)
}

// string scallId = 10;
inline void SIGP2PCallStateNotify::clear_scallid() {
  scallid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGP2PCallStateNotify::scallid() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallStateNotify.scallId)
  return scallid_.GetNoArena();
}
inline void SIGP2PCallStateNotify::set_scallid(const ::std::string& value) {
  
  scallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGP2PCallStateNotify.scallId)
}
#if LANG_CXX11
inline void SIGP2PCallStateNotify::set_scallid(::std::string&& value) {
  
  scallid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGP2PCallStateNotify.scallId)
}
#endif
inline void SIGP2PCallStateNotify::set_scallid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGP2PCallStateNotify.scallId)
}
inline void SIGP2PCallStateNotify::set_scallid(const char* value, size_t size) {
  
  scallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGP2PCallStateNotify.scallId)
}
inline ::std::string* SIGP2PCallStateNotify::mutable_scallid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGP2PCallStateNotify.scallId)
  return scallid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGP2PCallStateNotify::release_scallid() {
  // @@protoc_insertion_point(field_release:im.SIGP2PCallStateNotify.scallId)
  
  return scallid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGP2PCallStateNotify::set_allocated_scallid(::std::string* scallid) {
  if (scallid != NULL) {
    
  } else {
    
  }
  scallid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scallid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGP2PCallStateNotify.scallId)
}

// -------------------------------------------------------------------

// SIGP2PCallStateNotifyACK

// string sToId = 1;
inline void SIGP2PCallStateNotifyACK::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGP2PCallStateNotifyACK::stoid() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallStateNotifyACK.sToId)
  return stoid_.GetNoArena();
}
inline void SIGP2PCallStateNotifyACK::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGP2PCallStateNotifyACK.sToId)
}
#if LANG_CXX11
inline void SIGP2PCallStateNotifyACK::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGP2PCallStateNotifyACK.sToId)
}
#endif
inline void SIGP2PCallStateNotifyACK::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGP2PCallStateNotifyACK.sToId)
}
inline void SIGP2PCallStateNotifyACK::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGP2PCallStateNotifyACK.sToId)
}
inline ::std::string* SIGP2PCallStateNotifyACK::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGP2PCallStateNotifyACK.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGP2PCallStateNotifyACK::release_stoid() {
  // @@protoc_insertion_point(field_release:im.SIGP2PCallStateNotifyACK.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGP2PCallStateNotifyACK::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGP2PCallStateNotifyACK.sToId)
}

// string sMsgId = 2;
inline void SIGP2PCallStateNotifyACK::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGP2PCallStateNotifyACK::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallStateNotifyACK.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SIGP2PCallStateNotifyACK::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGP2PCallStateNotifyACK.sMsgId)
}
#if LANG_CXX11
inline void SIGP2PCallStateNotifyACK::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGP2PCallStateNotifyACK.sMsgId)
}
#endif
inline void SIGP2PCallStateNotifyACK::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGP2PCallStateNotifyACK.sMsgId)
}
inline void SIGP2PCallStateNotifyACK::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGP2PCallStateNotifyACK.sMsgId)
}
inline ::std::string* SIGP2PCallStateNotifyACK::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGP2PCallStateNotifyACK.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGP2PCallStateNotifyACK::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SIGP2PCallStateNotifyACK.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGP2PCallStateNotifyACK::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGP2PCallStateNotifyACK.sMsgId)
}

// .im.ErrCode errcode = 3;
inline void SIGP2PCallStateNotifyACK::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode SIGP2PCallStateNotifyACK::errcode() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallStateNotifyACK.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void SIGP2PCallStateNotifyACK::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.SIGP2PCallStateNotifyACK.errcode)
}

// -------------------------------------------------------------------

// SIGP2PCallStateNotifyDeliverAck

// string sUserId = 1;
inline void SIGP2PCallStateNotifyDeliverAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGP2PCallStateNotifyDeliverAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallStateNotifyDeliverAck.sUserId)
  return suserid_.GetNoArena();
}
inline void SIGP2PCallStateNotifyDeliverAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGP2PCallStateNotifyDeliverAck.sUserId)
}
#if LANG_CXX11
inline void SIGP2PCallStateNotifyDeliverAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGP2PCallStateNotifyDeliverAck.sUserId)
}
#endif
inline void SIGP2PCallStateNotifyDeliverAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGP2PCallStateNotifyDeliverAck.sUserId)
}
inline void SIGP2PCallStateNotifyDeliverAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGP2PCallStateNotifyDeliverAck.sUserId)
}
inline ::std::string* SIGP2PCallStateNotifyDeliverAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGP2PCallStateNotifyDeliverAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGP2PCallStateNotifyDeliverAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.SIGP2PCallStateNotifyDeliverAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGP2PCallStateNotifyDeliverAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGP2PCallStateNotifyDeliverAck.sUserId)
}

// string sMsgId = 2;
inline void SIGP2PCallStateNotifyDeliverAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SIGP2PCallStateNotifyDeliverAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SIGP2PCallStateNotifyDeliverAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SIGP2PCallStateNotifyDeliverAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SIGP2PCallStateNotifyDeliverAck.sMsgId)
}
#if LANG_CXX11
inline void SIGP2PCallStateNotifyDeliverAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SIGP2PCallStateNotifyDeliverAck.sMsgId)
}
#endif
inline void SIGP2PCallStateNotifyDeliverAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SIGP2PCallStateNotifyDeliverAck.sMsgId)
}
inline void SIGP2PCallStateNotifyDeliverAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SIGP2PCallStateNotifyDeliverAck.sMsgId)
}
inline ::std::string* SIGP2PCallStateNotifyDeliverAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SIGP2PCallStateNotifyDeliverAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SIGP2PCallStateNotifyDeliverAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SIGP2PCallStateNotifyDeliverAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SIGP2PCallStateNotifyDeliverAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SIGP2PCallStateNotifyDeliverAck.sMsgId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace im

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_im_2esig_2eproto
