// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.pushSvrAPNsMsg.proto

#ifndef PROTOBUF_INCLUDED_im_2epushSvrAPNsMsg_2eproto
#define PROTOBUF_INCLUDED_im_2epushSvrAPNsMsg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "im.pub.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_im_2epushSvrAPNsMsg_2eproto 

namespace protobuf_im_2epushSvrAPNsMsg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_im_2epushSvrAPNsMsg_2eproto
namespace im {
class PSvrAPNsNotifyAck;
class PSvrAPNsNotifyAckDefaultTypeInternal;
extern PSvrAPNsNotifyAckDefaultTypeInternal _PSvrAPNsNotifyAck_default_instance_;
class PSvrAPNsRespone;
class PSvrAPNsResponeDefaultTypeInternal;
extern PSvrAPNsResponeDefaultTypeInternal _PSvrAPNsRespone_default_instance_;
class PSvrMsg;
class PSvrMsgDefaultTypeInternal;
extern PSvrMsgDefaultTypeInternal _PSvrMsg_default_instance_;
class PSvrMsgAck;
class PSvrMsgAckDefaultTypeInternal;
extern PSvrMsgAckDefaultTypeInternal _PSvrMsgAck_default_instance_;
}  // namespace im
namespace google {
namespace protobuf {
template<> ::im::PSvrAPNsNotifyAck* Arena::CreateMaybeMessage<::im::PSvrAPNsNotifyAck>(Arena*);
template<> ::im::PSvrAPNsRespone* Arena::CreateMaybeMessage<::im::PSvrAPNsRespone>(Arena*);
template<> ::im::PSvrMsg* Arena::CreateMaybeMessage<::im::PSvrMsg>(Arena*);
template<> ::im::PSvrMsgAck* Arena::CreateMaybeMessage<::im::PSvrMsgAck>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace im {

// ===================================================================

class PSvrMsg : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.PSvrMsg) */ {
 public:
  PSvrMsg();
  virtual ~PSvrMsg();

  PSvrMsg(const PSvrMsg& from);

  inline PSvrMsg& operator=(const PSvrMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSvrMsg(PSvrMsg&& from) noexcept
    : PSvrMsg() {
    *this = ::std::move(from);
  }

  inline PSvrMsg& operator=(PSvrMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const PSvrMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSvrMsg* internal_default_instance() {
    return reinterpret_cast<const PSvrMsg*>(
               &_PSvrMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PSvrMsg* other);
  friend void swap(PSvrMsg& a, PSvrMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSvrMsg* New() const final {
    return CreateMaybeMessage<PSvrMsg>(NULL);
  }

  PSvrMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PSvrMsg>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const PSvrMsg& from);
  void MergeFrom(const PSvrMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PSvrMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sFromId = 4;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 4;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 5;
  void clear_stoid();
  static const int kSToIdFieldNumber = 5;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sToToken = 7;
  void clear_stotoken();
  static const int kSToTokenFieldNumber = 7;
  const ::std::string& stotoken() const;
  void set_stotoken(const ::std::string& value);
  #if LANG_CXX11
  void set_stotoken(::std::string&& value);
  #endif
  void set_stotoken(const char* value);
  void set_stotoken(const char* value, size_t size);
  ::std::string* mutable_stotoken();
  ::std::string* release_stotoken();
  void set_allocated_stotoken(::std::string* stotoken);

  // string sBody = 8;
  void clear_sbody();
  static const int kSBodyFieldNumber = 8;
  const ::std::string& sbody() const;
  void set_sbody(const ::std::string& value);
  #if LANG_CXX11
  void set_sbody(::std::string&& value);
  #endif
  void set_sbody(const char* value);
  void set_sbody(const char* value, size_t size);
  ::std::string* mutable_sbody();
  ::std::string* release_sbody();
  void set_allocated_sbody(::std::string* sbody);

  // .im.MsgType eMsgType = 1;
  void clear_emsgtype();
  static const int kEMsgTypeFieldNumber = 1;
  ::im::MsgType emsgtype() const;
  void set_emsgtype(::im::MsgType value);

  // uint32 nGroupId = 3;
  void clear_ngroupid();
  static const int kNGroupIdFieldNumber = 3;
  ::google::protobuf::uint32 ngroupid() const;
  void set_ngroupid(::google::protobuf::uint32 value);

  // uint32 uDeviceVer = 6;
  void clear_udevicever();
  static const int kUDeviceVerFieldNumber = 6;
  ::google::protobuf::uint32 udevicever() const;
  void set_udevicever(::google::protobuf::uint32 value);

  // uint32 nUnreadNotifyMsgCount = 9;
  void clear_nunreadnotifymsgcount();
  static const int kNUnreadNotifyMsgCountFieldNumber = 9;
  ::google::protobuf::uint32 nunreadnotifymsgcount() const;
  void set_nunreadnotifymsgcount(::google::protobuf::uint32 value);

  // uint32 versionCode = 10;
  void clear_versioncode();
  static const int kVersionCodeFieldNumber = 10;
  ::google::protobuf::uint32 versioncode() const;
  void set_versioncode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.PSvrMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr stotoken_;
  ::google::protobuf::internal::ArenaStringPtr sbody_;
  int emsgtype_;
  ::google::protobuf::uint32 ngroupid_;
  ::google::protobuf::uint32 udevicever_;
  ::google::protobuf::uint32 nunreadnotifymsgcount_;
  ::google::protobuf::uint32 versioncode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2epushSvrAPNsMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PSvrMsgAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.PSvrMsgAck) */ {
 public:
  PSvrMsgAck();
  virtual ~PSvrMsgAck();

  PSvrMsgAck(const PSvrMsgAck& from);

  inline PSvrMsgAck& operator=(const PSvrMsgAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSvrMsgAck(PSvrMsgAck&& from) noexcept
    : PSvrMsgAck() {
    *this = ::std::move(from);
  }

  inline PSvrMsgAck& operator=(PSvrMsgAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const PSvrMsgAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSvrMsgAck* internal_default_instance() {
    return reinterpret_cast<const PSvrMsgAck*>(
               &_PSvrMsgAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PSvrMsgAck* other);
  friend void swap(PSvrMsgAck& a, PSvrMsgAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSvrMsgAck* New() const final {
    return CreateMaybeMessage<PSvrMsgAck>(NULL);
  }

  PSvrMsgAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PSvrMsgAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const PSvrMsgAck& from);
  void MergeFrom(const PSvrMsgAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PSvrMsgAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sMsgId = 1;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 1;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode nErr = 2;
  void clear_nerr();
  static const int kNErrFieldNumber = 2;
  ::im::ErrCode nerr() const;
  void set_nerr(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.PSvrMsgAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int nerr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2epushSvrAPNsMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PSvrAPNsRespone : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.PSvrAPNsRespone) */ {
 public:
  PSvrAPNsRespone();
  virtual ~PSvrAPNsRespone();

  PSvrAPNsRespone(const PSvrAPNsRespone& from);

  inline PSvrAPNsRespone& operator=(const PSvrAPNsRespone& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSvrAPNsRespone(PSvrAPNsRespone&& from) noexcept
    : PSvrAPNsRespone() {
    *this = ::std::move(from);
  }

  inline PSvrAPNsRespone& operator=(PSvrAPNsRespone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const PSvrAPNsRespone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSvrAPNsRespone* internal_default_instance() {
    return reinterpret_cast<const PSvrAPNsRespone*>(
               &_PSvrAPNsRespone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PSvrAPNsRespone* other);
  friend void swap(PSvrAPNsRespone& a, PSvrAPNsRespone& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSvrAPNsRespone* New() const final {
    return CreateMaybeMessage<PSvrAPNsRespone>(NULL);
  }

  PSvrAPNsRespone* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PSvrAPNsRespone>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const PSvrAPNsRespone& from);
  void MergeFrom(const PSvrAPNsRespone& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PSvrAPNsRespone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sMsgId = 1;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 1;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // .im.ErrCode nErr = 3;
  void clear_nerr();
  static const int kNErrFieldNumber = 3;
  ::im::ErrCode nerr() const;
  void set_nerr(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.PSvrAPNsRespone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  int nerr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2epushSvrAPNsMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PSvrAPNsNotifyAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.PSvrAPNsNotifyAck) */ {
 public:
  PSvrAPNsNotifyAck();
  virtual ~PSvrAPNsNotifyAck();

  PSvrAPNsNotifyAck(const PSvrAPNsNotifyAck& from);

  inline PSvrAPNsNotifyAck& operator=(const PSvrAPNsNotifyAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSvrAPNsNotifyAck(PSvrAPNsNotifyAck&& from) noexcept
    : PSvrAPNsNotifyAck() {
    *this = ::std::move(from);
  }

  inline PSvrAPNsNotifyAck& operator=(PSvrAPNsNotifyAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const PSvrAPNsNotifyAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSvrAPNsNotifyAck* internal_default_instance() {
    return reinterpret_cast<const PSvrAPNsNotifyAck*>(
               &_PSvrAPNsNotifyAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PSvrAPNsNotifyAck* other);
  friend void swap(PSvrAPNsNotifyAck& a, PSvrAPNsNotifyAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSvrAPNsNotifyAck* New() const final {
    return CreateMaybeMessage<PSvrAPNsNotifyAck>(NULL);
  }

  PSvrAPNsNotifyAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PSvrAPNsNotifyAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const PSvrAPNsNotifyAck& from);
  void MergeFrom(const PSvrAPNsNotifyAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PSvrAPNsNotifyAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sMsgId = 1;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 1;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // .im.ErrCode nErr = 3;
  void clear_nerr();
  static const int kNErrFieldNumber = 3;
  ::im::ErrCode nerr() const;
  void set_nerr(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.PSvrAPNsNotifyAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  int nerr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2epushSvrAPNsMsg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PSvrMsg

// .im.MsgType eMsgType = 1;
inline void PSvrMsg::clear_emsgtype() {
  emsgtype_ = 0;
}
inline ::im::MsgType PSvrMsg::emsgtype() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsg.eMsgType)
  return static_cast< ::im::MsgType >(emsgtype_);
}
inline void PSvrMsg::set_emsgtype(::im::MsgType value) {
  
  emsgtype_ = value;
  // @@protoc_insertion_point(field_set:im.PSvrMsg.eMsgType)
}

// string sMsgId = 2;
inline void PSvrMsg::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSvrMsg::smsgid() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsg.sMsgId)
  return smsgid_.GetNoArena();
}
inline void PSvrMsg::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.PSvrMsg.sMsgId)
}
#if LANG_CXX11
inline void PSvrMsg::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.PSvrMsg.sMsgId)
}
#endif
inline void PSvrMsg::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.PSvrMsg.sMsgId)
}
inline void PSvrMsg::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.PSvrMsg.sMsgId)
}
inline ::std::string* PSvrMsg::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.PSvrMsg.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSvrMsg::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.PSvrMsg.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSvrMsg::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.PSvrMsg.sMsgId)
}

// uint32 nGroupId = 3;
inline void PSvrMsg::clear_ngroupid() {
  ngroupid_ = 0u;
}
inline ::google::protobuf::uint32 PSvrMsg::ngroupid() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsg.nGroupId)
  return ngroupid_;
}
inline void PSvrMsg::set_ngroupid(::google::protobuf::uint32 value) {
  
  ngroupid_ = value;
  // @@protoc_insertion_point(field_set:im.PSvrMsg.nGroupId)
}

// string sFromId = 4;
inline void PSvrMsg::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSvrMsg::sfromid() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsg.sFromId)
  return sfromid_.GetNoArena();
}
inline void PSvrMsg::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.PSvrMsg.sFromId)
}
#if LANG_CXX11
inline void PSvrMsg::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.PSvrMsg.sFromId)
}
#endif
inline void PSvrMsg::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.PSvrMsg.sFromId)
}
inline void PSvrMsg::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.PSvrMsg.sFromId)
}
inline ::std::string* PSvrMsg::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.PSvrMsg.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSvrMsg::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.PSvrMsg.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSvrMsg::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.PSvrMsg.sFromId)
}

// string sToId = 5;
inline void PSvrMsg::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSvrMsg::stoid() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsg.sToId)
  return stoid_.GetNoArena();
}
inline void PSvrMsg::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.PSvrMsg.sToId)
}
#if LANG_CXX11
inline void PSvrMsg::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.PSvrMsg.sToId)
}
#endif
inline void PSvrMsg::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.PSvrMsg.sToId)
}
inline void PSvrMsg::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.PSvrMsg.sToId)
}
inline ::std::string* PSvrMsg::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.PSvrMsg.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSvrMsg::release_stoid() {
  // @@protoc_insertion_point(field_release:im.PSvrMsg.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSvrMsg::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.PSvrMsg.sToId)
}

// uint32 uDeviceVer = 6;
inline void PSvrMsg::clear_udevicever() {
  udevicever_ = 0u;
}
inline ::google::protobuf::uint32 PSvrMsg::udevicever() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsg.uDeviceVer)
  return udevicever_;
}
inline void PSvrMsg::set_udevicever(::google::protobuf::uint32 value) {
  
  udevicever_ = value;
  // @@protoc_insertion_point(field_set:im.PSvrMsg.uDeviceVer)
}

// string sToToken = 7;
inline void PSvrMsg::clear_stotoken() {
  stotoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSvrMsg::stotoken() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsg.sToToken)
  return stotoken_.GetNoArena();
}
inline void PSvrMsg::set_stotoken(const ::std::string& value) {
  
  stotoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.PSvrMsg.sToToken)
}
#if LANG_CXX11
inline void PSvrMsg::set_stotoken(::std::string&& value) {
  
  stotoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.PSvrMsg.sToToken)
}
#endif
inline void PSvrMsg::set_stotoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stotoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.PSvrMsg.sToToken)
}
inline void PSvrMsg::set_stotoken(const char* value, size_t size) {
  
  stotoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.PSvrMsg.sToToken)
}
inline ::std::string* PSvrMsg::mutable_stotoken() {
  
  // @@protoc_insertion_point(field_mutable:im.PSvrMsg.sToToken)
  return stotoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSvrMsg::release_stotoken() {
  // @@protoc_insertion_point(field_release:im.PSvrMsg.sToToken)
  
  return stotoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSvrMsg::set_allocated_stotoken(::std::string* stotoken) {
  if (stotoken != NULL) {
    
  } else {
    
  }
  stotoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stotoken);
  // @@protoc_insertion_point(field_set_allocated:im.PSvrMsg.sToToken)
}

// string sBody = 8;
inline void PSvrMsg::clear_sbody() {
  sbody_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSvrMsg::sbody() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsg.sBody)
  return sbody_.GetNoArena();
}
inline void PSvrMsg::set_sbody(const ::std::string& value) {
  
  sbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.PSvrMsg.sBody)
}
#if LANG_CXX11
inline void PSvrMsg::set_sbody(::std::string&& value) {
  
  sbody_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.PSvrMsg.sBody)
}
#endif
inline void PSvrMsg::set_sbody(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.PSvrMsg.sBody)
}
inline void PSvrMsg::set_sbody(const char* value, size_t size) {
  
  sbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.PSvrMsg.sBody)
}
inline ::std::string* PSvrMsg::mutable_sbody() {
  
  // @@protoc_insertion_point(field_mutable:im.PSvrMsg.sBody)
  return sbody_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSvrMsg::release_sbody() {
  // @@protoc_insertion_point(field_release:im.PSvrMsg.sBody)
  
  return sbody_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSvrMsg::set_allocated_sbody(::std::string* sbody) {
  if (sbody != NULL) {
    
  } else {
    
  }
  sbody_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sbody);
  // @@protoc_insertion_point(field_set_allocated:im.PSvrMsg.sBody)
}

// uint32 nUnreadNotifyMsgCount = 9;
inline void PSvrMsg::clear_nunreadnotifymsgcount() {
  nunreadnotifymsgcount_ = 0u;
}
inline ::google::protobuf::uint32 PSvrMsg::nunreadnotifymsgcount() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsg.nUnreadNotifyMsgCount)
  return nunreadnotifymsgcount_;
}
inline void PSvrMsg::set_nunreadnotifymsgcount(::google::protobuf::uint32 value) {
  
  nunreadnotifymsgcount_ = value;
  // @@protoc_insertion_point(field_set:im.PSvrMsg.nUnreadNotifyMsgCount)
}

// uint32 versionCode = 10;
inline void PSvrMsg::clear_versioncode() {
  versioncode_ = 0u;
}
inline ::google::protobuf::uint32 PSvrMsg::versioncode() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsg.versionCode)
  return versioncode_;
}
inline void PSvrMsg::set_versioncode(::google::protobuf::uint32 value) {
  
  versioncode_ = value;
  // @@protoc_insertion_point(field_set:im.PSvrMsg.versionCode)
}

// -------------------------------------------------------------------

// PSvrMsgAck

// string sMsgId = 1;
inline void PSvrMsgAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSvrMsgAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsgAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void PSvrMsgAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.PSvrMsgAck.sMsgId)
}
#if LANG_CXX11
inline void PSvrMsgAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.PSvrMsgAck.sMsgId)
}
#endif
inline void PSvrMsgAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.PSvrMsgAck.sMsgId)
}
inline void PSvrMsgAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.PSvrMsgAck.sMsgId)
}
inline ::std::string* PSvrMsgAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.PSvrMsgAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSvrMsgAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.PSvrMsgAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSvrMsgAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.PSvrMsgAck.sMsgId)
}

// .im.ErrCode nErr = 2;
inline void PSvrMsgAck::clear_nerr() {
  nerr_ = 0;
}
inline ::im::ErrCode PSvrMsgAck::nerr() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsgAck.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
inline void PSvrMsgAck::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.PSvrMsgAck.nErr)
}

// -------------------------------------------------------------------

// PSvrAPNsRespone

// string sMsgId = 1;
inline void PSvrAPNsRespone::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSvrAPNsRespone::smsgid() const {
  // @@protoc_insertion_point(field_get:im.PSvrAPNsRespone.sMsgId)
  return smsgid_.GetNoArena();
}
inline void PSvrAPNsRespone::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.PSvrAPNsRespone.sMsgId)
}
#if LANG_CXX11
inline void PSvrAPNsRespone::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.PSvrAPNsRespone.sMsgId)
}
#endif
inline void PSvrAPNsRespone::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.PSvrAPNsRespone.sMsgId)
}
inline void PSvrAPNsRespone::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.PSvrAPNsRespone.sMsgId)
}
inline ::std::string* PSvrAPNsRespone::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.PSvrAPNsRespone.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSvrAPNsRespone::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.PSvrAPNsRespone.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSvrAPNsRespone::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.PSvrAPNsRespone.sMsgId)
}

// string sToId = 2;
inline void PSvrAPNsRespone::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSvrAPNsRespone::stoid() const {
  // @@protoc_insertion_point(field_get:im.PSvrAPNsRespone.sToId)
  return stoid_.GetNoArena();
}
inline void PSvrAPNsRespone::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.PSvrAPNsRespone.sToId)
}
#if LANG_CXX11
inline void PSvrAPNsRespone::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.PSvrAPNsRespone.sToId)
}
#endif
inline void PSvrAPNsRespone::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.PSvrAPNsRespone.sToId)
}
inline void PSvrAPNsRespone::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.PSvrAPNsRespone.sToId)
}
inline ::std::string* PSvrAPNsRespone::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.PSvrAPNsRespone.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSvrAPNsRespone::release_stoid() {
  // @@protoc_insertion_point(field_release:im.PSvrAPNsRespone.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSvrAPNsRespone::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.PSvrAPNsRespone.sToId)
}

// .im.ErrCode nErr = 3;
inline void PSvrAPNsRespone::clear_nerr() {
  nerr_ = 0;
}
inline ::im::ErrCode PSvrAPNsRespone::nerr() const {
  // @@protoc_insertion_point(field_get:im.PSvrAPNsRespone.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
inline void PSvrAPNsRespone::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.PSvrAPNsRespone.nErr)
}

// -------------------------------------------------------------------

// PSvrAPNsNotifyAck

// string sMsgId = 1;
inline void PSvrAPNsNotifyAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSvrAPNsNotifyAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.PSvrAPNsNotifyAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void PSvrAPNsNotifyAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.PSvrAPNsNotifyAck.sMsgId)
}
#if LANG_CXX11
inline void PSvrAPNsNotifyAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.PSvrAPNsNotifyAck.sMsgId)
}
#endif
inline void PSvrAPNsNotifyAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.PSvrAPNsNotifyAck.sMsgId)
}
inline void PSvrAPNsNotifyAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.PSvrAPNsNotifyAck.sMsgId)
}
inline ::std::string* PSvrAPNsNotifyAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.PSvrAPNsNotifyAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSvrAPNsNotifyAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.PSvrAPNsNotifyAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSvrAPNsNotifyAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.PSvrAPNsNotifyAck.sMsgId)
}

// string sToId = 2;
inline void PSvrAPNsNotifyAck::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSvrAPNsNotifyAck::stoid() const {
  // @@protoc_insertion_point(field_get:im.PSvrAPNsNotifyAck.sToId)
  return stoid_.GetNoArena();
}
inline void PSvrAPNsNotifyAck::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.PSvrAPNsNotifyAck.sToId)
}
#if LANG_CXX11
inline void PSvrAPNsNotifyAck::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.PSvrAPNsNotifyAck.sToId)
}
#endif
inline void PSvrAPNsNotifyAck::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.PSvrAPNsNotifyAck.sToId)
}
inline void PSvrAPNsNotifyAck::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.PSvrAPNsNotifyAck.sToId)
}
inline ::std::string* PSvrAPNsNotifyAck::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.PSvrAPNsNotifyAck.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSvrAPNsNotifyAck::release_stoid() {
  // @@protoc_insertion_point(field_release:im.PSvrAPNsNotifyAck.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSvrAPNsNotifyAck::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.PSvrAPNsNotifyAck.sToId)
}

// .im.ErrCode nErr = 3;
inline void PSvrAPNsNotifyAck::clear_nerr() {
  nerr_ = 0;
}
inline ::im::ErrCode PSvrAPNsNotifyAck::nerr() const {
  // @@protoc_insertion_point(field_get:im.PSvrAPNsNotifyAck.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
inline void PSvrAPNsNotifyAck::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.PSvrAPNsNotifyAck.nErr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace im

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_im_2epushSvrAPNsMsg_2eproto
