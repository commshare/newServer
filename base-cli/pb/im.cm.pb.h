// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.cm.proto

#ifndef PROTOBUF_im_2ecm_2eproto__INCLUDED
#define PROTOBUF_im_2ecm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "im.pub.pb.h"
// @@protoc_insertion_point(includes)

namespace im {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_im_2ecm_2eproto();
void protobuf_AssignDesc_im_2ecm_2eproto();
void protobuf_ShutdownFile_im_2ecm_2eproto();

class CMDeviceTokenSync;
class CMDeviceTokenSyncAck;
class CMKickoutNotification;
class CMLogin;
class CMLoginAck;
class CMLogout;
class CMLogoutAck;

// ===================================================================

class CMLogin : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.CMLogin) */ {
 public:
  CMLogin();
  virtual ~CMLogin();

  CMLogin(const CMLogin& from);

  inline CMLogin& operator=(const CMLogin& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMLogin& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMLogin* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMLogin* other);

  // implements Message ----------------------------------------------

  inline CMLogin* New() const { return New(NULL); }

  CMLogin* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMLogin& from);
  void MergeFrom(const CMLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // optional string sUserToken = 2;
  void clear_susertoken();
  static const int kSUserTokenFieldNumber = 2;
  const ::std::string& susertoken() const;
  void set_susertoken(const ::std::string& value);
  void set_susertoken(const char* value);
  void set_susertoken(const char* value, size_t size);
  ::std::string* mutable_susertoken();
  ::std::string* release_susertoken();
  void set_allocated_susertoken(::std::string* susertoken);

  // optional uint32 nDeviceType = 6;
  void clear_ndevicetype();
  static const int kNDeviceTypeFieldNumber = 6;
  ::google::protobuf::uint32 ndevicetype() const;
  void set_ndevicetype(::google::protobuf::uint32 value);

  // optional string sDeviceVersion = 7;
  void clear_sdeviceversion();
  static const int kSDeviceVersionFieldNumber = 7;
  const ::std::string& sdeviceversion() const;
  void set_sdeviceversion(const ::std::string& value);
  void set_sdeviceversion(const char* value);
  void set_sdeviceversion(const char* value, size_t size);
  ::std::string* mutable_sdeviceversion();
  ::std::string* release_sdeviceversion();
  void set_allocated_sdeviceversion(::std::string* sdeviceversion);

  // optional string sDeviceToken = 8;
  void clear_sdevicetoken();
  static const int kSDeviceTokenFieldNumber = 8;
  const ::std::string& sdevicetoken() const;
  void set_sdevicetoken(const ::std::string& value);
  void set_sdevicetoken(const char* value);
  void set_sdevicetoken(const char* value, size_t size);
  ::std::string* mutable_sdevicetoken();
  ::std::string* release_sdevicetoken();
  void set_allocated_sdevicetoken(::std::string* sdevicetoken);

  // optional string sDeviceVoipToken = 9;
  void clear_sdevicevoiptoken();
  static const int kSDeviceVoipTokenFieldNumber = 9;
  const ::std::string& sdevicevoiptoken() const;
  void set_sdevicevoiptoken(const ::std::string& value);
  void set_sdevicevoiptoken(const char* value);
  void set_sdevicevoiptoken(const char* value, size_t size);
  ::std::string* mutable_sdevicevoiptoken();
  ::std::string* release_sdevicevoiptoken();
  void set_allocated_sdevicevoiptoken(::std::string* sdevicevoiptoken);

  // @@protoc_insertion_point(class_scope:im.CMLogin)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr susertoken_;
  ::google::protobuf::internal::ArenaStringPtr sdeviceversion_;
  ::google::protobuf::internal::ArenaStringPtr sdevicetoken_;
  ::google::protobuf::internal::ArenaStringPtr sdevicevoiptoken_;
  ::google::protobuf::uint32 ndevicetype_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_im_2ecm_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_im_2ecm_2eproto();
  #endif
  friend void protobuf_AssignDesc_im_2ecm_2eproto();
  friend void protobuf_ShutdownFile_im_2ecm_2eproto();

  void InitAsDefaultInstance();
  static CMLogin* default_instance_;
};
// -------------------------------------------------------------------

class CMLoginAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.CMLoginAck) */ {
 public:
  CMLoginAck();
  virtual ~CMLoginAck();

  CMLoginAck(const CMLoginAck& from);

  inline CMLoginAck& operator=(const CMLoginAck& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMLoginAck& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMLoginAck* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMLoginAck* other);

  // implements Message ----------------------------------------------

  inline CMLoginAck* New() const { return New(NULL); }

  CMLoginAck* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMLoginAck& from);
  void MergeFrom(const CMLoginAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMLoginAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // optional .im.ErrCode nErr = 2;
  void clear_nerr();
  static const int kNErrFieldNumber = 2;
  ::im::ErrCode nerr() const;
  void set_nerr(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.CMLoginAck)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  int nerr_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_im_2ecm_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_im_2ecm_2eproto();
  #endif
  friend void protobuf_AssignDesc_im_2ecm_2eproto();
  friend void protobuf_ShutdownFile_im_2ecm_2eproto();

  void InitAsDefaultInstance();
  static CMLoginAck* default_instance_;
};
// -------------------------------------------------------------------

class CMLogout : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.CMLogout) */ {
 public:
  CMLogout();
  virtual ~CMLogout();

  CMLogout(const CMLogout& from);

  inline CMLogout& operator=(const CMLogout& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMLogout& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMLogout* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMLogout* other);

  // implements Message ----------------------------------------------

  inline CMLogout* New() const { return New(NULL); }

  CMLogout* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMLogout& from);
  void MergeFrom(const CMLogout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMLogout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // optional uint32 nDeviceType = 2;
  void clear_ndevicetype();
  static const int kNDeviceTypeFieldNumber = 2;
  ::google::protobuf::uint32 ndevicetype() const;
  void set_ndevicetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.CMLogout)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::uint32 ndevicetype_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_im_2ecm_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_im_2ecm_2eproto();
  #endif
  friend void protobuf_AssignDesc_im_2ecm_2eproto();
  friend void protobuf_ShutdownFile_im_2ecm_2eproto();

  void InitAsDefaultInstance();
  static CMLogout* default_instance_;
};
// -------------------------------------------------------------------

class CMLogoutAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.CMLogoutAck) */ {
 public:
  CMLogoutAck();
  virtual ~CMLogoutAck();

  CMLogoutAck(const CMLogoutAck& from);

  inline CMLogoutAck& operator=(const CMLogoutAck& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMLogoutAck& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMLogoutAck* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMLogoutAck* other);

  // implements Message ----------------------------------------------

  inline CMLogoutAck* New() const { return New(NULL); }

  CMLogoutAck* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMLogoutAck& from);
  void MergeFrom(const CMLogoutAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMLogoutAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .im.ErrCode nErr = 1;
  void clear_nerr();
  static const int kNErrFieldNumber = 1;
  ::im::ErrCode nerr() const;
  void set_nerr(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.CMLogoutAck)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  int nerr_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_im_2ecm_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_im_2ecm_2eproto();
  #endif
  friend void protobuf_AssignDesc_im_2ecm_2eproto();
  friend void protobuf_ShutdownFile_im_2ecm_2eproto();

  void InitAsDefaultInstance();
  static CMLogoutAck* default_instance_;
};
// -------------------------------------------------------------------

class CMDeviceTokenSync : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.CMDeviceTokenSync) */ {
 public:
  CMDeviceTokenSync();
  virtual ~CMDeviceTokenSync();

  CMDeviceTokenSync(const CMDeviceTokenSync& from);

  inline CMDeviceTokenSync& operator=(const CMDeviceTokenSync& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMDeviceTokenSync& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMDeviceTokenSync* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMDeviceTokenSync* other);

  // implements Message ----------------------------------------------

  inline CMDeviceTokenSync* New() const { return New(NULL); }

  CMDeviceTokenSync* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMDeviceTokenSync& from);
  void MergeFrom(const CMDeviceTokenSync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMDeviceTokenSync* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // optional uint32 nDeviceType = 2;
  void clear_ndevicetype();
  static const int kNDeviceTypeFieldNumber = 2;
  ::google::protobuf::uint32 ndevicetype() const;
  void set_ndevicetype(::google::protobuf::uint32 value);

  // optional string sDeviceVersion = 3;
  void clear_sdeviceversion();
  static const int kSDeviceVersionFieldNumber = 3;
  const ::std::string& sdeviceversion() const;
  void set_sdeviceversion(const ::std::string& value);
  void set_sdeviceversion(const char* value);
  void set_sdeviceversion(const char* value, size_t size);
  ::std::string* mutable_sdeviceversion();
  ::std::string* release_sdeviceversion();
  void set_allocated_sdeviceversion(::std::string* sdeviceversion);

  // optional string sDeviceToken = 4;
  void clear_sdevicetoken();
  static const int kSDeviceTokenFieldNumber = 4;
  const ::std::string& sdevicetoken() const;
  void set_sdevicetoken(const ::std::string& value);
  void set_sdevicetoken(const char* value);
  void set_sdevicetoken(const char* value, size_t size);
  ::std::string* mutable_sdevicetoken();
  ::std::string* release_sdevicetoken();
  void set_allocated_sdevicetoken(::std::string* sdevicetoken);

  // optional uint32 nDeviceTokenType = 5;
  void clear_ndevicetokentype();
  static const int kNDeviceTokenTypeFieldNumber = 5;
  ::google::protobuf::uint32 ndevicetokentype() const;
  void set_ndevicetokentype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.CMDeviceTokenSync)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sdeviceversion_;
  ::google::protobuf::uint32 ndevicetype_;
  ::google::protobuf::uint32 ndevicetokentype_;
  ::google::protobuf::internal::ArenaStringPtr sdevicetoken_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_im_2ecm_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_im_2ecm_2eproto();
  #endif
  friend void protobuf_AssignDesc_im_2ecm_2eproto();
  friend void protobuf_ShutdownFile_im_2ecm_2eproto();

  void InitAsDefaultInstance();
  static CMDeviceTokenSync* default_instance_;
};
// -------------------------------------------------------------------

class CMDeviceTokenSyncAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.CMDeviceTokenSyncAck) */ {
 public:
  CMDeviceTokenSyncAck();
  virtual ~CMDeviceTokenSyncAck();

  CMDeviceTokenSyncAck(const CMDeviceTokenSyncAck& from);

  inline CMDeviceTokenSyncAck& operator=(const CMDeviceTokenSyncAck& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMDeviceTokenSyncAck& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMDeviceTokenSyncAck* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMDeviceTokenSyncAck* other);

  // implements Message ----------------------------------------------

  inline CMDeviceTokenSyncAck* New() const { return New(NULL); }

  CMDeviceTokenSyncAck* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMDeviceTokenSyncAck& from);
  void MergeFrom(const CMDeviceTokenSyncAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMDeviceTokenSyncAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // optional .im.ErrCode nErr = 2;
  void clear_nerr();
  static const int kNErrFieldNumber = 2;
  ::im::ErrCode nerr() const;
  void set_nerr(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.CMDeviceTokenSyncAck)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  int nerr_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_im_2ecm_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_im_2ecm_2eproto();
  #endif
  friend void protobuf_AssignDesc_im_2ecm_2eproto();
  friend void protobuf_ShutdownFile_im_2ecm_2eproto();

  void InitAsDefaultInstance();
  static CMDeviceTokenSyncAck* default_instance_;
};
// -------------------------------------------------------------------

class CMKickoutNotification : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.CMKickoutNotification) */ {
 public:
  CMKickoutNotification();
  virtual ~CMKickoutNotification();

  CMKickoutNotification(const CMKickoutNotification& from);

  inline CMKickoutNotification& operator=(const CMKickoutNotification& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMKickoutNotification& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMKickoutNotification* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMKickoutNotification* other);

  // implements Message ----------------------------------------------

  inline CMKickoutNotification* New() const { return New(NULL); }

  CMKickoutNotification* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMKickoutNotification& from);
  void MergeFrom(const CMKickoutNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMKickoutNotification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // optional uint32 nDeviceType = 2;
  void clear_ndevicetype();
  static const int kNDeviceTypeFieldNumber = 2;
  ::google::protobuf::uint32 ndevicetype() const;
  void set_ndevicetype(::google::protobuf::uint32 value);

  // optional string ip = 3;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.CMKickoutNotification)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint32 ndevicetype_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_im_2ecm_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_im_2ecm_2eproto();
  #endif
  friend void protobuf_AssignDesc_im_2ecm_2eproto();
  friend void protobuf_ShutdownFile_im_2ecm_2eproto();

  void InitAsDefaultInstance();
  static CMKickoutNotification* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CMLogin

// optional string sUserId = 1;
inline void CMLogin::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLogin::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMLogin.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLogin::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLogin.sUserId)
}
inline void CMLogin::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLogin.sUserId)
}
inline void CMLogin::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLogin.sUserId)
}
inline ::std::string* CMLogin::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLogin.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLogin::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMLogin.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLogin::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMLogin.sUserId)
}

// optional string sUserToken = 2;
inline void CMLogin::clear_susertoken() {
  susertoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLogin::susertoken() const {
  // @@protoc_insertion_point(field_get:im.CMLogin.sUserToken)
  return susertoken_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLogin::set_susertoken(const ::std::string& value) {
  
  susertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLogin.sUserToken)
}
inline void CMLogin::set_susertoken(const char* value) {
  
  susertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLogin.sUserToken)
}
inline void CMLogin::set_susertoken(const char* value, size_t size) {
  
  susertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLogin.sUserToken)
}
inline ::std::string* CMLogin::mutable_susertoken() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLogin.sUserToken)
  return susertoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLogin::release_susertoken() {
  // @@protoc_insertion_point(field_release:im.CMLogin.sUserToken)
  
  return susertoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLogin::set_allocated_susertoken(::std::string* susertoken) {
  if (susertoken != NULL) {
    
  } else {
    
  }
  susertoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), susertoken);
  // @@protoc_insertion_point(field_set_allocated:im.CMLogin.sUserToken)
}

// optional uint32 nDeviceType = 6;
inline void CMLogin::clear_ndevicetype() {
  ndevicetype_ = 0u;
}
inline ::google::protobuf::uint32 CMLogin::ndevicetype() const {
  // @@protoc_insertion_point(field_get:im.CMLogin.nDeviceType)
  return ndevicetype_;
}
inline void CMLogin::set_ndevicetype(::google::protobuf::uint32 value) {
  
  ndevicetype_ = value;
  // @@protoc_insertion_point(field_set:im.CMLogin.nDeviceType)
}

// optional string sDeviceVersion = 7;
inline void CMLogin::clear_sdeviceversion() {
  sdeviceversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLogin::sdeviceversion() const {
  // @@protoc_insertion_point(field_get:im.CMLogin.sDeviceVersion)
  return sdeviceversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLogin::set_sdeviceversion(const ::std::string& value) {
  
  sdeviceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLogin.sDeviceVersion)
}
inline void CMLogin::set_sdeviceversion(const char* value) {
  
  sdeviceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLogin.sDeviceVersion)
}
inline void CMLogin::set_sdeviceversion(const char* value, size_t size) {
  
  sdeviceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLogin.sDeviceVersion)
}
inline ::std::string* CMLogin::mutable_sdeviceversion() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLogin.sDeviceVersion)
  return sdeviceversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLogin::release_sdeviceversion() {
  // @@protoc_insertion_point(field_release:im.CMLogin.sDeviceVersion)
  
  return sdeviceversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLogin::set_allocated_sdeviceversion(::std::string* sdeviceversion) {
  if (sdeviceversion != NULL) {
    
  } else {
    
  }
  sdeviceversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdeviceversion);
  // @@protoc_insertion_point(field_set_allocated:im.CMLogin.sDeviceVersion)
}

// optional string sDeviceToken = 8;
inline void CMLogin::clear_sdevicetoken() {
  sdevicetoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLogin::sdevicetoken() const {
  // @@protoc_insertion_point(field_get:im.CMLogin.sDeviceToken)
  return sdevicetoken_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLogin::set_sdevicetoken(const ::std::string& value) {
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLogin.sDeviceToken)
}
inline void CMLogin::set_sdevicetoken(const char* value) {
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLogin.sDeviceToken)
}
inline void CMLogin::set_sdevicetoken(const char* value, size_t size) {
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLogin.sDeviceToken)
}
inline ::std::string* CMLogin::mutable_sdevicetoken() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLogin.sDeviceToken)
  return sdevicetoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLogin::release_sdevicetoken() {
  // @@protoc_insertion_point(field_release:im.CMLogin.sDeviceToken)
  
  return sdevicetoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLogin::set_allocated_sdevicetoken(::std::string* sdevicetoken) {
  if (sdevicetoken != NULL) {
    
  } else {
    
  }
  sdevicetoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdevicetoken);
  // @@protoc_insertion_point(field_set_allocated:im.CMLogin.sDeviceToken)
}

// optional string sDeviceVoipToken = 9;
inline void CMLogin::clear_sdevicevoiptoken() {
  sdevicevoiptoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLogin::sdevicevoiptoken() const {
  // @@protoc_insertion_point(field_get:im.CMLogin.sDeviceVoipToken)
  return sdevicevoiptoken_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLogin::set_sdevicevoiptoken(const ::std::string& value) {
  
  sdevicevoiptoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLogin.sDeviceVoipToken)
}
inline void CMLogin::set_sdevicevoiptoken(const char* value) {
  
  sdevicevoiptoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLogin.sDeviceVoipToken)
}
inline void CMLogin::set_sdevicevoiptoken(const char* value, size_t size) {
  
  sdevicevoiptoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLogin.sDeviceVoipToken)
}
inline ::std::string* CMLogin::mutable_sdevicevoiptoken() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLogin.sDeviceVoipToken)
  return sdevicevoiptoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLogin::release_sdevicevoiptoken() {
  // @@protoc_insertion_point(field_release:im.CMLogin.sDeviceVoipToken)
  
  return sdevicevoiptoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLogin::set_allocated_sdevicevoiptoken(::std::string* sdevicevoiptoken) {
  if (sdevicevoiptoken != NULL) {
    
  } else {
    
  }
  sdevicevoiptoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdevicevoiptoken);
  // @@protoc_insertion_point(field_set_allocated:im.CMLogin.sDeviceVoipToken)
}

// -------------------------------------------------------------------

// CMLoginAck

// optional string sUserId = 1;
inline void CMLoginAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLoginAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMLoginAck.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLoginAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLoginAck.sUserId)
}
inline void CMLoginAck::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLoginAck.sUserId)
}
inline void CMLoginAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLoginAck.sUserId)
}
inline ::std::string* CMLoginAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLoginAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLoginAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMLoginAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLoginAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMLoginAck.sUserId)
}

// optional .im.ErrCode nErr = 2;
inline void CMLoginAck::clear_nerr() {
  nerr_ = 0;
}
inline ::im::ErrCode CMLoginAck::nerr() const {
  // @@protoc_insertion_point(field_get:im.CMLoginAck.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
inline void CMLoginAck::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.CMLoginAck.nErr)
}

// -------------------------------------------------------------------

// CMLogout

// optional string sUserId = 1;
inline void CMLogout::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLogout::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMLogout.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLogout::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLogout.sUserId)
}
inline void CMLogout::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLogout.sUserId)
}
inline void CMLogout::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLogout.sUserId)
}
inline ::std::string* CMLogout::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLogout.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLogout::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMLogout.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLogout::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMLogout.sUserId)
}

// optional uint32 nDeviceType = 2;
inline void CMLogout::clear_ndevicetype() {
  ndevicetype_ = 0u;
}
inline ::google::protobuf::uint32 CMLogout::ndevicetype() const {
  // @@protoc_insertion_point(field_get:im.CMLogout.nDeviceType)
  return ndevicetype_;
}
inline void CMLogout::set_ndevicetype(::google::protobuf::uint32 value) {
  
  ndevicetype_ = value;
  // @@protoc_insertion_point(field_set:im.CMLogout.nDeviceType)
}

// -------------------------------------------------------------------

// CMLogoutAck

// optional .im.ErrCode nErr = 1;
inline void CMLogoutAck::clear_nerr() {
  nerr_ = 0;
}
inline ::im::ErrCode CMLogoutAck::nerr() const {
  // @@protoc_insertion_point(field_get:im.CMLogoutAck.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
inline void CMLogoutAck::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.CMLogoutAck.nErr)
}

// -------------------------------------------------------------------

// CMDeviceTokenSync

// optional string sUserId = 1;
inline void CMDeviceTokenSync::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMDeviceTokenSync::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMDeviceTokenSync.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMDeviceTokenSync::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMDeviceTokenSync.sUserId)
}
inline void CMDeviceTokenSync::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMDeviceTokenSync.sUserId)
}
inline void CMDeviceTokenSync::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMDeviceTokenSync.sUserId)
}
inline ::std::string* CMDeviceTokenSync::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMDeviceTokenSync.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMDeviceTokenSync::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMDeviceTokenSync.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMDeviceTokenSync::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMDeviceTokenSync.sUserId)
}

// optional uint32 nDeviceType = 2;
inline void CMDeviceTokenSync::clear_ndevicetype() {
  ndevicetype_ = 0u;
}
inline ::google::protobuf::uint32 CMDeviceTokenSync::ndevicetype() const {
  // @@protoc_insertion_point(field_get:im.CMDeviceTokenSync.nDeviceType)
  return ndevicetype_;
}
inline void CMDeviceTokenSync::set_ndevicetype(::google::protobuf::uint32 value) {
  
  ndevicetype_ = value;
  // @@protoc_insertion_point(field_set:im.CMDeviceTokenSync.nDeviceType)
}

// optional string sDeviceVersion = 3;
inline void CMDeviceTokenSync::clear_sdeviceversion() {
  sdeviceversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMDeviceTokenSync::sdeviceversion() const {
  // @@protoc_insertion_point(field_get:im.CMDeviceTokenSync.sDeviceVersion)
  return sdeviceversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMDeviceTokenSync::set_sdeviceversion(const ::std::string& value) {
  
  sdeviceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMDeviceTokenSync.sDeviceVersion)
}
inline void CMDeviceTokenSync::set_sdeviceversion(const char* value) {
  
  sdeviceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMDeviceTokenSync.sDeviceVersion)
}
inline void CMDeviceTokenSync::set_sdeviceversion(const char* value, size_t size) {
  
  sdeviceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMDeviceTokenSync.sDeviceVersion)
}
inline ::std::string* CMDeviceTokenSync::mutable_sdeviceversion() {
  
  // @@protoc_insertion_point(field_mutable:im.CMDeviceTokenSync.sDeviceVersion)
  return sdeviceversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMDeviceTokenSync::release_sdeviceversion() {
  // @@protoc_insertion_point(field_release:im.CMDeviceTokenSync.sDeviceVersion)
  
  return sdeviceversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMDeviceTokenSync::set_allocated_sdeviceversion(::std::string* sdeviceversion) {
  if (sdeviceversion != NULL) {
    
  } else {
    
  }
  sdeviceversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdeviceversion);
  // @@protoc_insertion_point(field_set_allocated:im.CMDeviceTokenSync.sDeviceVersion)
}

// optional string sDeviceToken = 4;
inline void CMDeviceTokenSync::clear_sdevicetoken() {
  sdevicetoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMDeviceTokenSync::sdevicetoken() const {
  // @@protoc_insertion_point(field_get:im.CMDeviceTokenSync.sDeviceToken)
  return sdevicetoken_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMDeviceTokenSync::set_sdevicetoken(const ::std::string& value) {
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMDeviceTokenSync.sDeviceToken)
}
inline void CMDeviceTokenSync::set_sdevicetoken(const char* value) {
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMDeviceTokenSync.sDeviceToken)
}
inline void CMDeviceTokenSync::set_sdevicetoken(const char* value, size_t size) {
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMDeviceTokenSync.sDeviceToken)
}
inline ::std::string* CMDeviceTokenSync::mutable_sdevicetoken() {
  
  // @@protoc_insertion_point(field_mutable:im.CMDeviceTokenSync.sDeviceToken)
  return sdevicetoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMDeviceTokenSync::release_sdevicetoken() {
  // @@protoc_insertion_point(field_release:im.CMDeviceTokenSync.sDeviceToken)
  
  return sdevicetoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMDeviceTokenSync::set_allocated_sdevicetoken(::std::string* sdevicetoken) {
  if (sdevicetoken != NULL) {
    
  } else {
    
  }
  sdevicetoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdevicetoken);
  // @@protoc_insertion_point(field_set_allocated:im.CMDeviceTokenSync.sDeviceToken)
}

// optional uint32 nDeviceTokenType = 5;
inline void CMDeviceTokenSync::clear_ndevicetokentype() {
  ndevicetokentype_ = 0u;
}
inline ::google::protobuf::uint32 CMDeviceTokenSync::ndevicetokentype() const {
  // @@protoc_insertion_point(field_get:im.CMDeviceTokenSync.nDeviceTokenType)
  return ndevicetokentype_;
}
inline void CMDeviceTokenSync::set_ndevicetokentype(::google::protobuf::uint32 value) {
  
  ndevicetokentype_ = value;
  // @@protoc_insertion_point(field_set:im.CMDeviceTokenSync.nDeviceTokenType)
}

// -------------------------------------------------------------------

// CMDeviceTokenSyncAck

// optional string sUserId = 1;
inline void CMDeviceTokenSyncAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMDeviceTokenSyncAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMDeviceTokenSyncAck.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMDeviceTokenSyncAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMDeviceTokenSyncAck.sUserId)
}
inline void CMDeviceTokenSyncAck::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMDeviceTokenSyncAck.sUserId)
}
inline void CMDeviceTokenSyncAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMDeviceTokenSyncAck.sUserId)
}
inline ::std::string* CMDeviceTokenSyncAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMDeviceTokenSyncAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMDeviceTokenSyncAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMDeviceTokenSyncAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMDeviceTokenSyncAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMDeviceTokenSyncAck.sUserId)
}

// optional .im.ErrCode nErr = 2;
inline void CMDeviceTokenSyncAck::clear_nerr() {
  nerr_ = 0;
}
inline ::im::ErrCode CMDeviceTokenSyncAck::nerr() const {
  // @@protoc_insertion_point(field_get:im.CMDeviceTokenSyncAck.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
inline void CMDeviceTokenSyncAck::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.CMDeviceTokenSyncAck.nErr)
}

// -------------------------------------------------------------------

// CMKickoutNotification

// optional string sUserId = 1;
inline void CMKickoutNotification::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMKickoutNotification::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMKickoutNotification.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMKickoutNotification::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMKickoutNotification.sUserId)
}
inline void CMKickoutNotification::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMKickoutNotification.sUserId)
}
inline void CMKickoutNotification::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMKickoutNotification.sUserId)
}
inline ::std::string* CMKickoutNotification::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMKickoutNotification.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMKickoutNotification::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMKickoutNotification.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMKickoutNotification::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMKickoutNotification.sUserId)
}

// optional uint32 nDeviceType = 2;
inline void CMKickoutNotification::clear_ndevicetype() {
  ndevicetype_ = 0u;
}
inline ::google::protobuf::uint32 CMKickoutNotification::ndevicetype() const {
  // @@protoc_insertion_point(field_get:im.CMKickoutNotification.nDeviceType)
  return ndevicetype_;
}
inline void CMKickoutNotification::set_ndevicetype(::google::protobuf::uint32 value) {
  
  ndevicetype_ = value;
  // @@protoc_insertion_point(field_set:im.CMKickoutNotification.nDeviceType)
}

// optional string ip = 3;
inline void CMKickoutNotification::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMKickoutNotification::ip() const {
  // @@protoc_insertion_point(field_get:im.CMKickoutNotification.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMKickoutNotification::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMKickoutNotification.ip)
}
inline void CMKickoutNotification::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMKickoutNotification.ip)
}
inline void CMKickoutNotification::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMKickoutNotification.ip)
}
inline ::std::string* CMKickoutNotification::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:im.CMKickoutNotification.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMKickoutNotification::release_ip() {
  // @@protoc_insertion_point(field_release:im.CMKickoutNotification.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMKickoutNotification::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:im.CMKickoutNotification.ip)
}

// optional uint32 port = 4;
inline void CMKickoutNotification::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 CMKickoutNotification::port() const {
  // @@protoc_insertion_point(field_get:im.CMKickoutNotification.port)
  return port_;
}
inline void CMKickoutNotification::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:im.CMKickoutNotification.port)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace im

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_im_2ecm_2eproto__INCLUDED
