// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.push.android.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "im.push.android.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace im {

void protobuf_ShutdownFile_im_2epush_2eandroid_2eproto() {
  delete ANDPushMsg::default_instance_;
  delete ANDPushMsgAck::default_instance_;
  delete ANDNotify::default_instance_;
  delete ANDNotifyAck::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_im_2epush_2eandroid_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_im_2epush_2eandroid_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_im_2epush_2eandroid_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::im::protobuf_AddDesc_im_2epub_2eproto();
  ANDPushMsg::default_instance_ = new ANDPushMsg();
  ANDPushMsgAck::default_instance_ = new ANDPushMsgAck();
  ANDNotify::default_instance_ = new ANDNotify();
  ANDNotifyAck::default_instance_ = new ANDNotifyAck();
  ANDPushMsg::default_instance_->InitAsDefaultInstance();
  ANDPushMsgAck::default_instance_->InitAsDefaultInstance();
  ANDNotify::default_instance_->InitAsDefaultInstance();
  ANDNotifyAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_im_2epush_2eandroid_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_im_2epush_2eandroid_2eproto_once_);
void protobuf_AddDesc_im_2epush_2eandroid_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_im_2epush_2eandroid_2eproto_once_,
                 &protobuf_AddDesc_im_2epush_2eandroid_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_im_2epush_2eandroid_2eproto {
  StaticDescriptorInitializer_im_2epush_2eandroid_2eproto() {
    protobuf_AddDesc_im_2epush_2eandroid_2eproto();
  }
} static_descriptor_initializer_im_2epush_2eandroid_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ANDPushMsg::kEMsgTypeFieldNumber;
const int ANDPushMsg::kSMsgIdFieldNumber;
const int ANDPushMsg::kNGroupIdFieldNumber;
const int ANDPushMsg::kSTitleFieldNumber;
const int ANDPushMsg::kSBodyFieldNumber;
const int ANDPushMsg::kSToIdFieldNumber;
const int ANDPushMsg::kSDiveceTokenFieldNumber;
const int ANDPushMsg::kEDiveceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ANDPushMsg::ANDPushMsg()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.ANDPushMsg)
}

void ANDPushMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ANDPushMsg::ANDPushMsg(const ANDPushMsg& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.ANDPushMsg)
}

void ANDPushMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  emsgtype_ = 0;
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ngroupid_ = 0u;
  stitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbody_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdivece_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  edivece_type_ = 0;
}

ANDPushMsg::~ANDPushMsg() {
  // @@protoc_insertion_point(destructor:im.ANDPushMsg)
  SharedDtor();
}

void ANDPushMsg::SharedDtor() {
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbody_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdivece_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ANDPushMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ANDPushMsg& ANDPushMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2epush_2eandroid_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2epush_2eandroid_2eproto();
#endif
  return *default_instance_;
}

ANDPushMsg* ANDPushMsg::default_instance_ = NULL;

ANDPushMsg* ANDPushMsg::New(::google::protobuf::Arena* arena) const {
  ANDPushMsg* n = new ANDPushMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ANDPushMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:im.ANDPushMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ANDPushMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ANDPushMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(emsgtype_, ngroupid_);
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbody_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdivece_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  edivece_type_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool ANDPushMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.ANDPushMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .im.MsgType eMsgType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_emsgtype(static_cast< ::im::MsgType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 2;
      case 2: {
        if (tag == 18) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.ANDPushMsg.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nGroupId;
        break;
      }

      // optional uint32 nGroupId = 3;
      case 3: {
        if (tag == 24) {
         parse_nGroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ngroupid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sTitle;
        break;
      }

      // optional string sTitle = 4;
      case 4: {
        if (tag == 34) {
         parse_sTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stitle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stitle().data(), this->stitle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.ANDPushMsg.sTitle"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sBody;
        break;
      }

      // optional string sBody = 5;
      case 5: {
        if (tag == 42) {
         parse_sBody:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sbody()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sbody().data(), this->sbody().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.ANDPushMsg.sBody"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sToId;
        break;
      }

      // optional string sToId = 6;
      case 6: {
        if (tag == 50) {
         parse_sToId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stoid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stoid().data(), this->stoid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.ANDPushMsg.sToId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sDivece_Token;
        break;
      }

      // optional string sDivece_Token = 7;
      case 7: {
        if (tag == 58) {
         parse_sDivece_Token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdivece_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sdivece_token().data(), this->sdivece_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.ANDPushMsg.sDivece_Token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_eDivece_type;
        break;
      }

      // optional .im.DiveceType eDivece_type = 8;
      case 8: {
        if (tag == 64) {
         parse_eDivece_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_edivece_type(static_cast< ::im::DiveceType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.ANDPushMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.ANDPushMsg)
  return false;
#undef DO_
}

void ANDPushMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.ANDPushMsg)
  // optional .im.MsgType eMsgType = 1;
  if (this->emsgtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->emsgtype(), output);
  }

  // optional string sMsgId = 2;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.ANDPushMsg.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->smsgid(), output);
  }

  // optional uint32 nGroupId = 3;
  if (this->ngroupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ngroupid(), output);
  }

  // optional string sTitle = 4;
  if (this->stitle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stitle().data(), this->stitle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.ANDPushMsg.sTitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stitle(), output);
  }

  // optional string sBody = 5;
  if (this->sbody().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sbody().data(), this->sbody().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.ANDPushMsg.sBody");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sbody(), output);
  }

  // optional string sToId = 6;
  if (this->stoid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stoid().data(), this->stoid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.ANDPushMsg.sToId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->stoid(), output);
  }

  // optional string sDivece_Token = 7;
  if (this->sdivece_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sdivece_token().data(), this->sdivece_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.ANDPushMsg.sDivece_Token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sdivece_token(), output);
  }

  // optional .im.DiveceType eDivece_type = 8;
  if (this->edivece_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->edivece_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.ANDPushMsg)
}

int ANDPushMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.ANDPushMsg)
  int total_size = 0;

  // optional .im.MsgType eMsgType = 1;
  if (this->emsgtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->emsgtype());
  }

  // optional string sMsgId = 2;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional uint32 nGroupId = 3;
  if (this->ngroupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ngroupid());
  }

  // optional string sTitle = 4;
  if (this->stitle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stitle());
  }

  // optional string sBody = 5;
  if (this->sbody().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sbody());
  }

  // optional string sToId = 6;
  if (this->stoid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stoid());
  }

  // optional string sDivece_Token = 7;
  if (this->sdivece_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sdivece_token());
  }

  // optional .im.DiveceType eDivece_type = 8;
  if (this->edivece_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->edivece_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ANDPushMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ANDPushMsg*>(&from));
}

void ANDPushMsg::MergeFrom(const ANDPushMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.ANDPushMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.emsgtype() != 0) {
    set_emsgtype(from.emsgtype());
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.ngroupid() != 0) {
    set_ngroupid(from.ngroupid());
  }
  if (from.stitle().size() > 0) {

    stitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stitle_);
  }
  if (from.sbody().size() > 0) {

    sbody_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbody_);
  }
  if (from.stoid().size() > 0) {

    stoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stoid_);
  }
  if (from.sdivece_token().size() > 0) {

    sdivece_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdivece_token_);
  }
  if (from.edivece_type() != 0) {
    set_edivece_type(from.edivece_type());
  }
}

void ANDPushMsg::CopyFrom(const ANDPushMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.ANDPushMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ANDPushMsg::IsInitialized() const {

  return true;
}

void ANDPushMsg::Swap(ANDPushMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ANDPushMsg::InternalSwap(ANDPushMsg* other) {
  std::swap(emsgtype_, other->emsgtype_);
  smsgid_.Swap(&other->smsgid_);
  std::swap(ngroupid_, other->ngroupid_);
  stitle_.Swap(&other->stitle_);
  sbody_.Swap(&other->sbody_);
  stoid_.Swap(&other->stoid_);
  sdivece_token_.Swap(&other->sdivece_token_);
  std::swap(edivece_type_, other->edivece_type_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ANDPushMsg::GetTypeName() const {
  return "im.ANDPushMsg";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ANDPushMsg

// optional .im.MsgType eMsgType = 1;
void ANDPushMsg::clear_emsgtype() {
  emsgtype_ = 0;
}
 ::im::MsgType ANDPushMsg::emsgtype() const {
  // @@protoc_insertion_point(field_get:im.ANDPushMsg.eMsgType)
  return static_cast< ::im::MsgType >(emsgtype_);
}
 void ANDPushMsg::set_emsgtype(::im::MsgType value) {
  
  emsgtype_ = value;
  // @@protoc_insertion_point(field_set:im.ANDPushMsg.eMsgType)
}

// optional string sMsgId = 2;
void ANDPushMsg::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ANDPushMsg::smsgid() const {
  // @@protoc_insertion_point(field_get:im.ANDPushMsg.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ANDPushMsg::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.ANDPushMsg.sMsgId)
}
 void ANDPushMsg::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.ANDPushMsg.sMsgId)
}
 void ANDPushMsg::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.ANDPushMsg.sMsgId)
}
 ::std::string* ANDPushMsg::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.ANDPushMsg.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ANDPushMsg::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.ANDPushMsg.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ANDPushMsg::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.ANDPushMsg.sMsgId)
}

// optional uint32 nGroupId = 3;
void ANDPushMsg::clear_ngroupid() {
  ngroupid_ = 0u;
}
 ::google::protobuf::uint32 ANDPushMsg::ngroupid() const {
  // @@protoc_insertion_point(field_get:im.ANDPushMsg.nGroupId)
  return ngroupid_;
}
 void ANDPushMsg::set_ngroupid(::google::protobuf::uint32 value) {
  
  ngroupid_ = value;
  // @@protoc_insertion_point(field_set:im.ANDPushMsg.nGroupId)
}

// optional string sTitle = 4;
void ANDPushMsg::clear_stitle() {
  stitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ANDPushMsg::stitle() const {
  // @@protoc_insertion_point(field_get:im.ANDPushMsg.sTitle)
  return stitle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ANDPushMsg::set_stitle(const ::std::string& value) {
  
  stitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.ANDPushMsg.sTitle)
}
 void ANDPushMsg::set_stitle(const char* value) {
  
  stitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.ANDPushMsg.sTitle)
}
 void ANDPushMsg::set_stitle(const char* value, size_t size) {
  
  stitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.ANDPushMsg.sTitle)
}
 ::std::string* ANDPushMsg::mutable_stitle() {
  
  // @@protoc_insertion_point(field_mutable:im.ANDPushMsg.sTitle)
  return stitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ANDPushMsg::release_stitle() {
  // @@protoc_insertion_point(field_release:im.ANDPushMsg.sTitle)
  
  return stitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ANDPushMsg::set_allocated_stitle(::std::string* stitle) {
  if (stitle != NULL) {
    
  } else {
    
  }
  stitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stitle);
  // @@protoc_insertion_point(field_set_allocated:im.ANDPushMsg.sTitle)
}

// optional string sBody = 5;
void ANDPushMsg::clear_sbody() {
  sbody_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ANDPushMsg::sbody() const {
  // @@protoc_insertion_point(field_get:im.ANDPushMsg.sBody)
  return sbody_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ANDPushMsg::set_sbody(const ::std::string& value) {
  
  sbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.ANDPushMsg.sBody)
}
 void ANDPushMsg::set_sbody(const char* value) {
  
  sbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.ANDPushMsg.sBody)
}
 void ANDPushMsg::set_sbody(const char* value, size_t size) {
  
  sbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.ANDPushMsg.sBody)
}
 ::std::string* ANDPushMsg::mutable_sbody() {
  
  // @@protoc_insertion_point(field_mutable:im.ANDPushMsg.sBody)
  return sbody_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ANDPushMsg::release_sbody() {
  // @@protoc_insertion_point(field_release:im.ANDPushMsg.sBody)
  
  return sbody_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ANDPushMsg::set_allocated_sbody(::std::string* sbody) {
  if (sbody != NULL) {
    
  } else {
    
  }
  sbody_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sbody);
  // @@protoc_insertion_point(field_set_allocated:im.ANDPushMsg.sBody)
}

// optional string sToId = 6;
void ANDPushMsg::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ANDPushMsg::stoid() const {
  // @@protoc_insertion_point(field_get:im.ANDPushMsg.sToId)
  return stoid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ANDPushMsg::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.ANDPushMsg.sToId)
}
 void ANDPushMsg::set_stoid(const char* value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.ANDPushMsg.sToId)
}
 void ANDPushMsg::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.ANDPushMsg.sToId)
}
 ::std::string* ANDPushMsg::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.ANDPushMsg.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ANDPushMsg::release_stoid() {
  // @@protoc_insertion_point(field_release:im.ANDPushMsg.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ANDPushMsg::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.ANDPushMsg.sToId)
}

// optional string sDivece_Token = 7;
void ANDPushMsg::clear_sdivece_token() {
  sdivece_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ANDPushMsg::sdivece_token() const {
  // @@protoc_insertion_point(field_get:im.ANDPushMsg.sDivece_Token)
  return sdivece_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ANDPushMsg::set_sdivece_token(const ::std::string& value) {
  
  sdivece_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.ANDPushMsg.sDivece_Token)
}
 void ANDPushMsg::set_sdivece_token(const char* value) {
  
  sdivece_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.ANDPushMsg.sDivece_Token)
}
 void ANDPushMsg::set_sdivece_token(const char* value, size_t size) {
  
  sdivece_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.ANDPushMsg.sDivece_Token)
}
 ::std::string* ANDPushMsg::mutable_sdivece_token() {
  
  // @@protoc_insertion_point(field_mutable:im.ANDPushMsg.sDivece_Token)
  return sdivece_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ANDPushMsg::release_sdivece_token() {
  // @@protoc_insertion_point(field_release:im.ANDPushMsg.sDivece_Token)
  
  return sdivece_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ANDPushMsg::set_allocated_sdivece_token(::std::string* sdivece_token) {
  if (sdivece_token != NULL) {
    
  } else {
    
  }
  sdivece_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdivece_token);
  // @@protoc_insertion_point(field_set_allocated:im.ANDPushMsg.sDivece_Token)
}

// optional .im.DiveceType eDivece_type = 8;
void ANDPushMsg::clear_edivece_type() {
  edivece_type_ = 0;
}
 ::im::DiveceType ANDPushMsg::edivece_type() const {
  // @@protoc_insertion_point(field_get:im.ANDPushMsg.eDivece_type)
  return static_cast< ::im::DiveceType >(edivece_type_);
}
 void ANDPushMsg::set_edivece_type(::im::DiveceType value) {
  
  edivece_type_ = value;
  // @@protoc_insertion_point(field_set:im.ANDPushMsg.eDivece_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ANDPushMsgAck::kSMsgIdFieldNumber;
const int ANDPushMsgAck::kNErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ANDPushMsgAck::ANDPushMsgAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.ANDPushMsgAck)
}

void ANDPushMsgAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ANDPushMsgAck::ANDPushMsgAck(const ANDPushMsgAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.ANDPushMsgAck)
}

void ANDPushMsgAck::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
}

ANDPushMsgAck::~ANDPushMsgAck() {
  // @@protoc_insertion_point(destructor:im.ANDPushMsgAck)
  SharedDtor();
}

void ANDPushMsgAck::SharedDtor() {
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ANDPushMsgAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ANDPushMsgAck& ANDPushMsgAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2epush_2eandroid_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2epush_2eandroid_2eproto();
#endif
  return *default_instance_;
}

ANDPushMsgAck* ANDPushMsgAck::default_instance_ = NULL;

ANDPushMsgAck* ANDPushMsgAck::New(::google::protobuf::Arena* arena) const {
  ANDPushMsgAck* n = new ANDPushMsgAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ANDPushMsgAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.ANDPushMsgAck)
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
}

bool ANDPushMsgAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.ANDPushMsgAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sMsgId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.ANDPushMsgAck.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nErr;
        break;
      }

      // optional .im.ErrCode nErr = 2;
      case 2: {
        if (tag == 16) {
         parse_nErr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nerr(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.ANDPushMsgAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.ANDPushMsgAck)
  return false;
#undef DO_
}

void ANDPushMsgAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.ANDPushMsgAck)
  // optional string sMsgId = 1;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.ANDPushMsgAck.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->smsgid(), output);
  }

  // optional .im.ErrCode nErr = 2;
  if (this->nerr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->nerr(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.ANDPushMsgAck)
}

int ANDPushMsgAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.ANDPushMsgAck)
  int total_size = 0;

  // optional string sMsgId = 1;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional .im.ErrCode nErr = 2;
  if (this->nerr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nerr());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ANDPushMsgAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ANDPushMsgAck*>(&from));
}

void ANDPushMsgAck::MergeFrom(const ANDPushMsgAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.ANDPushMsgAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.nerr() != 0) {
    set_nerr(from.nerr());
  }
}

void ANDPushMsgAck::CopyFrom(const ANDPushMsgAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.ANDPushMsgAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ANDPushMsgAck::IsInitialized() const {

  return true;
}

void ANDPushMsgAck::Swap(ANDPushMsgAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ANDPushMsgAck::InternalSwap(ANDPushMsgAck* other) {
  smsgid_.Swap(&other->smsgid_);
  std::swap(nerr_, other->nerr_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ANDPushMsgAck::GetTypeName() const {
  return "im.ANDPushMsgAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ANDPushMsgAck

// optional string sMsgId = 1;
void ANDPushMsgAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ANDPushMsgAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.ANDPushMsgAck.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ANDPushMsgAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.ANDPushMsgAck.sMsgId)
}
 void ANDPushMsgAck::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.ANDPushMsgAck.sMsgId)
}
 void ANDPushMsgAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.ANDPushMsgAck.sMsgId)
}
 ::std::string* ANDPushMsgAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.ANDPushMsgAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ANDPushMsgAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.ANDPushMsgAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ANDPushMsgAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.ANDPushMsgAck.sMsgId)
}

// optional .im.ErrCode nErr = 2;
void ANDPushMsgAck::clear_nerr() {
  nerr_ = 0;
}
 ::im::ErrCode ANDPushMsgAck::nerr() const {
  // @@protoc_insertion_point(field_get:im.ANDPushMsgAck.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
 void ANDPushMsgAck::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.ANDPushMsgAck.nErr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ANDNotify::kSMsgIdFieldNumber;
const int ANDNotify::kSToIdFieldNumber;
const int ANDNotify::kNErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ANDNotify::ANDNotify()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.ANDNotify)
}

void ANDNotify::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ANDNotify::ANDNotify(const ANDNotify& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.ANDNotify)
}

void ANDNotify::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
}

ANDNotify::~ANDNotify() {
  // @@protoc_insertion_point(destructor:im.ANDNotify)
  SharedDtor();
}

void ANDNotify::SharedDtor() {
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ANDNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ANDNotify& ANDNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2epush_2eandroid_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2epush_2eandroid_2eproto();
#endif
  return *default_instance_;
}

ANDNotify* ANDNotify::default_instance_ = NULL;

ANDNotify* ANDNotify::New(::google::protobuf::Arena* arena) const {
  ANDNotify* n = new ANDNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ANDNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:im.ANDNotify)
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
}

bool ANDNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.ANDNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sMsgId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.ANDNotify.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sToId;
        break;
      }

      // optional string sToId = 2;
      case 2: {
        if (tag == 18) {
         parse_sToId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stoid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stoid().data(), this->stoid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.ANDNotify.sToId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nErr;
        break;
      }

      // optional .im.ErrCode nErr = 3;
      case 3: {
        if (tag == 24) {
         parse_nErr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nerr(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.ANDNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.ANDNotify)
  return false;
#undef DO_
}

void ANDNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.ANDNotify)
  // optional string sMsgId = 1;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.ANDNotify.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->smsgid(), output);
  }

  // optional string sToId = 2;
  if (this->stoid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stoid().data(), this->stoid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.ANDNotify.sToId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stoid(), output);
  }

  // optional .im.ErrCode nErr = 3;
  if (this->nerr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->nerr(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.ANDNotify)
}

int ANDNotify::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.ANDNotify)
  int total_size = 0;

  // optional string sMsgId = 1;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional string sToId = 2;
  if (this->stoid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stoid());
  }

  // optional .im.ErrCode nErr = 3;
  if (this->nerr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nerr());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ANDNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ANDNotify*>(&from));
}

void ANDNotify::MergeFrom(const ANDNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.ANDNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.stoid().size() > 0) {

    stoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stoid_);
  }
  if (from.nerr() != 0) {
    set_nerr(from.nerr());
  }
}

void ANDNotify::CopyFrom(const ANDNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.ANDNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ANDNotify::IsInitialized() const {

  return true;
}

void ANDNotify::Swap(ANDNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ANDNotify::InternalSwap(ANDNotify* other) {
  smsgid_.Swap(&other->smsgid_);
  stoid_.Swap(&other->stoid_);
  std::swap(nerr_, other->nerr_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ANDNotify::GetTypeName() const {
  return "im.ANDNotify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ANDNotify

// optional string sMsgId = 1;
void ANDNotify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ANDNotify::smsgid() const {
  // @@protoc_insertion_point(field_get:im.ANDNotify.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ANDNotify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.ANDNotify.sMsgId)
}
 void ANDNotify::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.ANDNotify.sMsgId)
}
 void ANDNotify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.ANDNotify.sMsgId)
}
 ::std::string* ANDNotify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.ANDNotify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ANDNotify::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.ANDNotify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ANDNotify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.ANDNotify.sMsgId)
}

// optional string sToId = 2;
void ANDNotify::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ANDNotify::stoid() const {
  // @@protoc_insertion_point(field_get:im.ANDNotify.sToId)
  return stoid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ANDNotify::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.ANDNotify.sToId)
}
 void ANDNotify::set_stoid(const char* value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.ANDNotify.sToId)
}
 void ANDNotify::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.ANDNotify.sToId)
}
 ::std::string* ANDNotify::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.ANDNotify.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ANDNotify::release_stoid() {
  // @@protoc_insertion_point(field_release:im.ANDNotify.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ANDNotify::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.ANDNotify.sToId)
}

// optional .im.ErrCode nErr = 3;
void ANDNotify::clear_nerr() {
  nerr_ = 0;
}
 ::im::ErrCode ANDNotify::nerr() const {
  // @@protoc_insertion_point(field_get:im.ANDNotify.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
 void ANDNotify::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.ANDNotify.nErr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ANDNotifyAck::kSMsgIdFieldNumber;
const int ANDNotifyAck::kSToIdFieldNumber;
const int ANDNotifyAck::kNErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ANDNotifyAck::ANDNotifyAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.ANDNotifyAck)
}

void ANDNotifyAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ANDNotifyAck::ANDNotifyAck(const ANDNotifyAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.ANDNotifyAck)
}

void ANDNotifyAck::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
}

ANDNotifyAck::~ANDNotifyAck() {
  // @@protoc_insertion_point(destructor:im.ANDNotifyAck)
  SharedDtor();
}

void ANDNotifyAck::SharedDtor() {
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ANDNotifyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ANDNotifyAck& ANDNotifyAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2epush_2eandroid_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2epush_2eandroid_2eproto();
#endif
  return *default_instance_;
}

ANDNotifyAck* ANDNotifyAck::default_instance_ = NULL;

ANDNotifyAck* ANDNotifyAck::New(::google::protobuf::Arena* arena) const {
  ANDNotifyAck* n = new ANDNotifyAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ANDNotifyAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.ANDNotifyAck)
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
}

bool ANDNotifyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.ANDNotifyAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sMsgId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.ANDNotifyAck.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sToId;
        break;
      }

      // optional string sToId = 2;
      case 2: {
        if (tag == 18) {
         parse_sToId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stoid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stoid().data(), this->stoid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.ANDNotifyAck.sToId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nErr;
        break;
      }

      // optional .im.ErrCode nErr = 3;
      case 3: {
        if (tag == 24) {
         parse_nErr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nerr(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.ANDNotifyAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.ANDNotifyAck)
  return false;
#undef DO_
}

void ANDNotifyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.ANDNotifyAck)
  // optional string sMsgId = 1;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.ANDNotifyAck.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->smsgid(), output);
  }

  // optional string sToId = 2;
  if (this->stoid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stoid().data(), this->stoid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.ANDNotifyAck.sToId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stoid(), output);
  }

  // optional .im.ErrCode nErr = 3;
  if (this->nerr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->nerr(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.ANDNotifyAck)
}

int ANDNotifyAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.ANDNotifyAck)
  int total_size = 0;

  // optional string sMsgId = 1;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional string sToId = 2;
  if (this->stoid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stoid());
  }

  // optional .im.ErrCode nErr = 3;
  if (this->nerr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nerr());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ANDNotifyAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ANDNotifyAck*>(&from));
}

void ANDNotifyAck::MergeFrom(const ANDNotifyAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.ANDNotifyAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.stoid().size() > 0) {

    stoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stoid_);
  }
  if (from.nerr() != 0) {
    set_nerr(from.nerr());
  }
}

void ANDNotifyAck::CopyFrom(const ANDNotifyAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.ANDNotifyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ANDNotifyAck::IsInitialized() const {

  return true;
}

void ANDNotifyAck::Swap(ANDNotifyAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ANDNotifyAck::InternalSwap(ANDNotifyAck* other) {
  smsgid_.Swap(&other->smsgid_);
  stoid_.Swap(&other->stoid_);
  std::swap(nerr_, other->nerr_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ANDNotifyAck::GetTypeName() const {
  return "im.ANDNotifyAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ANDNotifyAck

// optional string sMsgId = 1;
void ANDNotifyAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ANDNotifyAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.ANDNotifyAck.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ANDNotifyAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.ANDNotifyAck.sMsgId)
}
 void ANDNotifyAck::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.ANDNotifyAck.sMsgId)
}
 void ANDNotifyAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.ANDNotifyAck.sMsgId)
}
 ::std::string* ANDNotifyAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.ANDNotifyAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ANDNotifyAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.ANDNotifyAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ANDNotifyAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.ANDNotifyAck.sMsgId)
}

// optional string sToId = 2;
void ANDNotifyAck::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ANDNotifyAck::stoid() const {
  // @@protoc_insertion_point(field_get:im.ANDNotifyAck.sToId)
  return stoid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ANDNotifyAck::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.ANDNotifyAck.sToId)
}
 void ANDNotifyAck::set_stoid(const char* value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.ANDNotifyAck.sToId)
}
 void ANDNotifyAck::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.ANDNotifyAck.sToId)
}
 ::std::string* ANDNotifyAck::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.ANDNotifyAck.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ANDNotifyAck::release_stoid() {
  // @@protoc_insertion_point(field_release:im.ANDNotifyAck.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ANDNotifyAck::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.ANDNotifyAck.sToId)
}

// optional .im.ErrCode nErr = 3;
void ANDNotifyAck::clear_nerr() {
  nerr_ = 0;
}
 ::im::ErrCode ANDNotifyAck::nerr() const {
  // @@protoc_insertion_point(field_get:im.ANDNotifyAck.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
 void ANDNotifyAck::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.ANDNotifyAck.nErr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace im

// @@protoc_insertion_point(global_scope)
