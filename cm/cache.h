/*****************************************************************************************
Filename: cache.h
Author: jack			Version: im-1.0 		Date:2017/06/14
Description: 	用户登录信息缓存、更新、缓存记录失效管理类定义
*****************************************************************************************/
#ifndef __CACHE_H__
#define __CACHE_H__
#include <string.h>
#include <stdlib.h>
#include "configfilereader.h"
#include "util.h"
#include "acl_cpp/lib_acl.hpp"
#include "acl_cpp/redis/redis_hash.hpp"
#include "acl_cpp/redis/redis_key.hpp"



//#define REDIS_FIELDS_COUNT 15

using namespace std;


typedef enum _user_state
{
	USER_OFFLINE = 0,
	USER_ONLINE
} user_state;

typedef enum _cache_fields
{
	ROLE_FIELD = 0,			// user role, means to specify 		
	APPID_FIELD,			// app identification
	GROUPLIMIT_FIELD,		// total group limitation. 
	GROUPNUMBER_FIELD,		// Actual group number that has been created . 
	STATUS_FIELD,			// 0： offline ; 1: online	
	DEVICETYPE_FIELD,		// device type used to destinguish all kinds of mobile. 
	RELOGIN_FIELD,
	LOGINTOKEN_FIELD,
	DEVICETOKEN_FIELD,
	DEVICEVERSION_FIELD,
	IP_FIELD,
	PORT_FIELD,
	RELOGINTIME_FIELD,
	LOGINTIME_FIELD,
	DEVICEVOIPTOKEN_FIELD,
	LOGININFO_CALLSTATE_FIELD,
	REDIS_FIELDS_COUNT		//!!!这个用来计数，一定要放在最后
} cache_fields;


typedef struct _RedisPara
{
	int32_t nConnTimeout;
	int32_t nRwTimeout;
	int32_t nRetryInterval;
	int32_t nRetrySleep;
	int32_t nRetryLimit;
	int32_t nPoolSize;
	int32_t nKeyExpireTime;
	acl::string sRedisAddrs;
	acl::string sPassword;
} RedisPara_t;


typedef struct _UserCache
{
	acl::string sUserId; 		// redis cache key. (cm)_userId
	uint8_t bRole;				// User role , define by user center .  
	uint8_t bStatus;			// user on/off line status, 0: offline; 1: online; 2:pending
	uint8_t bDeviceType;		// 0x10: huawei phone; 0x11: xiaomi phone; -- ; 0xff: iphone
	uint8_t bRelogin;			// 0: new login ; 1: relogin;
	uint16_t nGroupLimit;		// total of group limitation
	uint16_t nGroupNumber;		// actual group number
	uint16_t nIPPort;			// current CM server Port 
	acl::string sIPAddr;		// current CM server IP address
	acl::string sLoginToken;    // generated by user center to validate user . 
	acl::string sDeviceToken;	// device token string.
	acl::string sDeviceVersion; // device version
	acl::string sAppId;			// 3rd-party application id
	acl::string sReloginTime;	// Refresh relogin timestamp .
	acl::string sLoginTime;		// The firt timestamp that user login . 
	acl::string sDeviceVoipToken;	// device voip token string. 
} UserCache_t; 

typedef struct _DeviceCache
{
	acl::string sDeviceToken;	// device token string. 
	acl::string sSubscriptId;	// subscript string. 
} DeviceCache_t;

class CCache
{
public:
	CCache(CConfigFileReader* pConfigReader);
	~CCache();
	bool Initialize(void);
	bool GetUserStatus(acl::string sUserId,uint8_t &bStatus);
	bool SetUserStatus(acl::string sUserId,int8_t bStatus);
	bool SetUserExpireTime(acl::string sUserId);
	bool RemoveUserExpireTime(acl::string sUserId);
	bool UpdateUserRec(UserCache_t &rec,bool bAuthCheck);
	//bool UpdateDeviceRec(DeviceCache_t &rec);
	bool DeviceSynchronize(acl::string sUserId,uint8_t bDeviceType,\
		acl::string sDeviceVersion, acl::string sDeviceToken);
	bool DeviceSynchronize(acl::string sUserId, acl::string sDeviceVoipToken);
	bool GetUserRecord(acl::string sUserId,UserCache_t &rec);
	bool GetDeviceRecord(acl::string sDeviceToken,DeviceCache_t &rec);
	bool InsertUserRec(UserCache_t &rec);
	bool InsertDeviceRec(DeviceCache_t &rec);
	bool DelUserRec(acl::string sUserId);
	bool DelDeviceRec(acl::string sDeviceToken);
protected:
	bool SetRedisPara(void);	
private:
	CConfigFileReader* m_pConfigReader;
	RedisPara_t m_redisPara;
	acl::redis_client_cluster m_cluster;
	acl::redis_hash m_hashRedis;
	acl::redis m_redis;
};

#endif
