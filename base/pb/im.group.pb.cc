// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.group.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "im.group.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace im {

void protobuf_ShutdownFile_im_2egroup_2eproto() {
  delete GroupChat::default_instance_;
  delete GroupChatAck::default_instance_;
  delete GroupCreate::default_instance_;
  delete GroupCreateAck::default_instance_;
  delete GroupQuery::default_instance_;
  delete UserGroupQueryRsp::default_instance_;
  delete GroupApply::default_instance_;
  delete GroupApplyAck::default_instance_;
  delete GroupInvite::default_instance_;
  delete GroupInviteAck::default_instance_;
  delete GroupMember::default_instance_;
  delete GroupMemberAck::default_instance_;
  delete GroupKickOut::default_instance_;
  delete GroupKickoutAck::default_instance_;
  delete GroupQuit::default_instance_;
  delete GroupQuitAck::default_instance_;
  delete GroupModify::default_instance_;
  delete GroupModifyAck::default_instance_;
  delete GroupNotify::default_instance_;
  delete GroupNotifyAck::default_instance_;
  delete GroupPermit::default_instance_;
  delete GroupPermitAck::default_instance_;
  delete GroupChatCancel::default_instance_;
  delete GroupChatCancelAck::default_instance_;
  delete GroupInfo::default_instance_;
  delete Member::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_im_2egroup_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_im_2egroup_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_im_2egroup_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::im::protobuf_AddDesc_im_2epub_2eproto();
  GroupChat::default_instance_ = new GroupChat();
  GroupChatAck::default_instance_ = new GroupChatAck();
  GroupCreate::default_instance_ = new GroupCreate();
  GroupCreateAck::default_instance_ = new GroupCreateAck();
  GroupQuery::default_instance_ = new GroupQuery();
  UserGroupQueryRsp::default_instance_ = new UserGroupQueryRsp();
  GroupApply::default_instance_ = new GroupApply();
  GroupApplyAck::default_instance_ = new GroupApplyAck();
  GroupInvite::default_instance_ = new GroupInvite();
  GroupInviteAck::default_instance_ = new GroupInviteAck();
  GroupMember::default_instance_ = new GroupMember();
  GroupMemberAck::default_instance_ = new GroupMemberAck();
  GroupKickOut::default_instance_ = new GroupKickOut();
  GroupKickoutAck::default_instance_ = new GroupKickoutAck();
  GroupQuit::default_instance_ = new GroupQuit();
  GroupQuitAck::default_instance_ = new GroupQuitAck();
  GroupModify::default_instance_ = new GroupModify();
  GroupModifyAck::default_instance_ = new GroupModifyAck();
  GroupNotify::default_instance_ = new GroupNotify();
  GroupNotifyAck::default_instance_ = new GroupNotifyAck();
  GroupPermit::default_instance_ = new GroupPermit();
  GroupPermitAck::default_instance_ = new GroupPermitAck();
  GroupChatCancel::default_instance_ = new GroupChatCancel();
  GroupChatCancelAck::default_instance_ = new GroupChatCancelAck();
  GroupInfo::default_instance_ = new GroupInfo();
  Member::default_instance_ = new Member();
  GroupChat::default_instance_->InitAsDefaultInstance();
  GroupChatAck::default_instance_->InitAsDefaultInstance();
  GroupCreate::default_instance_->InitAsDefaultInstance();
  GroupCreateAck::default_instance_->InitAsDefaultInstance();
  GroupQuery::default_instance_->InitAsDefaultInstance();
  UserGroupQueryRsp::default_instance_->InitAsDefaultInstance();
  GroupApply::default_instance_->InitAsDefaultInstance();
  GroupApplyAck::default_instance_->InitAsDefaultInstance();
  GroupInvite::default_instance_->InitAsDefaultInstance();
  GroupInviteAck::default_instance_->InitAsDefaultInstance();
  GroupMember::default_instance_->InitAsDefaultInstance();
  GroupMemberAck::default_instance_->InitAsDefaultInstance();
  GroupKickOut::default_instance_->InitAsDefaultInstance();
  GroupKickoutAck::default_instance_->InitAsDefaultInstance();
  GroupQuit::default_instance_->InitAsDefaultInstance();
  GroupQuitAck::default_instance_->InitAsDefaultInstance();
  GroupModify::default_instance_->InitAsDefaultInstance();
  GroupModifyAck::default_instance_->InitAsDefaultInstance();
  GroupNotify::default_instance_->InitAsDefaultInstance();
  GroupNotifyAck::default_instance_->InitAsDefaultInstance();
  GroupPermit::default_instance_->InitAsDefaultInstance();
  GroupPermitAck::default_instance_->InitAsDefaultInstance();
  GroupChatCancel::default_instance_->InitAsDefaultInstance();
  GroupChatCancelAck::default_instance_->InitAsDefaultInstance();
  GroupInfo::default_instance_->InitAsDefaultInstance();
  Member::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_im_2egroup_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_im_2egroup_2eproto_once_);
void protobuf_AddDesc_im_2egroup_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_im_2egroup_2eproto_once_,
                 &protobuf_AddDesc_im_2egroup_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_im_2egroup_2eproto {
  StaticDescriptorInitializer_im_2egroup_2eproto() {
    protobuf_AddDesc_im_2egroup_2eproto();
  }
} static_descriptor_initializer_im_2egroup_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupChat::kSFromIdFieldNumber;
const int GroupChat::kSGroupIdFieldNumber;
const int GroupChat::kNNotifyCountFieldNumber;
const int GroupChat::kSNotifyUsersFieldNumber;
const int GroupChat::kSMsgIdFieldNumber;
const int GroupChat::kMsgTimeFieldNumber;
const int GroupChat::kEncryptFieldNumber;
const int GroupChat::kSContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupChat::GroupChat()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupChat)
}

void GroupChat::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupChat::GroupChat(const GroupChat& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupChat)
}

void GroupChat::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sfromid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nnotifycount_ = 0u;
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtime_ = GOOGLE_ULONGLONG(0);
  encrypt_ = 0u;
  scontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupChat::~GroupChat() {
  // @@protoc_insertion_point(destructor:im.GroupChat)
  SharedDtor();
}

void GroupChat::SharedDtor() {
  sfromid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupChat& GroupChat::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupChat* GroupChat::default_instance_ = NULL;

GroupChat* GroupChat::New(::google::protobuf::Arena* arena) const {
  GroupChat* n = new GroupChat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupChat::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupChat)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GroupChat, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GroupChat*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(nnotifycount_, msgtime_);
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  snotifyusers_.Clear();
}

bool GroupChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sFromId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sfromid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sfromid().data(), this->sfromid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupChat.sFromId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sGroupId;
        break;
      }

      // optional string sGroupId = 2;
      case 2: {
        if (tag == 18) {
         parse_sGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupid().data(), this->sgroupid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupChat.sGroupId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nNotifyCount;
        break;
      }

      // optional uint32 nNotifyCount = 3;
      case 3: {
        if (tag == 24) {
         parse_nNotifyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nnotifycount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sNotifyUsers;
        break;
      }

      // repeated string sNotifyUsers = 4;
      case 4: {
        if (tag == 34) {
         parse_sNotifyUsers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_snotifyusers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->snotifyusers(this->snotifyusers_size() - 1).data(),
            this->snotifyusers(this->snotifyusers_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupChat.sNotifyUsers"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sNotifyUsers;
        if (input->ExpectTag(42)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 5;
      case 5: {
        if (tag == 42) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupChat.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_msgTime;
        break;
      }

      // optional uint64 msgTime = 6;
      case 6: {
        if (tag == 48) {
         parse_msgTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_encrypt;
        break;
      }

      // optional uint32 encrypt = 7;
      case 7: {
        if (tag == 56) {
         parse_encrypt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &encrypt_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sContent;
        break;
      }

      // optional string sContent = 8;
      case 8: {
        if (tag == 66) {
         parse_sContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scontent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scontent().data(), this->scontent().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupChat.sContent"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupChat)
  return false;
#undef DO_
}

void GroupChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupChat)
  // optional string sFromId = 1;
  if (this->sfromid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sfromid().data(), this->sfromid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupChat.sFromId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sfromid(), output);
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupid().data(), this->sgroupid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupChat.sGroupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sgroupid(), output);
  }

  // optional uint32 nNotifyCount = 3;
  if (this->nnotifycount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nnotifycount(), output);
  }

  // repeated string sNotifyUsers = 4;
  for (int i = 0; i < this->snotifyusers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snotifyusers(i).data(), this->snotifyusers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupChat.sNotifyUsers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->snotifyusers(i), output);
  }

  // optional string sMsgId = 5;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupChat.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->smsgid(), output);
  }

  // optional uint64 msgTime = 6;
  if (this->msgtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->msgtime(), output);
  }

  // optional uint32 encrypt = 7;
  if (this->encrypt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->encrypt(), output);
  }

  // optional string sContent = 8;
  if (this->scontent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scontent().data(), this->scontent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupChat.sContent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->scontent(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupChat)
}

int GroupChat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupChat)
  int total_size = 0;

  // optional string sFromId = 1;
  if (this->sfromid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sfromid());
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupid());
  }

  // optional uint32 nNotifyCount = 3;
  if (this->nnotifycount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nnotifycount());
  }

  // optional string sMsgId = 5;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional uint64 msgTime = 6;
  if (this->msgtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->msgtime());
  }

  // optional uint32 encrypt = 7;
  if (this->encrypt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->encrypt());
  }

  // optional string sContent = 8;
  if (this->scontent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scontent());
  }

  // repeated string sNotifyUsers = 4;
  total_size += 1 * this->snotifyusers_size();
  for (int i = 0; i < this->snotifyusers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->snotifyusers(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupChat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupChat*>(&from));
}

void GroupChat::MergeFrom(const GroupChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupChat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  snotifyusers_.MergeFrom(from.snotifyusers_);
  if (from.sfromid().size() > 0) {

    sfromid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sfromid_);
  }
  if (from.sgroupid().size() > 0) {

    sgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupid_);
  }
  if (from.nnotifycount() != 0) {
    set_nnotifycount(from.nnotifycount());
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.msgtime() != 0) {
    set_msgtime(from.msgtime());
  }
  if (from.encrypt() != 0) {
    set_encrypt(from.encrypt());
  }
  if (from.scontent().size() > 0) {

    scontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scontent_);
  }
}

void GroupChat::CopyFrom(const GroupChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupChat::IsInitialized() const {

  return true;
}

void GroupChat::Swap(GroupChat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupChat::InternalSwap(GroupChat* other) {
  sfromid_.Swap(&other->sfromid_);
  sgroupid_.Swap(&other->sgroupid_);
  std::swap(nnotifycount_, other->nnotifycount_);
  snotifyusers_.UnsafeArenaSwap(&other->snotifyusers_);
  smsgid_.Swap(&other->smsgid_);
  std::swap(msgtime_, other->msgtime_);
  std::swap(encrypt_, other->encrypt_);
  scontent_.Swap(&other->scontent_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupChat::GetTypeName() const {
  return "im.GroupChat";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupChat

// optional string sFromId = 1;
void GroupChat::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupChat::sfromid() const {
  // @@protoc_insertion_point(field_get:im.GroupChat.sFromId)
  return sfromid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChat::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChat.sFromId)
}
 void GroupChat::set_sfromid(const char* value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChat.sFromId)
}
 void GroupChat::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChat.sFromId)
}
 ::std::string* GroupChat::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChat.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupChat::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.GroupChat.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChat::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChat.sFromId)
}

// optional string sGroupId = 2;
void GroupChat::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupChat::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupChat.sGroupId)
  return sgroupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChat::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChat.sGroupId)
}
 void GroupChat::set_sgroupid(const char* value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChat.sGroupId)
}
 void GroupChat::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChat.sGroupId)
}
 ::std::string* GroupChat::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChat.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupChat::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupChat.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChat::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChat.sGroupId)
}

// optional uint32 nNotifyCount = 3;
void GroupChat::clear_nnotifycount() {
  nnotifycount_ = 0u;
}
 ::google::protobuf::uint32 GroupChat::nnotifycount() const {
  // @@protoc_insertion_point(field_get:im.GroupChat.nNotifyCount)
  return nnotifycount_;
}
 void GroupChat::set_nnotifycount(::google::protobuf::uint32 value) {
  
  nnotifycount_ = value;
  // @@protoc_insertion_point(field_set:im.GroupChat.nNotifyCount)
}

// repeated string sNotifyUsers = 4;
int GroupChat::snotifyusers_size() const {
  return snotifyusers_.size();
}
void GroupChat::clear_snotifyusers() {
  snotifyusers_.Clear();
}
 const ::std::string& GroupChat::snotifyusers(int index) const {
  // @@protoc_insertion_point(field_get:im.GroupChat.sNotifyUsers)
  return snotifyusers_.Get(index);
}
 ::std::string* GroupChat::mutable_snotifyusers(int index) {
  // @@protoc_insertion_point(field_mutable:im.GroupChat.sNotifyUsers)
  return snotifyusers_.Mutable(index);
}
 void GroupChat::set_snotifyusers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im.GroupChat.sNotifyUsers)
  snotifyusers_.Mutable(index)->assign(value);
}
 void GroupChat::set_snotifyusers(int index, const char* value) {
  snotifyusers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im.GroupChat.sNotifyUsers)
}
 void GroupChat::set_snotifyusers(int index, const char* value, size_t size) {
  snotifyusers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im.GroupChat.sNotifyUsers)
}
 ::std::string* GroupChat::add_snotifyusers() {
  // @@protoc_insertion_point(field_add_mutable:im.GroupChat.sNotifyUsers)
  return snotifyusers_.Add();
}
 void GroupChat::add_snotifyusers(const ::std::string& value) {
  snotifyusers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im.GroupChat.sNotifyUsers)
}
 void GroupChat::add_snotifyusers(const char* value) {
  snotifyusers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im.GroupChat.sNotifyUsers)
}
 void GroupChat::add_snotifyusers(const char* value, size_t size) {
  snotifyusers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im.GroupChat.sNotifyUsers)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GroupChat::snotifyusers() const {
  // @@protoc_insertion_point(field_list:im.GroupChat.sNotifyUsers)
  return snotifyusers_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GroupChat::mutable_snotifyusers() {
  // @@protoc_insertion_point(field_mutable_list:im.GroupChat.sNotifyUsers)
  return &snotifyusers_;
}

// optional string sMsgId = 5;
void GroupChat::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupChat::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupChat.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChat::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChat.sMsgId)
}
 void GroupChat::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChat.sMsgId)
}
 void GroupChat::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChat.sMsgId)
}
 ::std::string* GroupChat::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChat.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupChat::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupChat.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChat::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChat.sMsgId)
}

// optional uint64 msgTime = 6;
void GroupChat::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 GroupChat::msgtime() const {
  // @@protoc_insertion_point(field_get:im.GroupChat.msgTime)
  return msgtime_;
}
 void GroupChat::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.GroupChat.msgTime)
}

// optional uint32 encrypt = 7;
void GroupChat::clear_encrypt() {
  encrypt_ = 0u;
}
 ::google::protobuf::uint32 GroupChat::encrypt() const {
  // @@protoc_insertion_point(field_get:im.GroupChat.encrypt)
  return encrypt_;
}
 void GroupChat::set_encrypt(::google::protobuf::uint32 value) {
  
  encrypt_ = value;
  // @@protoc_insertion_point(field_set:im.GroupChat.encrypt)
}

// optional string sContent = 8;
void GroupChat::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupChat::scontent() const {
  // @@protoc_insertion_point(field_get:im.GroupChat.sContent)
  return scontent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChat::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChat.sContent)
}
 void GroupChat::set_scontent(const char* value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChat.sContent)
}
 void GroupChat::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChat.sContent)
}
 ::std::string* GroupChat::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChat.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupChat::release_scontent() {
  // @@protoc_insertion_point(field_release:im.GroupChat.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChat::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChat.sContent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupChatAck::kSFromIdFieldNumber;
const int GroupChatAck::kSGroupIdFieldNumber;
const int GroupChatAck::kSMsgIdFieldNumber;
const int GroupChatAck::kSendtimeFieldNumber;
const int GroupChatAck::kErrcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupChatAck::GroupChatAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupChatAck)
}

void GroupChatAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupChatAck::GroupChatAck(const GroupChatAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupChatAck)
}

void GroupChatAck::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sfromid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sendtime_ = GOOGLE_ULONGLONG(0);
  errcode_ = 0;
}

GroupChatAck::~GroupChatAck() {
  // @@protoc_insertion_point(destructor:im.GroupChatAck)
  SharedDtor();
}

void GroupChatAck::SharedDtor() {
  sfromid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupChatAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupChatAck& GroupChatAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupChatAck* GroupChatAck::default_instance_ = NULL;

GroupChatAck* GroupChatAck::New(::google::protobuf::Arena* arena) const {
  GroupChatAck* n = new GroupChatAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupChatAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupChatAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GroupChatAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GroupChatAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sendtime_, errcode_);
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool GroupChatAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupChatAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sFromId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sfromid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sfromid().data(), this->sfromid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupChatAck.sFromId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sGroupId;
        break;
      }

      // optional string sGroupId = 2;
      case 2: {
        if (tag == 18) {
         parse_sGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupid().data(), this->sgroupid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupChatAck.sGroupId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 3;
      case 3: {
        if (tag == 26) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupChatAck.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sendtime;
        break;
      }

      // optional uint64 sendtime = 4;
      case 4: {
        if (tag == 32) {
         parse_sendtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_errcode;
        break;
      }

      // optional .im.ErrCode errcode = 5;
      case 5: {
        if (tag == 40) {
         parse_errcode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errcode(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupChatAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupChatAck)
  return false;
#undef DO_
}

void GroupChatAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupChatAck)
  // optional string sFromId = 1;
  if (this->sfromid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sfromid().data(), this->sfromid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupChatAck.sFromId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sfromid(), output);
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupid().data(), this->sgroupid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupChatAck.sGroupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sgroupid(), output);
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupChatAck.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->smsgid(), output);
  }

  // optional uint64 sendtime = 4;
  if (this->sendtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sendtime(), output);
  }

  // optional .im.ErrCode errcode = 5;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->errcode(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupChatAck)
}

int GroupChatAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupChatAck)
  int total_size = 0;

  // optional string sFromId = 1;
  if (this->sfromid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sfromid());
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupid());
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional uint64 sendtime = 4;
  if (this->sendtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sendtime());
  }

  // optional .im.ErrCode errcode = 5;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupChatAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupChatAck*>(&from));
}

void GroupChatAck::MergeFrom(const GroupChatAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupChatAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.sfromid().size() > 0) {

    sfromid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sfromid_);
  }
  if (from.sgroupid().size() > 0) {

    sgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupid_);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.sendtime() != 0) {
    set_sendtime(from.sendtime());
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void GroupChatAck::CopyFrom(const GroupChatAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupChatAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupChatAck::IsInitialized() const {

  return true;
}

void GroupChatAck::Swap(GroupChatAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupChatAck::InternalSwap(GroupChatAck* other) {
  sfromid_.Swap(&other->sfromid_);
  sgroupid_.Swap(&other->sgroupid_);
  smsgid_.Swap(&other->smsgid_);
  std::swap(sendtime_, other->sendtime_);
  std::swap(errcode_, other->errcode_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupChatAck::GetTypeName() const {
  return "im.GroupChatAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupChatAck

// optional string sFromId = 1;
void GroupChatAck::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupChatAck::sfromid() const {
  // @@protoc_insertion_point(field_get:im.GroupChatAck.sFromId)
  return sfromid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChatAck::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChatAck.sFromId)
}
 void GroupChatAck::set_sfromid(const char* value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChatAck.sFromId)
}
 void GroupChatAck::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChatAck.sFromId)
}
 ::std::string* GroupChatAck::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChatAck.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupChatAck::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.GroupChatAck.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChatAck::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChatAck.sFromId)
}

// optional string sGroupId = 2;
void GroupChatAck::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupChatAck::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupChatAck.sGroupId)
  return sgroupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChatAck::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChatAck.sGroupId)
}
 void GroupChatAck::set_sgroupid(const char* value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChatAck.sGroupId)
}
 void GroupChatAck::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChatAck.sGroupId)
}
 ::std::string* GroupChatAck::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChatAck.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupChatAck::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupChatAck.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChatAck::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChatAck.sGroupId)
}

// optional string sMsgId = 3;
void GroupChatAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupChatAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupChatAck.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChatAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChatAck.sMsgId)
}
 void GroupChatAck::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChatAck.sMsgId)
}
 void GroupChatAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChatAck.sMsgId)
}
 ::std::string* GroupChatAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChatAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupChatAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupChatAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChatAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChatAck.sMsgId)
}

// optional uint64 sendtime = 4;
void GroupChatAck::clear_sendtime() {
  sendtime_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 GroupChatAck::sendtime() const {
  // @@protoc_insertion_point(field_get:im.GroupChatAck.sendtime)
  return sendtime_;
}
 void GroupChatAck::set_sendtime(::google::protobuf::uint64 value) {
  
  sendtime_ = value;
  // @@protoc_insertion_point(field_set:im.GroupChatAck.sendtime)
}

// optional .im.ErrCode errcode = 5;
void GroupChatAck::clear_errcode() {
  errcode_ = 0;
}
 ::im::ErrCode GroupChatAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupChatAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
 void GroupChatAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupChatAck.errcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupCreate::kSUserIdFieldNumber;
const int GroupCreate::kSNameFieldNumber;
const int GroupCreate::kSRemarksFieldNumber;
const int GroupCreate::kSMsgIdFieldNumber;
const int GroupCreate::kNPermissionFieldNumber;
const int GroupCreate::kNCreateTypeFieldNumber;
const int GroupCreate::kSInviteUserIdsFieldNumber;
const int GroupCreate::kSGrpAvatarFieldNumber;
const int GroupCreate::kExtendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupCreate::GroupCreate()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupCreate)
}

void GroupCreate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupCreate::GroupCreate(const GroupCreate& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupCreate)
}

void GroupCreate::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sremarks_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  npermission_ = 0u;
  ncreatetype_ = 0u;
  sgrpavatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupCreate::~GroupCreate() {
  // @@protoc_insertion_point(destructor:im.GroupCreate)
  SharedDtor();
}

void GroupCreate::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sremarks_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgrpavatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupCreate& GroupCreate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupCreate* GroupCreate::default_instance_ = NULL;

GroupCreate* GroupCreate::New(::google::protobuf::Arena* arena) const {
  GroupCreate* n = new GroupCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupCreate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GroupCreate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GroupCreate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(npermission_, ncreatetype_);
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sremarks_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgrpavatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  sinviteuserids_.Clear();
}

bool GroupCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupCreate.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sName;
        break;
      }

      // optional string sName = 2;
      case 2: {
        if (tag == 18) {
         parse_sName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sname().data(), this->sname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupCreate.sName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sRemarks;
        break;
      }

      // optional string sRemarks = 3;
      case 3: {
        if (tag == 26) {
         parse_sRemarks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sremarks()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sremarks().data(), this->sremarks().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupCreate.sRemarks"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 4;
      case 4: {
        if (tag == 34) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupCreate.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nPermission;
        break;
      }

      // optional uint32 nPermission = 5;
      case 5: {
        if (tag == 40) {
         parse_nPermission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npermission_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_nCreateType;
        break;
      }

      // optional uint32 nCreateType = 6;
      case 6: {
        if (tag == 48) {
         parse_nCreateType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ncreatetype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sInviteUserIds;
        break;
      }

      // repeated string sInviteUserIds = 8;
      case 8: {
        if (tag == 66) {
         parse_sInviteUserIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sinviteuserids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sinviteuserids(this->sinviteuserids_size() - 1).data(),
            this->sinviteuserids(this->sinviteuserids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupCreate.sInviteUserIds"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sInviteUserIds;
        if (input->ExpectTag(74)) goto parse_sGrpAvatar;
        break;
      }

      // optional string sGrpAvatar = 9;
      case 9: {
        if (tag == 74) {
         parse_sGrpAvatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgrpavatar()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgrpavatar().data(), this->sgrpavatar().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupCreate.sGrpAvatar"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_extend;
        break;
      }

      // optional string extend = 10;
      case 10: {
        if (tag == 82) {
         parse_extend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extend()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extend().data(), this->extend().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupCreate.extend"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupCreate)
  return false;
#undef DO_
}

void GroupCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupCreate)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupCreate.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional string sName = 2;
  if (this->sname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sname().data(), this->sname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupCreate.sName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sname(), output);
  }

  // optional string sRemarks = 3;
  if (this->sremarks().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sremarks().data(), this->sremarks().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupCreate.sRemarks");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sremarks(), output);
  }

  // optional string sMsgId = 4;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupCreate.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->smsgid(), output);
  }

  // optional uint32 nPermission = 5;
  if (this->npermission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->npermission(), output);
  }

  // optional uint32 nCreateType = 6;
  if (this->ncreatetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ncreatetype(), output);
  }

  // repeated string sInviteUserIds = 8;
  for (int i = 0; i < this->sinviteuserids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sinviteuserids(i).data(), this->sinviteuserids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupCreate.sInviteUserIds");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->sinviteuserids(i), output);
  }

  // optional string sGrpAvatar = 9;
  if (this->sgrpavatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgrpavatar().data(), this->sgrpavatar().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupCreate.sGrpAvatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sgrpavatar(), output);
  }

  // optional string extend = 10;
  if (this->extend().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extend().data(), this->extend().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupCreate.extend");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->extend(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupCreate)
}

int GroupCreate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupCreate)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional string sName = 2;
  if (this->sname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sname());
  }

  // optional string sRemarks = 3;
  if (this->sremarks().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sremarks());
  }

  // optional string sMsgId = 4;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional uint32 nPermission = 5;
  if (this->npermission() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->npermission());
  }

  // optional uint32 nCreateType = 6;
  if (this->ncreatetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ncreatetype());
  }

  // optional string sGrpAvatar = 9;
  if (this->sgrpavatar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgrpavatar());
  }

  // optional string extend = 10;
  if (this->extend().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extend());
  }

  // repeated string sInviteUserIds = 8;
  total_size += 1 * this->sinviteuserids_size();
  for (int i = 0; i < this->sinviteuserids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sinviteuserids(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupCreate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupCreate*>(&from));
}

void GroupCreate::MergeFrom(const GroupCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupCreate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  sinviteuserids_.MergeFrom(from.sinviteuserids_);
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.sname().size() > 0) {

    sname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sname_);
  }
  if (from.sremarks().size() > 0) {

    sremarks_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sremarks_);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.npermission() != 0) {
    set_npermission(from.npermission());
  }
  if (from.ncreatetype() != 0) {
    set_ncreatetype(from.ncreatetype());
  }
  if (from.sgrpavatar().size() > 0) {

    sgrpavatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgrpavatar_);
  }
  if (from.extend().size() > 0) {

    extend_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extend_);
  }
}

void GroupCreate::CopyFrom(const GroupCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupCreate::IsInitialized() const {

  return true;
}

void GroupCreate::Swap(GroupCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupCreate::InternalSwap(GroupCreate* other) {
  suserid_.Swap(&other->suserid_);
  sname_.Swap(&other->sname_);
  sremarks_.Swap(&other->sremarks_);
  smsgid_.Swap(&other->smsgid_);
  std::swap(npermission_, other->npermission_);
  std::swap(ncreatetype_, other->ncreatetype_);
  sinviteuserids_.UnsafeArenaSwap(&other->sinviteuserids_);
  sgrpavatar_.Swap(&other->sgrpavatar_);
  extend_.Swap(&other->extend_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupCreate::GetTypeName() const {
  return "im.GroupCreate";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupCreate

// optional string sUserId = 1;
void GroupCreate::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupCreate::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupCreate.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupCreate::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupCreate.sUserId)
}
 void GroupCreate::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupCreate.sUserId)
}
 void GroupCreate::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupCreate.sUserId)
}
 ::std::string* GroupCreate::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupCreate.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupCreate::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupCreate.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupCreate::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupCreate.sUserId)
}

// optional string sName = 2;
void GroupCreate::clear_sname() {
  sname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupCreate::sname() const {
  // @@protoc_insertion_point(field_get:im.GroupCreate.sName)
  return sname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupCreate::set_sname(const ::std::string& value) {
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupCreate.sName)
}
 void GroupCreate::set_sname(const char* value) {
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupCreate.sName)
}
 void GroupCreate::set_sname(const char* value, size_t size) {
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupCreate.sName)
}
 ::std::string* GroupCreate::mutable_sname() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupCreate.sName)
  return sname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupCreate::release_sname() {
  // @@protoc_insertion_point(field_release:im.GroupCreate.sName)
  
  return sname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupCreate::set_allocated_sname(::std::string* sname) {
  if (sname != NULL) {
    
  } else {
    
  }
  sname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sname);
  // @@protoc_insertion_point(field_set_allocated:im.GroupCreate.sName)
}

// optional string sRemarks = 3;
void GroupCreate::clear_sremarks() {
  sremarks_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupCreate::sremarks() const {
  // @@protoc_insertion_point(field_get:im.GroupCreate.sRemarks)
  return sremarks_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupCreate::set_sremarks(const ::std::string& value) {
  
  sremarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupCreate.sRemarks)
}
 void GroupCreate::set_sremarks(const char* value) {
  
  sremarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupCreate.sRemarks)
}
 void GroupCreate::set_sremarks(const char* value, size_t size) {
  
  sremarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupCreate.sRemarks)
}
 ::std::string* GroupCreate::mutable_sremarks() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupCreate.sRemarks)
  return sremarks_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupCreate::release_sremarks() {
  // @@protoc_insertion_point(field_release:im.GroupCreate.sRemarks)
  
  return sremarks_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupCreate::set_allocated_sremarks(::std::string* sremarks) {
  if (sremarks != NULL) {
    
  } else {
    
  }
  sremarks_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sremarks);
  // @@protoc_insertion_point(field_set_allocated:im.GroupCreate.sRemarks)
}

// optional string sMsgId = 4;
void GroupCreate::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupCreate::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupCreate.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupCreate::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupCreate.sMsgId)
}
 void GroupCreate::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupCreate.sMsgId)
}
 void GroupCreate::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupCreate.sMsgId)
}
 ::std::string* GroupCreate::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupCreate.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupCreate::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupCreate.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupCreate::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupCreate.sMsgId)
}

// optional uint32 nPermission = 5;
void GroupCreate::clear_npermission() {
  npermission_ = 0u;
}
 ::google::protobuf::uint32 GroupCreate::npermission() const {
  // @@protoc_insertion_point(field_get:im.GroupCreate.nPermission)
  return npermission_;
}
 void GroupCreate::set_npermission(::google::protobuf::uint32 value) {
  
  npermission_ = value;
  // @@protoc_insertion_point(field_set:im.GroupCreate.nPermission)
}

// optional uint32 nCreateType = 6;
void GroupCreate::clear_ncreatetype() {
  ncreatetype_ = 0u;
}
 ::google::protobuf::uint32 GroupCreate::ncreatetype() const {
  // @@protoc_insertion_point(field_get:im.GroupCreate.nCreateType)
  return ncreatetype_;
}
 void GroupCreate::set_ncreatetype(::google::protobuf::uint32 value) {
  
  ncreatetype_ = value;
  // @@protoc_insertion_point(field_set:im.GroupCreate.nCreateType)
}

// repeated string sInviteUserIds = 8;
int GroupCreate::sinviteuserids_size() const {
  return sinviteuserids_.size();
}
void GroupCreate::clear_sinviteuserids() {
  sinviteuserids_.Clear();
}
 const ::std::string& GroupCreate::sinviteuserids(int index) const {
  // @@protoc_insertion_point(field_get:im.GroupCreate.sInviteUserIds)
  return sinviteuserids_.Get(index);
}
 ::std::string* GroupCreate::mutable_sinviteuserids(int index) {
  // @@protoc_insertion_point(field_mutable:im.GroupCreate.sInviteUserIds)
  return sinviteuserids_.Mutable(index);
}
 void GroupCreate::set_sinviteuserids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im.GroupCreate.sInviteUserIds)
  sinviteuserids_.Mutable(index)->assign(value);
}
 void GroupCreate::set_sinviteuserids(int index, const char* value) {
  sinviteuserids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im.GroupCreate.sInviteUserIds)
}
 void GroupCreate::set_sinviteuserids(int index, const char* value, size_t size) {
  sinviteuserids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im.GroupCreate.sInviteUserIds)
}
 ::std::string* GroupCreate::add_sinviteuserids() {
  // @@protoc_insertion_point(field_add_mutable:im.GroupCreate.sInviteUserIds)
  return sinviteuserids_.Add();
}
 void GroupCreate::add_sinviteuserids(const ::std::string& value) {
  sinviteuserids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im.GroupCreate.sInviteUserIds)
}
 void GroupCreate::add_sinviteuserids(const char* value) {
  sinviteuserids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im.GroupCreate.sInviteUserIds)
}
 void GroupCreate::add_sinviteuserids(const char* value, size_t size) {
  sinviteuserids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im.GroupCreate.sInviteUserIds)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GroupCreate::sinviteuserids() const {
  // @@protoc_insertion_point(field_list:im.GroupCreate.sInviteUserIds)
  return sinviteuserids_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GroupCreate::mutable_sinviteuserids() {
  // @@protoc_insertion_point(field_mutable_list:im.GroupCreate.sInviteUserIds)
  return &sinviteuserids_;
}

// optional string sGrpAvatar = 9;
void GroupCreate::clear_sgrpavatar() {
  sgrpavatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupCreate::sgrpavatar() const {
  // @@protoc_insertion_point(field_get:im.GroupCreate.sGrpAvatar)
  return sgrpavatar_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupCreate::set_sgrpavatar(const ::std::string& value) {
  
  sgrpavatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupCreate.sGrpAvatar)
}
 void GroupCreate::set_sgrpavatar(const char* value) {
  
  sgrpavatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupCreate.sGrpAvatar)
}
 void GroupCreate::set_sgrpavatar(const char* value, size_t size) {
  
  sgrpavatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupCreate.sGrpAvatar)
}
 ::std::string* GroupCreate::mutable_sgrpavatar() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupCreate.sGrpAvatar)
  return sgrpavatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupCreate::release_sgrpavatar() {
  // @@protoc_insertion_point(field_release:im.GroupCreate.sGrpAvatar)
  
  return sgrpavatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupCreate::set_allocated_sgrpavatar(::std::string* sgrpavatar) {
  if (sgrpavatar != NULL) {
    
  } else {
    
  }
  sgrpavatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpavatar);
  // @@protoc_insertion_point(field_set_allocated:im.GroupCreate.sGrpAvatar)
}

// optional string extend = 10;
void GroupCreate::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupCreate::extend() const {
  // @@protoc_insertion_point(field_get:im.GroupCreate.extend)
  return extend_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupCreate::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupCreate.extend)
}
 void GroupCreate::set_extend(const char* value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupCreate.extend)
}
 void GroupCreate::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupCreate.extend)
}
 ::std::string* GroupCreate::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupCreate.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupCreate::release_extend() {
  // @@protoc_insertion_point(field_release:im.GroupCreate.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupCreate::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.GroupCreate.extend)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupCreateAck::kSUserIdFieldNumber;
const int GroupCreateAck::kSGroupIdFieldNumber;
const int GroupCreateAck::kSMsgIdFieldNumber;
const int GroupCreateAck::kErrcodeFieldNumber;
const int GroupCreateAck::kMsgTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupCreateAck::GroupCreateAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupCreateAck)
}

void GroupCreateAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupCreateAck::GroupCreateAck(const GroupCreateAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupCreateAck)
}

void GroupCreateAck::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
  msgtime_ = GOOGLE_ULONGLONG(0);
}

GroupCreateAck::~GroupCreateAck() {
  // @@protoc_insertion_point(destructor:im.GroupCreateAck)
  SharedDtor();
}

void GroupCreateAck::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupCreateAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupCreateAck& GroupCreateAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupCreateAck* GroupCreateAck::default_instance_ = NULL;

GroupCreateAck* GroupCreateAck::New(::google::protobuf::Arena* arena) const {
  GroupCreateAck* n = new GroupCreateAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupCreateAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupCreateAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GroupCreateAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GroupCreateAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(msgtime_, errcode_);
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool GroupCreateAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupCreateAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupCreateAck.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sGroupId;
        break;
      }

      // optional string sGroupId = 2;
      case 2: {
        if (tag == 18) {
         parse_sGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupid().data(), this->sgroupid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupCreateAck.sGroupId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 3;
      case 3: {
        if (tag == 26) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupCreateAck.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_errcode;
        break;
      }

      // optional .im.ErrCode errcode = 4;
      case 4: {
        if (tag == 32) {
         parse_errcode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errcode(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_msgTime;
        break;
      }

      // optional uint64 msgTime = 5;
      case 5: {
        if (tag == 40) {
         parse_msgTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupCreateAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupCreateAck)
  return false;
#undef DO_
}

void GroupCreateAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupCreateAck)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupCreateAck.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupid().data(), this->sgroupid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupCreateAck.sGroupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sgroupid(), output);
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupCreateAck.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->smsgid(), output);
  }

  // optional .im.ErrCode errcode = 4;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->errcode(), output);
  }

  // optional uint64 msgTime = 5;
  if (this->msgtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->msgtime(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupCreateAck)
}

int GroupCreateAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupCreateAck)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupid());
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional .im.ErrCode errcode = 4;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
  }

  // optional uint64 msgTime = 5;
  if (this->msgtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->msgtime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupCreateAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupCreateAck*>(&from));
}

void GroupCreateAck::MergeFrom(const GroupCreateAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupCreateAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.sgroupid().size() > 0) {

    sgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupid_);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
  if (from.msgtime() != 0) {
    set_msgtime(from.msgtime());
  }
}

void GroupCreateAck::CopyFrom(const GroupCreateAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupCreateAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupCreateAck::IsInitialized() const {

  return true;
}

void GroupCreateAck::Swap(GroupCreateAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupCreateAck::InternalSwap(GroupCreateAck* other) {
  suserid_.Swap(&other->suserid_);
  sgroupid_.Swap(&other->sgroupid_);
  smsgid_.Swap(&other->smsgid_);
  std::swap(errcode_, other->errcode_);
  std::swap(msgtime_, other->msgtime_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupCreateAck::GetTypeName() const {
  return "im.GroupCreateAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupCreateAck

// optional string sUserId = 1;
void GroupCreateAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupCreateAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupCreateAck.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupCreateAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupCreateAck.sUserId)
}
 void GroupCreateAck::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupCreateAck.sUserId)
}
 void GroupCreateAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupCreateAck.sUserId)
}
 ::std::string* GroupCreateAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupCreateAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupCreateAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupCreateAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupCreateAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupCreateAck.sUserId)
}

// optional string sGroupId = 2;
void GroupCreateAck::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupCreateAck::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupCreateAck.sGroupId)
  return sgroupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupCreateAck::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupCreateAck.sGroupId)
}
 void GroupCreateAck::set_sgroupid(const char* value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupCreateAck.sGroupId)
}
 void GroupCreateAck::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupCreateAck.sGroupId)
}
 ::std::string* GroupCreateAck::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupCreateAck.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupCreateAck::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupCreateAck.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupCreateAck::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupCreateAck.sGroupId)
}

// optional string sMsgId = 3;
void GroupCreateAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupCreateAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupCreateAck.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupCreateAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupCreateAck.sMsgId)
}
 void GroupCreateAck::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupCreateAck.sMsgId)
}
 void GroupCreateAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupCreateAck.sMsgId)
}
 ::std::string* GroupCreateAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupCreateAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupCreateAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupCreateAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupCreateAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupCreateAck.sMsgId)
}

// optional .im.ErrCode errcode = 4;
void GroupCreateAck::clear_errcode() {
  errcode_ = 0;
}
 ::im::ErrCode GroupCreateAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupCreateAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
 void GroupCreateAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupCreateAck.errcode)
}

// optional uint64 msgTime = 5;
void GroupCreateAck::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 GroupCreateAck::msgtime() const {
  // @@protoc_insertion_point(field_get:im.GroupCreateAck.msgTime)
  return msgtime_;
}
 void GroupCreateAck::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.GroupCreateAck.msgTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupQuery::kSUserIdFieldNumber;
const int GroupQuery::kNQueryTypeFieldNumber;
const int GroupQuery::kSKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupQuery::GroupQuery()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupQuery)
}

void GroupQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupQuery::GroupQuery(const GroupQuery& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupQuery)
}

void GroupQuery::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nquerytype_ = 0u;
  skey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupQuery::~GroupQuery() {
  // @@protoc_insertion_point(destructor:im.GroupQuery)
  SharedDtor();
}

void GroupQuery::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupQuery& GroupQuery::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupQuery* GroupQuery::default_instance_ = NULL;

GroupQuery* GroupQuery::New(::google::protobuf::Arena* arena) const {
  GroupQuery* n = new GroupQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupQuery)
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nquerytype_ = 0u;
  skey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GroupQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupQuery.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nQueryType;
        break;
      }

      // optional uint32 nQueryType = 2;
      case 2: {
        if (tag == 16) {
         parse_nQueryType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nquerytype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sKey;
        break;
      }

      // optional string sKey = 3;
      case 3: {
        if (tag == 26) {
         parse_sKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->skey().data(), this->skey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupQuery.sKey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupQuery)
  return false;
#undef DO_
}

void GroupQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupQuery)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupQuery.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional uint32 nQueryType = 2;
  if (this->nquerytype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nquerytype(), output);
  }

  // optional string sKey = 3;
  if (this->skey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->skey().data(), this->skey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupQuery.sKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->skey(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupQuery)
}

int GroupQuery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupQuery)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional uint32 nQueryType = 2;
  if (this->nquerytype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nquerytype());
  }

  // optional string sKey = 3;
  if (this->skey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->skey());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupQuery::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupQuery*>(&from));
}

void GroupQuery::MergeFrom(const GroupQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.nquerytype() != 0) {
    set_nquerytype(from.nquerytype());
  }
  if (from.skey().size() > 0) {

    skey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skey_);
  }
}

void GroupQuery::CopyFrom(const GroupQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupQuery::IsInitialized() const {

  return true;
}

void GroupQuery::Swap(GroupQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupQuery::InternalSwap(GroupQuery* other) {
  suserid_.Swap(&other->suserid_);
  std::swap(nquerytype_, other->nquerytype_);
  skey_.Swap(&other->skey_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupQuery::GetTypeName() const {
  return "im.GroupQuery";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupQuery

// optional string sUserId = 1;
void GroupQuery::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupQuery::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupQuery.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupQuery::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupQuery.sUserId)
}
 void GroupQuery::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupQuery.sUserId)
}
 void GroupQuery::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupQuery.sUserId)
}
 ::std::string* GroupQuery::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupQuery.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupQuery::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupQuery.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupQuery::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupQuery.sUserId)
}

// optional uint32 nQueryType = 2;
void GroupQuery::clear_nquerytype() {
  nquerytype_ = 0u;
}
 ::google::protobuf::uint32 GroupQuery::nquerytype() const {
  // @@protoc_insertion_point(field_get:im.GroupQuery.nQueryType)
  return nquerytype_;
}
 void GroupQuery::set_nquerytype(::google::protobuf::uint32 value) {
  
  nquerytype_ = value;
  // @@protoc_insertion_point(field_set:im.GroupQuery.nQueryType)
}

// optional string sKey = 3;
void GroupQuery::clear_skey() {
  skey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupQuery::skey() const {
  // @@protoc_insertion_point(field_get:im.GroupQuery.sKey)
  return skey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupQuery::set_skey(const ::std::string& value) {
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupQuery.sKey)
}
 void GroupQuery::set_skey(const char* value) {
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupQuery.sKey)
}
 void GroupQuery::set_skey(const char* value, size_t size) {
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupQuery.sKey)
}
 ::std::string* GroupQuery::mutable_skey() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupQuery.sKey)
  return skey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupQuery::release_skey() {
  // @@protoc_insertion_point(field_release:im.GroupQuery.sKey)
  
  return skey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupQuery::set_allocated_skey(::std::string* skey) {
  if (skey != NULL) {
    
  } else {
    
  }
  skey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skey);
  // @@protoc_insertion_point(field_set_allocated:im.GroupQuery.sKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserGroupQueryRsp::kSUserIdFieldNumber;
const int UserGroupQueryRsp::kLsGroupInfoFieldNumber;
const int UserGroupQueryRsp::kErrcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserGroupQueryRsp::UserGroupQueryRsp()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.UserGroupQueryRsp)
}

void UserGroupQueryRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserGroupQueryRsp::UserGroupQueryRsp(const UserGroupQueryRsp& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.UserGroupQueryRsp)
}

void UserGroupQueryRsp::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

UserGroupQueryRsp::~UserGroupQueryRsp() {
  // @@protoc_insertion_point(destructor:im.UserGroupQueryRsp)
  SharedDtor();
}

void UserGroupQueryRsp::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserGroupQueryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserGroupQueryRsp& UserGroupQueryRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

UserGroupQueryRsp* UserGroupQueryRsp::default_instance_ = NULL;

UserGroupQueryRsp* UserGroupQueryRsp::New(::google::protobuf::Arena* arena) const {
  UserGroupQueryRsp* n = new UserGroupQueryRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserGroupQueryRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:im.UserGroupQueryRsp)
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
  lsgroupinfo_.Clear();
}

bool UserGroupQueryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.UserGroupQueryRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.UserGroupQueryRsp.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lsGroupInfo;
        break;
      }

      // repeated .im.GroupInfo lsGroupInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_lsGroupInfo:
          DO_(input->IncrementRecursionDepth());
         parse_loop_lsGroupInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lsgroupinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_lsGroupInfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_errcode;
        break;
      }

      // optional .im.ErrCode errcode = 3;
      case 3: {
        if (tag == 24) {
         parse_errcode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errcode(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.UserGroupQueryRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.UserGroupQueryRsp)
  return false;
#undef DO_
}

void UserGroupQueryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.UserGroupQueryRsp)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.UserGroupQueryRsp.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // repeated .im.GroupInfo lsGroupInfo = 2;
  for (unsigned int i = 0, n = this->lsgroupinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->lsgroupinfo(i), output);
  }

  // optional .im.ErrCode errcode = 3;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->errcode(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.UserGroupQueryRsp)
}

int UserGroupQueryRsp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.UserGroupQueryRsp)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional .im.ErrCode errcode = 3;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
  }

  // repeated .im.GroupInfo lsGroupInfo = 2;
  total_size += 1 * this->lsgroupinfo_size();
  for (int i = 0; i < this->lsgroupinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lsgroupinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGroupQueryRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserGroupQueryRsp*>(&from));
}

void UserGroupQueryRsp::MergeFrom(const UserGroupQueryRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.UserGroupQueryRsp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  lsgroupinfo_.MergeFrom(from.lsgroupinfo_);
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void UserGroupQueryRsp::CopyFrom(const UserGroupQueryRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.UserGroupQueryRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGroupQueryRsp::IsInitialized() const {

  return true;
}

void UserGroupQueryRsp::Swap(UserGroupQueryRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserGroupQueryRsp::InternalSwap(UserGroupQueryRsp* other) {
  suserid_.Swap(&other->suserid_);
  lsgroupinfo_.UnsafeArenaSwap(&other->lsgroupinfo_);
  std::swap(errcode_, other->errcode_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserGroupQueryRsp::GetTypeName() const {
  return "im.UserGroupQueryRsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserGroupQueryRsp

// optional string sUserId = 1;
void UserGroupQueryRsp::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserGroupQueryRsp::suserid() const {
  // @@protoc_insertion_point(field_get:im.UserGroupQueryRsp.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserGroupQueryRsp::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.UserGroupQueryRsp.sUserId)
}
 void UserGroupQueryRsp::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.UserGroupQueryRsp.sUserId)
}
 void UserGroupQueryRsp::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.UserGroupQueryRsp.sUserId)
}
 ::std::string* UserGroupQueryRsp::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.UserGroupQueryRsp.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserGroupQueryRsp::release_suserid() {
  // @@protoc_insertion_point(field_release:im.UserGroupQueryRsp.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserGroupQueryRsp::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.UserGroupQueryRsp.sUserId)
}

// repeated .im.GroupInfo lsGroupInfo = 2;
int UserGroupQueryRsp::lsgroupinfo_size() const {
  return lsgroupinfo_.size();
}
void UserGroupQueryRsp::clear_lsgroupinfo() {
  lsgroupinfo_.Clear();
}
const ::im::GroupInfo& UserGroupQueryRsp::lsgroupinfo(int index) const {
  // @@protoc_insertion_point(field_get:im.UserGroupQueryRsp.lsGroupInfo)
  return lsgroupinfo_.Get(index);
}
::im::GroupInfo* UserGroupQueryRsp::mutable_lsgroupinfo(int index) {
  // @@protoc_insertion_point(field_mutable:im.UserGroupQueryRsp.lsGroupInfo)
  return lsgroupinfo_.Mutable(index);
}
::im::GroupInfo* UserGroupQueryRsp::add_lsgroupinfo() {
  // @@protoc_insertion_point(field_add:im.UserGroupQueryRsp.lsGroupInfo)
  return lsgroupinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::im::GroupInfo >*
UserGroupQueryRsp::mutable_lsgroupinfo() {
  // @@protoc_insertion_point(field_mutable_list:im.UserGroupQueryRsp.lsGroupInfo)
  return &lsgroupinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::im::GroupInfo >&
UserGroupQueryRsp::lsgroupinfo() const {
  // @@protoc_insertion_point(field_list:im.UserGroupQueryRsp.lsGroupInfo)
  return lsgroupinfo_;
}

// optional .im.ErrCode errcode = 3;
void UserGroupQueryRsp::clear_errcode() {
  errcode_ = 0;
}
 ::im::ErrCode UserGroupQueryRsp::errcode() const {
  // @@protoc_insertion_point(field_get:im.UserGroupQueryRsp.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
 void UserGroupQueryRsp::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.UserGroupQueryRsp.errcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupApply::kSUserIdFieldNumber;
const int GroupApply::kSGroupIdFieldNumber;
const int GroupApply::kSMsgIdFieldNumber;
const int GroupApply::kSRemarkFieldNumber;
const int GroupApply::kExtendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupApply::GroupApply()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupApply)
}

void GroupApply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupApply::GroupApply(const GroupApply& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupApply)
}

void GroupApply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sremark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupApply::~GroupApply() {
  // @@protoc_insertion_point(destructor:im.GroupApply)
  SharedDtor();
}

void GroupApply::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sremark_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupApply& GroupApply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupApply* GroupApply::default_instance_ = NULL;

GroupApply* GroupApply::New(::google::protobuf::Arena* arena) const {
  GroupApply* n = new GroupApply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupApply::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupApply)
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sremark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GroupApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupApply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupApply.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sGroupId;
        break;
      }

      // optional string sGroupId = 2;
      case 2: {
        if (tag == 18) {
         parse_sGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupid().data(), this->sgroupid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupApply.sGroupId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 3;
      case 3: {
        if (tag == 26) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupApply.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sRemark;
        break;
      }

      // optional string sRemark = 4;
      case 4: {
        if (tag == 34) {
         parse_sRemark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sremark()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sremark().data(), this->sremark().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupApply.sRemark"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_extend;
        break;
      }

      // optional string extend = 5;
      case 5: {
        if (tag == 42) {
         parse_extend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extend()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extend().data(), this->extend().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupApply.extend"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupApply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupApply)
  return false;
#undef DO_
}

void GroupApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupApply)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupApply.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupid().data(), this->sgroupid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupApply.sGroupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sgroupid(), output);
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupApply.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->smsgid(), output);
  }

  // optional string sRemark = 4;
  if (this->sremark().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sremark().data(), this->sremark().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupApply.sRemark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sremark(), output);
  }

  // optional string extend = 5;
  if (this->extend().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extend().data(), this->extend().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupApply.extend");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->extend(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupApply)
}

int GroupApply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupApply)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupid());
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional string sRemark = 4;
  if (this->sremark().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sremark());
  }

  // optional string extend = 5;
  if (this->extend().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extend());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupApply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupApply*>(&from));
}

void GroupApply::MergeFrom(const GroupApply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupApply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.sgroupid().size() > 0) {

    sgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupid_);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.sremark().size() > 0) {

    sremark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sremark_);
  }
  if (from.extend().size() > 0) {

    extend_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extend_);
  }
}

void GroupApply::CopyFrom(const GroupApply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupApply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupApply::IsInitialized() const {

  return true;
}

void GroupApply::Swap(GroupApply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupApply::InternalSwap(GroupApply* other) {
  suserid_.Swap(&other->suserid_);
  sgroupid_.Swap(&other->sgroupid_);
  smsgid_.Swap(&other->smsgid_);
  sremark_.Swap(&other->sremark_);
  extend_.Swap(&other->extend_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupApply::GetTypeName() const {
  return "im.GroupApply";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupApply

// optional string sUserId = 1;
void GroupApply::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupApply::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupApply.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupApply::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupApply.sUserId)
}
 void GroupApply::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupApply.sUserId)
}
 void GroupApply::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupApply.sUserId)
}
 ::std::string* GroupApply::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupApply.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupApply::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupApply.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupApply::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupApply.sUserId)
}

// optional string sGroupId = 2;
void GroupApply::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupApply::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupApply.sGroupId)
  return sgroupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupApply::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupApply.sGroupId)
}
 void GroupApply::set_sgroupid(const char* value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupApply.sGroupId)
}
 void GroupApply::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupApply.sGroupId)
}
 ::std::string* GroupApply::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupApply.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupApply::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupApply.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupApply::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupApply.sGroupId)
}

// optional string sMsgId = 3;
void GroupApply::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupApply::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupApply.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupApply::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupApply.sMsgId)
}
 void GroupApply::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupApply.sMsgId)
}
 void GroupApply::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupApply.sMsgId)
}
 ::std::string* GroupApply::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupApply.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupApply::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupApply.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupApply::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupApply.sMsgId)
}

// optional string sRemark = 4;
void GroupApply::clear_sremark() {
  sremark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupApply::sremark() const {
  // @@protoc_insertion_point(field_get:im.GroupApply.sRemark)
  return sremark_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupApply::set_sremark(const ::std::string& value) {
  
  sremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupApply.sRemark)
}
 void GroupApply::set_sremark(const char* value) {
  
  sremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupApply.sRemark)
}
 void GroupApply::set_sremark(const char* value, size_t size) {
  
  sremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupApply.sRemark)
}
 ::std::string* GroupApply::mutable_sremark() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupApply.sRemark)
  return sremark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupApply::release_sremark() {
  // @@protoc_insertion_point(field_release:im.GroupApply.sRemark)
  
  return sremark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupApply::set_allocated_sremark(::std::string* sremark) {
  if (sremark != NULL) {
    
  } else {
    
  }
  sremark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sremark);
  // @@protoc_insertion_point(field_set_allocated:im.GroupApply.sRemark)
}

// optional string extend = 5;
void GroupApply::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupApply::extend() const {
  // @@protoc_insertion_point(field_get:im.GroupApply.extend)
  return extend_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupApply::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupApply.extend)
}
 void GroupApply::set_extend(const char* value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupApply.extend)
}
 void GroupApply::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupApply.extend)
}
 ::std::string* GroupApply::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupApply.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupApply::release_extend() {
  // @@protoc_insertion_point(field_release:im.GroupApply.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupApply::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.GroupApply.extend)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupApplyAck::kSUserIdFieldNumber;
const int GroupApplyAck::kSGroupIdFieldNumber;
const int GroupApplyAck::kSMsgIdFieldNumber;
const int GroupApplyAck::kErrcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupApplyAck::GroupApplyAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupApplyAck)
}

void GroupApplyAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupApplyAck::GroupApplyAck(const GroupApplyAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupApplyAck)
}

void GroupApplyAck::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

GroupApplyAck::~GroupApplyAck() {
  // @@protoc_insertion_point(destructor:im.GroupApplyAck)
  SharedDtor();
}

void GroupApplyAck::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupApplyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupApplyAck& GroupApplyAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupApplyAck* GroupApplyAck::default_instance_ = NULL;

GroupApplyAck* GroupApplyAck::New(::google::protobuf::Arena* arena) const {
  GroupApplyAck* n = new GroupApplyAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupApplyAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupApplyAck)
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

bool GroupApplyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupApplyAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupApplyAck.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sGroupId;
        break;
      }

      // optional string sGroupId = 2;
      case 2: {
        if (tag == 18) {
         parse_sGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupid().data(), this->sgroupid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupApplyAck.sGroupId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 3;
      case 3: {
        if (tag == 26) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupApplyAck.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_errcode;
        break;
      }

      // optional .im.ErrCode errcode = 4;
      case 4: {
        if (tag == 32) {
         parse_errcode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errcode(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupApplyAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupApplyAck)
  return false;
#undef DO_
}

void GroupApplyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupApplyAck)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupApplyAck.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupid().data(), this->sgroupid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupApplyAck.sGroupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sgroupid(), output);
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupApplyAck.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->smsgid(), output);
  }

  // optional .im.ErrCode errcode = 4;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->errcode(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupApplyAck)
}

int GroupApplyAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupApplyAck)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupid());
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional .im.ErrCode errcode = 4;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupApplyAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupApplyAck*>(&from));
}

void GroupApplyAck::MergeFrom(const GroupApplyAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupApplyAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.sgroupid().size() > 0) {

    sgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupid_);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void GroupApplyAck::CopyFrom(const GroupApplyAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupApplyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupApplyAck::IsInitialized() const {

  return true;
}

void GroupApplyAck::Swap(GroupApplyAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupApplyAck::InternalSwap(GroupApplyAck* other) {
  suserid_.Swap(&other->suserid_);
  sgroupid_.Swap(&other->sgroupid_);
  smsgid_.Swap(&other->smsgid_);
  std::swap(errcode_, other->errcode_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupApplyAck::GetTypeName() const {
  return "im.GroupApplyAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupApplyAck

// optional string sUserId = 1;
void GroupApplyAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupApplyAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupApplyAck.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupApplyAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupApplyAck.sUserId)
}
 void GroupApplyAck::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupApplyAck.sUserId)
}
 void GroupApplyAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupApplyAck.sUserId)
}
 ::std::string* GroupApplyAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupApplyAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupApplyAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupApplyAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupApplyAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupApplyAck.sUserId)
}

// optional string sGroupId = 2;
void GroupApplyAck::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupApplyAck::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupApplyAck.sGroupId)
  return sgroupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupApplyAck::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupApplyAck.sGroupId)
}
 void GroupApplyAck::set_sgroupid(const char* value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupApplyAck.sGroupId)
}
 void GroupApplyAck::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupApplyAck.sGroupId)
}
 ::std::string* GroupApplyAck::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupApplyAck.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupApplyAck::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupApplyAck.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupApplyAck::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupApplyAck.sGroupId)
}

// optional string sMsgId = 3;
void GroupApplyAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupApplyAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupApplyAck.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupApplyAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupApplyAck.sMsgId)
}
 void GroupApplyAck::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupApplyAck.sMsgId)
}
 void GroupApplyAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupApplyAck.sMsgId)
}
 ::std::string* GroupApplyAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupApplyAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupApplyAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupApplyAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupApplyAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupApplyAck.sMsgId)
}

// optional .im.ErrCode errcode = 4;
void GroupApplyAck::clear_errcode() {
  errcode_ = 0;
}
 ::im::ErrCode GroupApplyAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupApplyAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
 void GroupApplyAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupApplyAck.errcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupInvite::kSInviterIdFieldNumber;
const int GroupInvite::kSInviteeIdsFieldNumber;
const int GroupInvite::kSGroupIdFieldNumber;
const int GroupInvite::kSMsgIdFieldNumber;
const int GroupInvite::kSRemarkFieldNumber;
const int GroupInvite::kExtendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupInvite::GroupInvite()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupInvite)
}

void GroupInvite::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupInvite::GroupInvite(const GroupInvite& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupInvite)
}

void GroupInvite::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sinviterid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sremark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupInvite::~GroupInvite() {
  // @@protoc_insertion_point(destructor:im.GroupInvite)
  SharedDtor();
}

void GroupInvite::SharedDtor() {
  sinviterid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sremark_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupInvite& GroupInvite::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupInvite* GroupInvite::default_instance_ = NULL;

GroupInvite* GroupInvite::New(::google::protobuf::Arena* arena) const {
  GroupInvite* n = new GroupInvite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupInvite)
  sinviterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sremark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sinviteeids_.Clear();
}

bool GroupInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sInviterId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sinviterid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sinviterid().data(), this->sinviterid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupInvite.sInviterId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sInviteeIds;
        break;
      }

      // repeated string sInviteeIds = 2;
      case 2: {
        if (tag == 18) {
         parse_sInviteeIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sinviteeids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sinviteeids(this->sinviteeids_size() - 1).data(),
            this->sinviteeids(this->sinviteeids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupInvite.sInviteeIds"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sInviteeIds;
        if (input->ExpectTag(26)) goto parse_sGroupId;
        break;
      }

      // optional string sGroupId = 3;
      case 3: {
        if (tag == 26) {
         parse_sGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupid().data(), this->sgroupid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupInvite.sGroupId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 4;
      case 4: {
        if (tag == 34) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupInvite.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sRemark;
        break;
      }

      // optional string sRemark = 5;
      case 5: {
        if (tag == 42) {
         parse_sRemark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sremark()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sremark().data(), this->sremark().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupInvite.sRemark"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_extend;
        break;
      }

      // optional string extend = 6;
      case 6: {
        if (tag == 50) {
         parse_extend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extend()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extend().data(), this->extend().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupInvite.extend"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupInvite)
  return false;
#undef DO_
}

void GroupInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupInvite)
  // optional string sInviterId = 1;
  if (this->sinviterid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sinviterid().data(), this->sinviterid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupInvite.sInviterId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sinviterid(), output);
  }

  // repeated string sInviteeIds = 2;
  for (int i = 0; i < this->sinviteeids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sinviteeids(i).data(), this->sinviteeids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupInvite.sInviteeIds");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sinviteeids(i), output);
  }

  // optional string sGroupId = 3;
  if (this->sgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupid().data(), this->sgroupid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupInvite.sGroupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sgroupid(), output);
  }

  // optional string sMsgId = 4;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupInvite.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->smsgid(), output);
  }

  // optional string sRemark = 5;
  if (this->sremark().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sremark().data(), this->sremark().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupInvite.sRemark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sremark(), output);
  }

  // optional string extend = 6;
  if (this->extend().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extend().data(), this->extend().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupInvite.extend");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->extend(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupInvite)
}

int GroupInvite::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupInvite)
  int total_size = 0;

  // optional string sInviterId = 1;
  if (this->sinviterid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sinviterid());
  }

  // optional string sGroupId = 3;
  if (this->sgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupid());
  }

  // optional string sMsgId = 4;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional string sRemark = 5;
  if (this->sremark().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sremark());
  }

  // optional string extend = 6;
  if (this->extend().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extend());
  }

  // repeated string sInviteeIds = 2;
  total_size += 1 * this->sinviteeids_size();
  for (int i = 0; i < this->sinviteeids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sinviteeids(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupInvite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupInvite*>(&from));
}

void GroupInvite::MergeFrom(const GroupInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupInvite)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  sinviteeids_.MergeFrom(from.sinviteeids_);
  if (from.sinviterid().size() > 0) {

    sinviterid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sinviterid_);
  }
  if (from.sgroupid().size() > 0) {

    sgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupid_);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.sremark().size() > 0) {

    sremark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sremark_);
  }
  if (from.extend().size() > 0) {

    extend_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extend_);
  }
}

void GroupInvite::CopyFrom(const GroupInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInvite::IsInitialized() const {

  return true;
}

void GroupInvite::Swap(GroupInvite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupInvite::InternalSwap(GroupInvite* other) {
  sinviterid_.Swap(&other->sinviterid_);
  sinviteeids_.UnsafeArenaSwap(&other->sinviteeids_);
  sgroupid_.Swap(&other->sgroupid_);
  smsgid_.Swap(&other->smsgid_);
  sremark_.Swap(&other->sremark_);
  extend_.Swap(&other->extend_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupInvite::GetTypeName() const {
  return "im.GroupInvite";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupInvite

// optional string sInviterId = 1;
void GroupInvite::clear_sinviterid() {
  sinviterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupInvite::sinviterid() const {
  // @@protoc_insertion_point(field_get:im.GroupInvite.sInviterId)
  return sinviterid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInvite::set_sinviterid(const ::std::string& value) {
  
  sinviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInvite.sInviterId)
}
 void GroupInvite::set_sinviterid(const char* value) {
  
  sinviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInvite.sInviterId)
}
 void GroupInvite::set_sinviterid(const char* value, size_t size) {
  
  sinviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInvite.sInviterId)
}
 ::std::string* GroupInvite::mutable_sinviterid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInvite.sInviterId)
  return sinviterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupInvite::release_sinviterid() {
  // @@protoc_insertion_point(field_release:im.GroupInvite.sInviterId)
  
  return sinviterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInvite::set_allocated_sinviterid(::std::string* sinviterid) {
  if (sinviterid != NULL) {
    
  } else {
    
  }
  sinviterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sinviterid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInvite.sInviterId)
}

// repeated string sInviteeIds = 2;
int GroupInvite::sinviteeids_size() const {
  return sinviteeids_.size();
}
void GroupInvite::clear_sinviteeids() {
  sinviteeids_.Clear();
}
 const ::std::string& GroupInvite::sinviteeids(int index) const {
  // @@protoc_insertion_point(field_get:im.GroupInvite.sInviteeIds)
  return sinviteeids_.Get(index);
}
 ::std::string* GroupInvite::mutable_sinviteeids(int index) {
  // @@protoc_insertion_point(field_mutable:im.GroupInvite.sInviteeIds)
  return sinviteeids_.Mutable(index);
}
 void GroupInvite::set_sinviteeids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im.GroupInvite.sInviteeIds)
  sinviteeids_.Mutable(index)->assign(value);
}
 void GroupInvite::set_sinviteeids(int index, const char* value) {
  sinviteeids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im.GroupInvite.sInviteeIds)
}
 void GroupInvite::set_sinviteeids(int index, const char* value, size_t size) {
  sinviteeids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im.GroupInvite.sInviteeIds)
}
 ::std::string* GroupInvite::add_sinviteeids() {
  // @@protoc_insertion_point(field_add_mutable:im.GroupInvite.sInviteeIds)
  return sinviteeids_.Add();
}
 void GroupInvite::add_sinviteeids(const ::std::string& value) {
  sinviteeids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im.GroupInvite.sInviteeIds)
}
 void GroupInvite::add_sinviteeids(const char* value) {
  sinviteeids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im.GroupInvite.sInviteeIds)
}
 void GroupInvite::add_sinviteeids(const char* value, size_t size) {
  sinviteeids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im.GroupInvite.sInviteeIds)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GroupInvite::sinviteeids() const {
  // @@protoc_insertion_point(field_list:im.GroupInvite.sInviteeIds)
  return sinviteeids_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GroupInvite::mutable_sinviteeids() {
  // @@protoc_insertion_point(field_mutable_list:im.GroupInvite.sInviteeIds)
  return &sinviteeids_;
}

// optional string sGroupId = 3;
void GroupInvite::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupInvite::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupInvite.sGroupId)
  return sgroupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInvite::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInvite.sGroupId)
}
 void GroupInvite::set_sgroupid(const char* value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInvite.sGroupId)
}
 void GroupInvite::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInvite.sGroupId)
}
 ::std::string* GroupInvite::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInvite.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupInvite::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupInvite.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInvite::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInvite.sGroupId)
}

// optional string sMsgId = 4;
void GroupInvite::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupInvite::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupInvite.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInvite::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInvite.sMsgId)
}
 void GroupInvite::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInvite.sMsgId)
}
 void GroupInvite::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInvite.sMsgId)
}
 ::std::string* GroupInvite::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInvite.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupInvite::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupInvite.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInvite::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInvite.sMsgId)
}

// optional string sRemark = 5;
void GroupInvite::clear_sremark() {
  sremark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupInvite::sremark() const {
  // @@protoc_insertion_point(field_get:im.GroupInvite.sRemark)
  return sremark_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInvite::set_sremark(const ::std::string& value) {
  
  sremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInvite.sRemark)
}
 void GroupInvite::set_sremark(const char* value) {
  
  sremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInvite.sRemark)
}
 void GroupInvite::set_sremark(const char* value, size_t size) {
  
  sremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInvite.sRemark)
}
 ::std::string* GroupInvite::mutable_sremark() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInvite.sRemark)
  return sremark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupInvite::release_sremark() {
  // @@protoc_insertion_point(field_release:im.GroupInvite.sRemark)
  
  return sremark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInvite::set_allocated_sremark(::std::string* sremark) {
  if (sremark != NULL) {
    
  } else {
    
  }
  sremark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sremark);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInvite.sRemark)
}

// optional string extend = 6;
void GroupInvite::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupInvite::extend() const {
  // @@protoc_insertion_point(field_get:im.GroupInvite.extend)
  return extend_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInvite::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInvite.extend)
}
 void GroupInvite::set_extend(const char* value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInvite.extend)
}
 void GroupInvite::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInvite.extend)
}
 ::std::string* GroupInvite::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInvite.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupInvite::release_extend() {
  // @@protoc_insertion_point(field_release:im.GroupInvite.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInvite::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInvite.extend)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupInviteAck::kSUserIdFieldNumber;
const int GroupInviteAck::kSGroupIdFieldNumber;
const int GroupInviteAck::kSMsgIdFieldNumber;
const int GroupInviteAck::kErrcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupInviteAck::GroupInviteAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupInviteAck)
}

void GroupInviteAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupInviteAck::GroupInviteAck(const GroupInviteAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupInviteAck)
}

void GroupInviteAck::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

GroupInviteAck::~GroupInviteAck() {
  // @@protoc_insertion_point(destructor:im.GroupInviteAck)
  SharedDtor();
}

void GroupInviteAck::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupInviteAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupInviteAck& GroupInviteAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupInviteAck* GroupInviteAck::default_instance_ = NULL;

GroupInviteAck* GroupInviteAck::New(::google::protobuf::Arena* arena) const {
  GroupInviteAck* n = new GroupInviteAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupInviteAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupInviteAck)
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

bool GroupInviteAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupInviteAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupInviteAck.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sGroupId;
        break;
      }

      // optional string sGroupId = 2;
      case 2: {
        if (tag == 18) {
         parse_sGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupid().data(), this->sgroupid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupInviteAck.sGroupId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 3;
      case 3: {
        if (tag == 26) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupInviteAck.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_errcode;
        break;
      }

      // optional .im.ErrCode errcode = 4;
      case 4: {
        if (tag == 32) {
         parse_errcode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errcode(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupInviteAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupInviteAck)
  return false;
#undef DO_
}

void GroupInviteAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupInviteAck)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupInviteAck.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupid().data(), this->sgroupid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupInviteAck.sGroupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sgroupid(), output);
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupInviteAck.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->smsgid(), output);
  }

  // optional .im.ErrCode errcode = 4;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->errcode(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupInviteAck)
}

int GroupInviteAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupInviteAck)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupid());
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional .im.ErrCode errcode = 4;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupInviteAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupInviteAck*>(&from));
}

void GroupInviteAck::MergeFrom(const GroupInviteAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupInviteAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.sgroupid().size() > 0) {

    sgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupid_);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void GroupInviteAck::CopyFrom(const GroupInviteAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupInviteAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInviteAck::IsInitialized() const {

  return true;
}

void GroupInviteAck::Swap(GroupInviteAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupInviteAck::InternalSwap(GroupInviteAck* other) {
  suserid_.Swap(&other->suserid_);
  sgroupid_.Swap(&other->sgroupid_);
  smsgid_.Swap(&other->smsgid_);
  std::swap(errcode_, other->errcode_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupInviteAck::GetTypeName() const {
  return "im.GroupInviteAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupInviteAck

// optional string sUserId = 1;
void GroupInviteAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupInviteAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupInviteAck.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInviteAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInviteAck.sUserId)
}
 void GroupInviteAck::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInviteAck.sUserId)
}
 void GroupInviteAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInviteAck.sUserId)
}
 ::std::string* GroupInviteAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInviteAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupInviteAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupInviteAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInviteAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInviteAck.sUserId)
}

// optional string sGroupId = 2;
void GroupInviteAck::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupInviteAck::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupInviteAck.sGroupId)
  return sgroupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInviteAck::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInviteAck.sGroupId)
}
 void GroupInviteAck::set_sgroupid(const char* value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInviteAck.sGroupId)
}
 void GroupInviteAck::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInviteAck.sGroupId)
}
 ::std::string* GroupInviteAck::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInviteAck.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupInviteAck::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupInviteAck.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInviteAck::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInviteAck.sGroupId)
}

// optional string sMsgId = 3;
void GroupInviteAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupInviteAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupInviteAck.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInviteAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInviteAck.sMsgId)
}
 void GroupInviteAck::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInviteAck.sMsgId)
}
 void GroupInviteAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInviteAck.sMsgId)
}
 ::std::string* GroupInviteAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInviteAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupInviteAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupInviteAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInviteAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInviteAck.sMsgId)
}

// optional .im.ErrCode errcode = 4;
void GroupInviteAck::clear_errcode() {
  errcode_ = 0;
}
 ::im::ErrCode GroupInviteAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupInviteAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
 void GroupInviteAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupInviteAck.errcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupMember::kSUserIdFieldNumber;
const int GroupMember::kSGroupIdFieldNumber;
const int GroupMember::kNPageIndexFieldNumber;
const int GroupMember::kNPageCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupMember::GroupMember()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupMember)
}

void GroupMember::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupMember::GroupMember(const GroupMember& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupMember)
}

void GroupMember::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  npageindex_ = 0u;
  npagecount_ = 0u;
}

GroupMember::~GroupMember() {
  // @@protoc_insertion_point(destructor:im.GroupMember)
  SharedDtor();
}

void GroupMember::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupMember& GroupMember::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupMember* GroupMember::default_instance_ = NULL;

GroupMember* GroupMember::New(::google::protobuf::Arena* arena) const {
  GroupMember* n = new GroupMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupMember::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupMember)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GroupMember, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GroupMember*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(npageindex_, npagecount_);
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool GroupMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupMember.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sGroupId;
        break;
      }

      // optional string sGroupId = 2;
      case 2: {
        if (tag == 18) {
         parse_sGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupid().data(), this->sgroupid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupMember.sGroupId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nPageIndex;
        break;
      }

      // optional uint32 nPageIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_nPageIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npageindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nPageCount;
        break;
      }

      // optional uint32 nPageCount = 4;
      case 4: {
        if (tag == 32) {
         parse_nPageCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npagecount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupMember)
  return false;
#undef DO_
}

void GroupMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupMember)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupMember.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupid().data(), this->sgroupid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupMember.sGroupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sgroupid(), output);
  }

  // optional uint32 nPageIndex = 3;
  if (this->npageindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->npageindex(), output);
  }

  // optional uint32 nPageCount = 4;
  if (this->npagecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->npagecount(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupMember)
}

int GroupMember::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupMember)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupid());
  }

  // optional uint32 nPageIndex = 3;
  if (this->npageindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->npageindex());
  }

  // optional uint32 nPageCount = 4;
  if (this->npagecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->npagecount());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupMember::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupMember*>(&from));
}

void GroupMember::MergeFrom(const GroupMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupMember)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.sgroupid().size() > 0) {

    sgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupid_);
  }
  if (from.npageindex() != 0) {
    set_npageindex(from.npageindex());
  }
  if (from.npagecount() != 0) {
    set_npagecount(from.npagecount());
  }
}

void GroupMember::CopyFrom(const GroupMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMember::IsInitialized() const {

  return true;
}

void GroupMember::Swap(GroupMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupMember::InternalSwap(GroupMember* other) {
  suserid_.Swap(&other->suserid_);
  sgroupid_.Swap(&other->sgroupid_);
  std::swap(npageindex_, other->npageindex_);
  std::swap(npagecount_, other->npagecount_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupMember::GetTypeName() const {
  return "im.GroupMember";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupMember

// optional string sUserId = 1;
void GroupMember::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupMember::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupMember.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupMember::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupMember.sUserId)
}
 void GroupMember::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupMember.sUserId)
}
 void GroupMember::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupMember.sUserId)
}
 ::std::string* GroupMember::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupMember.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupMember::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupMember.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupMember::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupMember.sUserId)
}

// optional string sGroupId = 2;
void GroupMember::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupMember::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupMember.sGroupId)
  return sgroupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupMember::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupMember.sGroupId)
}
 void GroupMember::set_sgroupid(const char* value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupMember.sGroupId)
}
 void GroupMember::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupMember.sGroupId)
}
 ::std::string* GroupMember::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupMember.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupMember::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupMember.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupMember::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupMember.sGroupId)
}

// optional uint32 nPageIndex = 3;
void GroupMember::clear_npageindex() {
  npageindex_ = 0u;
}
 ::google::protobuf::uint32 GroupMember::npageindex() const {
  // @@protoc_insertion_point(field_get:im.GroupMember.nPageIndex)
  return npageindex_;
}
 void GroupMember::set_npageindex(::google::protobuf::uint32 value) {
  
  npageindex_ = value;
  // @@protoc_insertion_point(field_set:im.GroupMember.nPageIndex)
}

// optional uint32 nPageCount = 4;
void GroupMember::clear_npagecount() {
  npagecount_ = 0u;
}
 ::google::protobuf::uint32 GroupMember::npagecount() const {
  // @@protoc_insertion_point(field_get:im.GroupMember.nPageCount)
  return npagecount_;
}
 void GroupMember::set_npagecount(::google::protobuf::uint32 value) {
  
  npagecount_ = value;
  // @@protoc_insertion_point(field_set:im.GroupMember.nPageCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupMemberAck::kSUserIdFieldNumber;
const int GroupMemberAck::kSGroupIdFieldNumber;
const int GroupMemberAck::kNPageIndexFieldNumber;
const int GroupMemberAck::kMembersFieldNumber;
const int GroupMemberAck::kErrcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupMemberAck::GroupMemberAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupMemberAck)
}

void GroupMemberAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupMemberAck::GroupMemberAck(const GroupMemberAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupMemberAck)
}

void GroupMemberAck::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  npageindex_ = 0u;
  errcode_ = 0;
}

GroupMemberAck::~GroupMemberAck() {
  // @@protoc_insertion_point(destructor:im.GroupMemberAck)
  SharedDtor();
}

void GroupMemberAck::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupMemberAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupMemberAck& GroupMemberAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupMemberAck* GroupMemberAck::default_instance_ = NULL;

GroupMemberAck* GroupMemberAck::New(::google::protobuf::Arena* arena) const {
  GroupMemberAck* n = new GroupMemberAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupMemberAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupMemberAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GroupMemberAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GroupMemberAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(npageindex_, errcode_);
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  members_.Clear();
}

bool GroupMemberAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupMemberAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupMemberAck.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sGroupId;
        break;
      }

      // optional string sGroupId = 2;
      case 2: {
        if (tag == 18) {
         parse_sGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupid().data(), this->sgroupid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupMemberAck.sGroupId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nPageIndex;
        break;
      }

      // optional uint32 nPageIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_nPageIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npageindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_members;
        break;
      }

      // repeated .im.Member members = 4;
      case 4: {
        if (tag == 34) {
         parse_members:
          DO_(input->IncrementRecursionDepth());
         parse_loop_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_members;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_errcode;
        break;
      }

      // optional .im.ErrCode errcode = 5;
      case 5: {
        if (tag == 40) {
         parse_errcode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errcode(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupMemberAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupMemberAck)
  return false;
#undef DO_
}

void GroupMemberAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupMemberAck)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupMemberAck.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupid().data(), this->sgroupid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupMemberAck.sGroupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sgroupid(), output);
  }

  // optional uint32 nPageIndex = 3;
  if (this->npageindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->npageindex(), output);
  }

  // repeated .im.Member members = 4;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->members(i), output);
  }

  // optional .im.ErrCode errcode = 5;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->errcode(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupMemberAck)
}

int GroupMemberAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupMemberAck)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupid());
  }

  // optional uint32 nPageIndex = 3;
  if (this->npageindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->npageindex());
  }

  // optional .im.ErrCode errcode = 5;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
  }

  // repeated .im.Member members = 4;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupMemberAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupMemberAck*>(&from));
}

void GroupMemberAck::MergeFrom(const GroupMemberAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupMemberAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  members_.MergeFrom(from.members_);
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.sgroupid().size() > 0) {

    sgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupid_);
  }
  if (from.npageindex() != 0) {
    set_npageindex(from.npageindex());
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void GroupMemberAck::CopyFrom(const GroupMemberAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupMemberAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMemberAck::IsInitialized() const {

  return true;
}

void GroupMemberAck::Swap(GroupMemberAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupMemberAck::InternalSwap(GroupMemberAck* other) {
  suserid_.Swap(&other->suserid_);
  sgroupid_.Swap(&other->sgroupid_);
  std::swap(npageindex_, other->npageindex_);
  members_.UnsafeArenaSwap(&other->members_);
  std::swap(errcode_, other->errcode_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupMemberAck::GetTypeName() const {
  return "im.GroupMemberAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupMemberAck

// optional string sUserId = 1;
void GroupMemberAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupMemberAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupMemberAck.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupMemberAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupMemberAck.sUserId)
}
 void GroupMemberAck::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupMemberAck.sUserId)
}
 void GroupMemberAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupMemberAck.sUserId)
}
 ::std::string* GroupMemberAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupMemberAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupMemberAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupMemberAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupMemberAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupMemberAck.sUserId)
}

// optional string sGroupId = 2;
void GroupMemberAck::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupMemberAck::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupMemberAck.sGroupId)
  return sgroupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupMemberAck::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupMemberAck.sGroupId)
}
 void GroupMemberAck::set_sgroupid(const char* value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupMemberAck.sGroupId)
}
 void GroupMemberAck::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupMemberAck.sGroupId)
}
 ::std::string* GroupMemberAck::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupMemberAck.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupMemberAck::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupMemberAck.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupMemberAck::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupMemberAck.sGroupId)
}

// optional uint32 nPageIndex = 3;
void GroupMemberAck::clear_npageindex() {
  npageindex_ = 0u;
}
 ::google::protobuf::uint32 GroupMemberAck::npageindex() const {
  // @@protoc_insertion_point(field_get:im.GroupMemberAck.nPageIndex)
  return npageindex_;
}
 void GroupMemberAck::set_npageindex(::google::protobuf::uint32 value) {
  
  npageindex_ = value;
  // @@protoc_insertion_point(field_set:im.GroupMemberAck.nPageIndex)
}

// repeated .im.Member members = 4;
int GroupMemberAck::members_size() const {
  return members_.size();
}
void GroupMemberAck::clear_members() {
  members_.Clear();
}
const ::im::Member& GroupMemberAck::members(int index) const {
  // @@protoc_insertion_point(field_get:im.GroupMemberAck.members)
  return members_.Get(index);
}
::im::Member* GroupMemberAck::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:im.GroupMemberAck.members)
  return members_.Mutable(index);
}
::im::Member* GroupMemberAck::add_members() {
  // @@protoc_insertion_point(field_add:im.GroupMemberAck.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::im::Member >*
GroupMemberAck::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:im.GroupMemberAck.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::im::Member >&
GroupMemberAck::members() const {
  // @@protoc_insertion_point(field_list:im.GroupMemberAck.members)
  return members_;
}

// optional .im.ErrCode errcode = 5;
void GroupMemberAck::clear_errcode() {
  errcode_ = 0;
}
 ::im::ErrCode GroupMemberAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupMemberAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
 void GroupMemberAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupMemberAck.errcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupKickOut::kSUserIdFieldNumber;
const int GroupKickOut::kSKickIdFieldNumber;
const int GroupKickOut::kSGroupIdFieldNumber;
const int GroupKickOut::kSMsgIdFieldNumber;
const int GroupKickOut::kExtendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupKickOut::GroupKickOut()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupKickOut)
}

void GroupKickOut::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupKickOut::GroupKickOut(const GroupKickOut& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupKickOut)
}

void GroupKickOut::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skickid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupKickOut::~GroupKickOut() {
  // @@protoc_insertion_point(destructor:im.GroupKickOut)
  SharedDtor();
}

void GroupKickOut::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skickid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupKickOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupKickOut& GroupKickOut::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupKickOut* GroupKickOut::default_instance_ = NULL;

GroupKickOut* GroupKickOut::New(::google::protobuf::Arena* arena) const {
  GroupKickOut* n = new GroupKickOut;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupKickOut::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupKickOut)
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skickid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GroupKickOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupKickOut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupKickOut.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sKickId;
        break;
      }

      // optional string sKickId = 2;
      case 2: {
        if (tag == 18) {
         parse_sKickId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skickid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->skickid().data(), this->skickid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupKickOut.sKickId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sGroupId;
        break;
      }

      // optional string sGroupId = 3;
      case 3: {
        if (tag == 26) {
         parse_sGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupid().data(), this->sgroupid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupKickOut.sGroupId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 4;
      case 4: {
        if (tag == 34) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupKickOut.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_extend;
        break;
      }

      // optional string extend = 5;
      case 5: {
        if (tag == 42) {
         parse_extend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extend()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extend().data(), this->extend().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupKickOut.extend"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupKickOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupKickOut)
  return false;
#undef DO_
}

void GroupKickOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupKickOut)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupKickOut.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional string sKickId = 2;
  if (this->skickid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->skickid().data(), this->skickid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupKickOut.sKickId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->skickid(), output);
  }

  // optional string sGroupId = 3;
  if (this->sgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupid().data(), this->sgroupid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupKickOut.sGroupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sgroupid(), output);
  }

  // optional string sMsgId = 4;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupKickOut.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->smsgid(), output);
  }

  // optional string extend = 5;
  if (this->extend().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extend().data(), this->extend().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupKickOut.extend");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->extend(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupKickOut)
}

int GroupKickOut::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupKickOut)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional string sKickId = 2;
  if (this->skickid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->skickid());
  }

  // optional string sGroupId = 3;
  if (this->sgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupid());
  }

  // optional string sMsgId = 4;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional string extend = 5;
  if (this->extend().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extend());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupKickOut::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupKickOut*>(&from));
}

void GroupKickOut::MergeFrom(const GroupKickOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupKickOut)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.skickid().size() > 0) {

    skickid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skickid_);
  }
  if (from.sgroupid().size() > 0) {

    sgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupid_);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.extend().size() > 0) {

    extend_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extend_);
  }
}

void GroupKickOut::CopyFrom(const GroupKickOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupKickOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupKickOut::IsInitialized() const {

  return true;
}

void GroupKickOut::Swap(GroupKickOut* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupKickOut::InternalSwap(GroupKickOut* other) {
  suserid_.Swap(&other->suserid_);
  skickid_.Swap(&other->skickid_);
  sgroupid_.Swap(&other->sgroupid_);
  smsgid_.Swap(&other->smsgid_);
  extend_.Swap(&other->extend_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupKickOut::GetTypeName() const {
  return "im.GroupKickOut";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupKickOut

// optional string sUserId = 1;
void GroupKickOut::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupKickOut::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupKickOut.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupKickOut::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupKickOut.sUserId)
}
 void GroupKickOut::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupKickOut.sUserId)
}
 void GroupKickOut::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupKickOut.sUserId)
}
 ::std::string* GroupKickOut::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupKickOut.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupKickOut::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupKickOut.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupKickOut::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupKickOut.sUserId)
}

// optional string sKickId = 2;
void GroupKickOut::clear_skickid() {
  skickid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupKickOut::skickid() const {
  // @@protoc_insertion_point(field_get:im.GroupKickOut.sKickId)
  return skickid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupKickOut::set_skickid(const ::std::string& value) {
  
  skickid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupKickOut.sKickId)
}
 void GroupKickOut::set_skickid(const char* value) {
  
  skickid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupKickOut.sKickId)
}
 void GroupKickOut::set_skickid(const char* value, size_t size) {
  
  skickid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupKickOut.sKickId)
}
 ::std::string* GroupKickOut::mutable_skickid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupKickOut.sKickId)
  return skickid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupKickOut::release_skickid() {
  // @@protoc_insertion_point(field_release:im.GroupKickOut.sKickId)
  
  return skickid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupKickOut::set_allocated_skickid(::std::string* skickid) {
  if (skickid != NULL) {
    
  } else {
    
  }
  skickid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skickid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupKickOut.sKickId)
}

// optional string sGroupId = 3;
void GroupKickOut::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupKickOut::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupKickOut.sGroupId)
  return sgroupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupKickOut::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupKickOut.sGroupId)
}
 void GroupKickOut::set_sgroupid(const char* value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupKickOut.sGroupId)
}
 void GroupKickOut::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupKickOut.sGroupId)
}
 ::std::string* GroupKickOut::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupKickOut.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupKickOut::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupKickOut.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupKickOut::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupKickOut.sGroupId)
}

// optional string sMsgId = 4;
void GroupKickOut::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupKickOut::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupKickOut.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupKickOut::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupKickOut.sMsgId)
}
 void GroupKickOut::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupKickOut.sMsgId)
}
 void GroupKickOut::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupKickOut.sMsgId)
}
 ::std::string* GroupKickOut::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupKickOut.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupKickOut::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupKickOut.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupKickOut::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupKickOut.sMsgId)
}

// optional string extend = 5;
void GroupKickOut::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupKickOut::extend() const {
  // @@protoc_insertion_point(field_get:im.GroupKickOut.extend)
  return extend_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupKickOut::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupKickOut.extend)
}
 void GroupKickOut::set_extend(const char* value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupKickOut.extend)
}
 void GroupKickOut::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupKickOut.extend)
}
 ::std::string* GroupKickOut::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupKickOut.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupKickOut::release_extend() {
  // @@protoc_insertion_point(field_release:im.GroupKickOut.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupKickOut::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.GroupKickOut.extend)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupKickoutAck::kSUserIdFieldNumber;
const int GroupKickoutAck::kSMsgIdFieldNumber;
const int GroupKickoutAck::kErrcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupKickoutAck::GroupKickoutAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupKickoutAck)
}

void GroupKickoutAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupKickoutAck::GroupKickoutAck(const GroupKickoutAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupKickoutAck)
}

void GroupKickoutAck::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

GroupKickoutAck::~GroupKickoutAck() {
  // @@protoc_insertion_point(destructor:im.GroupKickoutAck)
  SharedDtor();
}

void GroupKickoutAck::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupKickoutAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupKickoutAck& GroupKickoutAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupKickoutAck* GroupKickoutAck::default_instance_ = NULL;

GroupKickoutAck* GroupKickoutAck::New(::google::protobuf::Arena* arena) const {
  GroupKickoutAck* n = new GroupKickoutAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupKickoutAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupKickoutAck)
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

bool GroupKickoutAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupKickoutAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupKickoutAck.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 2;
      case 2: {
        if (tag == 18) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupKickoutAck.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_errcode;
        break;
      }

      // optional .im.ErrCode errcode = 3;
      case 3: {
        if (tag == 24) {
         parse_errcode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errcode(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupKickoutAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupKickoutAck)
  return false;
#undef DO_
}

void GroupKickoutAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupKickoutAck)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupKickoutAck.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional string sMsgId = 2;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupKickoutAck.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->smsgid(), output);
  }

  // optional .im.ErrCode errcode = 3;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->errcode(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupKickoutAck)
}

int GroupKickoutAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupKickoutAck)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional string sMsgId = 2;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional .im.ErrCode errcode = 3;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupKickoutAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupKickoutAck*>(&from));
}

void GroupKickoutAck::MergeFrom(const GroupKickoutAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupKickoutAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void GroupKickoutAck::CopyFrom(const GroupKickoutAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupKickoutAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupKickoutAck::IsInitialized() const {

  return true;
}

void GroupKickoutAck::Swap(GroupKickoutAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupKickoutAck::InternalSwap(GroupKickoutAck* other) {
  suserid_.Swap(&other->suserid_);
  smsgid_.Swap(&other->smsgid_);
  std::swap(errcode_, other->errcode_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupKickoutAck::GetTypeName() const {
  return "im.GroupKickoutAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupKickoutAck

// optional string sUserId = 1;
void GroupKickoutAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupKickoutAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupKickoutAck.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupKickoutAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupKickoutAck.sUserId)
}
 void GroupKickoutAck::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupKickoutAck.sUserId)
}
 void GroupKickoutAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupKickoutAck.sUserId)
}
 ::std::string* GroupKickoutAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupKickoutAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupKickoutAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupKickoutAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupKickoutAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupKickoutAck.sUserId)
}

// optional string sMsgId = 2;
void GroupKickoutAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupKickoutAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupKickoutAck.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupKickoutAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupKickoutAck.sMsgId)
}
 void GroupKickoutAck::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupKickoutAck.sMsgId)
}
 void GroupKickoutAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupKickoutAck.sMsgId)
}
 ::std::string* GroupKickoutAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupKickoutAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupKickoutAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupKickoutAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupKickoutAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupKickoutAck.sMsgId)
}

// optional .im.ErrCode errcode = 3;
void GroupKickoutAck::clear_errcode() {
  errcode_ = 0;
}
 ::im::ErrCode GroupKickoutAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupKickoutAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
 void GroupKickoutAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupKickoutAck.errcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupQuit::kSUserIdFieldNumber;
const int GroupQuit::kSGroupIdFieldNumber;
const int GroupQuit::kSMsgIdFieldNumber;
const int GroupQuit::kExtendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupQuit::GroupQuit()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupQuit)
}

void GroupQuit::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupQuit::GroupQuit(const GroupQuit& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupQuit)
}

void GroupQuit::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupQuit::~GroupQuit() {
  // @@protoc_insertion_point(destructor:im.GroupQuit)
  SharedDtor();
}

void GroupQuit::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupQuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupQuit& GroupQuit::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupQuit* GroupQuit::default_instance_ = NULL;

GroupQuit* GroupQuit::New(::google::protobuf::Arena* arena) const {
  GroupQuit* n = new GroupQuit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupQuit::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupQuit)
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GroupQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupQuit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupQuit.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sGroupId;
        break;
      }

      // optional string sGroupId = 2;
      case 2: {
        if (tag == 18) {
         parse_sGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupid().data(), this->sgroupid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupQuit.sGroupId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 3;
      case 3: {
        if (tag == 26) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupQuit.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_extend;
        break;
      }

      // optional string extend = 4;
      case 4: {
        if (tag == 34) {
         parse_extend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extend()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extend().data(), this->extend().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupQuit.extend"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupQuit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupQuit)
  return false;
#undef DO_
}

void GroupQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupQuit)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupQuit.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupid().data(), this->sgroupid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupQuit.sGroupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sgroupid(), output);
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupQuit.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->smsgid(), output);
  }

  // optional string extend = 4;
  if (this->extend().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extend().data(), this->extend().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupQuit.extend");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->extend(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupQuit)
}

int GroupQuit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupQuit)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupid());
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional string extend = 4;
  if (this->extend().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extend());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupQuit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupQuit*>(&from));
}

void GroupQuit::MergeFrom(const GroupQuit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupQuit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.sgroupid().size() > 0) {

    sgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupid_);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.extend().size() > 0) {

    extend_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extend_);
  }
}

void GroupQuit::CopyFrom(const GroupQuit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupQuit::IsInitialized() const {

  return true;
}

void GroupQuit::Swap(GroupQuit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupQuit::InternalSwap(GroupQuit* other) {
  suserid_.Swap(&other->suserid_);
  sgroupid_.Swap(&other->sgroupid_);
  smsgid_.Swap(&other->smsgid_);
  extend_.Swap(&other->extend_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupQuit::GetTypeName() const {
  return "im.GroupQuit";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupQuit

// optional string sUserId = 1;
void GroupQuit::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupQuit::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupQuit.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupQuit::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupQuit.sUserId)
}
 void GroupQuit::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupQuit.sUserId)
}
 void GroupQuit::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupQuit.sUserId)
}
 ::std::string* GroupQuit::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupQuit.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupQuit::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupQuit.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupQuit::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupQuit.sUserId)
}

// optional string sGroupId = 2;
void GroupQuit::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupQuit::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupQuit.sGroupId)
  return sgroupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupQuit::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupQuit.sGroupId)
}
 void GroupQuit::set_sgroupid(const char* value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupQuit.sGroupId)
}
 void GroupQuit::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupQuit.sGroupId)
}
 ::std::string* GroupQuit::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupQuit.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupQuit::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupQuit.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupQuit::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupQuit.sGroupId)
}

// optional string sMsgId = 3;
void GroupQuit::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupQuit::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupQuit.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupQuit::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupQuit.sMsgId)
}
 void GroupQuit::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupQuit.sMsgId)
}
 void GroupQuit::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupQuit.sMsgId)
}
 ::std::string* GroupQuit::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupQuit.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupQuit::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupQuit.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupQuit::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupQuit.sMsgId)
}

// optional string extend = 4;
void GroupQuit::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupQuit::extend() const {
  // @@protoc_insertion_point(field_get:im.GroupQuit.extend)
  return extend_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupQuit::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupQuit.extend)
}
 void GroupQuit::set_extend(const char* value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupQuit.extend)
}
 void GroupQuit::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupQuit.extend)
}
 ::std::string* GroupQuit::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupQuit.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupQuit::release_extend() {
  // @@protoc_insertion_point(field_release:im.GroupQuit.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupQuit::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.GroupQuit.extend)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupQuitAck::kSUserIdFieldNumber;
const int GroupQuitAck::kSGroupIdFieldNumber;
const int GroupQuitAck::kSMsgIdFieldNumber;
const int GroupQuitAck::kErrcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupQuitAck::GroupQuitAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupQuitAck)
}

void GroupQuitAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupQuitAck::GroupQuitAck(const GroupQuitAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupQuitAck)
}

void GroupQuitAck::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

GroupQuitAck::~GroupQuitAck() {
  // @@protoc_insertion_point(destructor:im.GroupQuitAck)
  SharedDtor();
}

void GroupQuitAck::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupQuitAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupQuitAck& GroupQuitAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupQuitAck* GroupQuitAck::default_instance_ = NULL;

GroupQuitAck* GroupQuitAck::New(::google::protobuf::Arena* arena) const {
  GroupQuitAck* n = new GroupQuitAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupQuitAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupQuitAck)
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

bool GroupQuitAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupQuitAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupQuitAck.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sGroupId;
        break;
      }

      // optional string sGroupId = 2;
      case 2: {
        if (tag == 18) {
         parse_sGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupid().data(), this->sgroupid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupQuitAck.sGroupId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 3;
      case 3: {
        if (tag == 26) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupQuitAck.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_errcode;
        break;
      }

      // optional .im.ErrCode errcode = 4;
      case 4: {
        if (tag == 32) {
         parse_errcode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errcode(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupQuitAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupQuitAck)
  return false;
#undef DO_
}

void GroupQuitAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupQuitAck)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupQuitAck.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupid().data(), this->sgroupid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupQuitAck.sGroupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sgroupid(), output);
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupQuitAck.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->smsgid(), output);
  }

  // optional .im.ErrCode errcode = 4;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->errcode(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupQuitAck)
}

int GroupQuitAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupQuitAck)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupid());
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional .im.ErrCode errcode = 4;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupQuitAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupQuitAck*>(&from));
}

void GroupQuitAck::MergeFrom(const GroupQuitAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupQuitAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.sgroupid().size() > 0) {

    sgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupid_);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void GroupQuitAck::CopyFrom(const GroupQuitAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupQuitAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupQuitAck::IsInitialized() const {

  return true;
}

void GroupQuitAck::Swap(GroupQuitAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupQuitAck::InternalSwap(GroupQuitAck* other) {
  suserid_.Swap(&other->suserid_);
  sgroupid_.Swap(&other->sgroupid_);
  smsgid_.Swap(&other->smsgid_);
  std::swap(errcode_, other->errcode_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupQuitAck::GetTypeName() const {
  return "im.GroupQuitAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupQuitAck

// optional string sUserId = 1;
void GroupQuitAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupQuitAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupQuitAck.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupQuitAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupQuitAck.sUserId)
}
 void GroupQuitAck::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupQuitAck.sUserId)
}
 void GroupQuitAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupQuitAck.sUserId)
}
 ::std::string* GroupQuitAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupQuitAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupQuitAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupQuitAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupQuitAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupQuitAck.sUserId)
}

// optional string sGroupId = 2;
void GroupQuitAck::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupQuitAck::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupQuitAck.sGroupId)
  return sgroupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupQuitAck::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupQuitAck.sGroupId)
}
 void GroupQuitAck::set_sgroupid(const char* value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupQuitAck.sGroupId)
}
 void GroupQuitAck::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupQuitAck.sGroupId)
}
 ::std::string* GroupQuitAck::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupQuitAck.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupQuitAck::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupQuitAck.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupQuitAck::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupQuitAck.sGroupId)
}

// optional string sMsgId = 3;
void GroupQuitAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupQuitAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupQuitAck.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupQuitAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupQuitAck.sMsgId)
}
 void GroupQuitAck::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupQuitAck.sMsgId)
}
 void GroupQuitAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupQuitAck.sMsgId)
}
 ::std::string* GroupQuitAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupQuitAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupQuitAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupQuitAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupQuitAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupQuitAck.sMsgId)
}

// optional .im.ErrCode errcode = 4;
void GroupQuitAck::clear_errcode() {
  errcode_ = 0;
}
 ::im::ErrCode GroupQuitAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupQuitAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
 void GroupQuitAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupQuitAck.errcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupModify::kSUserIdFieldNumber;
const int GroupModify::kSGroupIdFieldNumber;
const int GroupModify::kSInvolvedIdFieldNumber;
const int GroupModify::kSMsgIdFieldNumber;
const int GroupModify::kNModifyTypeFieldNumber;
const int GroupModify::kSContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupModify::GroupModify()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupModify)
}

void GroupModify::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupModify::GroupModify(const GroupModify& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupModify)
}

void GroupModify::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sinvolvedid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nmodifytype_ = 0;
  scontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupModify::~GroupModify() {
  // @@protoc_insertion_point(destructor:im.GroupModify)
  SharedDtor();
}

void GroupModify::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sinvolvedid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupModify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupModify& GroupModify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupModify* GroupModify::default_instance_ = NULL;

GroupModify* GroupModify::New(::google::protobuf::Arena* arena) const {
  GroupModify* n = new GroupModify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupModify::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupModify)
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sinvolvedid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nmodifytype_ = 0;
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GroupModify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupModify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupModify.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sGroupId;
        break;
      }

      // optional string sGroupId = 2;
      case 2: {
        if (tag == 18) {
         parse_sGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupid().data(), this->sgroupid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupModify.sGroupId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sInvolvedId;
        break;
      }

      // optional string sInvolvedId = 3;
      case 3: {
        if (tag == 26) {
         parse_sInvolvedId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sinvolvedid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sinvolvedid().data(), this->sinvolvedid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupModify.sInvolvedId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 4;
      case 4: {
        if (tag == 34) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupModify.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nModifyType;
        break;
      }

      // optional .im.NotifyType nModifyType = 5;
      case 5: {
        if (tag == 40) {
         parse_nModifyType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nmodifytype(static_cast< ::im::NotifyType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sContent;
        break;
      }

      // optional string sContent = 6;
      case 6: {
        if (tag == 50) {
         parse_sContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scontent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scontent().data(), this->scontent().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupModify.sContent"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupModify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupModify)
  return false;
#undef DO_
}

void GroupModify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupModify)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupModify.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupid().data(), this->sgroupid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupModify.sGroupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sgroupid(), output);
  }

  // optional string sInvolvedId = 3;
  if (this->sinvolvedid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sinvolvedid().data(), this->sinvolvedid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupModify.sInvolvedId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sinvolvedid(), output);
  }

  // optional string sMsgId = 4;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupModify.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->smsgid(), output);
  }

  // optional .im.NotifyType nModifyType = 5;
  if (this->nmodifytype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->nmodifytype(), output);
  }

  // optional string sContent = 6;
  if (this->scontent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scontent().data(), this->scontent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupModify.sContent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->scontent(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupModify)
}

int GroupModify::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupModify)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupid());
  }

  // optional string sInvolvedId = 3;
  if (this->sinvolvedid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sinvolvedid());
  }

  // optional string sMsgId = 4;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional .im.NotifyType nModifyType = 5;
  if (this->nmodifytype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nmodifytype());
  }

  // optional string sContent = 6;
  if (this->scontent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scontent());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupModify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupModify*>(&from));
}

void GroupModify::MergeFrom(const GroupModify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupModify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.sgroupid().size() > 0) {

    sgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupid_);
  }
  if (from.sinvolvedid().size() > 0) {

    sinvolvedid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sinvolvedid_);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.nmodifytype() != 0) {
    set_nmodifytype(from.nmodifytype());
  }
  if (from.scontent().size() > 0) {

    scontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scontent_);
  }
}

void GroupModify::CopyFrom(const GroupModify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupModify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupModify::IsInitialized() const {

  return true;
}

void GroupModify::Swap(GroupModify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupModify::InternalSwap(GroupModify* other) {
  suserid_.Swap(&other->suserid_);
  sgroupid_.Swap(&other->sgroupid_);
  sinvolvedid_.Swap(&other->sinvolvedid_);
  smsgid_.Swap(&other->smsgid_);
  std::swap(nmodifytype_, other->nmodifytype_);
  scontent_.Swap(&other->scontent_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupModify::GetTypeName() const {
  return "im.GroupModify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupModify

// optional string sUserId = 1;
void GroupModify::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupModify::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupModify.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupModify::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupModify.sUserId)
}
 void GroupModify::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupModify.sUserId)
}
 void GroupModify::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupModify.sUserId)
}
 ::std::string* GroupModify::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupModify.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupModify::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupModify.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupModify::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupModify.sUserId)
}

// optional string sGroupId = 2;
void GroupModify::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupModify::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupModify.sGroupId)
  return sgroupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupModify::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupModify.sGroupId)
}
 void GroupModify::set_sgroupid(const char* value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupModify.sGroupId)
}
 void GroupModify::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupModify.sGroupId)
}
 ::std::string* GroupModify::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupModify.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupModify::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupModify.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupModify::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupModify.sGroupId)
}

// optional string sInvolvedId = 3;
void GroupModify::clear_sinvolvedid() {
  sinvolvedid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupModify::sinvolvedid() const {
  // @@protoc_insertion_point(field_get:im.GroupModify.sInvolvedId)
  return sinvolvedid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupModify::set_sinvolvedid(const ::std::string& value) {
  
  sinvolvedid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupModify.sInvolvedId)
}
 void GroupModify::set_sinvolvedid(const char* value) {
  
  sinvolvedid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupModify.sInvolvedId)
}
 void GroupModify::set_sinvolvedid(const char* value, size_t size) {
  
  sinvolvedid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupModify.sInvolvedId)
}
 ::std::string* GroupModify::mutable_sinvolvedid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupModify.sInvolvedId)
  return sinvolvedid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupModify::release_sinvolvedid() {
  // @@protoc_insertion_point(field_release:im.GroupModify.sInvolvedId)
  
  return sinvolvedid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupModify::set_allocated_sinvolvedid(::std::string* sinvolvedid) {
  if (sinvolvedid != NULL) {
    
  } else {
    
  }
  sinvolvedid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sinvolvedid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupModify.sInvolvedId)
}

// optional string sMsgId = 4;
void GroupModify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupModify::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupModify.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupModify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupModify.sMsgId)
}
 void GroupModify::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupModify.sMsgId)
}
 void GroupModify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupModify.sMsgId)
}
 ::std::string* GroupModify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupModify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupModify::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupModify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupModify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupModify.sMsgId)
}

// optional .im.NotifyType nModifyType = 5;
void GroupModify::clear_nmodifytype() {
  nmodifytype_ = 0;
}
 ::im::NotifyType GroupModify::nmodifytype() const {
  // @@protoc_insertion_point(field_get:im.GroupModify.nModifyType)
  return static_cast< ::im::NotifyType >(nmodifytype_);
}
 void GroupModify::set_nmodifytype(::im::NotifyType value) {
  
  nmodifytype_ = value;
  // @@protoc_insertion_point(field_set:im.GroupModify.nModifyType)
}

// optional string sContent = 6;
void GroupModify::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupModify::scontent() const {
  // @@protoc_insertion_point(field_get:im.GroupModify.sContent)
  return scontent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupModify::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupModify.sContent)
}
 void GroupModify::set_scontent(const char* value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupModify.sContent)
}
 void GroupModify::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupModify.sContent)
}
 ::std::string* GroupModify::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupModify.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupModify::release_scontent() {
  // @@protoc_insertion_point(field_release:im.GroupModify.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupModify::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im.GroupModify.sContent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupModifyAck::kSUserIdFieldNumber;
const int GroupModifyAck::kSGroupIdFieldNumber;
const int GroupModifyAck::kSMsgIdFieldNumber;
const int GroupModifyAck::kErrcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupModifyAck::GroupModifyAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupModifyAck)
}

void GroupModifyAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupModifyAck::GroupModifyAck(const GroupModifyAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupModifyAck)
}

void GroupModifyAck::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

GroupModifyAck::~GroupModifyAck() {
  // @@protoc_insertion_point(destructor:im.GroupModifyAck)
  SharedDtor();
}

void GroupModifyAck::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupModifyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupModifyAck& GroupModifyAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupModifyAck* GroupModifyAck::default_instance_ = NULL;

GroupModifyAck* GroupModifyAck::New(::google::protobuf::Arena* arena) const {
  GroupModifyAck* n = new GroupModifyAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupModifyAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupModifyAck)
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

bool GroupModifyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupModifyAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupModifyAck.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sGroupId;
        break;
      }

      // optional string sGroupId = 2;
      case 2: {
        if (tag == 18) {
         parse_sGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupid().data(), this->sgroupid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupModifyAck.sGroupId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 3;
      case 3: {
        if (tag == 26) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupModifyAck.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_errcode;
        break;
      }

      // optional .im.ErrCode errcode = 4;
      case 4: {
        if (tag == 32) {
         parse_errcode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errcode(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupModifyAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupModifyAck)
  return false;
#undef DO_
}

void GroupModifyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupModifyAck)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupModifyAck.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupid().data(), this->sgroupid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupModifyAck.sGroupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sgroupid(), output);
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupModifyAck.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->smsgid(), output);
  }

  // optional .im.ErrCode errcode = 4;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->errcode(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupModifyAck)
}

int GroupModifyAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupModifyAck)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupid());
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional .im.ErrCode errcode = 4;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupModifyAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupModifyAck*>(&from));
}

void GroupModifyAck::MergeFrom(const GroupModifyAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupModifyAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.sgroupid().size() > 0) {

    sgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupid_);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void GroupModifyAck::CopyFrom(const GroupModifyAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupModifyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupModifyAck::IsInitialized() const {

  return true;
}

void GroupModifyAck::Swap(GroupModifyAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupModifyAck::InternalSwap(GroupModifyAck* other) {
  suserid_.Swap(&other->suserid_);
  sgroupid_.Swap(&other->sgroupid_);
  smsgid_.Swap(&other->smsgid_);
  std::swap(errcode_, other->errcode_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupModifyAck::GetTypeName() const {
  return "im.GroupModifyAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupModifyAck

// optional string sUserId = 1;
void GroupModifyAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupModifyAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupModifyAck.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupModifyAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupModifyAck.sUserId)
}
 void GroupModifyAck::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupModifyAck.sUserId)
}
 void GroupModifyAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupModifyAck.sUserId)
}
 ::std::string* GroupModifyAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupModifyAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupModifyAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupModifyAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupModifyAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupModifyAck.sUserId)
}

// optional string sGroupId = 2;
void GroupModifyAck::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupModifyAck::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupModifyAck.sGroupId)
  return sgroupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupModifyAck::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupModifyAck.sGroupId)
}
 void GroupModifyAck::set_sgroupid(const char* value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupModifyAck.sGroupId)
}
 void GroupModifyAck::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupModifyAck.sGroupId)
}
 ::std::string* GroupModifyAck::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupModifyAck.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupModifyAck::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupModifyAck.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupModifyAck::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupModifyAck.sGroupId)
}

// optional string sMsgId = 3;
void GroupModifyAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupModifyAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupModifyAck.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupModifyAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupModifyAck.sMsgId)
}
 void GroupModifyAck::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupModifyAck.sMsgId)
}
 void GroupModifyAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupModifyAck.sMsgId)
}
 ::std::string* GroupModifyAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupModifyAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupModifyAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupModifyAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupModifyAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupModifyAck.sMsgId)
}

// optional .im.ErrCode errcode = 4;
void GroupModifyAck::clear_errcode() {
  errcode_ = 0;
}
 ::im::ErrCode GroupModifyAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupModifyAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
 void GroupModifyAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupModifyAck.errcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupNotify::kSUserIdFieldNumber;
const int GroupNotify::kSGroupIdFieldNumber;
const int GroupNotify::kSMsgIdFieldNumber;
const int GroupNotify::kNNotifyTypeFieldNumber;
const int GroupNotify::kSContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupNotify::GroupNotify()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupNotify)
}

void GroupNotify::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupNotify::GroupNotify(const GroupNotify& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupNotify)
}

void GroupNotify::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nnotifytype_ = 0u;
  scontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupNotify::~GroupNotify() {
  // @@protoc_insertion_point(destructor:im.GroupNotify)
  SharedDtor();
}

void GroupNotify::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scontent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupNotify& GroupNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupNotify* GroupNotify::default_instance_ = NULL;

GroupNotify* GroupNotify::New(::google::protobuf::Arena* arena) const {
  GroupNotify* n = new GroupNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupNotify)
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nnotifytype_ = 0u;
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GroupNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupNotify.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sGroupId;
        break;
      }

      // optional string sGroupId = 2;
      case 2: {
        if (tag == 18) {
         parse_sGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupid().data(), this->sgroupid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupNotify.sGroupId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 3;
      case 3: {
        if (tag == 26) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupNotify.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nNotifyType;
        break;
      }

      // optional uint32 nNotifyType = 4;
      case 4: {
        if (tag == 32) {
         parse_nNotifyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nnotifytype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sContent;
        break;
      }

      // optional string sContent = 5;
      case 5: {
        if (tag == 42) {
         parse_sContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scontent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scontent().data(), this->scontent().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupNotify.sContent"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupNotify)
  return false;
#undef DO_
}

void GroupNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupNotify)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupNotify.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupid().data(), this->sgroupid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupNotify.sGroupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sgroupid(), output);
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupNotify.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->smsgid(), output);
  }

  // optional uint32 nNotifyType = 4;
  if (this->nnotifytype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nnotifytype(), output);
  }

  // optional string sContent = 5;
  if (this->scontent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scontent().data(), this->scontent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupNotify.sContent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->scontent(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupNotify)
}

int GroupNotify::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupNotify)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupid());
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional uint32 nNotifyType = 4;
  if (this->nnotifytype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nnotifytype());
  }

  // optional string sContent = 5;
  if (this->scontent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scontent());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupNotify*>(&from));
}

void GroupNotify::MergeFrom(const GroupNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.sgroupid().size() > 0) {

    sgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupid_);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.nnotifytype() != 0) {
    set_nnotifytype(from.nnotifytype());
  }
  if (from.scontent().size() > 0) {

    scontent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scontent_);
  }
}

void GroupNotify::CopyFrom(const GroupNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupNotify::IsInitialized() const {

  return true;
}

void GroupNotify::Swap(GroupNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupNotify::InternalSwap(GroupNotify* other) {
  suserid_.Swap(&other->suserid_);
  sgroupid_.Swap(&other->sgroupid_);
  smsgid_.Swap(&other->smsgid_);
  std::swap(nnotifytype_, other->nnotifytype_);
  scontent_.Swap(&other->scontent_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupNotify::GetTypeName() const {
  return "im.GroupNotify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupNotify

// optional string sUserId = 1;
void GroupNotify::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupNotify::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupNotify.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupNotify::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupNotify.sUserId)
}
 void GroupNotify::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupNotify.sUserId)
}
 void GroupNotify::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupNotify.sUserId)
}
 ::std::string* GroupNotify::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupNotify.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupNotify::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupNotify.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupNotify::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupNotify.sUserId)
}

// optional string sGroupId = 2;
void GroupNotify::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupNotify::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupNotify.sGroupId)
  return sgroupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupNotify::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupNotify.sGroupId)
}
 void GroupNotify::set_sgroupid(const char* value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupNotify.sGroupId)
}
 void GroupNotify::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupNotify.sGroupId)
}
 ::std::string* GroupNotify::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupNotify.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupNotify::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupNotify.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupNotify::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupNotify.sGroupId)
}

// optional string sMsgId = 3;
void GroupNotify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupNotify::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupNotify.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupNotify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupNotify.sMsgId)
}
 void GroupNotify::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupNotify.sMsgId)
}
 void GroupNotify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupNotify.sMsgId)
}
 ::std::string* GroupNotify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupNotify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupNotify::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupNotify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupNotify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupNotify.sMsgId)
}

// optional uint32 nNotifyType = 4;
void GroupNotify::clear_nnotifytype() {
  nnotifytype_ = 0u;
}
 ::google::protobuf::uint32 GroupNotify::nnotifytype() const {
  // @@protoc_insertion_point(field_get:im.GroupNotify.nNotifyType)
  return nnotifytype_;
}
 void GroupNotify::set_nnotifytype(::google::protobuf::uint32 value) {
  
  nnotifytype_ = value;
  // @@protoc_insertion_point(field_set:im.GroupNotify.nNotifyType)
}

// optional string sContent = 5;
void GroupNotify::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupNotify::scontent() const {
  // @@protoc_insertion_point(field_get:im.GroupNotify.sContent)
  return scontent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupNotify::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupNotify.sContent)
}
 void GroupNotify::set_scontent(const char* value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupNotify.sContent)
}
 void GroupNotify::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupNotify.sContent)
}
 ::std::string* GroupNotify::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupNotify.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupNotify::release_scontent() {
  // @@protoc_insertion_point(field_release:im.GroupNotify.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupNotify::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im.GroupNotify.sContent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupNotifyAck::kSUserIdFieldNumber;
const int GroupNotifyAck::kSGroupIdFieldNumber;
const int GroupNotifyAck::kSMsgIdFieldNumber;
const int GroupNotifyAck::kErrcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupNotifyAck::GroupNotifyAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupNotifyAck)
}

void GroupNotifyAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupNotifyAck::GroupNotifyAck(const GroupNotifyAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupNotifyAck)
}

void GroupNotifyAck::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

GroupNotifyAck::~GroupNotifyAck() {
  // @@protoc_insertion_point(destructor:im.GroupNotifyAck)
  SharedDtor();
}

void GroupNotifyAck::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupNotifyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupNotifyAck& GroupNotifyAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupNotifyAck* GroupNotifyAck::default_instance_ = NULL;

GroupNotifyAck* GroupNotifyAck::New(::google::protobuf::Arena* arena) const {
  GroupNotifyAck* n = new GroupNotifyAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupNotifyAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupNotifyAck)
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

bool GroupNotifyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupNotifyAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupNotifyAck.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sGroupId;
        break;
      }

      // optional string sGroupId = 2;
      case 2: {
        if (tag == 18) {
         parse_sGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupid().data(), this->sgroupid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupNotifyAck.sGroupId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 3;
      case 3: {
        if (tag == 26) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupNotifyAck.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_errcode;
        break;
      }

      // optional .im.ErrCode errcode = 4;
      case 4: {
        if (tag == 32) {
         parse_errcode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errcode(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupNotifyAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupNotifyAck)
  return false;
#undef DO_
}

void GroupNotifyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupNotifyAck)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupNotifyAck.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupid().data(), this->sgroupid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupNotifyAck.sGroupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sgroupid(), output);
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupNotifyAck.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->smsgid(), output);
  }

  // optional .im.ErrCode errcode = 4;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->errcode(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupNotifyAck)
}

int GroupNotifyAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupNotifyAck)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupid());
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional .im.ErrCode errcode = 4;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupNotifyAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupNotifyAck*>(&from));
}

void GroupNotifyAck::MergeFrom(const GroupNotifyAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupNotifyAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.sgroupid().size() > 0) {

    sgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupid_);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void GroupNotifyAck::CopyFrom(const GroupNotifyAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupNotifyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupNotifyAck::IsInitialized() const {

  return true;
}

void GroupNotifyAck::Swap(GroupNotifyAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupNotifyAck::InternalSwap(GroupNotifyAck* other) {
  suserid_.Swap(&other->suserid_);
  sgroupid_.Swap(&other->sgroupid_);
  smsgid_.Swap(&other->smsgid_);
  std::swap(errcode_, other->errcode_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupNotifyAck::GetTypeName() const {
  return "im.GroupNotifyAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupNotifyAck

// optional string sUserId = 1;
void GroupNotifyAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupNotifyAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupNotifyAck.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupNotifyAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupNotifyAck.sUserId)
}
 void GroupNotifyAck::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupNotifyAck.sUserId)
}
 void GroupNotifyAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupNotifyAck.sUserId)
}
 ::std::string* GroupNotifyAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupNotifyAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupNotifyAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupNotifyAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupNotifyAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupNotifyAck.sUserId)
}

// optional string sGroupId = 2;
void GroupNotifyAck::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupNotifyAck::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupNotifyAck.sGroupId)
  return sgroupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupNotifyAck::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupNotifyAck.sGroupId)
}
 void GroupNotifyAck::set_sgroupid(const char* value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupNotifyAck.sGroupId)
}
 void GroupNotifyAck::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupNotifyAck.sGroupId)
}
 ::std::string* GroupNotifyAck::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupNotifyAck.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupNotifyAck::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupNotifyAck.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupNotifyAck::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupNotifyAck.sGroupId)
}

// optional string sMsgId = 3;
void GroupNotifyAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupNotifyAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupNotifyAck.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupNotifyAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupNotifyAck.sMsgId)
}
 void GroupNotifyAck::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupNotifyAck.sMsgId)
}
 void GroupNotifyAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupNotifyAck.sMsgId)
}
 ::std::string* GroupNotifyAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupNotifyAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupNotifyAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupNotifyAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupNotifyAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupNotifyAck.sMsgId)
}

// optional .im.ErrCode errcode = 4;
void GroupNotifyAck::clear_errcode() {
  errcode_ = 0;
}
 ::im::ErrCode GroupNotifyAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupNotifyAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
 void GroupNotifyAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupNotifyAck.errcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupPermit::kSFromIdFieldNumber;
const int GroupPermit::kSToIdFieldNumber;
const int GroupPermit::kSGrpIdFieldNumber;
const int GroupPermit::kSMsgIdFieldNumber;
const int GroupPermit::kRspTypeFieldNumber;
const int GroupPermit::kErrcodeFieldNumber;
const int GroupPermit::kSRemarkFieldNumber;
const int GroupPermit::kExtendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupPermit::GroupPermit()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupPermit)
}

void GroupPermit::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupPermit::GroupPermit(const GroupPermit& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupPermit)
}

void GroupPermit::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sfromid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgrpid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rsptype_ = 0u;
  errcode_ = 0;
  sremark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupPermit::~GroupPermit() {
  // @@protoc_insertion_point(destructor:im.GroupPermit)
  SharedDtor();
}

void GroupPermit::SharedDtor() {
  sfromid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgrpid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sremark_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupPermit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupPermit& GroupPermit::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupPermit* GroupPermit::default_instance_ = NULL;

GroupPermit* GroupPermit::New(::google::protobuf::Arena* arena) const {
  GroupPermit* n = new GroupPermit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupPermit::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupPermit)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GroupPermit, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GroupPermit*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rsptype_, errcode_);
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sremark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool GroupPermit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupPermit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sFromId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sfromid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sfromid().data(), this->sfromid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupPermit.sFromId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sToId;
        break;
      }

      // optional string sToId = 2;
      case 2: {
        if (tag == 18) {
         parse_sToId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stoid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stoid().data(), this->stoid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupPermit.sToId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sGrpId;
        break;
      }

      // optional string sGrpId = 3;
      case 3: {
        if (tag == 26) {
         parse_sGrpId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgrpid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgrpid().data(), this->sgrpid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupPermit.sGrpId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 4;
      case 4: {
        if (tag == 34) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupPermit.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rspType;
        break;
      }

      // optional uint32 rspType = 5;
      case 5: {
        if (tag == 40) {
         parse_rspType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rsptype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_errcode;
        break;
      }

      // optional .im.ErrCode errcode = 6;
      case 6: {
        if (tag == 48) {
         parse_errcode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errcode(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sRemark;
        break;
      }

      // optional string sRemark = 7;
      case 7: {
        if (tag == 58) {
         parse_sRemark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sremark()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sremark().data(), this->sremark().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupPermit.sRemark"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_extend;
        break;
      }

      // optional string extend = 8;
      case 8: {
        if (tag == 66) {
         parse_extend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extend()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extend().data(), this->extend().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupPermit.extend"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupPermit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupPermit)
  return false;
#undef DO_
}

void GroupPermit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupPermit)
  // optional string sFromId = 1;
  if (this->sfromid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sfromid().data(), this->sfromid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupPermit.sFromId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sfromid(), output);
  }

  // optional string sToId = 2;
  if (this->stoid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stoid().data(), this->stoid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupPermit.sToId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stoid(), output);
  }

  // optional string sGrpId = 3;
  if (this->sgrpid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgrpid().data(), this->sgrpid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupPermit.sGrpId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sgrpid(), output);
  }

  // optional string sMsgId = 4;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupPermit.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->smsgid(), output);
  }

  // optional uint32 rspType = 5;
  if (this->rsptype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rsptype(), output);
  }

  // optional .im.ErrCode errcode = 6;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->errcode(), output);
  }

  // optional string sRemark = 7;
  if (this->sremark().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sremark().data(), this->sremark().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupPermit.sRemark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sremark(), output);
  }

  // optional string extend = 8;
  if (this->extend().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extend().data(), this->extend().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupPermit.extend");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->extend(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupPermit)
}

int GroupPermit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupPermit)
  int total_size = 0;

  // optional string sFromId = 1;
  if (this->sfromid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sfromid());
  }

  // optional string sToId = 2;
  if (this->stoid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stoid());
  }

  // optional string sGrpId = 3;
  if (this->sgrpid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgrpid());
  }

  // optional string sMsgId = 4;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional uint32 rspType = 5;
  if (this->rsptype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rsptype());
  }

  // optional .im.ErrCode errcode = 6;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
  }

  // optional string sRemark = 7;
  if (this->sremark().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sremark());
  }

  // optional string extend = 8;
  if (this->extend().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extend());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupPermit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupPermit*>(&from));
}

void GroupPermit::MergeFrom(const GroupPermit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupPermit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.sfromid().size() > 0) {

    sfromid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sfromid_);
  }
  if (from.stoid().size() > 0) {

    stoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stoid_);
  }
  if (from.sgrpid().size() > 0) {

    sgrpid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgrpid_);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.rsptype() != 0) {
    set_rsptype(from.rsptype());
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
  if (from.sremark().size() > 0) {

    sremark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sremark_);
  }
  if (from.extend().size() > 0) {

    extend_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extend_);
  }
}

void GroupPermit::CopyFrom(const GroupPermit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupPermit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupPermit::IsInitialized() const {

  return true;
}

void GroupPermit::Swap(GroupPermit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupPermit::InternalSwap(GroupPermit* other) {
  sfromid_.Swap(&other->sfromid_);
  stoid_.Swap(&other->stoid_);
  sgrpid_.Swap(&other->sgrpid_);
  smsgid_.Swap(&other->smsgid_);
  std::swap(rsptype_, other->rsptype_);
  std::swap(errcode_, other->errcode_);
  sremark_.Swap(&other->sremark_);
  extend_.Swap(&other->extend_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupPermit::GetTypeName() const {
  return "im.GroupPermit";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupPermit

// optional string sFromId = 1;
void GroupPermit::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupPermit::sfromid() const {
  // @@protoc_insertion_point(field_get:im.GroupPermit.sFromId)
  return sfromid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupPermit::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupPermit.sFromId)
}
 void GroupPermit::set_sfromid(const char* value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupPermit.sFromId)
}
 void GroupPermit::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupPermit.sFromId)
}
 ::std::string* GroupPermit::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupPermit.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupPermit::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.GroupPermit.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupPermit::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupPermit.sFromId)
}

// optional string sToId = 2;
void GroupPermit::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupPermit::stoid() const {
  // @@protoc_insertion_point(field_get:im.GroupPermit.sToId)
  return stoid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupPermit::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupPermit.sToId)
}
 void GroupPermit::set_stoid(const char* value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupPermit.sToId)
}
 void GroupPermit::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupPermit.sToId)
}
 ::std::string* GroupPermit::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupPermit.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupPermit::release_stoid() {
  // @@protoc_insertion_point(field_release:im.GroupPermit.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupPermit::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupPermit.sToId)
}

// optional string sGrpId = 3;
void GroupPermit::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupPermit::sgrpid() const {
  // @@protoc_insertion_point(field_get:im.GroupPermit.sGrpId)
  return sgrpid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupPermit::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupPermit.sGrpId)
}
 void GroupPermit::set_sgrpid(const char* value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupPermit.sGrpId)
}
 void GroupPermit::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupPermit.sGrpId)
}
 ::std::string* GroupPermit::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupPermit.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupPermit::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im.GroupPermit.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupPermit::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupPermit.sGrpId)
}

// optional string sMsgId = 4;
void GroupPermit::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupPermit::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupPermit.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupPermit::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupPermit.sMsgId)
}
 void GroupPermit::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupPermit.sMsgId)
}
 void GroupPermit::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupPermit.sMsgId)
}
 ::std::string* GroupPermit::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupPermit.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupPermit::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupPermit.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupPermit::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupPermit.sMsgId)
}

// optional uint32 rspType = 5;
void GroupPermit::clear_rsptype() {
  rsptype_ = 0u;
}
 ::google::protobuf::uint32 GroupPermit::rsptype() const {
  // @@protoc_insertion_point(field_get:im.GroupPermit.rspType)
  return rsptype_;
}
 void GroupPermit::set_rsptype(::google::protobuf::uint32 value) {
  
  rsptype_ = value;
  // @@protoc_insertion_point(field_set:im.GroupPermit.rspType)
}

// optional .im.ErrCode errcode = 6;
void GroupPermit::clear_errcode() {
  errcode_ = 0;
}
 ::im::ErrCode GroupPermit::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupPermit.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
 void GroupPermit::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupPermit.errcode)
}

// optional string sRemark = 7;
void GroupPermit::clear_sremark() {
  sremark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupPermit::sremark() const {
  // @@protoc_insertion_point(field_get:im.GroupPermit.sRemark)
  return sremark_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupPermit::set_sremark(const ::std::string& value) {
  
  sremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupPermit.sRemark)
}
 void GroupPermit::set_sremark(const char* value) {
  
  sremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupPermit.sRemark)
}
 void GroupPermit::set_sremark(const char* value, size_t size) {
  
  sremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupPermit.sRemark)
}
 ::std::string* GroupPermit::mutable_sremark() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupPermit.sRemark)
  return sremark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupPermit::release_sremark() {
  // @@protoc_insertion_point(field_release:im.GroupPermit.sRemark)
  
  return sremark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupPermit::set_allocated_sremark(::std::string* sremark) {
  if (sremark != NULL) {
    
  } else {
    
  }
  sremark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sremark);
  // @@protoc_insertion_point(field_set_allocated:im.GroupPermit.sRemark)
}

// optional string extend = 8;
void GroupPermit::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupPermit::extend() const {
  // @@protoc_insertion_point(field_get:im.GroupPermit.extend)
  return extend_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupPermit::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupPermit.extend)
}
 void GroupPermit::set_extend(const char* value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupPermit.extend)
}
 void GroupPermit::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupPermit.extend)
}
 ::std::string* GroupPermit::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupPermit.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupPermit::release_extend() {
  // @@protoc_insertion_point(field_release:im.GroupPermit.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupPermit::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.GroupPermit.extend)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupPermitAck::kSUserIdFieldNumber;
const int GroupPermitAck::kSGrpIdFieldNumber;
const int GroupPermitAck::kSMsgIdFieldNumber;
const int GroupPermitAck::kErrcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupPermitAck::GroupPermitAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupPermitAck)
}

void GroupPermitAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupPermitAck::GroupPermitAck(const GroupPermitAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupPermitAck)
}

void GroupPermitAck::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgrpid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

GroupPermitAck::~GroupPermitAck() {
  // @@protoc_insertion_point(destructor:im.GroupPermitAck)
  SharedDtor();
}

void GroupPermitAck::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgrpid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupPermitAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupPermitAck& GroupPermitAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupPermitAck* GroupPermitAck::default_instance_ = NULL;

GroupPermitAck* GroupPermitAck::New(::google::protobuf::Arena* arena) const {
  GroupPermitAck* n = new GroupPermitAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupPermitAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupPermitAck)
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

bool GroupPermitAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupPermitAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupPermitAck.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sGrpId;
        break;
      }

      // optional string sGrpId = 2;
      case 2: {
        if (tag == 18) {
         parse_sGrpId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgrpid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgrpid().data(), this->sgrpid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupPermitAck.sGrpId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 3;
      case 3: {
        if (tag == 26) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupPermitAck.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_errcode;
        break;
      }

      // optional .im.ErrCode errcode = 4;
      case 4: {
        if (tag == 32) {
         parse_errcode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errcode(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupPermitAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupPermitAck)
  return false;
#undef DO_
}

void GroupPermitAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupPermitAck)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupPermitAck.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional string sGrpId = 2;
  if (this->sgrpid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgrpid().data(), this->sgrpid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupPermitAck.sGrpId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sgrpid(), output);
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupPermitAck.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->smsgid(), output);
  }

  // optional .im.ErrCode errcode = 4;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->errcode(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupPermitAck)
}

int GroupPermitAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupPermitAck)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional string sGrpId = 2;
  if (this->sgrpid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgrpid());
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional .im.ErrCode errcode = 4;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupPermitAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupPermitAck*>(&from));
}

void GroupPermitAck::MergeFrom(const GroupPermitAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupPermitAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.sgrpid().size() > 0) {

    sgrpid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgrpid_);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void GroupPermitAck::CopyFrom(const GroupPermitAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupPermitAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupPermitAck::IsInitialized() const {

  return true;
}

void GroupPermitAck::Swap(GroupPermitAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupPermitAck::InternalSwap(GroupPermitAck* other) {
  suserid_.Swap(&other->suserid_);
  sgrpid_.Swap(&other->sgrpid_);
  smsgid_.Swap(&other->smsgid_);
  std::swap(errcode_, other->errcode_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupPermitAck::GetTypeName() const {
  return "im.GroupPermitAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupPermitAck

// optional string sUserId = 1;
void GroupPermitAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupPermitAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupPermitAck.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupPermitAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupPermitAck.sUserId)
}
 void GroupPermitAck::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupPermitAck.sUserId)
}
 void GroupPermitAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupPermitAck.sUserId)
}
 ::std::string* GroupPermitAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupPermitAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupPermitAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupPermitAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupPermitAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupPermitAck.sUserId)
}

// optional string sGrpId = 2;
void GroupPermitAck::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupPermitAck::sgrpid() const {
  // @@protoc_insertion_point(field_get:im.GroupPermitAck.sGrpId)
  return sgrpid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupPermitAck::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupPermitAck.sGrpId)
}
 void GroupPermitAck::set_sgrpid(const char* value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupPermitAck.sGrpId)
}
 void GroupPermitAck::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupPermitAck.sGrpId)
}
 ::std::string* GroupPermitAck::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupPermitAck.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupPermitAck::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im.GroupPermitAck.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupPermitAck::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupPermitAck.sGrpId)
}

// optional string sMsgId = 3;
void GroupPermitAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupPermitAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupPermitAck.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupPermitAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupPermitAck.sMsgId)
}
 void GroupPermitAck::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupPermitAck.sMsgId)
}
 void GroupPermitAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupPermitAck.sMsgId)
}
 ::std::string* GroupPermitAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupPermitAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupPermitAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupPermitAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupPermitAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupPermitAck.sMsgId)
}

// optional .im.ErrCode errcode = 4;
void GroupPermitAck::clear_errcode() {
  errcode_ = 0;
}
 ::im::ErrCode GroupPermitAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupPermitAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
 void GroupPermitAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupPermitAck.errcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupChatCancel::kSFromIdFieldNumber;
const int GroupChatCancel::kSGroupIdFieldNumber;
const int GroupChatCancel::kSMsgIdFieldNumber;
const int GroupChatCancel::kMsgTimeFieldNumber;
const int GroupChatCancel::kCancelTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupChatCancel::GroupChatCancel()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupChatCancel)
}

void GroupChatCancel::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupChatCancel::GroupChatCancel(const GroupChatCancel& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupChatCancel)
}

void GroupChatCancel::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sfromid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtime_ = GOOGLE_ULONGLONG(0);
  canceltime_ = GOOGLE_ULONGLONG(0);
}

GroupChatCancel::~GroupChatCancel() {
  // @@protoc_insertion_point(destructor:im.GroupChatCancel)
  SharedDtor();
}

void GroupChatCancel::SharedDtor() {
  sfromid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupChatCancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupChatCancel& GroupChatCancel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupChatCancel* GroupChatCancel::default_instance_ = NULL;

GroupChatCancel* GroupChatCancel::New(::google::protobuf::Arena* arena) const {
  GroupChatCancel* n = new GroupChatCancel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupChatCancel::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupChatCancel)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GroupChatCancel, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GroupChatCancel*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(msgtime_, canceltime_);
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool GroupChatCancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupChatCancel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sFromId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sfromid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sfromid().data(), this->sfromid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupChatCancel.sFromId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sGroupId;
        break;
      }

      // optional string sGroupId = 2;
      case 2: {
        if (tag == 18) {
         parse_sGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupid().data(), this->sgroupid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupChatCancel.sGroupId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 3;
      case 3: {
        if (tag == 26) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupChatCancel.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msgTime;
        break;
      }

      // optional uint64 msgTime = 4;
      case 4: {
        if (tag == 32) {
         parse_msgTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cancelTime;
        break;
      }

      // optional uint64 cancelTime = 5;
      case 5: {
        if (tag == 40) {
         parse_cancelTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &canceltime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupChatCancel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupChatCancel)
  return false;
#undef DO_
}

void GroupChatCancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupChatCancel)
  // optional string sFromId = 1;
  if (this->sfromid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sfromid().data(), this->sfromid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupChatCancel.sFromId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sfromid(), output);
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupid().data(), this->sgroupid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupChatCancel.sGroupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sgroupid(), output);
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupChatCancel.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->smsgid(), output);
  }

  // optional uint64 msgTime = 4;
  if (this->msgtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->msgtime(), output);
  }

  // optional uint64 cancelTime = 5;
  if (this->canceltime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->canceltime(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupChatCancel)
}

int GroupChatCancel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupChatCancel)
  int total_size = 0;

  // optional string sFromId = 1;
  if (this->sfromid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sfromid());
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupid());
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional uint64 msgTime = 4;
  if (this->msgtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->msgtime());
  }

  // optional uint64 cancelTime = 5;
  if (this->canceltime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->canceltime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupChatCancel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupChatCancel*>(&from));
}

void GroupChatCancel::MergeFrom(const GroupChatCancel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupChatCancel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.sfromid().size() > 0) {

    sfromid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sfromid_);
  }
  if (from.sgroupid().size() > 0) {

    sgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupid_);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.msgtime() != 0) {
    set_msgtime(from.msgtime());
  }
  if (from.canceltime() != 0) {
    set_canceltime(from.canceltime());
  }
}

void GroupChatCancel::CopyFrom(const GroupChatCancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupChatCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupChatCancel::IsInitialized() const {

  return true;
}

void GroupChatCancel::Swap(GroupChatCancel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupChatCancel::InternalSwap(GroupChatCancel* other) {
  sfromid_.Swap(&other->sfromid_);
  sgroupid_.Swap(&other->sgroupid_);
  smsgid_.Swap(&other->smsgid_);
  std::swap(msgtime_, other->msgtime_);
  std::swap(canceltime_, other->canceltime_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupChatCancel::GetTypeName() const {
  return "im.GroupChatCancel";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupChatCancel

// optional string sFromId = 1;
void GroupChatCancel::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupChatCancel::sfromid() const {
  // @@protoc_insertion_point(field_get:im.GroupChatCancel.sFromId)
  return sfromid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChatCancel::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChatCancel.sFromId)
}
 void GroupChatCancel::set_sfromid(const char* value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChatCancel.sFromId)
}
 void GroupChatCancel::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChatCancel.sFromId)
}
 ::std::string* GroupChatCancel::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChatCancel.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupChatCancel::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.GroupChatCancel.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChatCancel::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChatCancel.sFromId)
}

// optional string sGroupId = 2;
void GroupChatCancel::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupChatCancel::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupChatCancel.sGroupId)
  return sgroupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChatCancel::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChatCancel.sGroupId)
}
 void GroupChatCancel::set_sgroupid(const char* value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChatCancel.sGroupId)
}
 void GroupChatCancel::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChatCancel.sGroupId)
}
 ::std::string* GroupChatCancel::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChatCancel.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupChatCancel::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupChatCancel.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChatCancel::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChatCancel.sGroupId)
}

// optional string sMsgId = 3;
void GroupChatCancel::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupChatCancel::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupChatCancel.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChatCancel::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChatCancel.sMsgId)
}
 void GroupChatCancel::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChatCancel.sMsgId)
}
 void GroupChatCancel::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChatCancel.sMsgId)
}
 ::std::string* GroupChatCancel::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChatCancel.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupChatCancel::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupChatCancel.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChatCancel::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChatCancel.sMsgId)
}

// optional uint64 msgTime = 4;
void GroupChatCancel::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 GroupChatCancel::msgtime() const {
  // @@protoc_insertion_point(field_get:im.GroupChatCancel.msgTime)
  return msgtime_;
}
 void GroupChatCancel::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.GroupChatCancel.msgTime)
}

// optional uint64 cancelTime = 5;
void GroupChatCancel::clear_canceltime() {
  canceltime_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 GroupChatCancel::canceltime() const {
  // @@protoc_insertion_point(field_get:im.GroupChatCancel.cancelTime)
  return canceltime_;
}
 void GroupChatCancel::set_canceltime(::google::protobuf::uint64 value) {
  
  canceltime_ = value;
  // @@protoc_insertion_point(field_set:im.GroupChatCancel.cancelTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupChatCancelAck::kSFromIdFieldNumber;
const int GroupChatCancelAck::kSGroupIdFieldNumber;
const int GroupChatCancelAck::kSMsgIdFieldNumber;
const int GroupChatCancelAck::kCancelTimeFieldNumber;
const int GroupChatCancelAck::kErrcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupChatCancelAck::GroupChatCancelAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupChatCancelAck)
}

void GroupChatCancelAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupChatCancelAck::GroupChatCancelAck(const GroupChatCancelAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupChatCancelAck)
}

void GroupChatCancelAck::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sfromid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canceltime_ = GOOGLE_ULONGLONG(0);
  errcode_ = 0;
}

GroupChatCancelAck::~GroupChatCancelAck() {
  // @@protoc_insertion_point(destructor:im.GroupChatCancelAck)
  SharedDtor();
}

void GroupChatCancelAck::SharedDtor() {
  sfromid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupChatCancelAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupChatCancelAck& GroupChatCancelAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupChatCancelAck* GroupChatCancelAck::default_instance_ = NULL;

GroupChatCancelAck* GroupChatCancelAck::New(::google::protobuf::Arena* arena) const {
  GroupChatCancelAck* n = new GroupChatCancelAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupChatCancelAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupChatCancelAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GroupChatCancelAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GroupChatCancelAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(canceltime_, errcode_);
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool GroupChatCancelAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupChatCancelAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sFromId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sfromid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sfromid().data(), this->sfromid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupChatCancelAck.sFromId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sGroupId;
        break;
      }

      // optional string sGroupId = 2;
      case 2: {
        if (tag == 18) {
         parse_sGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupid().data(), this->sgroupid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupChatCancelAck.sGroupId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 3;
      case 3: {
        if (tag == 26) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupChatCancelAck.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cancelTime;
        break;
      }

      // optional uint64 cancelTime = 4;
      case 4: {
        if (tag == 32) {
         parse_cancelTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &canceltime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_errcode;
        break;
      }

      // optional .im.ErrCode errcode = 5;
      case 5: {
        if (tag == 40) {
         parse_errcode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errcode(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupChatCancelAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupChatCancelAck)
  return false;
#undef DO_
}

void GroupChatCancelAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupChatCancelAck)
  // optional string sFromId = 1;
  if (this->sfromid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sfromid().data(), this->sfromid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupChatCancelAck.sFromId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sfromid(), output);
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupid().data(), this->sgroupid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupChatCancelAck.sGroupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sgroupid(), output);
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupChatCancelAck.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->smsgid(), output);
  }

  // optional uint64 cancelTime = 4;
  if (this->canceltime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->canceltime(), output);
  }

  // optional .im.ErrCode errcode = 5;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->errcode(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupChatCancelAck)
}

int GroupChatCancelAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupChatCancelAck)
  int total_size = 0;

  // optional string sFromId = 1;
  if (this->sfromid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sfromid());
  }

  // optional string sGroupId = 2;
  if (this->sgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupid());
  }

  // optional string sMsgId = 3;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional uint64 cancelTime = 4;
  if (this->canceltime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->canceltime());
  }

  // optional .im.ErrCode errcode = 5;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupChatCancelAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupChatCancelAck*>(&from));
}

void GroupChatCancelAck::MergeFrom(const GroupChatCancelAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupChatCancelAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.sfromid().size() > 0) {

    sfromid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sfromid_);
  }
  if (from.sgroupid().size() > 0) {

    sgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupid_);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.canceltime() != 0) {
    set_canceltime(from.canceltime());
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void GroupChatCancelAck::CopyFrom(const GroupChatCancelAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupChatCancelAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupChatCancelAck::IsInitialized() const {

  return true;
}

void GroupChatCancelAck::Swap(GroupChatCancelAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupChatCancelAck::InternalSwap(GroupChatCancelAck* other) {
  sfromid_.Swap(&other->sfromid_);
  sgroupid_.Swap(&other->sgroupid_);
  smsgid_.Swap(&other->smsgid_);
  std::swap(canceltime_, other->canceltime_);
  std::swap(errcode_, other->errcode_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupChatCancelAck::GetTypeName() const {
  return "im.GroupChatCancelAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupChatCancelAck

// optional string sFromId = 1;
void GroupChatCancelAck::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupChatCancelAck::sfromid() const {
  // @@protoc_insertion_point(field_get:im.GroupChatCancelAck.sFromId)
  return sfromid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChatCancelAck::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChatCancelAck.sFromId)
}
 void GroupChatCancelAck::set_sfromid(const char* value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChatCancelAck.sFromId)
}
 void GroupChatCancelAck::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChatCancelAck.sFromId)
}
 ::std::string* GroupChatCancelAck::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChatCancelAck.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupChatCancelAck::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.GroupChatCancelAck.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChatCancelAck::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChatCancelAck.sFromId)
}

// optional string sGroupId = 2;
void GroupChatCancelAck::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupChatCancelAck::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupChatCancelAck.sGroupId)
  return sgroupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChatCancelAck::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChatCancelAck.sGroupId)
}
 void GroupChatCancelAck::set_sgroupid(const char* value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChatCancelAck.sGroupId)
}
 void GroupChatCancelAck::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChatCancelAck.sGroupId)
}
 ::std::string* GroupChatCancelAck::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChatCancelAck.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupChatCancelAck::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupChatCancelAck.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChatCancelAck::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChatCancelAck.sGroupId)
}

// optional string sMsgId = 3;
void GroupChatCancelAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupChatCancelAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupChatCancelAck.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChatCancelAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChatCancelAck.sMsgId)
}
 void GroupChatCancelAck::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChatCancelAck.sMsgId)
}
 void GroupChatCancelAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChatCancelAck.sMsgId)
}
 ::std::string* GroupChatCancelAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChatCancelAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupChatCancelAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupChatCancelAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupChatCancelAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChatCancelAck.sMsgId)
}

// optional uint64 cancelTime = 4;
void GroupChatCancelAck::clear_canceltime() {
  canceltime_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 GroupChatCancelAck::canceltime() const {
  // @@protoc_insertion_point(field_get:im.GroupChatCancelAck.cancelTime)
  return canceltime_;
}
 void GroupChatCancelAck::set_canceltime(::google::protobuf::uint64 value) {
  
  canceltime_ = value;
  // @@protoc_insertion_point(field_set:im.GroupChatCancelAck.cancelTime)
}

// optional .im.ErrCode errcode = 5;
void GroupChatCancelAck::clear_errcode() {
  errcode_ = 0;
}
 ::im::ErrCode GroupChatCancelAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupChatCancelAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
 void GroupChatCancelAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupChatCancelAck.errcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupInfo::kSGroupIdFieldNumber;
const int GroupInfo::kSGroupAdminIdFieldNumber;
const int GroupInfo::kSGroupAdminNickNameFieldNumber;
const int GroupInfo::kSGroupNameFieldNumber;
const int GroupInfo::kSGroupAnnounceFieldNumber;
const int GroupInfo::kNMemberCountFieldNumber;
const int GroupInfo::kIsMemberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupInfo::GroupInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.GroupInfo)
}

void GroupInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupInfo::GroupInfo(const GroupInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.GroupInfo)
}

void GroupInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sgroupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupadminid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupadminnickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupannounce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nmembercount_ = 0u;
  ismember_ = false;
}

GroupInfo::~GroupInfo() {
  // @@protoc_insertion_point(destructor:im.GroupInfo)
  SharedDtor();
}

void GroupInfo::SharedDtor() {
  sgroupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupadminid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupadminnickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupannounce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupInfo& GroupInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

GroupInfo* GroupInfo::default_instance_ = NULL;

GroupInfo* GroupInfo::New(::google::protobuf::Arena* arena) const {
  GroupInfo* n = new GroupInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:im.GroupInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GroupInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GroupInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(nmembercount_, ismember_);
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupadminid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupadminnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sgroupannounce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool GroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.GroupInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sGroupId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupid().data(), this->sgroupid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupInfo.sGroupId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sGroupAdminId;
        break;
      }

      // optional string sGroupAdminId = 2;
      case 2: {
        if (tag == 18) {
         parse_sGroupAdminId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupadminid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupadminid().data(), this->sgroupadminid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupInfo.sGroupAdminId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sGroupAdminNickName;
        break;
      }

      // optional string sGroupAdminNickName = 3;
      case 3: {
        if (tag == 26) {
         parse_sGroupAdminNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupadminnickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupadminnickname().data(), this->sgroupadminnickname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupInfo.sGroupAdminNickName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sGroupName;
        break;
      }

      // optional string sGroupName = 4;
      case 4: {
        if (tag == 34) {
         parse_sGroupName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupname().data(), this->sgroupname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupInfo.sGroupName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sGroupAnnounce;
        break;
      }

      // optional string sGroupAnnounce = 5;
      case 5: {
        if (tag == 42) {
         parse_sGroupAnnounce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgroupannounce()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sgroupannounce().data(), this->sgroupannounce().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.GroupInfo.sGroupAnnounce"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_nMemberCount;
        break;
      }

      // optional uint32 nMemberCount = 6;
      case 6: {
        if (tag == 48) {
         parse_nMemberCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nmembercount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isMember;
        break;
      }

      // optional bool isMember = 7;
      case 7: {
        if (tag == 56) {
         parse_isMember:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismember_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.GroupInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.GroupInfo)
  return false;
#undef DO_
}

void GroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.GroupInfo)
  // optional string sGroupId = 1;
  if (this->sgroupid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupid().data(), this->sgroupid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupInfo.sGroupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sgroupid(), output);
  }

  // optional string sGroupAdminId = 2;
  if (this->sgroupadminid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupadminid().data(), this->sgroupadminid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupInfo.sGroupAdminId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sgroupadminid(), output);
  }

  // optional string sGroupAdminNickName = 3;
  if (this->sgroupadminnickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupadminnickname().data(), this->sgroupadminnickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupInfo.sGroupAdminNickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sgroupadminnickname(), output);
  }

  // optional string sGroupName = 4;
  if (this->sgroupname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupname().data(), this->sgroupname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupInfo.sGroupName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sgroupname(), output);
  }

  // optional string sGroupAnnounce = 5;
  if (this->sgroupannounce().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sgroupannounce().data(), this->sgroupannounce().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.GroupInfo.sGroupAnnounce");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sgroupannounce(), output);
  }

  // optional uint32 nMemberCount = 6;
  if (this->nmembercount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->nmembercount(), output);
  }

  // optional bool isMember = 7;
  if (this->ismember() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->ismember(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.GroupInfo)
}

int GroupInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.GroupInfo)
  int total_size = 0;

  // optional string sGroupId = 1;
  if (this->sgroupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupid());
  }

  // optional string sGroupAdminId = 2;
  if (this->sgroupadminid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupadminid());
  }

  // optional string sGroupAdminNickName = 3;
  if (this->sgroupadminnickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupadminnickname());
  }

  // optional string sGroupName = 4;
  if (this->sgroupname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupname());
  }

  // optional string sGroupAnnounce = 5;
  if (this->sgroupannounce().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sgroupannounce());
  }

  // optional uint32 nMemberCount = 6;
  if (this->nmembercount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nmembercount());
  }

  // optional bool isMember = 7;
  if (this->ismember() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupInfo*>(&from));
}

void GroupInfo::MergeFrom(const GroupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.GroupInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.sgroupid().size() > 0) {

    sgroupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupid_);
  }
  if (from.sgroupadminid().size() > 0) {

    sgroupadminid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupadminid_);
  }
  if (from.sgroupadminnickname().size() > 0) {

    sgroupadminnickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupadminnickname_);
  }
  if (from.sgroupname().size() > 0) {

    sgroupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupname_);
  }
  if (from.sgroupannounce().size() > 0) {

    sgroupannounce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sgroupannounce_);
  }
  if (from.nmembercount() != 0) {
    set_nmembercount(from.nmembercount());
  }
  if (from.ismember() != 0) {
    set_ismember(from.ismember());
  }
}

void GroupInfo::CopyFrom(const GroupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.GroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInfo::IsInitialized() const {

  return true;
}

void GroupInfo::Swap(GroupInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupInfo::InternalSwap(GroupInfo* other) {
  sgroupid_.Swap(&other->sgroupid_);
  sgroupadminid_.Swap(&other->sgroupadminid_);
  sgroupadminnickname_.Swap(&other->sgroupadminnickname_);
  sgroupname_.Swap(&other->sgroupname_);
  sgroupannounce_.Swap(&other->sgroupannounce_);
  std::swap(nmembercount_, other->nmembercount_);
  std::swap(ismember_, other->ismember_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GroupInfo::GetTypeName() const {
  return "im.GroupInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupInfo

// optional string sGroupId = 1;
void GroupInfo::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupInfo::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupInfo.sGroupId)
  return sgroupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInfo::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInfo.sGroupId)
}
 void GroupInfo::set_sgroupid(const char* value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInfo.sGroupId)
}
 void GroupInfo::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInfo.sGroupId)
}
 ::std::string* GroupInfo::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInfo.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupInfo::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupInfo.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInfo::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInfo.sGroupId)
}

// optional string sGroupAdminId = 2;
void GroupInfo::clear_sgroupadminid() {
  sgroupadminid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupInfo::sgroupadminid() const {
  // @@protoc_insertion_point(field_get:im.GroupInfo.sGroupAdminId)
  return sgroupadminid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInfo::set_sgroupadminid(const ::std::string& value) {
  
  sgroupadminid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInfo.sGroupAdminId)
}
 void GroupInfo::set_sgroupadminid(const char* value) {
  
  sgroupadminid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInfo.sGroupAdminId)
}
 void GroupInfo::set_sgroupadminid(const char* value, size_t size) {
  
  sgroupadminid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInfo.sGroupAdminId)
}
 ::std::string* GroupInfo::mutable_sgroupadminid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInfo.sGroupAdminId)
  return sgroupadminid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupInfo::release_sgroupadminid() {
  // @@protoc_insertion_point(field_release:im.GroupInfo.sGroupAdminId)
  
  return sgroupadminid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInfo::set_allocated_sgroupadminid(::std::string* sgroupadminid) {
  if (sgroupadminid != NULL) {
    
  } else {
    
  }
  sgroupadminid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupadminid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInfo.sGroupAdminId)
}

// optional string sGroupAdminNickName = 3;
void GroupInfo::clear_sgroupadminnickname() {
  sgroupadminnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupInfo::sgroupadminnickname() const {
  // @@protoc_insertion_point(field_get:im.GroupInfo.sGroupAdminNickName)
  return sgroupadminnickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInfo::set_sgroupadminnickname(const ::std::string& value) {
  
  sgroupadminnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInfo.sGroupAdminNickName)
}
 void GroupInfo::set_sgroupadminnickname(const char* value) {
  
  sgroupadminnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInfo.sGroupAdminNickName)
}
 void GroupInfo::set_sgroupadminnickname(const char* value, size_t size) {
  
  sgroupadminnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInfo.sGroupAdminNickName)
}
 ::std::string* GroupInfo::mutable_sgroupadminnickname() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInfo.sGroupAdminNickName)
  return sgroupadminnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupInfo::release_sgroupadminnickname() {
  // @@protoc_insertion_point(field_release:im.GroupInfo.sGroupAdminNickName)
  
  return sgroupadminnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInfo::set_allocated_sgroupadminnickname(::std::string* sgroupadminnickname) {
  if (sgroupadminnickname != NULL) {
    
  } else {
    
  }
  sgroupadminnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupadminnickname);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInfo.sGroupAdminNickName)
}

// optional string sGroupName = 4;
void GroupInfo::clear_sgroupname() {
  sgroupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupInfo::sgroupname() const {
  // @@protoc_insertion_point(field_get:im.GroupInfo.sGroupName)
  return sgroupname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInfo::set_sgroupname(const ::std::string& value) {
  
  sgroupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInfo.sGroupName)
}
 void GroupInfo::set_sgroupname(const char* value) {
  
  sgroupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInfo.sGroupName)
}
 void GroupInfo::set_sgroupname(const char* value, size_t size) {
  
  sgroupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInfo.sGroupName)
}
 ::std::string* GroupInfo::mutable_sgroupname() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInfo.sGroupName)
  return sgroupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupInfo::release_sgroupname() {
  // @@protoc_insertion_point(field_release:im.GroupInfo.sGroupName)
  
  return sgroupname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInfo::set_allocated_sgroupname(::std::string* sgroupname) {
  if (sgroupname != NULL) {
    
  } else {
    
  }
  sgroupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupname);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInfo.sGroupName)
}

// optional string sGroupAnnounce = 5;
void GroupInfo::clear_sgroupannounce() {
  sgroupannounce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GroupInfo::sgroupannounce() const {
  // @@protoc_insertion_point(field_get:im.GroupInfo.sGroupAnnounce)
  return sgroupannounce_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInfo::set_sgroupannounce(const ::std::string& value) {
  
  sgroupannounce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInfo.sGroupAnnounce)
}
 void GroupInfo::set_sgroupannounce(const char* value) {
  
  sgroupannounce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInfo.sGroupAnnounce)
}
 void GroupInfo::set_sgroupannounce(const char* value, size_t size) {
  
  sgroupannounce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInfo.sGroupAnnounce)
}
 ::std::string* GroupInfo::mutable_sgroupannounce() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInfo.sGroupAnnounce)
  return sgroupannounce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GroupInfo::release_sgroupannounce() {
  // @@protoc_insertion_point(field_release:im.GroupInfo.sGroupAnnounce)
  
  return sgroupannounce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GroupInfo::set_allocated_sgroupannounce(::std::string* sgroupannounce) {
  if (sgroupannounce != NULL) {
    
  } else {
    
  }
  sgroupannounce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupannounce);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInfo.sGroupAnnounce)
}

// optional uint32 nMemberCount = 6;
void GroupInfo::clear_nmembercount() {
  nmembercount_ = 0u;
}
 ::google::protobuf::uint32 GroupInfo::nmembercount() const {
  // @@protoc_insertion_point(field_get:im.GroupInfo.nMemberCount)
  return nmembercount_;
}
 void GroupInfo::set_nmembercount(::google::protobuf::uint32 value) {
  
  nmembercount_ = value;
  // @@protoc_insertion_point(field_set:im.GroupInfo.nMemberCount)
}

// optional bool isMember = 7;
void GroupInfo::clear_ismember() {
  ismember_ = false;
}
 bool GroupInfo::ismember() const {
  // @@protoc_insertion_point(field_get:im.GroupInfo.isMember)
  return ismember_;
}
 void GroupInfo::set_ismember(bool value) {
  
  ismember_ = value;
  // @@protoc_insertion_point(field_set:im.GroupInfo.isMember)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Member::kSUserIdFieldNumber;
const int Member::kSNickNameFieldNumber;
const int Member::kNStateFieldNumber;
const int Member::kBGroupConfirmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Member::Member()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.Member)
}

void Member::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Member::Member(const Member& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.Member)
}

void Member::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nstate_ = 0u;
  bgroupconfirm_ = false;
}

Member::~Member() {
  // @@protoc_insertion_point(destructor:im.Member)
  SharedDtor();
}

void Member::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Member& Member::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2egroup_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2egroup_2eproto();
#endif
  return *default_instance_;
}

Member* Member::default_instance_ = NULL;

Member* Member::New(::google::protobuf::Arena* arena) const {
  Member* n = new Member;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Member::Clear() {
// @@protoc_insertion_point(message_clear_start:im.Member)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Member, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Member*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(nstate_, bgroupconfirm_);
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.Member.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sNickName;
        break;
      }

      // optional string sNickName = 2;
      case 2: {
        if (tag == 18) {
         parse_sNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->snickname().data(), this->snickname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.Member.sNickName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nState;
        break;
      }

      // optional uint32 nState = 3;
      case 3: {
        if (tag == 24) {
         parse_nState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nstate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bGroupConfirm;
        break;
      }

      // optional bool bGroupConfirm = 4;
      case 4: {
        if (tag == 32) {
         parse_bGroupConfirm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bgroupconfirm_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.Member)
  return false;
#undef DO_
}

void Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.Member)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.Member.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional string sNickName = 2;
  if (this->snickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snickname().data(), this->snickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.Member.sNickName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->snickname(), output);
  }

  // optional uint32 nState = 3;
  if (this->nstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nstate(), output);
  }

  // optional bool bGroupConfirm = 4;
  if (this->bgroupconfirm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bgroupconfirm(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.Member)
}

int Member::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.Member)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional string sNickName = 2;
  if (this->snickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snickname());
  }

  // optional uint32 nState = 3;
  if (this->nstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nstate());
  }

  // optional bool bGroupConfirm = 4;
  if (this->bgroupconfirm() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Member::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Member*>(&from));
}

void Member::MergeFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.Member)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.snickname().size() > 0) {

    snickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snickname_);
  }
  if (from.nstate() != 0) {
    set_nstate(from.nstate());
  }
  if (from.bgroupconfirm() != 0) {
    set_bgroupconfirm(from.bgroupconfirm());
  }
}

void Member::CopyFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const {

  return true;
}

void Member::Swap(Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Member::InternalSwap(Member* other) {
  suserid_.Swap(&other->suserid_);
  snickname_.Swap(&other->snickname_);
  std::swap(nstate_, other->nstate_);
  std::swap(bgroupconfirm_, other->bgroupconfirm_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Member::GetTypeName() const {
  return "im.Member";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Member

// optional string sUserId = 1;
void Member::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Member::suserid() const {
  // @@protoc_insertion_point(field_get:im.Member.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Member::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.Member.sUserId)
}
 void Member::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.Member.sUserId)
}
 void Member::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.Member.sUserId)
}
 ::std::string* Member::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.Member.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Member::release_suserid() {
  // @@protoc_insertion_point(field_release:im.Member.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Member::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.Member.sUserId)
}

// optional string sNickName = 2;
void Member::clear_snickname() {
  snickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Member::snickname() const {
  // @@protoc_insertion_point(field_get:im.Member.sNickName)
  return snickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Member::set_snickname(const ::std::string& value) {
  
  snickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.Member.sNickName)
}
 void Member::set_snickname(const char* value) {
  
  snickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.Member.sNickName)
}
 void Member::set_snickname(const char* value, size_t size) {
  
  snickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.Member.sNickName)
}
 ::std::string* Member::mutable_snickname() {
  
  // @@protoc_insertion_point(field_mutable:im.Member.sNickName)
  return snickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Member::release_snickname() {
  // @@protoc_insertion_point(field_release:im.Member.sNickName)
  
  return snickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Member::set_allocated_snickname(::std::string* snickname) {
  if (snickname != NULL) {
    
  } else {
    
  }
  snickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snickname);
  // @@protoc_insertion_point(field_set_allocated:im.Member.sNickName)
}

// optional uint32 nState = 3;
void Member::clear_nstate() {
  nstate_ = 0u;
}
 ::google::protobuf::uint32 Member::nstate() const {
  // @@protoc_insertion_point(field_get:im.Member.nState)
  return nstate_;
}
 void Member::set_nstate(::google::protobuf::uint32 value) {
  
  nstate_ = value;
  // @@protoc_insertion_point(field_set:im.Member.nState)
}

// optional bool bGroupConfirm = 4;
void Member::clear_bgroupconfirm() {
  bgroupconfirm_ = false;
}
 bool Member::bgroupconfirm() const {
  // @@protoc_insertion_point(field_get:im.Member.bGroupConfirm)
  return bgroupconfirm_;
}
 void Member::set_bgroupconfirm(bool value) {
  
  bgroupconfirm_ = value;
  // @@protoc_insertion_point(field_set:im.Member.bGroupConfirm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace im

// @@protoc_insertion_point(global_scope)
