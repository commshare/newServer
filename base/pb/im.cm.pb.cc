// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.cm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "im.cm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace im {

void protobuf_ShutdownFile_im_2ecm_2eproto() {
  delete CMLogin::default_instance_;
  delete CMLoginAck::default_instance_;
  delete CMLogout::default_instance_;
  delete CMLogoutAck::default_instance_;
  delete CMDeviceTokenSync::default_instance_;
  delete CMDeviceTokenSyncAck::default_instance_;
  delete CMKickoutNotification::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_im_2ecm_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_im_2ecm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_im_2ecm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::im::protobuf_AddDesc_im_2epub_2eproto();
  CMLogin::default_instance_ = new CMLogin();
  CMLoginAck::default_instance_ = new CMLoginAck();
  CMLogout::default_instance_ = new CMLogout();
  CMLogoutAck::default_instance_ = new CMLogoutAck();
  CMDeviceTokenSync::default_instance_ = new CMDeviceTokenSync();
  CMDeviceTokenSyncAck::default_instance_ = new CMDeviceTokenSyncAck();
  CMKickoutNotification::default_instance_ = new CMKickoutNotification();
  CMLogin::default_instance_->InitAsDefaultInstance();
  CMLoginAck::default_instance_->InitAsDefaultInstance();
  CMLogout::default_instance_->InitAsDefaultInstance();
  CMLogoutAck::default_instance_->InitAsDefaultInstance();
  CMDeviceTokenSync::default_instance_->InitAsDefaultInstance();
  CMDeviceTokenSyncAck::default_instance_->InitAsDefaultInstance();
  CMKickoutNotification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_im_2ecm_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_im_2ecm_2eproto_once_);
void protobuf_AddDesc_im_2ecm_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_im_2ecm_2eproto_once_,
                 &protobuf_AddDesc_im_2ecm_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_im_2ecm_2eproto {
  StaticDescriptorInitializer_im_2ecm_2eproto() {
    protobuf_AddDesc_im_2ecm_2eproto();
  }
} static_descriptor_initializer_im_2ecm_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMLogin::kSUserIdFieldNumber;
const int CMLogin::kSUserTokenFieldNumber;
const int CMLogin::kNDeviceTypeFieldNumber;
const int CMLogin::kSDeviceVersionFieldNumber;
const int CMLogin::kSDeviceTokenFieldNumber;
const int CMLogin::kSDeviceVoipTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMLogin::CMLogin()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.CMLogin)
}

void CMLogin::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CMLogin::CMLogin(const CMLogin& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.CMLogin)
}

void CMLogin::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  susertoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ndevicetype_ = 0u;
  sdeviceversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdevicetoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdevicevoiptoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMLogin::~CMLogin() {
  // @@protoc_insertion_point(destructor:im.CMLogin)
  SharedDtor();
}

void CMLogin::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  susertoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdeviceversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdevicetoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdevicevoiptoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMLogin& CMLogin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2ecm_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2ecm_2eproto();
#endif
  return *default_instance_;
}

CMLogin* CMLogin::default_instance_ = NULL;

CMLogin* CMLogin::New(::google::protobuf::Arena* arena) const {
  CMLogin* n = new CMLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:im.CMLogin)
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  susertoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ndevicetype_ = 0u;
  sdeviceversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdevicetoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdevicevoiptoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CMLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.CMLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.CMLogin.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sUserToken;
        break;
      }

      // optional string sUserToken = 2;
      case 2: {
        if (tag == 18) {
         parse_sUserToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_susertoken()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->susertoken().data(), this->susertoken().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.CMLogin.sUserToken"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_nDeviceType;
        break;
      }

      // optional uint32 nDeviceType = 6;
      case 6: {
        if (tag == 48) {
         parse_nDeviceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ndevicetype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sDeviceVersion;
        break;
      }

      // optional string sDeviceVersion = 7;
      case 7: {
        if (tag == 58) {
         parse_sDeviceVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdeviceversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sdeviceversion().data(), this->sdeviceversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.CMLogin.sDeviceVersion"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sDeviceToken;
        break;
      }

      // optional string sDeviceToken = 8;
      case 8: {
        if (tag == 66) {
         parse_sDeviceToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdevicetoken()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sdevicetoken().data(), this->sdevicetoken().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.CMLogin.sDeviceToken"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_sDeviceVoipToken;
        break;
      }

      // optional string sDeviceVoipToken = 9;
      case 9: {
        if (tag == 74) {
         parse_sDeviceVoipToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdevicevoiptoken()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sdevicevoiptoken().data(), this->sdevicevoiptoken().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.CMLogin.sDeviceVoipToken"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.CMLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.CMLogin)
  return false;
#undef DO_
}

void CMLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.CMLogin)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.CMLogin.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional string sUserToken = 2;
  if (this->susertoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->susertoken().data(), this->susertoken().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.CMLogin.sUserToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->susertoken(), output);
  }

  // optional uint32 nDeviceType = 6;
  if (this->ndevicetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ndevicetype(), output);
  }

  // optional string sDeviceVersion = 7;
  if (this->sdeviceversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sdeviceversion().data(), this->sdeviceversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.CMLogin.sDeviceVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sdeviceversion(), output);
  }

  // optional string sDeviceToken = 8;
  if (this->sdevicetoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sdevicetoken().data(), this->sdevicetoken().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.CMLogin.sDeviceToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->sdevicetoken(), output);
  }

  // optional string sDeviceVoipToken = 9;
  if (this->sdevicevoiptoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sdevicevoiptoken().data(), this->sdevicevoiptoken().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.CMLogin.sDeviceVoipToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sdevicevoiptoken(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.CMLogin)
}

int CMLogin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.CMLogin)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional string sUserToken = 2;
  if (this->susertoken().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->susertoken());
  }

  // optional uint32 nDeviceType = 6;
  if (this->ndevicetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ndevicetype());
  }

  // optional string sDeviceVersion = 7;
  if (this->sdeviceversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sdeviceversion());
  }

  // optional string sDeviceToken = 8;
  if (this->sdevicetoken().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sdevicetoken());
  }

  // optional string sDeviceVoipToken = 9;
  if (this->sdevicevoiptoken().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sdevicevoiptoken());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMLogin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMLogin*>(&from));
}

void CMLogin::MergeFrom(const CMLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.CMLogin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.susertoken().size() > 0) {

    susertoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.susertoken_);
  }
  if (from.ndevicetype() != 0) {
    set_ndevicetype(from.ndevicetype());
  }
  if (from.sdeviceversion().size() > 0) {

    sdeviceversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdeviceversion_);
  }
  if (from.sdevicetoken().size() > 0) {

    sdevicetoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdevicetoken_);
  }
  if (from.sdevicevoiptoken().size() > 0) {

    sdevicevoiptoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdevicevoiptoken_);
  }
}

void CMLogin::CopyFrom(const CMLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.CMLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMLogin::IsInitialized() const {

  return true;
}

void CMLogin::Swap(CMLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMLogin::InternalSwap(CMLogin* other) {
  suserid_.Swap(&other->suserid_);
  susertoken_.Swap(&other->susertoken_);
  std::swap(ndevicetype_, other->ndevicetype_);
  sdeviceversion_.Swap(&other->sdeviceversion_);
  sdevicetoken_.Swap(&other->sdevicetoken_);
  sdevicevoiptoken_.Swap(&other->sdevicevoiptoken_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CMLogin::GetTypeName() const {
  return "im.CMLogin";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMLogin

// optional string sUserId = 1;
void CMLogin::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CMLogin::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMLogin.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMLogin::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLogin.sUserId)
}
 void CMLogin::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLogin.sUserId)
}
 void CMLogin::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLogin.sUserId)
}
 ::std::string* CMLogin::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLogin.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMLogin::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMLogin.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMLogin::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMLogin.sUserId)
}

// optional string sUserToken = 2;
void CMLogin::clear_susertoken() {
  susertoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CMLogin::susertoken() const {
  // @@protoc_insertion_point(field_get:im.CMLogin.sUserToken)
  return susertoken_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMLogin::set_susertoken(const ::std::string& value) {
  
  susertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLogin.sUserToken)
}
 void CMLogin::set_susertoken(const char* value) {
  
  susertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLogin.sUserToken)
}
 void CMLogin::set_susertoken(const char* value, size_t size) {
  
  susertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLogin.sUserToken)
}
 ::std::string* CMLogin::mutable_susertoken() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLogin.sUserToken)
  return susertoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMLogin::release_susertoken() {
  // @@protoc_insertion_point(field_release:im.CMLogin.sUserToken)
  
  return susertoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMLogin::set_allocated_susertoken(::std::string* susertoken) {
  if (susertoken != NULL) {
    
  } else {
    
  }
  susertoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), susertoken);
  // @@protoc_insertion_point(field_set_allocated:im.CMLogin.sUserToken)
}

// optional uint32 nDeviceType = 6;
void CMLogin::clear_ndevicetype() {
  ndevicetype_ = 0u;
}
 ::google::protobuf::uint32 CMLogin::ndevicetype() const {
  // @@protoc_insertion_point(field_get:im.CMLogin.nDeviceType)
  return ndevicetype_;
}
 void CMLogin::set_ndevicetype(::google::protobuf::uint32 value) {
  
  ndevicetype_ = value;
  // @@protoc_insertion_point(field_set:im.CMLogin.nDeviceType)
}

// optional string sDeviceVersion = 7;
void CMLogin::clear_sdeviceversion() {
  sdeviceversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CMLogin::sdeviceversion() const {
  // @@protoc_insertion_point(field_get:im.CMLogin.sDeviceVersion)
  return sdeviceversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMLogin::set_sdeviceversion(const ::std::string& value) {
  
  sdeviceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLogin.sDeviceVersion)
}
 void CMLogin::set_sdeviceversion(const char* value) {
  
  sdeviceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLogin.sDeviceVersion)
}
 void CMLogin::set_sdeviceversion(const char* value, size_t size) {
  
  sdeviceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLogin.sDeviceVersion)
}
 ::std::string* CMLogin::mutable_sdeviceversion() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLogin.sDeviceVersion)
  return sdeviceversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMLogin::release_sdeviceversion() {
  // @@protoc_insertion_point(field_release:im.CMLogin.sDeviceVersion)
  
  return sdeviceversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMLogin::set_allocated_sdeviceversion(::std::string* sdeviceversion) {
  if (sdeviceversion != NULL) {
    
  } else {
    
  }
  sdeviceversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdeviceversion);
  // @@protoc_insertion_point(field_set_allocated:im.CMLogin.sDeviceVersion)
}

// optional string sDeviceToken = 8;
void CMLogin::clear_sdevicetoken() {
  sdevicetoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CMLogin::sdevicetoken() const {
  // @@protoc_insertion_point(field_get:im.CMLogin.sDeviceToken)
  return sdevicetoken_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMLogin::set_sdevicetoken(const ::std::string& value) {
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLogin.sDeviceToken)
}
 void CMLogin::set_sdevicetoken(const char* value) {
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLogin.sDeviceToken)
}
 void CMLogin::set_sdevicetoken(const char* value, size_t size) {
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLogin.sDeviceToken)
}
 ::std::string* CMLogin::mutable_sdevicetoken() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLogin.sDeviceToken)
  return sdevicetoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMLogin::release_sdevicetoken() {
  // @@protoc_insertion_point(field_release:im.CMLogin.sDeviceToken)
  
  return sdevicetoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMLogin::set_allocated_sdevicetoken(::std::string* sdevicetoken) {
  if (sdevicetoken != NULL) {
    
  } else {
    
  }
  sdevicetoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdevicetoken);
  // @@protoc_insertion_point(field_set_allocated:im.CMLogin.sDeviceToken)
}

// optional string sDeviceVoipToken = 9;
void CMLogin::clear_sdevicevoiptoken() {
  sdevicevoiptoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CMLogin::sdevicevoiptoken() const {
  // @@protoc_insertion_point(field_get:im.CMLogin.sDeviceVoipToken)
  return sdevicevoiptoken_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMLogin::set_sdevicevoiptoken(const ::std::string& value) {
  
  sdevicevoiptoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLogin.sDeviceVoipToken)
}
 void CMLogin::set_sdevicevoiptoken(const char* value) {
  
  sdevicevoiptoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLogin.sDeviceVoipToken)
}
 void CMLogin::set_sdevicevoiptoken(const char* value, size_t size) {
  
  sdevicevoiptoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLogin.sDeviceVoipToken)
}
 ::std::string* CMLogin::mutable_sdevicevoiptoken() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLogin.sDeviceVoipToken)
  return sdevicevoiptoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMLogin::release_sdevicevoiptoken() {
  // @@protoc_insertion_point(field_release:im.CMLogin.sDeviceVoipToken)
  
  return sdevicevoiptoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMLogin::set_allocated_sdevicevoiptoken(::std::string* sdevicevoiptoken) {
  if (sdevicevoiptoken != NULL) {
    
  } else {
    
  }
  sdevicevoiptoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdevicevoiptoken);
  // @@protoc_insertion_point(field_set_allocated:im.CMLogin.sDeviceVoipToken)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMLoginAck::kSUserIdFieldNumber;
const int CMLoginAck::kNErrFieldNumber;
const int CMLoginAck::kNLastLoginTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMLoginAck::CMLoginAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.CMLoginAck)
}

void CMLoginAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CMLoginAck::CMLoginAck(const CMLoginAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.CMLoginAck)
}

void CMLoginAck::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
  nlastlogintime_ = GOOGLE_ULONGLONG(0);
}

CMLoginAck::~CMLoginAck() {
  // @@protoc_insertion_point(destructor:im.CMLoginAck)
  SharedDtor();
}

void CMLoginAck::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMLoginAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMLoginAck& CMLoginAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2ecm_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2ecm_2eproto();
#endif
  return *default_instance_;
}

CMLoginAck* CMLoginAck::default_instance_ = NULL;

CMLoginAck* CMLoginAck::New(::google::protobuf::Arena* arena) const {
  CMLoginAck* n = new CMLoginAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMLoginAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.CMLoginAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CMLoginAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMLoginAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(nlastlogintime_, nerr_);
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CMLoginAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.CMLoginAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.CMLoginAck.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nErr;
        break;
      }

      // optional .im.ErrCode nErr = 2;
      case 2: {
        if (tag == 16) {
         parse_nErr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nerr(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nLastLoginTime;
        break;
      }

      // optional uint64 nLastLoginTime = 3;
      case 3: {
        if (tag == 24) {
         parse_nLastLoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nlastlogintime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.CMLoginAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.CMLoginAck)
  return false;
#undef DO_
}

void CMLoginAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.CMLoginAck)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.CMLoginAck.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional .im.ErrCode nErr = 2;
  if (this->nerr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->nerr(), output);
  }

  // optional uint64 nLastLoginTime = 3;
  if (this->nlastlogintime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nlastlogintime(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.CMLoginAck)
}

int CMLoginAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.CMLoginAck)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional .im.ErrCode nErr = 2;
  if (this->nerr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nerr());
  }

  // optional uint64 nLastLoginTime = 3;
  if (this->nlastlogintime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nlastlogintime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMLoginAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMLoginAck*>(&from));
}

void CMLoginAck::MergeFrom(const CMLoginAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.CMLoginAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.nerr() != 0) {
    set_nerr(from.nerr());
  }
  if (from.nlastlogintime() != 0) {
    set_nlastlogintime(from.nlastlogintime());
  }
}

void CMLoginAck::CopyFrom(const CMLoginAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.CMLoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMLoginAck::IsInitialized() const {

  return true;
}

void CMLoginAck::Swap(CMLoginAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMLoginAck::InternalSwap(CMLoginAck* other) {
  suserid_.Swap(&other->suserid_);
  std::swap(nerr_, other->nerr_);
  std::swap(nlastlogintime_, other->nlastlogintime_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CMLoginAck::GetTypeName() const {
  return "im.CMLoginAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMLoginAck

// optional string sUserId = 1;
void CMLoginAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CMLoginAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMLoginAck.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMLoginAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLoginAck.sUserId)
}
 void CMLoginAck::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLoginAck.sUserId)
}
 void CMLoginAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLoginAck.sUserId)
}
 ::std::string* CMLoginAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLoginAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMLoginAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMLoginAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMLoginAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMLoginAck.sUserId)
}

// optional .im.ErrCode nErr = 2;
void CMLoginAck::clear_nerr() {
  nerr_ = 0;
}
 ::im::ErrCode CMLoginAck::nerr() const {
  // @@protoc_insertion_point(field_get:im.CMLoginAck.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
 void CMLoginAck::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.CMLoginAck.nErr)
}

// optional uint64 nLastLoginTime = 3;
void CMLoginAck::clear_nlastlogintime() {
  nlastlogintime_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 CMLoginAck::nlastlogintime() const {
  // @@protoc_insertion_point(field_get:im.CMLoginAck.nLastLoginTime)
  return nlastlogintime_;
}
 void CMLoginAck::set_nlastlogintime(::google::protobuf::uint64 value) {
  
  nlastlogintime_ = value;
  // @@protoc_insertion_point(field_set:im.CMLoginAck.nLastLoginTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMLogout::kSUserIdFieldNumber;
const int CMLogout::kNDeviceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMLogout::CMLogout()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.CMLogout)
}

void CMLogout::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CMLogout::CMLogout(const CMLogout& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.CMLogout)
}

void CMLogout::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ndevicetype_ = 0u;
}

CMLogout::~CMLogout() {
  // @@protoc_insertion_point(destructor:im.CMLogout)
  SharedDtor();
}

void CMLogout::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMLogout& CMLogout::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2ecm_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2ecm_2eproto();
#endif
  return *default_instance_;
}

CMLogout* CMLogout::default_instance_ = NULL;

CMLogout* CMLogout::New(::google::protobuf::Arena* arena) const {
  CMLogout* n = new CMLogout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMLogout::Clear() {
// @@protoc_insertion_point(message_clear_start:im.CMLogout)
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ndevicetype_ = 0u;
}

bool CMLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.CMLogout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.CMLogout.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nDeviceType;
        break;
      }

      // optional uint32 nDeviceType = 2;
      case 2: {
        if (tag == 16) {
         parse_nDeviceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ndevicetype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.CMLogout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.CMLogout)
  return false;
#undef DO_
}

void CMLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.CMLogout)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.CMLogout.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional uint32 nDeviceType = 2;
  if (this->ndevicetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ndevicetype(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.CMLogout)
}

int CMLogout::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.CMLogout)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional uint32 nDeviceType = 2;
  if (this->ndevicetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ndevicetype());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMLogout::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMLogout*>(&from));
}

void CMLogout::MergeFrom(const CMLogout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.CMLogout)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.ndevicetype() != 0) {
    set_ndevicetype(from.ndevicetype());
  }
}

void CMLogout::CopyFrom(const CMLogout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.CMLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMLogout::IsInitialized() const {

  return true;
}

void CMLogout::Swap(CMLogout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMLogout::InternalSwap(CMLogout* other) {
  suserid_.Swap(&other->suserid_);
  std::swap(ndevicetype_, other->ndevicetype_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CMLogout::GetTypeName() const {
  return "im.CMLogout";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMLogout

// optional string sUserId = 1;
void CMLogout::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CMLogout::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMLogout.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMLogout::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLogout.sUserId)
}
 void CMLogout::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLogout.sUserId)
}
 void CMLogout::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLogout.sUserId)
}
 ::std::string* CMLogout::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLogout.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMLogout::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMLogout.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMLogout::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMLogout.sUserId)
}

// optional uint32 nDeviceType = 2;
void CMLogout::clear_ndevicetype() {
  ndevicetype_ = 0u;
}
 ::google::protobuf::uint32 CMLogout::ndevicetype() const {
  // @@protoc_insertion_point(field_get:im.CMLogout.nDeviceType)
  return ndevicetype_;
}
 void CMLogout::set_ndevicetype(::google::protobuf::uint32 value) {
  
  ndevicetype_ = value;
  // @@protoc_insertion_point(field_set:im.CMLogout.nDeviceType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMLogoutAck::kNErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMLogoutAck::CMLogoutAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.CMLogoutAck)
}

void CMLogoutAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CMLogoutAck::CMLogoutAck(const CMLogoutAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.CMLogoutAck)
}

void CMLogoutAck::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  nerr_ = 0;
}

CMLogoutAck::~CMLogoutAck() {
  // @@protoc_insertion_point(destructor:im.CMLogoutAck)
  SharedDtor();
}

void CMLogoutAck::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMLogoutAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMLogoutAck& CMLogoutAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2ecm_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2ecm_2eproto();
#endif
  return *default_instance_;
}

CMLogoutAck* CMLogoutAck::default_instance_ = NULL;

CMLogoutAck* CMLogoutAck::New(::google::protobuf::Arena* arena) const {
  CMLogoutAck* n = new CMLogoutAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMLogoutAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.CMLogoutAck)
  nerr_ = 0;
}

bool CMLogoutAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.CMLogoutAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .im.ErrCode nErr = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nerr(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.CMLogoutAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.CMLogoutAck)
  return false;
#undef DO_
}

void CMLogoutAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.CMLogoutAck)
  // optional .im.ErrCode nErr = 1;
  if (this->nerr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->nerr(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.CMLogoutAck)
}

int CMLogoutAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.CMLogoutAck)
  int total_size = 0;

  // optional .im.ErrCode nErr = 1;
  if (this->nerr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nerr());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMLogoutAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMLogoutAck*>(&from));
}

void CMLogoutAck::MergeFrom(const CMLogoutAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.CMLogoutAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.nerr() != 0) {
    set_nerr(from.nerr());
  }
}

void CMLogoutAck::CopyFrom(const CMLogoutAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.CMLogoutAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMLogoutAck::IsInitialized() const {

  return true;
}

void CMLogoutAck::Swap(CMLogoutAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMLogoutAck::InternalSwap(CMLogoutAck* other) {
  std::swap(nerr_, other->nerr_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CMLogoutAck::GetTypeName() const {
  return "im.CMLogoutAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMLogoutAck

// optional .im.ErrCode nErr = 1;
void CMLogoutAck::clear_nerr() {
  nerr_ = 0;
}
 ::im::ErrCode CMLogoutAck::nerr() const {
  // @@protoc_insertion_point(field_get:im.CMLogoutAck.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
 void CMLogoutAck::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.CMLogoutAck.nErr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMDeviceTokenSync::kSUserIdFieldNumber;
const int CMDeviceTokenSync::kNDeviceTypeFieldNumber;
const int CMDeviceTokenSync::kSDeviceVersionFieldNumber;
const int CMDeviceTokenSync::kSDeviceTokenFieldNumber;
const int CMDeviceTokenSync::kNDeviceTokenTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMDeviceTokenSync::CMDeviceTokenSync()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.CMDeviceTokenSync)
}

void CMDeviceTokenSync::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CMDeviceTokenSync::CMDeviceTokenSync(const CMDeviceTokenSync& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.CMDeviceTokenSync)
}

void CMDeviceTokenSync::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ndevicetype_ = 0u;
  sdeviceversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdevicetoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ndevicetokentype_ = 0u;
}

CMDeviceTokenSync::~CMDeviceTokenSync() {
  // @@protoc_insertion_point(destructor:im.CMDeviceTokenSync)
  SharedDtor();
}

void CMDeviceTokenSync::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdeviceversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdevicetoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMDeviceTokenSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMDeviceTokenSync& CMDeviceTokenSync::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2ecm_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2ecm_2eproto();
#endif
  return *default_instance_;
}

CMDeviceTokenSync* CMDeviceTokenSync::default_instance_ = NULL;

CMDeviceTokenSync* CMDeviceTokenSync::New(::google::protobuf::Arena* arena) const {
  CMDeviceTokenSync* n = new CMDeviceTokenSync;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMDeviceTokenSync::Clear() {
// @@protoc_insertion_point(message_clear_start:im.CMDeviceTokenSync)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CMDeviceTokenSync, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMDeviceTokenSync*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ndevicetype_, ndevicetokentype_);
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdeviceversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdevicetoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CMDeviceTokenSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.CMDeviceTokenSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.CMDeviceTokenSync.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nDeviceType;
        break;
      }

      // optional uint32 nDeviceType = 2;
      case 2: {
        if (tag == 16) {
         parse_nDeviceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ndevicetype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sDeviceVersion;
        break;
      }

      // optional string sDeviceVersion = 3;
      case 3: {
        if (tag == 26) {
         parse_sDeviceVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdeviceversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sdeviceversion().data(), this->sdeviceversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.CMDeviceTokenSync.sDeviceVersion"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sDeviceToken;
        break;
      }

      // optional string sDeviceToken = 4;
      case 4: {
        if (tag == 34) {
         parse_sDeviceToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdevicetoken()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sdevicetoken().data(), this->sdevicetoken().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.CMDeviceTokenSync.sDeviceToken"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nDeviceTokenType;
        break;
      }

      // optional uint32 nDeviceTokenType = 5;
      case 5: {
        if (tag == 40) {
         parse_nDeviceTokenType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ndevicetokentype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.CMDeviceTokenSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.CMDeviceTokenSync)
  return false;
#undef DO_
}

void CMDeviceTokenSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.CMDeviceTokenSync)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.CMDeviceTokenSync.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional uint32 nDeviceType = 2;
  if (this->ndevicetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ndevicetype(), output);
  }

  // optional string sDeviceVersion = 3;
  if (this->sdeviceversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sdeviceversion().data(), this->sdeviceversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.CMDeviceTokenSync.sDeviceVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sdeviceversion(), output);
  }

  // optional string sDeviceToken = 4;
  if (this->sdevicetoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sdevicetoken().data(), this->sdevicetoken().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.CMDeviceTokenSync.sDeviceToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sdevicetoken(), output);
  }

  // optional uint32 nDeviceTokenType = 5;
  if (this->ndevicetokentype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ndevicetokentype(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.CMDeviceTokenSync)
}

int CMDeviceTokenSync::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.CMDeviceTokenSync)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional uint32 nDeviceType = 2;
  if (this->ndevicetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ndevicetype());
  }

  // optional string sDeviceVersion = 3;
  if (this->sdeviceversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sdeviceversion());
  }

  // optional string sDeviceToken = 4;
  if (this->sdevicetoken().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sdevicetoken());
  }

  // optional uint32 nDeviceTokenType = 5;
  if (this->ndevicetokentype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ndevicetokentype());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMDeviceTokenSync::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMDeviceTokenSync*>(&from));
}

void CMDeviceTokenSync::MergeFrom(const CMDeviceTokenSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.CMDeviceTokenSync)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.ndevicetype() != 0) {
    set_ndevicetype(from.ndevicetype());
  }
  if (from.sdeviceversion().size() > 0) {

    sdeviceversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdeviceversion_);
  }
  if (from.sdevicetoken().size() > 0) {

    sdevicetoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdevicetoken_);
  }
  if (from.ndevicetokentype() != 0) {
    set_ndevicetokentype(from.ndevicetokentype());
  }
}

void CMDeviceTokenSync::CopyFrom(const CMDeviceTokenSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.CMDeviceTokenSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMDeviceTokenSync::IsInitialized() const {

  return true;
}

void CMDeviceTokenSync::Swap(CMDeviceTokenSync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMDeviceTokenSync::InternalSwap(CMDeviceTokenSync* other) {
  suserid_.Swap(&other->suserid_);
  std::swap(ndevicetype_, other->ndevicetype_);
  sdeviceversion_.Swap(&other->sdeviceversion_);
  sdevicetoken_.Swap(&other->sdevicetoken_);
  std::swap(ndevicetokentype_, other->ndevicetokentype_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CMDeviceTokenSync::GetTypeName() const {
  return "im.CMDeviceTokenSync";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMDeviceTokenSync

// optional string sUserId = 1;
void CMDeviceTokenSync::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CMDeviceTokenSync::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMDeviceTokenSync.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMDeviceTokenSync::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMDeviceTokenSync.sUserId)
}
 void CMDeviceTokenSync::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMDeviceTokenSync.sUserId)
}
 void CMDeviceTokenSync::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMDeviceTokenSync.sUserId)
}
 ::std::string* CMDeviceTokenSync::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMDeviceTokenSync.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMDeviceTokenSync::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMDeviceTokenSync.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMDeviceTokenSync::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMDeviceTokenSync.sUserId)
}

// optional uint32 nDeviceType = 2;
void CMDeviceTokenSync::clear_ndevicetype() {
  ndevicetype_ = 0u;
}
 ::google::protobuf::uint32 CMDeviceTokenSync::ndevicetype() const {
  // @@protoc_insertion_point(field_get:im.CMDeviceTokenSync.nDeviceType)
  return ndevicetype_;
}
 void CMDeviceTokenSync::set_ndevicetype(::google::protobuf::uint32 value) {
  
  ndevicetype_ = value;
  // @@protoc_insertion_point(field_set:im.CMDeviceTokenSync.nDeviceType)
}

// optional string sDeviceVersion = 3;
void CMDeviceTokenSync::clear_sdeviceversion() {
  sdeviceversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CMDeviceTokenSync::sdeviceversion() const {
  // @@protoc_insertion_point(field_get:im.CMDeviceTokenSync.sDeviceVersion)
  return sdeviceversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMDeviceTokenSync::set_sdeviceversion(const ::std::string& value) {
  
  sdeviceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMDeviceTokenSync.sDeviceVersion)
}
 void CMDeviceTokenSync::set_sdeviceversion(const char* value) {
  
  sdeviceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMDeviceTokenSync.sDeviceVersion)
}
 void CMDeviceTokenSync::set_sdeviceversion(const char* value, size_t size) {
  
  sdeviceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMDeviceTokenSync.sDeviceVersion)
}
 ::std::string* CMDeviceTokenSync::mutable_sdeviceversion() {
  
  // @@protoc_insertion_point(field_mutable:im.CMDeviceTokenSync.sDeviceVersion)
  return sdeviceversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMDeviceTokenSync::release_sdeviceversion() {
  // @@protoc_insertion_point(field_release:im.CMDeviceTokenSync.sDeviceVersion)
  
  return sdeviceversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMDeviceTokenSync::set_allocated_sdeviceversion(::std::string* sdeviceversion) {
  if (sdeviceversion != NULL) {
    
  } else {
    
  }
  sdeviceversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdeviceversion);
  // @@protoc_insertion_point(field_set_allocated:im.CMDeviceTokenSync.sDeviceVersion)
}

// optional string sDeviceToken = 4;
void CMDeviceTokenSync::clear_sdevicetoken() {
  sdevicetoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CMDeviceTokenSync::sdevicetoken() const {
  // @@protoc_insertion_point(field_get:im.CMDeviceTokenSync.sDeviceToken)
  return sdevicetoken_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMDeviceTokenSync::set_sdevicetoken(const ::std::string& value) {
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMDeviceTokenSync.sDeviceToken)
}
 void CMDeviceTokenSync::set_sdevicetoken(const char* value) {
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMDeviceTokenSync.sDeviceToken)
}
 void CMDeviceTokenSync::set_sdevicetoken(const char* value, size_t size) {
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMDeviceTokenSync.sDeviceToken)
}
 ::std::string* CMDeviceTokenSync::mutable_sdevicetoken() {
  
  // @@protoc_insertion_point(field_mutable:im.CMDeviceTokenSync.sDeviceToken)
  return sdevicetoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMDeviceTokenSync::release_sdevicetoken() {
  // @@protoc_insertion_point(field_release:im.CMDeviceTokenSync.sDeviceToken)
  
  return sdevicetoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMDeviceTokenSync::set_allocated_sdevicetoken(::std::string* sdevicetoken) {
  if (sdevicetoken != NULL) {
    
  } else {
    
  }
  sdevicetoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdevicetoken);
  // @@protoc_insertion_point(field_set_allocated:im.CMDeviceTokenSync.sDeviceToken)
}

// optional uint32 nDeviceTokenType = 5;
void CMDeviceTokenSync::clear_ndevicetokentype() {
  ndevicetokentype_ = 0u;
}
 ::google::protobuf::uint32 CMDeviceTokenSync::ndevicetokentype() const {
  // @@protoc_insertion_point(field_get:im.CMDeviceTokenSync.nDeviceTokenType)
  return ndevicetokentype_;
}
 void CMDeviceTokenSync::set_ndevicetokentype(::google::protobuf::uint32 value) {
  
  ndevicetokentype_ = value;
  // @@protoc_insertion_point(field_set:im.CMDeviceTokenSync.nDeviceTokenType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMDeviceTokenSyncAck::kSUserIdFieldNumber;
const int CMDeviceTokenSyncAck::kNErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMDeviceTokenSyncAck::CMDeviceTokenSyncAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.CMDeviceTokenSyncAck)
}

void CMDeviceTokenSyncAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CMDeviceTokenSyncAck::CMDeviceTokenSyncAck(const CMDeviceTokenSyncAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.CMDeviceTokenSyncAck)
}

void CMDeviceTokenSyncAck::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
}

CMDeviceTokenSyncAck::~CMDeviceTokenSyncAck() {
  // @@protoc_insertion_point(destructor:im.CMDeviceTokenSyncAck)
  SharedDtor();
}

void CMDeviceTokenSyncAck::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMDeviceTokenSyncAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMDeviceTokenSyncAck& CMDeviceTokenSyncAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2ecm_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2ecm_2eproto();
#endif
  return *default_instance_;
}

CMDeviceTokenSyncAck* CMDeviceTokenSyncAck::default_instance_ = NULL;

CMDeviceTokenSyncAck* CMDeviceTokenSyncAck::New(::google::protobuf::Arena* arena) const {
  CMDeviceTokenSyncAck* n = new CMDeviceTokenSyncAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMDeviceTokenSyncAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.CMDeviceTokenSyncAck)
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
}

bool CMDeviceTokenSyncAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.CMDeviceTokenSyncAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.CMDeviceTokenSyncAck.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nErr;
        break;
      }

      // optional .im.ErrCode nErr = 2;
      case 2: {
        if (tag == 16) {
         parse_nErr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nerr(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.CMDeviceTokenSyncAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.CMDeviceTokenSyncAck)
  return false;
#undef DO_
}

void CMDeviceTokenSyncAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.CMDeviceTokenSyncAck)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.CMDeviceTokenSyncAck.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional .im.ErrCode nErr = 2;
  if (this->nerr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->nerr(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.CMDeviceTokenSyncAck)
}

int CMDeviceTokenSyncAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.CMDeviceTokenSyncAck)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional .im.ErrCode nErr = 2;
  if (this->nerr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nerr());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMDeviceTokenSyncAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMDeviceTokenSyncAck*>(&from));
}

void CMDeviceTokenSyncAck::MergeFrom(const CMDeviceTokenSyncAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.CMDeviceTokenSyncAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.nerr() != 0) {
    set_nerr(from.nerr());
  }
}

void CMDeviceTokenSyncAck::CopyFrom(const CMDeviceTokenSyncAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.CMDeviceTokenSyncAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMDeviceTokenSyncAck::IsInitialized() const {

  return true;
}

void CMDeviceTokenSyncAck::Swap(CMDeviceTokenSyncAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMDeviceTokenSyncAck::InternalSwap(CMDeviceTokenSyncAck* other) {
  suserid_.Swap(&other->suserid_);
  std::swap(nerr_, other->nerr_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CMDeviceTokenSyncAck::GetTypeName() const {
  return "im.CMDeviceTokenSyncAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMDeviceTokenSyncAck

// optional string sUserId = 1;
void CMDeviceTokenSyncAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CMDeviceTokenSyncAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMDeviceTokenSyncAck.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMDeviceTokenSyncAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMDeviceTokenSyncAck.sUserId)
}
 void CMDeviceTokenSyncAck::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMDeviceTokenSyncAck.sUserId)
}
 void CMDeviceTokenSyncAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMDeviceTokenSyncAck.sUserId)
}
 ::std::string* CMDeviceTokenSyncAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMDeviceTokenSyncAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMDeviceTokenSyncAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMDeviceTokenSyncAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMDeviceTokenSyncAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMDeviceTokenSyncAck.sUserId)
}

// optional .im.ErrCode nErr = 2;
void CMDeviceTokenSyncAck::clear_nerr() {
  nerr_ = 0;
}
 ::im::ErrCode CMDeviceTokenSyncAck::nerr() const {
  // @@protoc_insertion_point(field_get:im.CMDeviceTokenSyncAck.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
 void CMDeviceTokenSyncAck::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.CMDeviceTokenSyncAck.nErr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMKickoutNotification::kSUserIdFieldNumber;
const int CMKickoutNotification::kNDeviceTypeFieldNumber;
const int CMKickoutNotification::kIpFieldNumber;
const int CMKickoutNotification::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMKickoutNotification::CMKickoutNotification()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.CMKickoutNotification)
}

void CMKickoutNotification::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CMKickoutNotification::CMKickoutNotification(const CMKickoutNotification& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.CMKickoutNotification)
}

void CMKickoutNotification::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  suserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ndevicetype_ = 0u;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

CMKickoutNotification::~CMKickoutNotification() {
  // @@protoc_insertion_point(destructor:im.CMKickoutNotification)
  SharedDtor();
}

void CMKickoutNotification::SharedDtor() {
  suserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMKickoutNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMKickoutNotification& CMKickoutNotification::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2ecm_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2ecm_2eproto();
#endif
  return *default_instance_;
}

CMKickoutNotification* CMKickoutNotification::default_instance_ = NULL;

CMKickoutNotification* CMKickoutNotification::New(::google::protobuf::Arena* arena) const {
  CMKickoutNotification* n = new CMKickoutNotification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMKickoutNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:im.CMKickoutNotification)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CMKickoutNotification, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CMKickoutNotification*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ndevicetype_, port_);
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CMKickoutNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.CMKickoutNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sUserId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->suserid().data(), this->suserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.CMKickoutNotification.sUserId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nDeviceType;
        break;
      }

      // optional uint32 nDeviceType = 2;
      case 2: {
        if (tag == 16) {
         parse_nDeviceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ndevicetype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.CMKickoutNotification.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional uint32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.CMKickoutNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.CMKickoutNotification)
  return false;
#undef DO_
}

void CMKickoutNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.CMKickoutNotification)
  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->suserid().data(), this->suserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.CMKickoutNotification.sUserId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->suserid(), output);
  }

  // optional uint32 nDeviceType = 2;
  if (this->ndevicetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ndevicetype(), output);
  }

  // optional string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.CMKickoutNotification.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional uint32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.CMKickoutNotification)
}

int CMKickoutNotification::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.CMKickoutNotification)
  int total_size = 0;

  // optional string sUserId = 1;
  if (this->suserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->suserid());
  }

  // optional uint32 nDeviceType = 2;
  if (this->ndevicetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ndevicetype());
  }

  // optional string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional uint32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMKickoutNotification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMKickoutNotification*>(&from));
}

void CMKickoutNotification::MergeFrom(const CMKickoutNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.CMKickoutNotification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.suserid().size() > 0) {

    suserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suserid_);
  }
  if (from.ndevicetype() != 0) {
    set_ndevicetype(from.ndevicetype());
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void CMKickoutNotification::CopyFrom(const CMKickoutNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.CMKickoutNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMKickoutNotification::IsInitialized() const {

  return true;
}

void CMKickoutNotification::Swap(CMKickoutNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMKickoutNotification::InternalSwap(CMKickoutNotification* other) {
  suserid_.Swap(&other->suserid_);
  std::swap(ndevicetype_, other->ndevicetype_);
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CMKickoutNotification::GetTypeName() const {
  return "im.CMKickoutNotification";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMKickoutNotification

// optional string sUserId = 1;
void CMKickoutNotification::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CMKickoutNotification::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMKickoutNotification.sUserId)
  return suserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMKickoutNotification::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMKickoutNotification.sUserId)
}
 void CMKickoutNotification::set_suserid(const char* value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMKickoutNotification.sUserId)
}
 void CMKickoutNotification::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMKickoutNotification.sUserId)
}
 ::std::string* CMKickoutNotification::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMKickoutNotification.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMKickoutNotification::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMKickoutNotification.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMKickoutNotification::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMKickoutNotification.sUserId)
}

// optional uint32 nDeviceType = 2;
void CMKickoutNotification::clear_ndevicetype() {
  ndevicetype_ = 0u;
}
 ::google::protobuf::uint32 CMKickoutNotification::ndevicetype() const {
  // @@protoc_insertion_point(field_get:im.CMKickoutNotification.nDeviceType)
  return ndevicetype_;
}
 void CMKickoutNotification::set_ndevicetype(::google::protobuf::uint32 value) {
  
  ndevicetype_ = value;
  // @@protoc_insertion_point(field_set:im.CMKickoutNotification.nDeviceType)
}

// optional string ip = 3;
void CMKickoutNotification::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CMKickoutNotification::ip() const {
  // @@protoc_insertion_point(field_get:im.CMKickoutNotification.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMKickoutNotification::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMKickoutNotification.ip)
}
 void CMKickoutNotification::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMKickoutNotification.ip)
}
 void CMKickoutNotification::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMKickoutNotification.ip)
}
 ::std::string* CMKickoutNotification::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:im.CMKickoutNotification.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CMKickoutNotification::release_ip() {
  // @@protoc_insertion_point(field_release:im.CMKickoutNotification.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CMKickoutNotification::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:im.CMKickoutNotification.ip)
}

// optional uint32 port = 4;
void CMKickoutNotification::clear_port() {
  port_ = 0u;
}
 ::google::protobuf::uint32 CMKickoutNotification::port() const {
  // @@protoc_insertion_point(field_get:im.CMKickoutNotification.port)
  return port_;
}
 void CMKickoutNotification::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:im.CMKickoutNotification.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace im

// @@protoc_insertion_point(global_scope)
