// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.pub.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "im.pub.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace im {

void protobuf_ShutdownFile_im_2epub_2eproto() {
  delete SYSAssocSvrRegist::default_instance_;
  delete SYSAssocSvrRegistAck::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_im_2epub_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_im_2epub_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_im_2epub_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  SYSAssocSvrRegist::default_instance_ = new SYSAssocSvrRegist();
  SYSAssocSvrRegistAck::default_instance_ = new SYSAssocSvrRegistAck();
  SYSAssocSvrRegist::default_instance_->InitAsDefaultInstance();
  SYSAssocSvrRegistAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_im_2epub_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_im_2epub_2eproto_once_);
void protobuf_AddDesc_im_2epub_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_im_2epub_2eproto_once_,
                 &protobuf_AddDesc_im_2epub_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_im_2epub_2eproto {
  StaticDescriptorInitializer_im_2epub_2eproto() {
    protobuf_AddDesc_im_2epub_2eproto();
  }
} static_descriptor_initializer_im_2epub_2eproto_;
#endif
bool CmdId_IsValid(int value) {
  switch(value) {
    case 0:
    case 12289:
    case 12290:
    case 12292:
    case 12293:
    case 12294:
    case 12295:
    case 12296:
    case 40961:
    case 40962:
    case 40963:
    case 40964:
    case 40965:
    case 40966:
    case 40967:
    case 40968:
    case 40976:
    case 45057:
    case 45058:
    case 45059:
    case 45060:
    case 45061:
    case 45062:
    case 45063:
    case 45064:
    case 45065:
    case 45066:
    case 45073:
    case 45074:
    case 45075:
    case 45076:
    case 45077:
    case 45078:
    case 45079:
    case 45080:
    case 45081:
    case 45082:
    case 45105:
    case 45106:
    case 45107:
    case 45108:
    case 45109:
    case 45110:
    case 45111:
    case 45112:
    case 45113:
    case 45114:
    case 45121:
    case 45122:
    case 45123:
    case 45124:
    case 45137:
    case 45138:
    case 45139:
    case 45140:
    case 45145:
    case 45152:
    case 45153:
    case 45154:
    case 45155:
    case 45156:
    case 45157:
    case 45158:
    case 45159:
    case 45160:
    case 45169:
    case 45170:
    case 45171:
    case 45172:
    case 45173:
    case 45174:
    case 45175:
    case 45176:
    case 45185:
    case 45186:
    case 45201:
    case 45202:
    case 45203:
    case 45204:
    case 45205:
    case 45206:
    case 45207:
    case 45208:
    case 45209:
    case 45216:
    case 45217:
    case 45218:
    case 45221:
    case 45222:
    case 45223:
    case 45224:
    case 45233:
    case 45234:
    case 45235:
    case 45236:
    case 45249:
    case 45250:
    case 45251:
    case 45252:
    case 49153:
    case 49154:
    case 49155:
    case 49156:
    case 49159:
    case 49160:
    case 49161:
    case 49168:
    case 49171:
    case 49172:
    case 49173:
    case 49174:
    case 49175:
    case 49176:
    case 49185:
    case 49186:
    case 49187:
    case 49188:
    case 53249:
    case 53250:
    case 53252:
    case 53253:
    case 53255:
    case 53256:
    case 53258:
    case 53259:
      return true;
    default:
      return false;
  }
}

bool ErrCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 32768:
    case 32769:
    case 33025:
    case 33026:
    case 33027:
    case 33028:
    case 33029:
    case 33030:
    case 33031:
    case 33032:
    case 33033:
    case 33040:
    case 33281:
    case 33282:
    case 33283:
    case 33284:
    case 33297:
    case 33298:
    case 33299:
    case 33300:
    case 33301:
    case 33302:
    case 33315:
    case 33536:
    case 33537:
    case 33538:
    case 33539:
    case 33540:
    case 33541:
    case 33542:
    case 33543:
    case 33544:
    case 33545:
    case 33552:
    case 33553:
    case 33554:
    case 33555:
    case 33556:
    case 33557:
    case 33558:
    case 33568:
    case 33569:
    case 33570:
    case 33792:
    case 33793:
    case 33794:
      return true;
    default:
      return false;
  }
}

bool MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

bool DiveceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 16:
    case 17:
    case 18:
    case 19:
    case 255:
      return true;
    default:
      return false;
  }
}

bool NotifyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

bool CommonNotifyType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SYSAssocSvrRegist::kIpFieldNumber;
const int SYSAssocSvrRegist::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SYSAssocSvrRegist::SYSAssocSvrRegist()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.SYSAssocSvrRegist)
}

void SYSAssocSvrRegist::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SYSAssocSvrRegist::SYSAssocSvrRegist(const SYSAssocSvrRegist& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.SYSAssocSvrRegist)
}

void SYSAssocSvrRegist::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

SYSAssocSvrRegist::~SYSAssocSvrRegist() {
  // @@protoc_insertion_point(destructor:im.SYSAssocSvrRegist)
  SharedDtor();
}

void SYSAssocSvrRegist::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SYSAssocSvrRegist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SYSAssocSvrRegist& SYSAssocSvrRegist::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2epub_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2epub_2eproto();
#endif
  return *default_instance_;
}

SYSAssocSvrRegist* SYSAssocSvrRegist::default_instance_ = NULL;

SYSAssocSvrRegist* SYSAssocSvrRegist::New(::google::protobuf::Arena* arena) const {
  SYSAssocSvrRegist* n = new SYSAssocSvrRegist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SYSAssocSvrRegist::Clear() {
// @@protoc_insertion_point(message_clear_start:im.SYSAssocSvrRegist)
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

bool SYSAssocSvrRegist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.SYSAssocSvrRegist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.SYSAssocSvrRegist.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.SYSAssocSvrRegist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.SYSAssocSvrRegist)
  return false;
#undef DO_
}

void SYSAssocSvrRegist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.SYSAssocSvrRegist)
  // optional string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.SYSAssocSvrRegist.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.SYSAssocSvrRegist)
}

int SYSAssocSvrRegist::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.SYSAssocSvrRegist)
  int total_size = 0;

  // optional string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SYSAssocSvrRegist::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SYSAssocSvrRegist*>(&from));
}

void SYSAssocSvrRegist::MergeFrom(const SYSAssocSvrRegist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.SYSAssocSvrRegist)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void SYSAssocSvrRegist::CopyFrom(const SYSAssocSvrRegist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.SYSAssocSvrRegist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SYSAssocSvrRegist::IsInitialized() const {

  return true;
}

void SYSAssocSvrRegist::Swap(SYSAssocSvrRegist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SYSAssocSvrRegist::InternalSwap(SYSAssocSvrRegist* other) {
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SYSAssocSvrRegist::GetTypeName() const {
  return "im.SYSAssocSvrRegist";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SYSAssocSvrRegist

// optional string ip = 1;
void SYSAssocSvrRegist::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SYSAssocSvrRegist::ip() const {
  // @@protoc_insertion_point(field_get:im.SYSAssocSvrRegist.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SYSAssocSvrRegist::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SYSAssocSvrRegist.ip)
}
 void SYSAssocSvrRegist::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SYSAssocSvrRegist.ip)
}
 void SYSAssocSvrRegist::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SYSAssocSvrRegist.ip)
}
 ::std::string* SYSAssocSvrRegist::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:im.SYSAssocSvrRegist.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SYSAssocSvrRegist::release_ip() {
  // @@protoc_insertion_point(field_release:im.SYSAssocSvrRegist.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SYSAssocSvrRegist::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:im.SYSAssocSvrRegist.ip)
}

// optional uint32 port = 2;
void SYSAssocSvrRegist::clear_port() {
  port_ = 0u;
}
 ::google::protobuf::uint32 SYSAssocSvrRegist::port() const {
  // @@protoc_insertion_point(field_get:im.SYSAssocSvrRegist.port)
  return port_;
}
 void SYSAssocSvrRegist::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:im.SYSAssocSvrRegist.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SYSAssocSvrRegistAck::kNErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SYSAssocSvrRegistAck::SYSAssocSvrRegistAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.SYSAssocSvrRegistAck)
}

void SYSAssocSvrRegistAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SYSAssocSvrRegistAck::SYSAssocSvrRegistAck(const SYSAssocSvrRegistAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.SYSAssocSvrRegistAck)
}

void SYSAssocSvrRegistAck::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  nerr_ = 0;
}

SYSAssocSvrRegistAck::~SYSAssocSvrRegistAck() {
  // @@protoc_insertion_point(destructor:im.SYSAssocSvrRegistAck)
  SharedDtor();
}

void SYSAssocSvrRegistAck::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SYSAssocSvrRegistAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SYSAssocSvrRegistAck& SYSAssocSvrRegistAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2epub_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2epub_2eproto();
#endif
  return *default_instance_;
}

SYSAssocSvrRegistAck* SYSAssocSvrRegistAck::default_instance_ = NULL;

SYSAssocSvrRegistAck* SYSAssocSvrRegistAck::New(::google::protobuf::Arena* arena) const {
  SYSAssocSvrRegistAck* n = new SYSAssocSvrRegistAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SYSAssocSvrRegistAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.SYSAssocSvrRegistAck)
  nerr_ = 0;
}

bool SYSAssocSvrRegistAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.SYSAssocSvrRegistAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .im.ErrCode nErr = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nerr(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.SYSAssocSvrRegistAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.SYSAssocSvrRegistAck)
  return false;
#undef DO_
}

void SYSAssocSvrRegistAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.SYSAssocSvrRegistAck)
  // optional .im.ErrCode nErr = 1;
  if (this->nerr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->nerr(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.SYSAssocSvrRegistAck)
}

int SYSAssocSvrRegistAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.SYSAssocSvrRegistAck)
  int total_size = 0;

  // optional .im.ErrCode nErr = 1;
  if (this->nerr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nerr());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SYSAssocSvrRegistAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SYSAssocSvrRegistAck*>(&from));
}

void SYSAssocSvrRegistAck::MergeFrom(const SYSAssocSvrRegistAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.SYSAssocSvrRegistAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.nerr() != 0) {
    set_nerr(from.nerr());
  }
}

void SYSAssocSvrRegistAck::CopyFrom(const SYSAssocSvrRegistAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.SYSAssocSvrRegistAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SYSAssocSvrRegistAck::IsInitialized() const {

  return true;
}

void SYSAssocSvrRegistAck::Swap(SYSAssocSvrRegistAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SYSAssocSvrRegistAck::InternalSwap(SYSAssocSvrRegistAck* other) {
  std::swap(nerr_, other->nerr_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SYSAssocSvrRegistAck::GetTypeName() const {
  return "im.SYSAssocSvrRegistAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SYSAssocSvrRegistAck

// optional .im.ErrCode nErr = 1;
void SYSAssocSvrRegistAck::clear_nerr() {
  nerr_ = 0;
}
 ::im::ErrCode SYSAssocSvrRegistAck::nerr() const {
  // @@protoc_insertion_point(field_get:im.SYSAssocSvrRegistAck.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
 void SYSAssocSvrRegistAck::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.SYSAssocSvrRegistAck.nErr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace im

// @@protoc_insertion_point(global_scope)
