// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.inner.proto

#ifndef PROTOBUF_INCLUDED_im_2einner_2eproto
#define PROTOBUF_INCLUDED_im_2einner_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "im.pub.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_im_2einner_2eproto 

namespace protobuf_im_2einner_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[14];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_im_2einner_2eproto
namespace im {
class CMLoginNotify;
class CMLoginNotifyDefaultTypeInternal;
extern CMLoginNotifyDefaultTypeInternal _CMLoginNotify_default_instance_;
class CMLoginNotifyAck;
class CMLoginNotifyAckDefaultTypeInternal;
extern CMLoginNotifyAckDefaultTypeInternal _CMLoginNotifyAck_default_instance_;
class CMLoginTrans;
class CMLoginTransDefaultTypeInternal;
extern CMLoginTransDefaultTypeInternal _CMLoginTrans_default_instance_;
class CMPHPLoginNotify;
class CMPHPLoginNotifyDefaultTypeInternal;
extern CMPHPLoginNotifyDefaultTypeInternal _CMPHPLoginNotify_default_instance_;
class CMPHPLoginNotifyACK;
class CMPHPLoginNotifyACKDefaultTypeInternal;
extern CMPHPLoginNotifyACKDefaultTypeInternal _CMPHPLoginNotifyACK_default_instance_;
class LoginCMNotify;
class LoginCMNotifyDefaultTypeInternal;
extern LoginCMNotifyDefaultTypeInternal _LoginCMNotify_default_instance_;
class LoginCMNotifyAck;
class LoginCMNotifyAckDefaultTypeInternal;
extern LoginCMNotifyAckDefaultTypeInternal _LoginCMNotifyAck_default_instance_;
class OnLoginResult;
class OnLoginResultDefaultTypeInternal;
extern OnLoginResultDefaultTypeInternal _OnLoginResult_default_instance_;
class SVRMSGCommonMsgNotify;
class SVRMSGCommonMsgNotifyDefaultTypeInternal;
extern SVRMSGCommonMsgNotifyDefaultTypeInternal _SVRMSGCommonMsgNotify_default_instance_;
class SVRMSGFriendRelationNotify;
class SVRMSGFriendRelationNotifyDefaultTypeInternal;
extern SVRMSGFriendRelationNotifyDefaultTypeInternal _SVRMSGFriendRelationNotify_default_instance_;
class SVRMSGGroupRelationNotify;
class SVRMSGGroupRelationNotifyDefaultTypeInternal;
extern SVRMSGGroupRelationNotifyDefaultTypeInternal _SVRMSGGroupRelationNotify_default_instance_;
class SVRMSGNotifyACK;
class SVRMSGNotifyACKDefaultTypeInternal;
extern SVRMSGNotifyACKDefaultTypeInternal _SVRMSGNotifyACK_default_instance_;
class SVRRadioMsgNotify;
class SVRRadioMsgNotifyDefaultTypeInternal;
extern SVRRadioMsgNotifyDefaultTypeInternal _SVRRadioMsgNotify_default_instance_;
class SVRRadioPushSetNotify;
class SVRRadioPushSetNotifyDefaultTypeInternal;
extern SVRRadioPushSetNotifyDefaultTypeInternal _SVRRadioPushSetNotify_default_instance_;
}  // namespace im
namespace google {
namespace protobuf {
template<> ::im::CMLoginNotify* Arena::CreateMaybeMessage<::im::CMLoginNotify>(Arena*);
template<> ::im::CMLoginNotifyAck* Arena::CreateMaybeMessage<::im::CMLoginNotifyAck>(Arena*);
template<> ::im::CMLoginTrans* Arena::CreateMaybeMessage<::im::CMLoginTrans>(Arena*);
template<> ::im::CMPHPLoginNotify* Arena::CreateMaybeMessage<::im::CMPHPLoginNotify>(Arena*);
template<> ::im::CMPHPLoginNotifyACK* Arena::CreateMaybeMessage<::im::CMPHPLoginNotifyACK>(Arena*);
template<> ::im::LoginCMNotify* Arena::CreateMaybeMessage<::im::LoginCMNotify>(Arena*);
template<> ::im::LoginCMNotifyAck* Arena::CreateMaybeMessage<::im::LoginCMNotifyAck>(Arena*);
template<> ::im::OnLoginResult* Arena::CreateMaybeMessage<::im::OnLoginResult>(Arena*);
template<> ::im::SVRMSGCommonMsgNotify* Arena::CreateMaybeMessage<::im::SVRMSGCommonMsgNotify>(Arena*);
template<> ::im::SVRMSGFriendRelationNotify* Arena::CreateMaybeMessage<::im::SVRMSGFriendRelationNotify>(Arena*);
template<> ::im::SVRMSGGroupRelationNotify* Arena::CreateMaybeMessage<::im::SVRMSGGroupRelationNotify>(Arena*);
template<> ::im::SVRMSGNotifyACK* Arena::CreateMaybeMessage<::im::SVRMSGNotifyACK>(Arena*);
template<> ::im::SVRRadioMsgNotify* Arena::CreateMaybeMessage<::im::SVRRadioMsgNotify>(Arena*);
template<> ::im::SVRRadioPushSetNotify* Arena::CreateMaybeMessage<::im::SVRRadioPushSetNotify>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace im {

enum CMLoginNotifyType {
  CMLOGIN_CLOSELINK = 0,
  CMLoginNotifyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CMLoginNotifyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CMLoginNotifyType_IsValid(int value);
const CMLoginNotifyType CMLoginNotifyType_MIN = CMLOGIN_CLOSELINK;
const CMLoginNotifyType CMLoginNotifyType_MAX = CMLOGIN_CLOSELINK;
const int CMLoginNotifyType_ARRAYSIZE = CMLoginNotifyType_MAX + 1;

enum LoginCMNotifyType {
  LOGINCM_CLOSELINK = 0,
  LoginCMNotifyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LoginCMNotifyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LoginCMNotifyType_IsValid(int value);
const LoginCMNotifyType LoginCMNotifyType_MIN = LOGINCM_CLOSELINK;
const LoginCMNotifyType LoginCMNotifyType_MAX = LOGINCM_CLOSELINK;
const int LoginCMNotifyType_ARRAYSIZE = LoginCMNotifyType_MAX + 1;

enum PHPLoginNotifyType {
  PHP_NOTIFY_TYPE_UNKNOWN = 0,
  PHP_NOTIFY_TYPE_LOGIN = 1,
  PHP_NOTIFY_TYPE_LOGOUT = 2,
  PHPLoginNotifyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PHPLoginNotifyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PHPLoginNotifyType_IsValid(int value);
const PHPLoginNotifyType PHPLoginNotifyType_MIN = PHP_NOTIFY_TYPE_UNKNOWN;
const PHPLoginNotifyType PHPLoginNotifyType_MAX = PHP_NOTIFY_TYPE_LOGOUT;
const int PHPLoginNotifyType_ARRAYSIZE = PHPLoginNotifyType_MAX + 1;

enum PHPLoginNotifySubType {
  PHPLOGIN_NOTIFY_SUBTYPE_OK = 0,
  PHPLOGIN_NOTIFY_SUBTYPE_NOCAPTCHA = 1,
  PHPLOGIN_NOTIFY_SUBTYPE_CAPTCHA = 2,
  PHPLoginNotifySubType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PHPLoginNotifySubType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PHPLoginNotifySubType_IsValid(int value);
const PHPLoginNotifySubType PHPLoginNotifySubType_MIN = PHPLOGIN_NOTIFY_SUBTYPE_OK;
const PHPLoginNotifySubType PHPLoginNotifySubType_MAX = PHPLOGIN_NOTIFY_SUBTYPE_CAPTCHA;
const int PHPLoginNotifySubType_ARRAYSIZE = PHPLoginNotifySubType_MAX + 1;

enum SVRGroupRelationNotifyType {
  GRPRELATION_TYPE_UNKNOWN = 0,
  GRPRELATION_TYPE_INFO_CHANGED = 1,
  GRPRELATION_TYPE_MEM_QUIT = 2,
  GRPRELATION_TYPE_MEM_REMOVE = 3,
  GRPRELATION_TYPE_APPLY_RESULT = 4,
  GRPRELATION_TYPE_INVITE_RESULT = 5,
  GRPRELATION_TYPE_MASTER_CHANGED = 6,
  GRPRELATION_TYPE_GRP_ACTIVE = 7,
  GRPRELATION_TYPE_MASTER_ANS_APPLY = 8,
  GRPRELATION_TYPE_MASTER_ANS_INVITE = 9,
  SVRGroupRelationNotifyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SVRGroupRelationNotifyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SVRGroupRelationNotifyType_IsValid(int value);
const SVRGroupRelationNotifyType SVRGroupRelationNotifyType_MIN = GRPRELATION_TYPE_UNKNOWN;
const SVRGroupRelationNotifyType SVRGroupRelationNotifyType_MAX = GRPRELATION_TYPE_MASTER_ANS_INVITE;
const int SVRGroupRelationNotifyType_ARRAYSIZE = SVRGroupRelationNotifyType_MAX + 1;

enum SVRFriendRelationNotifyType {
  FRIEND_NOTIFY_TYPE_UNKNOWN = 0,
  FRIEND_NOTIFY_TYPE_ADD = 1,
  FRIEND_NOTIFY_TYPE_ANS = 2,
  SVRFriendRelationNotifyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SVRFriendRelationNotifyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SVRFriendRelationNotifyType_IsValid(int value);
const SVRFriendRelationNotifyType SVRFriendRelationNotifyType_MIN = FRIEND_NOTIFY_TYPE_UNKNOWN;
const SVRFriendRelationNotifyType SVRFriendRelationNotifyType_MAX = FRIEND_NOTIFY_TYPE_ANS;
const int SVRFriendRelationNotifyType_ARRAYSIZE = SVRFriendRelationNotifyType_MAX + 1;

enum SVRCommonNotifyType {
  NOTIFY_MODIFYUSERINFO = 0,
  SVRCommonNotifyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SVRCommonNotifyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SVRCommonNotifyType_IsValid(int value);
const SVRCommonNotifyType SVRCommonNotifyType_MIN = NOTIFY_MODIFYUSERINFO;
const SVRCommonNotifyType SVRCommonNotifyType_MAX = NOTIFY_MODIFYUSERINFO;
const int SVRCommonNotifyType_ARRAYSIZE = SVRCommonNotifyType_MAX + 1;

enum SVRRadioNotifyType {
  SVRRADIO_TYPE_UNKNOWN = 0,
  SVRRADIO_TYPE_NAME_CHANGED = 1,
  SVRRADIO_TYPE_ICON_CHANGED = 2,
  SVRRADIO_TYPE_NOTICE_CHANGED = 3,
  SVRRADIO_TYPE_MEMBER_QUIT = 4,
  SVRRADIO_TYPE_MEMBER_REMOVE = 5,
  SVRRADIO_TYPE_APPLY = 6,
  SVRRADIO_TYPE_INVITE = 7,
  SVRRADIO_TYPE_MASTER_CHANGED = 8,
  SVRRADIO_TYPE_ADMIN_SET = 9,
  SVRRADIO_TYPE_ADMIN_UNSET = 10,
  SVRRADIO_TYPE_DISMISS = 11,
  SVRRADIO_TYPE_NOSPEAK = 12,
  SVRRADIO_TYPE_SPEAKING = 13,
  SVRRADIO_TYPE_CREATE = 14,
  SVRRADIO_TYPE_FORBID_INTERFACING_ON = 15,
  SVRRADIO_TYPE_FORBID_INTERFACING_OFF = 16,
  SVRRadioNotifyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SVRRadioNotifyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SVRRadioNotifyType_IsValid(int value);
const SVRRadioNotifyType SVRRadioNotifyType_MIN = SVRRADIO_TYPE_UNKNOWN;
const SVRRadioNotifyType SVRRadioNotifyType_MAX = SVRRADIO_TYPE_FORBID_INTERFACING_OFF;
const int SVRRadioNotifyType_ARRAYSIZE = SVRRadioNotifyType_MAX + 1;

enum SVRRadioPushSetNotifyType {
  SVRPUSH_NEWMSG = 0,
  SVRPUSH_HIDEMSGSOUNDON = 1,
  SVRPUSH_ISHIDE = 2,
  SVRPUSH_UNDISTURB = 3,
  SVRRadioPushSetNotifyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SVRRadioPushSetNotifyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SVRRadioPushSetNotifyType_IsValid(int value);
const SVRRadioPushSetNotifyType SVRRadioPushSetNotifyType_MIN = SVRPUSH_NEWMSG;
const SVRRadioPushSetNotifyType SVRRadioPushSetNotifyType_MAX = SVRPUSH_UNDISTURB;
const int SVRRadioPushSetNotifyType_ARRAYSIZE = SVRRadioPushSetNotifyType_MAX + 1;

enum LoginResultType {
  LOGIN_ACK = 0,
  LOGIN_KICKOUT = 1,
  LoginResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LoginResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LoginResultType_IsValid(int value);
const LoginResultType LoginResultType_MIN = LOGIN_ACK;
const LoginResultType LoginResultType_MAX = LOGIN_KICKOUT;
const int LoginResultType_ARRAYSIZE = LoginResultType_MAX + 1;

// ===================================================================

class CMLoginNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.CMLoginNotify) */ {
 public:
  CMLoginNotify();
  virtual ~CMLoginNotify();

  CMLoginNotify(const CMLoginNotify& from);

  inline CMLoginNotify& operator=(const CMLoginNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMLoginNotify(CMLoginNotify&& from) noexcept
    : CMLoginNotify() {
    *this = ::std::move(from);
  }

  inline CMLoginNotify& operator=(CMLoginNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CMLoginNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMLoginNotify* internal_default_instance() {
    return reinterpret_cast<const CMLoginNotify*>(
               &_CMLoginNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CMLoginNotify* other);
  friend void swap(CMLoginNotify& a, CMLoginNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMLoginNotify* New() const final {
    return CreateMaybeMessage<CMLoginNotify>(NULL);
  }

  CMLoginNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMLoginNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CMLoginNotify& from);
  void MergeFrom(const CMLoginNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMLoginNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sIp = 2;
  void clear_sip();
  static const int kSIpFieldNumber = 2;
  const ::std::string& sip() const;
  void set_sip(const ::std::string& value);
  #if LANG_CXX11
  void set_sip(::std::string&& value);
  #endif
  void set_sip(const char* value);
  void set_sip(const char* value, size_t size);
  ::std::string* mutable_sip();
  ::std::string* release_sip();
  void set_allocated_sip(::std::string* sip);

  // string sHost = 5;
  void clear_shost();
  static const int kSHostFieldNumber = 5;
  const ::std::string& shost() const;
  void set_shost(const ::std::string& value);
  #if LANG_CXX11
  void set_shost(::std::string&& value);
  #endif
  void set_shost(const char* value);
  void set_shost(const char* value, size_t size);
  ::std::string* mutable_shost();
  ::std::string* release_shost();
  void set_allocated_shost(::std::string* shost);

  // uint32 nPort = 3;
  void clear_nport();
  static const int kNPortFieldNumber = 3;
  ::google::protobuf::uint32 nport() const;
  void set_nport(::google::protobuf::uint32 value);

  // .im.CMLoginNotifyType notifyType = 4;
  void clear_notifytype();
  static const int kNotifyTypeFieldNumber = 4;
  ::im::CMLoginNotifyType notifytype() const;
  void set_notifytype(::im::CMLoginNotifyType value);

  // @@protoc_insertion_point(class_scope:im.CMLoginNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sip_;
  ::google::protobuf::internal::ArenaStringPtr shost_;
  ::google::protobuf::uint32 nport_;
  int notifytype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2einner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMLoginNotifyAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.CMLoginNotifyAck) */ {
 public:
  CMLoginNotifyAck();
  virtual ~CMLoginNotifyAck();

  CMLoginNotifyAck(const CMLoginNotifyAck& from);

  inline CMLoginNotifyAck& operator=(const CMLoginNotifyAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMLoginNotifyAck(CMLoginNotifyAck&& from) noexcept
    : CMLoginNotifyAck() {
    *this = ::std::move(from);
  }

  inline CMLoginNotifyAck& operator=(CMLoginNotifyAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CMLoginNotifyAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMLoginNotifyAck* internal_default_instance() {
    return reinterpret_cast<const CMLoginNotifyAck*>(
               &_CMLoginNotifyAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CMLoginNotifyAck* other);
  friend void swap(CMLoginNotifyAck& a, CMLoginNotifyAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMLoginNotifyAck* New() const final {
    return CreateMaybeMessage<CMLoginNotifyAck>(NULL);
  }

  CMLoginNotifyAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMLoginNotifyAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CMLoginNotifyAck& from);
  void MergeFrom(const CMLoginNotifyAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMLoginNotifyAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // .im.ErrCode nErr = 2;
  void clear_nerr();
  static const int kNErrFieldNumber = 2;
  ::im::ErrCode nerr() const;
  void set_nerr(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.CMLoginNotifyAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  int nerr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2einner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginCMNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.LoginCMNotify) */ {
 public:
  LoginCMNotify();
  virtual ~LoginCMNotify();

  LoginCMNotify(const LoginCMNotify& from);

  inline LoginCMNotify& operator=(const LoginCMNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginCMNotify(LoginCMNotify&& from) noexcept
    : LoginCMNotify() {
    *this = ::std::move(from);
  }

  inline LoginCMNotify& operator=(LoginCMNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const LoginCMNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginCMNotify* internal_default_instance() {
    return reinterpret_cast<const LoginCMNotify*>(
               &_LoginCMNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LoginCMNotify* other);
  friend void swap(LoginCMNotify& a, LoginCMNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginCMNotify* New() const final {
    return CreateMaybeMessage<LoginCMNotify>(NULL);
  }

  LoginCMNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginCMNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const LoginCMNotify& from);
  void MergeFrom(const LoginCMNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginCMNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // .im.LoginCMNotifyType notifyType = 2;
  void clear_notifytype();
  static const int kNotifyTypeFieldNumber = 2;
  ::im::LoginCMNotifyType notifytype() const;
  void set_notifytype(::im::LoginCMNotifyType value);

  // @@protoc_insertion_point(class_scope:im.LoginCMNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  int notifytype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2einner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginCMNotifyAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.LoginCMNotifyAck) */ {
 public:
  LoginCMNotifyAck();
  virtual ~LoginCMNotifyAck();

  LoginCMNotifyAck(const LoginCMNotifyAck& from);

  inline LoginCMNotifyAck& operator=(const LoginCMNotifyAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginCMNotifyAck(LoginCMNotifyAck&& from) noexcept
    : LoginCMNotifyAck() {
    *this = ::std::move(from);
  }

  inline LoginCMNotifyAck& operator=(LoginCMNotifyAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const LoginCMNotifyAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginCMNotifyAck* internal_default_instance() {
    return reinterpret_cast<const LoginCMNotifyAck*>(
               &_LoginCMNotifyAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LoginCMNotifyAck* other);
  friend void swap(LoginCMNotifyAck& a, LoginCMNotifyAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginCMNotifyAck* New() const final {
    return CreateMaybeMessage<LoginCMNotifyAck>(NULL);
  }

  LoginCMNotifyAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginCMNotifyAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const LoginCMNotifyAck& from);
  void MergeFrom(const LoginCMNotifyAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginCMNotifyAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // .im.ErrCode nErr = 2;
  void clear_nerr();
  static const int kNErrFieldNumber = 2;
  ::im::ErrCode nerr() const;
  void set_nerr(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.LoginCMNotifyAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  int nerr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2einner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMLoginTrans : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.CMLoginTrans) */ {
 public:
  CMLoginTrans();
  virtual ~CMLoginTrans();

  CMLoginTrans(const CMLoginTrans& from);

  inline CMLoginTrans& operator=(const CMLoginTrans& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMLoginTrans(CMLoginTrans&& from) noexcept
    : CMLoginTrans() {
    *this = ::std::move(from);
  }

  inline CMLoginTrans& operator=(CMLoginTrans&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CMLoginTrans& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMLoginTrans* internal_default_instance() {
    return reinterpret_cast<const CMLoginTrans*>(
               &_CMLoginTrans_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CMLoginTrans* other);
  friend void swap(CMLoginTrans& a, CMLoginTrans& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMLoginTrans* New() const final {
    return CreateMaybeMessage<CMLoginTrans>(NULL);
  }

  CMLoginTrans* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMLoginTrans>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CMLoginTrans& from);
  void MergeFrom(const CMLoginTrans& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMLoginTrans* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sLoginToken = 2;
  void clear_slogintoken();
  static const int kSLoginTokenFieldNumber = 2;
  const ::std::string& slogintoken() const;
  void set_slogintoken(const ::std::string& value);
  #if LANG_CXX11
  void set_slogintoken(::std::string&& value);
  #endif
  void set_slogintoken(const char* value);
  void set_slogintoken(const char* value, size_t size);
  ::std::string* mutable_slogintoken();
  ::std::string* release_slogintoken();
  void set_allocated_slogintoken(::std::string* slogintoken);

  // string sDeviceToken = 3;
  void clear_sdevicetoken();
  static const int kSDeviceTokenFieldNumber = 3;
  const ::std::string& sdevicetoken() const;
  void set_sdevicetoken(const ::std::string& value);
  #if LANG_CXX11
  void set_sdevicetoken(::std::string&& value);
  #endif
  void set_sdevicetoken(const char* value);
  void set_sdevicetoken(const char* value, size_t size);
  ::std::string* mutable_sdevicetoken();
  ::std::string* release_sdevicetoken();
  void set_allocated_sdevicetoken(::std::string* sdevicetoken);

  // string sPushToken = 5;
  void clear_spushtoken();
  static const int kSPushTokenFieldNumber = 5;
  const ::std::string& spushtoken() const;
  void set_spushtoken(const ::std::string& value);
  #if LANG_CXX11
  void set_spushtoken(::std::string&& value);
  #endif
  void set_spushtoken(const char* value);
  void set_spushtoken(const char* value, size_t size);
  ::std::string* mutable_spushtoken();
  ::std::string* release_spushtoken();
  void set_allocated_spushtoken(::std::string* spushtoken);

  // string sLoginIp = 6;
  void clear_sloginip();
  static const int kSLoginIpFieldNumber = 6;
  const ::std::string& sloginip() const;
  void set_sloginip(const ::std::string& value);
  #if LANG_CXX11
  void set_sloginip(::std::string&& value);
  #endif
  void set_sloginip(const char* value);
  void set_sloginip(const char* value, size_t size);
  ::std::string* mutable_sloginip();
  ::std::string* release_sloginip();
  void set_allocated_sloginip(::std::string* sloginip);

  // string sHost = 8;
  void clear_shost();
  static const int kSHostFieldNumber = 8;
  const ::std::string& shost() const;
  void set_shost(const ::std::string& value);
  #if LANG_CXX11
  void set_shost(::std::string&& value);
  #endif
  void set_shost(const char* value);
  void set_shost(const char* value, size_t size);
  ::std::string* mutable_shost();
  ::std::string* release_shost();
  void set_allocated_shost(::std::string* shost);

  // uint32 nPushType = 4;
  void clear_npushtype();
  static const int kNPushTypeFieldNumber = 4;
  ::google::protobuf::uint32 npushtype() const;
  void set_npushtype(::google::protobuf::uint32 value);

  // uint32 nLoginPort = 7;
  void clear_nloginport();
  static const int kNLoginPortFieldNumber = 7;
  ::google::protobuf::uint32 nloginport() const;
  void set_nloginport(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.CMLoginTrans)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr slogintoken_;
  ::google::protobuf::internal::ArenaStringPtr sdevicetoken_;
  ::google::protobuf::internal::ArenaStringPtr spushtoken_;
  ::google::protobuf::internal::ArenaStringPtr sloginip_;
  ::google::protobuf::internal::ArenaStringPtr shost_;
  ::google::protobuf::uint32 npushtype_;
  ::google::protobuf::uint32 nloginport_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2einner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMPHPLoginNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.CMPHPLoginNotify) */ {
 public:
  CMPHPLoginNotify();
  virtual ~CMPHPLoginNotify();

  CMPHPLoginNotify(const CMPHPLoginNotify& from);

  inline CMPHPLoginNotify& operator=(const CMPHPLoginNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMPHPLoginNotify(CMPHPLoginNotify&& from) noexcept
    : CMPHPLoginNotify() {
    *this = ::std::move(from);
  }

  inline CMPHPLoginNotify& operator=(CMPHPLoginNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CMPHPLoginNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMPHPLoginNotify* internal_default_instance() {
    return reinterpret_cast<const CMPHPLoginNotify*>(
               &_CMPHPLoginNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CMPHPLoginNotify* other);
  friend void swap(CMPHPLoginNotify& a, CMPHPLoginNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMPHPLoginNotify* New() const final {
    return CreateMaybeMessage<CMPHPLoginNotify>(NULL);
  }

  CMPHPLoginNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMPHPLoginNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CMPHPLoginNotify& from);
  void MergeFrom(const CMPHPLoginNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMPHPLoginNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sDeviceToken = 2;
  void clear_sdevicetoken();
  static const int kSDeviceTokenFieldNumber = 2;
  const ::std::string& sdevicetoken() const;
  void set_sdevicetoken(const ::std::string& value);
  #if LANG_CXX11
  void set_sdevicetoken(::std::string&& value);
  #endif
  void set_sdevicetoken(const char* value);
  void set_sdevicetoken(const char* value, size_t size);
  ::std::string* mutable_sdevicetoken();
  ::std::string* release_sdevicetoken();
  void set_allocated_sdevicetoken(::std::string* sdevicetoken);

  // string extend = 5;
  void clear_extend();
  static const int kExtendFieldNumber = 5;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint64 msgTime = 3;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 3;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .im.PHPLoginNotifyType loginType = 4;
  void clear_logintype();
  static const int kLoginTypeFieldNumber = 4;
  ::im::PHPLoginNotifyType logintype() const;
  void set_logintype(::im::PHPLoginNotifyType value);

  // .im.PHPLoginNotifySubType loginSubType = 6;
  void clear_loginsubtype();
  static const int kLoginSubTypeFieldNumber = 6;
  ::im::PHPLoginNotifySubType loginsubtype() const;
  void set_loginsubtype(::im::PHPLoginNotifySubType value);

  // @@protoc_insertion_point(class_scope:im.CMPHPLoginNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sdevicetoken_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint64 msgtime_;
  int logintype_;
  int loginsubtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2einner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMPHPLoginNotifyACK : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.CMPHPLoginNotifyACK) */ {
 public:
  CMPHPLoginNotifyACK();
  virtual ~CMPHPLoginNotifyACK();

  CMPHPLoginNotifyACK(const CMPHPLoginNotifyACK& from);

  inline CMPHPLoginNotifyACK& operator=(const CMPHPLoginNotifyACK& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMPHPLoginNotifyACK(CMPHPLoginNotifyACK&& from) noexcept
    : CMPHPLoginNotifyACK() {
    *this = ::std::move(from);
  }

  inline CMPHPLoginNotifyACK& operator=(CMPHPLoginNotifyACK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CMPHPLoginNotifyACK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMPHPLoginNotifyACK* internal_default_instance() {
    return reinterpret_cast<const CMPHPLoginNotifyACK*>(
               &_CMPHPLoginNotifyACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CMPHPLoginNotifyACK* other);
  friend void swap(CMPHPLoginNotifyACK& a, CMPHPLoginNotifyACK& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMPHPLoginNotifyACK* New() const final {
    return CreateMaybeMessage<CMPHPLoginNotifyACK>(NULL);
  }

  CMPHPLoginNotifyACK* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMPHPLoginNotifyACK>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CMPHPLoginNotifyACK& from);
  void MergeFrom(const CMPHPLoginNotifyACK& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMPHPLoginNotifyACK* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // uint64 msgTime = 2;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 2;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .im.ErrCode nErr = 3;
  void clear_nerr();
  static const int kNErrFieldNumber = 3;
  ::im::ErrCode nerr() const;
  void set_nerr(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.CMPHPLoginNotifyACK)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::uint64 msgtime_;
  int nerr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2einner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SVRMSGGroupRelationNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SVRMSGGroupRelationNotify) */ {
 public:
  SVRMSGGroupRelationNotify();
  virtual ~SVRMSGGroupRelationNotify();

  SVRMSGGroupRelationNotify(const SVRMSGGroupRelationNotify& from);

  inline SVRMSGGroupRelationNotify& operator=(const SVRMSGGroupRelationNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SVRMSGGroupRelationNotify(SVRMSGGroupRelationNotify&& from) noexcept
    : SVRMSGGroupRelationNotify() {
    *this = ::std::move(from);
  }

  inline SVRMSGGroupRelationNotify& operator=(SVRMSGGroupRelationNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SVRMSGGroupRelationNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SVRMSGGroupRelationNotify* internal_default_instance() {
    return reinterpret_cast<const SVRMSGGroupRelationNotify*>(
               &_SVRMSGGroupRelationNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(SVRMSGGroupRelationNotify* other);
  friend void swap(SVRMSGGroupRelationNotify& a, SVRMSGGroupRelationNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SVRMSGGroupRelationNotify* New() const final {
    return CreateMaybeMessage<SVRMSGGroupRelationNotify>(NULL);
  }

  SVRMSGGroupRelationNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SVRMSGGroupRelationNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SVRMSGGroupRelationNotify& from);
  void MergeFrom(const SVRMSGGroupRelationNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SVRMSGGroupRelationNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sToIds = 3;
  int stoids_size() const;
  void clear_stoids();
  static const int kSToIdsFieldNumber = 3;
  const ::std::string& stoids(int index) const;
  ::std::string* mutable_stoids(int index);
  void set_stoids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_stoids(int index, ::std::string&& value);
  #endif
  void set_stoids(int index, const char* value);
  void set_stoids(int index, const char* value, size_t size);
  ::std::string* add_stoids();
  void add_stoids(const ::std::string& value);
  #if LANG_CXX11
  void add_stoids(::std::string&& value);
  #endif
  void add_stoids(const char* value);
  void add_stoids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stoids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stoids();

  // repeated string sMnpledUserId = 6;
  int smnpleduserid_size() const;
  void clear_smnpleduserid();
  static const int kSMnpledUserIdFieldNumber = 6;
  const ::std::string& smnpleduserid(int index) const;
  ::std::string* mutable_smnpleduserid(int index);
  void set_smnpleduserid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_smnpleduserid(int index, ::std::string&& value);
  #endif
  void set_smnpleduserid(int index, const char* value);
  void set_smnpleduserid(int index, const char* value, size_t size);
  ::std::string* add_smnpleduserid();
  void add_smnpleduserid(const ::std::string& value);
  #if LANG_CXX11
  void add_smnpleduserid(::std::string&& value);
  #endif
  void add_smnpleduserid(const char* value);
  void add_smnpleduserid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& smnpleduserid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_smnpleduserid();

  // string sGrpId = 1;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 1;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sOprUserId = 5;
  void clear_sopruserid();
  static const int kSOprUserIdFieldNumber = 5;
  const ::std::string& sopruserid() const;
  void set_sopruserid(const ::std::string& value);
  #if LANG_CXX11
  void set_sopruserid(::std::string&& value);
  #endif
  void set_sopruserid(const char* value);
  void set_sopruserid(const char* value, size_t size);
  ::std::string* mutable_sopruserid();
  ::std::string* release_sopruserid();
  void set_allocated_sopruserid(::std::string* sopruserid);

  // string sContent = 7;
  void clear_scontent();
  static const int kSContentFieldNumber = 7;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // string sOperId = 9;
  void clear_soperid();
  static const int kSOperIdFieldNumber = 9;
  const ::std::string& soperid() const;
  void set_soperid(const ::std::string& value);
  #if LANG_CXX11
  void set_soperid(::std::string&& value);
  #endif
  void set_soperid(const char* value);
  void set_soperid(const char* value, size_t size);
  ::std::string* mutable_soperid();
  ::std::string* release_soperid();
  void set_allocated_soperid(::std::string* soperid);

  // string extend = 10;
  void clear_extend();
  static const int kExtendFieldNumber = 10;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint64 msgTime = 4;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 4;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .im.SVRGroupRelationNotifyType notifyType = 8;
  void clear_notifytype();
  static const int kNotifyTypeFieldNumber = 8;
  ::im::SVRGroupRelationNotifyType notifytype() const;
  void set_notifytype(::im::SVRGroupRelationNotifyType value);

  // @@protoc_insertion_point(class_scope:im.SVRMSGGroupRelationNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stoids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> smnpleduserid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr sopruserid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::internal::ArenaStringPtr soperid_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint64 msgtime_;
  int notifytype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2einner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SVRMSGFriendRelationNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SVRMSGFriendRelationNotify) */ {
 public:
  SVRMSGFriendRelationNotify();
  virtual ~SVRMSGFriendRelationNotify();

  SVRMSGFriendRelationNotify(const SVRMSGFriendRelationNotify& from);

  inline SVRMSGFriendRelationNotify& operator=(const SVRMSGFriendRelationNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SVRMSGFriendRelationNotify(SVRMSGFriendRelationNotify&& from) noexcept
    : SVRMSGFriendRelationNotify() {
    *this = ::std::move(from);
  }

  inline SVRMSGFriendRelationNotify& operator=(SVRMSGFriendRelationNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SVRMSGFriendRelationNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SVRMSGFriendRelationNotify* internal_default_instance() {
    return reinterpret_cast<const SVRMSGFriendRelationNotify*>(
               &_SVRMSGFriendRelationNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SVRMSGFriendRelationNotify* other);
  friend void swap(SVRMSGFriendRelationNotify& a, SVRMSGFriendRelationNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SVRMSGFriendRelationNotify* New() const final {
    return CreateMaybeMessage<SVRMSGFriendRelationNotify>(NULL);
  }

  SVRMSGFriendRelationNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SVRMSGFriendRelationNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SVRMSGFriendRelationNotify& from);
  void MergeFrom(const SVRMSGFriendRelationNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SVRMSGFriendRelationNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sMemoName = 4;
  void clear_smemoname();
  static const int kSMemoNameFieldNumber = 4;
  const ::std::string& smemoname() const;
  void set_smemoname(const ::std::string& value);
  #if LANG_CXX11
  void set_smemoname(::std::string&& value);
  #endif
  void set_smemoname(const char* value);
  void set_smemoname(const char* value, size_t size);
  ::std::string* mutable_smemoname();
  ::std::string* release_smemoname();
  void set_allocated_smemoname(::std::string* smemoname);

  // string sSelfIntroduce = 6;
  void clear_sselfintroduce();
  static const int kSSelfIntroduceFieldNumber = 6;
  const ::std::string& sselfintroduce() const;
  void set_sselfintroduce(const ::std::string& value);
  #if LANG_CXX11
  void set_sselfintroduce(::std::string&& value);
  #endif
  void set_sselfintroduce(const char* value);
  void set_sselfintroduce(const char* value, size_t size);
  ::std::string* mutable_sselfintroduce();
  ::std::string* release_sselfintroduce();
  void set_allocated_sselfintroduce(::std::string* sselfintroduce);

  // string sOperId = 8;
  void clear_soperid();
  static const int kSOperIdFieldNumber = 8;
  const ::std::string& soperid() const;
  void set_soperid(const ::std::string& value);
  #if LANG_CXX11
  void set_soperid(::std::string&& value);
  #endif
  void set_soperid(const char* value);
  void set_soperid(const char* value, size_t size);
  ::std::string* mutable_soperid();
  ::std::string* release_soperid();
  void set_allocated_soperid(::std::string* soperid);

  // string extend = 9;
  void clear_extend();
  static const int kExtendFieldNumber = 9;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint64 msgTime = 7;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 7;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .im.SVRFriendRelationNotifyType notifyType = 5;
  void clear_notifytype();
  static const int kNotifyTypeFieldNumber = 5;
  ::im::SVRFriendRelationNotifyType notifytype() const;
  void set_notifytype(::im::SVRFriendRelationNotifyType value);

  // @@protoc_insertion_point(class_scope:im.SVRMSGFriendRelationNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr smemoname_;
  ::google::protobuf::internal::ArenaStringPtr sselfintroduce_;
  ::google::protobuf::internal::ArenaStringPtr soperid_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint64 msgtime_;
  int notifytype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2einner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SVRMSGCommonMsgNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SVRMSGCommonMsgNotify) */ {
 public:
  SVRMSGCommonMsgNotify();
  virtual ~SVRMSGCommonMsgNotify();

  SVRMSGCommonMsgNotify(const SVRMSGCommonMsgNotify& from);

  inline SVRMSGCommonMsgNotify& operator=(const SVRMSGCommonMsgNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SVRMSGCommonMsgNotify(SVRMSGCommonMsgNotify&& from) noexcept
    : SVRMSGCommonMsgNotify() {
    *this = ::std::move(from);
  }

  inline SVRMSGCommonMsgNotify& operator=(SVRMSGCommonMsgNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SVRMSGCommonMsgNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SVRMSGCommonMsgNotify* internal_default_instance() {
    return reinterpret_cast<const SVRMSGCommonMsgNotify*>(
               &_SVRMSGCommonMsgNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SVRMSGCommonMsgNotify* other);
  friend void swap(SVRMSGCommonMsgNotify& a, SVRMSGCommonMsgNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SVRMSGCommonMsgNotify* New() const final {
    return CreateMaybeMessage<SVRMSGCommonMsgNotify>(NULL);
  }

  SVRMSGCommonMsgNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SVRMSGCommonMsgNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SVRMSGCommonMsgNotify& from);
  void MergeFrom(const SVRMSGCommonMsgNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SVRMSGCommonMsgNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sToIds = 2;
  int stoids_size() const;
  void clear_stoids();
  static const int kSToIdsFieldNumber = 2;
  const ::std::string& stoids(int index) const;
  ::std::string* mutable_stoids(int index);
  void set_stoids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_stoids(int index, ::std::string&& value);
  #endif
  void set_stoids(int index, const char* value);
  void set_stoids(int index, const char* value, size_t size);
  ::std::string* add_stoids();
  void add_stoids(const ::std::string& value);
  #if LANG_CXX11
  void add_stoids(::std::string&& value);
  #endif
  void add_stoids(const char* value);
  void add_stoids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stoids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stoids();

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sContent = 5;
  void clear_scontent();
  static const int kSContentFieldNumber = 5;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // string extend = 7;
  void clear_extend();
  static const int kExtendFieldNumber = 7;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint64 msgTime = 6;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 6;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .im.SVRCommonNotifyType notifyType = 4;
  void clear_notifytype();
  static const int kNotifyTypeFieldNumber = 4;
  ::im::SVRCommonNotifyType notifytype() const;
  void set_notifytype(::im::SVRCommonNotifyType value);

  // @@protoc_insertion_point(class_scope:im.SVRMSGCommonMsgNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stoids_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint64 msgtime_;
  int notifytype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2einner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SVRRadioMsgNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SVRRadioMsgNotify) */ {
 public:
  SVRRadioMsgNotify();
  virtual ~SVRRadioMsgNotify();

  SVRRadioMsgNotify(const SVRRadioMsgNotify& from);

  inline SVRRadioMsgNotify& operator=(const SVRRadioMsgNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SVRRadioMsgNotify(SVRRadioMsgNotify&& from) noexcept
    : SVRRadioMsgNotify() {
    *this = ::std::move(from);
  }

  inline SVRRadioMsgNotify& operator=(SVRRadioMsgNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SVRRadioMsgNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SVRRadioMsgNotify* internal_default_instance() {
    return reinterpret_cast<const SVRRadioMsgNotify*>(
               &_SVRRadioMsgNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(SVRRadioMsgNotify* other);
  friend void swap(SVRRadioMsgNotify& a, SVRRadioMsgNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SVRRadioMsgNotify* New() const final {
    return CreateMaybeMessage<SVRRadioMsgNotify>(NULL);
  }

  SVRRadioMsgNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SVRRadioMsgNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SVRRadioMsgNotify& from);
  void MergeFrom(const SVRRadioMsgNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SVRRadioMsgNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sMnpledUserId = 5;
  int smnpleduserid_size() const;
  void clear_smnpleduserid();
  static const int kSMnpledUserIdFieldNumber = 5;
  const ::std::string& smnpleduserid(int index) const;
  ::std::string* mutable_smnpleduserid(int index);
  void set_smnpleduserid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_smnpleduserid(int index, ::std::string&& value);
  #endif
  void set_smnpleduserid(int index, const char* value);
  void set_smnpleduserid(int index, const char* value, size_t size);
  ::std::string* add_smnpleduserid();
  void add_smnpleduserid(const ::std::string& value);
  #if LANG_CXX11
  void add_smnpleduserid(::std::string&& value);
  #endif
  void add_smnpleduserid(const char* value);
  void add_smnpleduserid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& smnpleduserid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_smnpleduserid();

  // string sRadioId = 1;
  void clear_sradioid();
  static const int kSRadioIdFieldNumber = 1;
  const ::std::string& sradioid() const;
  void set_sradioid(const ::std::string& value);
  #if LANG_CXX11
  void set_sradioid(::std::string&& value);
  #endif
  void set_sradioid(const char* value);
  void set_sradioid(const char* value, size_t size);
  ::std::string* mutable_sradioid();
  ::std::string* release_sradioid();
  void set_allocated_sradioid(::std::string* sradioid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sOprUserId = 4;
  void clear_sopruserid();
  static const int kSOprUserIdFieldNumber = 4;
  const ::std::string& sopruserid() const;
  void set_sopruserid(const ::std::string& value);
  #if LANG_CXX11
  void set_sopruserid(::std::string&& value);
  #endif
  void set_sopruserid(const char* value);
  void set_sopruserid(const char* value, size_t size);
  ::std::string* mutable_sopruserid();
  ::std::string* release_sopruserid();
  void set_allocated_sopruserid(::std::string* sopruserid);

  // string sContent = 6;
  void clear_scontent();
  static const int kSContentFieldNumber = 6;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // string extend = 8;
  void clear_extend();
  static const int kExtendFieldNumber = 8;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint64 msgTime = 3;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 3;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .im.SVRRadioNotifyType notifyType = 7;
  void clear_notifytype();
  static const int kNotifyTypeFieldNumber = 7;
  ::im::SVRRadioNotifyType notifytype() const;
  void set_notifytype(::im::SVRRadioNotifyType value);

  // @@protoc_insertion_point(class_scope:im.SVRRadioMsgNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> smnpleduserid_;
  ::google::protobuf::internal::ArenaStringPtr sradioid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr sopruserid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint64 msgtime_;
  int notifytype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2einner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SVRRadioPushSetNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SVRRadioPushSetNotify) */ {
 public:
  SVRRadioPushSetNotify();
  virtual ~SVRRadioPushSetNotify();

  SVRRadioPushSetNotify(const SVRRadioPushSetNotify& from);

  inline SVRRadioPushSetNotify& operator=(const SVRRadioPushSetNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SVRRadioPushSetNotify(SVRRadioPushSetNotify&& from) noexcept
    : SVRRadioPushSetNotify() {
    *this = ::std::move(from);
  }

  inline SVRRadioPushSetNotify& operator=(SVRRadioPushSetNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SVRRadioPushSetNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SVRRadioPushSetNotify* internal_default_instance() {
    return reinterpret_cast<const SVRRadioPushSetNotify*>(
               &_SVRRadioPushSetNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SVRRadioPushSetNotify* other);
  friend void swap(SVRRadioPushSetNotify& a, SVRRadioPushSetNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SVRRadioPushSetNotify* New() const final {
    return CreateMaybeMessage<SVRRadioPushSetNotify>(NULL);
  }

  SVRRadioPushSetNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SVRRadioPushSetNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SVRRadioPushSetNotify& from);
  void MergeFrom(const SVRRadioPushSetNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SVRRadioPushSetNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sMsgId = 1;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 1;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sUserId = 2;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 2;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sRadioId = 3;
  void clear_sradioid();
  static const int kSRadioIdFieldNumber = 3;
  const ::std::string& sradioid() const;
  void set_sradioid(const ::std::string& value);
  #if LANG_CXX11
  void set_sradioid(::std::string&& value);
  #endif
  void set_sradioid(const char* value);
  void set_sradioid(const char* value, size_t size);
  ::std::string* mutable_sradioid();
  ::std::string* release_sradioid();
  void set_allocated_sradioid(::std::string* sradioid);

  // .im.SVRRadioPushSetNotifyType notifyType = 4;
  void clear_notifytype();
  static const int kNotifyTypeFieldNumber = 4;
  ::im::SVRRadioPushSetNotifyType notifytype() const;
  void set_notifytype(::im::SVRRadioPushSetNotifyType value);

  // uint32 status = 5;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // uint64 msgTime = 6;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 6;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:im.SVRRadioPushSetNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sradioid_;
  int notifytype_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint64 msgtime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2einner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SVRMSGNotifyACK : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.SVRMSGNotifyACK) */ {
 public:
  SVRMSGNotifyACK();
  virtual ~SVRMSGNotifyACK();

  SVRMSGNotifyACK(const SVRMSGNotifyACK& from);

  inline SVRMSGNotifyACK& operator=(const SVRMSGNotifyACK& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SVRMSGNotifyACK(SVRMSGNotifyACK&& from) noexcept
    : SVRMSGNotifyACK() {
    *this = ::std::move(from);
  }

  inline SVRMSGNotifyACK& operator=(SVRMSGNotifyACK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SVRMSGNotifyACK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SVRMSGNotifyACK* internal_default_instance() {
    return reinterpret_cast<const SVRMSGNotifyACK*>(
               &_SVRMSGNotifyACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(SVRMSGNotifyACK* other);
  friend void swap(SVRMSGNotifyACK& a, SVRMSGNotifyACK& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SVRMSGNotifyACK* New() const final {
    return CreateMaybeMessage<SVRMSGNotifyACK>(NULL);
  }

  SVRMSGNotifyACK* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SVRMSGNotifyACK>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SVRMSGNotifyACK& from);
  void MergeFrom(const SVRMSGNotifyACK& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SVRMSGNotifyACK* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sMsgId = 1;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 1;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // uint64 msgTime = 2;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 2;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .im.ErrCode errcode = 3;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.SVRMSGNotifyACK)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::uint64 msgtime_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2einner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OnLoginResult : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.OnLoginResult) */ {
 public:
  OnLoginResult();
  virtual ~OnLoginResult();

  OnLoginResult(const OnLoginResult& from);

  inline OnLoginResult& operator=(const OnLoginResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OnLoginResult(OnLoginResult&& from) noexcept
    : OnLoginResult() {
    *this = ::std::move(from);
  }

  inline OnLoginResult& operator=(OnLoginResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const OnLoginResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnLoginResult* internal_default_instance() {
    return reinterpret_cast<const OnLoginResult*>(
               &_OnLoginResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(OnLoginResult* other);
  friend void swap(OnLoginResult& a, OnLoginResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnLoginResult* New() const final {
    return CreateMaybeMessage<OnLoginResult>(NULL);
  }

  OnLoginResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OnLoginResult>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const OnLoginResult& from);
  void MergeFrom(const OnLoginResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OnLoginResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sHost = 2;
  void clear_shost();
  static const int kSHostFieldNumber = 2;
  const ::std::string& shost() const;
  void set_shost(const ::std::string& value);
  #if LANG_CXX11
  void set_shost(::std::string&& value);
  #endif
  void set_shost(const char* value);
  void set_shost(const char* value, size_t size);
  ::std::string* mutable_shost();
  ::std::string* release_shost();
  void set_allocated_shost(::std::string* shost);

  // .im.LoginResultType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::im::LoginResultType type() const;
  void set_type(::im::LoginResultType value);

  // .im.ErrCode nErr = 4;
  void clear_nerr();
  static const int kNErrFieldNumber = 4;
  ::im::ErrCode nerr() const;
  void set_nerr(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.OnLoginResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr shost_;
  int type_;
  int nerr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2einner_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMLoginNotify

// string sUserId = 1;
inline void CMLoginNotify::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLoginNotify::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMLoginNotify.sUserId)
  return suserid_.GetNoArena();
}
inline void CMLoginNotify::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLoginNotify.sUserId)
}
#if LANG_CXX11
inline void CMLoginNotify::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMLoginNotify.sUserId)
}
#endif
inline void CMLoginNotify::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLoginNotify.sUserId)
}
inline void CMLoginNotify::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLoginNotify.sUserId)
}
inline ::std::string* CMLoginNotify::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLoginNotify.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLoginNotify::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMLoginNotify.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLoginNotify::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMLoginNotify.sUserId)
}

// string sIp = 2;
inline void CMLoginNotify::clear_sip() {
  sip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLoginNotify::sip() const {
  // @@protoc_insertion_point(field_get:im.CMLoginNotify.sIp)
  return sip_.GetNoArena();
}
inline void CMLoginNotify::set_sip(const ::std::string& value) {
  
  sip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLoginNotify.sIp)
}
#if LANG_CXX11
inline void CMLoginNotify::set_sip(::std::string&& value) {
  
  sip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMLoginNotify.sIp)
}
#endif
inline void CMLoginNotify::set_sip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLoginNotify.sIp)
}
inline void CMLoginNotify::set_sip(const char* value, size_t size) {
  
  sip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLoginNotify.sIp)
}
inline ::std::string* CMLoginNotify::mutable_sip() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLoginNotify.sIp)
  return sip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLoginNotify::release_sip() {
  // @@protoc_insertion_point(field_release:im.CMLoginNotify.sIp)
  
  return sip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLoginNotify::set_allocated_sip(::std::string* sip) {
  if (sip != NULL) {
    
  } else {
    
  }
  sip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sip);
  // @@protoc_insertion_point(field_set_allocated:im.CMLoginNotify.sIp)
}

// uint32 nPort = 3;
inline void CMLoginNotify::clear_nport() {
  nport_ = 0u;
}
inline ::google::protobuf::uint32 CMLoginNotify::nport() const {
  // @@protoc_insertion_point(field_get:im.CMLoginNotify.nPort)
  return nport_;
}
inline void CMLoginNotify::set_nport(::google::protobuf::uint32 value) {
  
  nport_ = value;
  // @@protoc_insertion_point(field_set:im.CMLoginNotify.nPort)
}

// .im.CMLoginNotifyType notifyType = 4;
inline void CMLoginNotify::clear_notifytype() {
  notifytype_ = 0;
}
inline ::im::CMLoginNotifyType CMLoginNotify::notifytype() const {
  // @@protoc_insertion_point(field_get:im.CMLoginNotify.notifyType)
  return static_cast< ::im::CMLoginNotifyType >(notifytype_);
}
inline void CMLoginNotify::set_notifytype(::im::CMLoginNotifyType value) {
  
  notifytype_ = value;
  // @@protoc_insertion_point(field_set:im.CMLoginNotify.notifyType)
}

// string sHost = 5;
inline void CMLoginNotify::clear_shost() {
  shost_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLoginNotify::shost() const {
  // @@protoc_insertion_point(field_get:im.CMLoginNotify.sHost)
  return shost_.GetNoArena();
}
inline void CMLoginNotify::set_shost(const ::std::string& value) {
  
  shost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLoginNotify.sHost)
}
#if LANG_CXX11
inline void CMLoginNotify::set_shost(::std::string&& value) {
  
  shost_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMLoginNotify.sHost)
}
#endif
inline void CMLoginNotify::set_shost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  shost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLoginNotify.sHost)
}
inline void CMLoginNotify::set_shost(const char* value, size_t size) {
  
  shost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLoginNotify.sHost)
}
inline ::std::string* CMLoginNotify::mutable_shost() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLoginNotify.sHost)
  return shost_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLoginNotify::release_shost() {
  // @@protoc_insertion_point(field_release:im.CMLoginNotify.sHost)
  
  return shost_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLoginNotify::set_allocated_shost(::std::string* shost) {
  if (shost != NULL) {
    
  } else {
    
  }
  shost_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shost);
  // @@protoc_insertion_point(field_set_allocated:im.CMLoginNotify.sHost)
}

// -------------------------------------------------------------------

// CMLoginNotifyAck

// string sUserId = 1;
inline void CMLoginNotifyAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLoginNotifyAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMLoginNotifyAck.sUserId)
  return suserid_.GetNoArena();
}
inline void CMLoginNotifyAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLoginNotifyAck.sUserId)
}
#if LANG_CXX11
inline void CMLoginNotifyAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMLoginNotifyAck.sUserId)
}
#endif
inline void CMLoginNotifyAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLoginNotifyAck.sUserId)
}
inline void CMLoginNotifyAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLoginNotifyAck.sUserId)
}
inline ::std::string* CMLoginNotifyAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLoginNotifyAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLoginNotifyAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMLoginNotifyAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLoginNotifyAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMLoginNotifyAck.sUserId)
}

// .im.ErrCode nErr = 2;
inline void CMLoginNotifyAck::clear_nerr() {
  nerr_ = 0;
}
inline ::im::ErrCode CMLoginNotifyAck::nerr() const {
  // @@protoc_insertion_point(field_get:im.CMLoginNotifyAck.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
inline void CMLoginNotifyAck::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.CMLoginNotifyAck.nErr)
}

// -------------------------------------------------------------------

// LoginCMNotify

// string sUserId = 1;
inline void LoginCMNotify::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginCMNotify::suserid() const {
  // @@protoc_insertion_point(field_get:im.LoginCMNotify.sUserId)
  return suserid_.GetNoArena();
}
inline void LoginCMNotify::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.LoginCMNotify.sUserId)
}
#if LANG_CXX11
inline void LoginCMNotify::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.LoginCMNotify.sUserId)
}
#endif
inline void LoginCMNotify::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.LoginCMNotify.sUserId)
}
inline void LoginCMNotify::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.LoginCMNotify.sUserId)
}
inline ::std::string* LoginCMNotify::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.LoginCMNotify.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginCMNotify::release_suserid() {
  // @@protoc_insertion_point(field_release:im.LoginCMNotify.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginCMNotify::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.LoginCMNotify.sUserId)
}

// .im.LoginCMNotifyType notifyType = 2;
inline void LoginCMNotify::clear_notifytype() {
  notifytype_ = 0;
}
inline ::im::LoginCMNotifyType LoginCMNotify::notifytype() const {
  // @@protoc_insertion_point(field_get:im.LoginCMNotify.notifyType)
  return static_cast< ::im::LoginCMNotifyType >(notifytype_);
}
inline void LoginCMNotify::set_notifytype(::im::LoginCMNotifyType value) {
  
  notifytype_ = value;
  // @@protoc_insertion_point(field_set:im.LoginCMNotify.notifyType)
}

// -------------------------------------------------------------------

// LoginCMNotifyAck

// string sUserId = 1;
inline void LoginCMNotifyAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginCMNotifyAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.LoginCMNotifyAck.sUserId)
  return suserid_.GetNoArena();
}
inline void LoginCMNotifyAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.LoginCMNotifyAck.sUserId)
}
#if LANG_CXX11
inline void LoginCMNotifyAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.LoginCMNotifyAck.sUserId)
}
#endif
inline void LoginCMNotifyAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.LoginCMNotifyAck.sUserId)
}
inline void LoginCMNotifyAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.LoginCMNotifyAck.sUserId)
}
inline ::std::string* LoginCMNotifyAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.LoginCMNotifyAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginCMNotifyAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.LoginCMNotifyAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginCMNotifyAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.LoginCMNotifyAck.sUserId)
}

// .im.ErrCode nErr = 2;
inline void LoginCMNotifyAck::clear_nerr() {
  nerr_ = 0;
}
inline ::im::ErrCode LoginCMNotifyAck::nerr() const {
  // @@protoc_insertion_point(field_get:im.LoginCMNotifyAck.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
inline void LoginCMNotifyAck::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.LoginCMNotifyAck.nErr)
}

// -------------------------------------------------------------------

// CMLoginTrans

// string sUserId = 1;
inline void CMLoginTrans::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLoginTrans::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMLoginTrans.sUserId)
  return suserid_.GetNoArena();
}
inline void CMLoginTrans::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLoginTrans.sUserId)
}
#if LANG_CXX11
inline void CMLoginTrans::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMLoginTrans.sUserId)
}
#endif
inline void CMLoginTrans::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLoginTrans.sUserId)
}
inline void CMLoginTrans::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLoginTrans.sUserId)
}
inline ::std::string* CMLoginTrans::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLoginTrans.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLoginTrans::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMLoginTrans.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLoginTrans::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMLoginTrans.sUserId)
}

// string sLoginToken = 2;
inline void CMLoginTrans::clear_slogintoken() {
  slogintoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLoginTrans::slogintoken() const {
  // @@protoc_insertion_point(field_get:im.CMLoginTrans.sLoginToken)
  return slogintoken_.GetNoArena();
}
inline void CMLoginTrans::set_slogintoken(const ::std::string& value) {
  
  slogintoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLoginTrans.sLoginToken)
}
#if LANG_CXX11
inline void CMLoginTrans::set_slogintoken(::std::string&& value) {
  
  slogintoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMLoginTrans.sLoginToken)
}
#endif
inline void CMLoginTrans::set_slogintoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  slogintoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLoginTrans.sLoginToken)
}
inline void CMLoginTrans::set_slogintoken(const char* value, size_t size) {
  
  slogintoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLoginTrans.sLoginToken)
}
inline ::std::string* CMLoginTrans::mutable_slogintoken() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLoginTrans.sLoginToken)
  return slogintoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLoginTrans::release_slogintoken() {
  // @@protoc_insertion_point(field_release:im.CMLoginTrans.sLoginToken)
  
  return slogintoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLoginTrans::set_allocated_slogintoken(::std::string* slogintoken) {
  if (slogintoken != NULL) {
    
  } else {
    
  }
  slogintoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slogintoken);
  // @@protoc_insertion_point(field_set_allocated:im.CMLoginTrans.sLoginToken)
}

// string sDeviceToken = 3;
inline void CMLoginTrans::clear_sdevicetoken() {
  sdevicetoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLoginTrans::sdevicetoken() const {
  // @@protoc_insertion_point(field_get:im.CMLoginTrans.sDeviceToken)
  return sdevicetoken_.GetNoArena();
}
inline void CMLoginTrans::set_sdevicetoken(const ::std::string& value) {
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLoginTrans.sDeviceToken)
}
#if LANG_CXX11
inline void CMLoginTrans::set_sdevicetoken(::std::string&& value) {
  
  sdevicetoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMLoginTrans.sDeviceToken)
}
#endif
inline void CMLoginTrans::set_sdevicetoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLoginTrans.sDeviceToken)
}
inline void CMLoginTrans::set_sdevicetoken(const char* value, size_t size) {
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLoginTrans.sDeviceToken)
}
inline ::std::string* CMLoginTrans::mutable_sdevicetoken() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLoginTrans.sDeviceToken)
  return sdevicetoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLoginTrans::release_sdevicetoken() {
  // @@protoc_insertion_point(field_release:im.CMLoginTrans.sDeviceToken)
  
  return sdevicetoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLoginTrans::set_allocated_sdevicetoken(::std::string* sdevicetoken) {
  if (sdevicetoken != NULL) {
    
  } else {
    
  }
  sdevicetoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdevicetoken);
  // @@protoc_insertion_point(field_set_allocated:im.CMLoginTrans.sDeviceToken)
}

// uint32 nPushType = 4;
inline void CMLoginTrans::clear_npushtype() {
  npushtype_ = 0u;
}
inline ::google::protobuf::uint32 CMLoginTrans::npushtype() const {
  // @@protoc_insertion_point(field_get:im.CMLoginTrans.nPushType)
  return npushtype_;
}
inline void CMLoginTrans::set_npushtype(::google::protobuf::uint32 value) {
  
  npushtype_ = value;
  // @@protoc_insertion_point(field_set:im.CMLoginTrans.nPushType)
}

// string sPushToken = 5;
inline void CMLoginTrans::clear_spushtoken() {
  spushtoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLoginTrans::spushtoken() const {
  // @@protoc_insertion_point(field_get:im.CMLoginTrans.sPushToken)
  return spushtoken_.GetNoArena();
}
inline void CMLoginTrans::set_spushtoken(const ::std::string& value) {
  
  spushtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLoginTrans.sPushToken)
}
#if LANG_CXX11
inline void CMLoginTrans::set_spushtoken(::std::string&& value) {
  
  spushtoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMLoginTrans.sPushToken)
}
#endif
inline void CMLoginTrans::set_spushtoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  spushtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLoginTrans.sPushToken)
}
inline void CMLoginTrans::set_spushtoken(const char* value, size_t size) {
  
  spushtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLoginTrans.sPushToken)
}
inline ::std::string* CMLoginTrans::mutable_spushtoken() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLoginTrans.sPushToken)
  return spushtoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLoginTrans::release_spushtoken() {
  // @@protoc_insertion_point(field_release:im.CMLoginTrans.sPushToken)
  
  return spushtoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLoginTrans::set_allocated_spushtoken(::std::string* spushtoken) {
  if (spushtoken != NULL) {
    
  } else {
    
  }
  spushtoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spushtoken);
  // @@protoc_insertion_point(field_set_allocated:im.CMLoginTrans.sPushToken)
}

// string sLoginIp = 6;
inline void CMLoginTrans::clear_sloginip() {
  sloginip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLoginTrans::sloginip() const {
  // @@protoc_insertion_point(field_get:im.CMLoginTrans.sLoginIp)
  return sloginip_.GetNoArena();
}
inline void CMLoginTrans::set_sloginip(const ::std::string& value) {
  
  sloginip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLoginTrans.sLoginIp)
}
#if LANG_CXX11
inline void CMLoginTrans::set_sloginip(::std::string&& value) {
  
  sloginip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMLoginTrans.sLoginIp)
}
#endif
inline void CMLoginTrans::set_sloginip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sloginip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLoginTrans.sLoginIp)
}
inline void CMLoginTrans::set_sloginip(const char* value, size_t size) {
  
  sloginip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLoginTrans.sLoginIp)
}
inline ::std::string* CMLoginTrans::mutable_sloginip() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLoginTrans.sLoginIp)
  return sloginip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLoginTrans::release_sloginip() {
  // @@protoc_insertion_point(field_release:im.CMLoginTrans.sLoginIp)
  
  return sloginip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLoginTrans::set_allocated_sloginip(::std::string* sloginip) {
  if (sloginip != NULL) {
    
  } else {
    
  }
  sloginip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sloginip);
  // @@protoc_insertion_point(field_set_allocated:im.CMLoginTrans.sLoginIp)
}

// uint32 nLoginPort = 7;
inline void CMLoginTrans::clear_nloginport() {
  nloginport_ = 0u;
}
inline ::google::protobuf::uint32 CMLoginTrans::nloginport() const {
  // @@protoc_insertion_point(field_get:im.CMLoginTrans.nLoginPort)
  return nloginport_;
}
inline void CMLoginTrans::set_nloginport(::google::protobuf::uint32 value) {
  
  nloginport_ = value;
  // @@protoc_insertion_point(field_set:im.CMLoginTrans.nLoginPort)
}

// string sHost = 8;
inline void CMLoginTrans::clear_shost() {
  shost_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLoginTrans::shost() const {
  // @@protoc_insertion_point(field_get:im.CMLoginTrans.sHost)
  return shost_.GetNoArena();
}
inline void CMLoginTrans::set_shost(const ::std::string& value) {
  
  shost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLoginTrans.sHost)
}
#if LANG_CXX11
inline void CMLoginTrans::set_shost(::std::string&& value) {
  
  shost_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMLoginTrans.sHost)
}
#endif
inline void CMLoginTrans::set_shost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  shost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLoginTrans.sHost)
}
inline void CMLoginTrans::set_shost(const char* value, size_t size) {
  
  shost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLoginTrans.sHost)
}
inline ::std::string* CMLoginTrans::mutable_shost() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLoginTrans.sHost)
  return shost_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLoginTrans::release_shost() {
  // @@protoc_insertion_point(field_release:im.CMLoginTrans.sHost)
  
  return shost_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLoginTrans::set_allocated_shost(::std::string* shost) {
  if (shost != NULL) {
    
  } else {
    
  }
  shost_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shost);
  // @@protoc_insertion_point(field_set_allocated:im.CMLoginTrans.sHost)
}

// -------------------------------------------------------------------

// CMPHPLoginNotify

// string sUserId = 1;
inline void CMPHPLoginNotify::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMPHPLoginNotify::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMPHPLoginNotify.sUserId)
  return suserid_.GetNoArena();
}
inline void CMPHPLoginNotify::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMPHPLoginNotify.sUserId)
}
#if LANG_CXX11
inline void CMPHPLoginNotify::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMPHPLoginNotify.sUserId)
}
#endif
inline void CMPHPLoginNotify::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMPHPLoginNotify.sUserId)
}
inline void CMPHPLoginNotify::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMPHPLoginNotify.sUserId)
}
inline ::std::string* CMPHPLoginNotify::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMPHPLoginNotify.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMPHPLoginNotify::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMPHPLoginNotify.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMPHPLoginNotify::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMPHPLoginNotify.sUserId)
}

// string sDeviceToken = 2;
inline void CMPHPLoginNotify::clear_sdevicetoken() {
  sdevicetoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMPHPLoginNotify::sdevicetoken() const {
  // @@protoc_insertion_point(field_get:im.CMPHPLoginNotify.sDeviceToken)
  return sdevicetoken_.GetNoArena();
}
inline void CMPHPLoginNotify::set_sdevicetoken(const ::std::string& value) {
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMPHPLoginNotify.sDeviceToken)
}
#if LANG_CXX11
inline void CMPHPLoginNotify::set_sdevicetoken(::std::string&& value) {
  
  sdevicetoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMPHPLoginNotify.sDeviceToken)
}
#endif
inline void CMPHPLoginNotify::set_sdevicetoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMPHPLoginNotify.sDeviceToken)
}
inline void CMPHPLoginNotify::set_sdevicetoken(const char* value, size_t size) {
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMPHPLoginNotify.sDeviceToken)
}
inline ::std::string* CMPHPLoginNotify::mutable_sdevicetoken() {
  
  // @@protoc_insertion_point(field_mutable:im.CMPHPLoginNotify.sDeviceToken)
  return sdevicetoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMPHPLoginNotify::release_sdevicetoken() {
  // @@protoc_insertion_point(field_release:im.CMPHPLoginNotify.sDeviceToken)
  
  return sdevicetoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMPHPLoginNotify::set_allocated_sdevicetoken(::std::string* sdevicetoken) {
  if (sdevicetoken != NULL) {
    
  } else {
    
  }
  sdevicetoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdevicetoken);
  // @@protoc_insertion_point(field_set_allocated:im.CMPHPLoginNotify.sDeviceToken)
}

// uint64 msgTime = 3;
inline void CMPHPLoginNotify::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CMPHPLoginNotify::msgtime() const {
  // @@protoc_insertion_point(field_get:im.CMPHPLoginNotify.msgTime)
  return msgtime_;
}
inline void CMPHPLoginNotify::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.CMPHPLoginNotify.msgTime)
}

// .im.PHPLoginNotifyType loginType = 4;
inline void CMPHPLoginNotify::clear_logintype() {
  logintype_ = 0;
}
inline ::im::PHPLoginNotifyType CMPHPLoginNotify::logintype() const {
  // @@protoc_insertion_point(field_get:im.CMPHPLoginNotify.loginType)
  return static_cast< ::im::PHPLoginNotifyType >(logintype_);
}
inline void CMPHPLoginNotify::set_logintype(::im::PHPLoginNotifyType value) {
  
  logintype_ = value;
  // @@protoc_insertion_point(field_set:im.CMPHPLoginNotify.loginType)
}

// string extend = 5;
inline void CMPHPLoginNotify::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMPHPLoginNotify::extend() const {
  // @@protoc_insertion_point(field_get:im.CMPHPLoginNotify.extend)
  return extend_.GetNoArena();
}
inline void CMPHPLoginNotify::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMPHPLoginNotify.extend)
}
#if LANG_CXX11
inline void CMPHPLoginNotify::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMPHPLoginNotify.extend)
}
#endif
inline void CMPHPLoginNotify::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMPHPLoginNotify.extend)
}
inline void CMPHPLoginNotify::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMPHPLoginNotify.extend)
}
inline ::std::string* CMPHPLoginNotify::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.CMPHPLoginNotify.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMPHPLoginNotify::release_extend() {
  // @@protoc_insertion_point(field_release:im.CMPHPLoginNotify.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMPHPLoginNotify::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.CMPHPLoginNotify.extend)
}

// .im.PHPLoginNotifySubType loginSubType = 6;
inline void CMPHPLoginNotify::clear_loginsubtype() {
  loginsubtype_ = 0;
}
inline ::im::PHPLoginNotifySubType CMPHPLoginNotify::loginsubtype() const {
  // @@protoc_insertion_point(field_get:im.CMPHPLoginNotify.loginSubType)
  return static_cast< ::im::PHPLoginNotifySubType >(loginsubtype_);
}
inline void CMPHPLoginNotify::set_loginsubtype(::im::PHPLoginNotifySubType value) {
  
  loginsubtype_ = value;
  // @@protoc_insertion_point(field_set:im.CMPHPLoginNotify.loginSubType)
}

// -------------------------------------------------------------------

// CMPHPLoginNotifyACK

// string sUserId = 1;
inline void CMPHPLoginNotifyACK::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMPHPLoginNotifyACK::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMPHPLoginNotifyACK.sUserId)
  return suserid_.GetNoArena();
}
inline void CMPHPLoginNotifyACK::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMPHPLoginNotifyACK.sUserId)
}
#if LANG_CXX11
inline void CMPHPLoginNotifyACK::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMPHPLoginNotifyACK.sUserId)
}
#endif
inline void CMPHPLoginNotifyACK::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMPHPLoginNotifyACK.sUserId)
}
inline void CMPHPLoginNotifyACK::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMPHPLoginNotifyACK.sUserId)
}
inline ::std::string* CMPHPLoginNotifyACK::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMPHPLoginNotifyACK.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMPHPLoginNotifyACK::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMPHPLoginNotifyACK.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMPHPLoginNotifyACK::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMPHPLoginNotifyACK.sUserId)
}

// uint64 msgTime = 2;
inline void CMPHPLoginNotifyACK::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CMPHPLoginNotifyACK::msgtime() const {
  // @@protoc_insertion_point(field_get:im.CMPHPLoginNotifyACK.msgTime)
  return msgtime_;
}
inline void CMPHPLoginNotifyACK::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.CMPHPLoginNotifyACK.msgTime)
}

// .im.ErrCode nErr = 3;
inline void CMPHPLoginNotifyACK::clear_nerr() {
  nerr_ = 0;
}
inline ::im::ErrCode CMPHPLoginNotifyACK::nerr() const {
  // @@protoc_insertion_point(field_get:im.CMPHPLoginNotifyACK.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
inline void CMPHPLoginNotifyACK::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.CMPHPLoginNotifyACK.nErr)
}

// -------------------------------------------------------------------

// SVRMSGGroupRelationNotify

// string sGrpId = 1;
inline void SVRMSGGroupRelationNotify::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGGroupRelationNotify::sgrpid() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGGroupRelationNotify.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void SVRMSGGroupRelationNotify::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.sGrpId)
}
#if LANG_CXX11
inline void SVRMSGGroupRelationNotify::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGGroupRelationNotify.sGrpId)
}
#endif
inline void SVRMSGGroupRelationNotify::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGGroupRelationNotify.sGrpId)
}
inline void SVRMSGGroupRelationNotify::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGGroupRelationNotify.sGrpId)
}
inline ::std::string* SVRMSGGroupRelationNotify::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGGroupRelationNotify.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGGroupRelationNotify::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im.SVRMSGGroupRelationNotify.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGGroupRelationNotify::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGGroupRelationNotify.sGrpId)
}

// string sMsgId = 2;
inline void SVRMSGGroupRelationNotify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGGroupRelationNotify::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGGroupRelationNotify.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SVRMSGGroupRelationNotify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.sMsgId)
}
#if LANG_CXX11
inline void SVRMSGGroupRelationNotify::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGGroupRelationNotify.sMsgId)
}
#endif
inline void SVRMSGGroupRelationNotify::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGGroupRelationNotify.sMsgId)
}
inline void SVRMSGGroupRelationNotify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGGroupRelationNotify.sMsgId)
}
inline ::std::string* SVRMSGGroupRelationNotify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGGroupRelationNotify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGGroupRelationNotify::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SVRMSGGroupRelationNotify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGGroupRelationNotify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGGroupRelationNotify.sMsgId)
}

// repeated string sToIds = 3;
inline int SVRMSGGroupRelationNotify::stoids_size() const {
  return stoids_.size();
}
inline void SVRMSGGroupRelationNotify::clear_stoids() {
  stoids_.Clear();
}
inline const ::std::string& SVRMSGGroupRelationNotify::stoids(int index) const {
  // @@protoc_insertion_point(field_get:im.SVRMSGGroupRelationNotify.sToIds)
  return stoids_.Get(index);
}
inline ::std::string* SVRMSGGroupRelationNotify::mutable_stoids(int index) {
  // @@protoc_insertion_point(field_mutable:im.SVRMSGGroupRelationNotify.sToIds)
  return stoids_.Mutable(index);
}
inline void SVRMSGGroupRelationNotify::set_stoids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.sToIds)
  stoids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SVRMSGGroupRelationNotify::set_stoids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.sToIds)
  stoids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SVRMSGGroupRelationNotify::set_stoids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stoids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im.SVRMSGGroupRelationNotify.sToIds)
}
inline void SVRMSGGroupRelationNotify::set_stoids(int index, const char* value, size_t size) {
  stoids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGGroupRelationNotify.sToIds)
}
inline ::std::string* SVRMSGGroupRelationNotify::add_stoids() {
  // @@protoc_insertion_point(field_add_mutable:im.SVRMSGGroupRelationNotify.sToIds)
  return stoids_.Add();
}
inline void SVRMSGGroupRelationNotify::add_stoids(const ::std::string& value) {
  stoids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im.SVRMSGGroupRelationNotify.sToIds)
}
#if LANG_CXX11
inline void SVRMSGGroupRelationNotify::add_stoids(::std::string&& value) {
  stoids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:im.SVRMSGGroupRelationNotify.sToIds)
}
#endif
inline void SVRMSGGroupRelationNotify::add_stoids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stoids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im.SVRMSGGroupRelationNotify.sToIds)
}
inline void SVRMSGGroupRelationNotify::add_stoids(const char* value, size_t size) {
  stoids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im.SVRMSGGroupRelationNotify.sToIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SVRMSGGroupRelationNotify::stoids() const {
  // @@protoc_insertion_point(field_list:im.SVRMSGGroupRelationNotify.sToIds)
  return stoids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SVRMSGGroupRelationNotify::mutable_stoids() {
  // @@protoc_insertion_point(field_mutable_list:im.SVRMSGGroupRelationNotify.sToIds)
  return &stoids_;
}

// uint64 msgTime = 4;
inline void SVRMSGGroupRelationNotify::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SVRMSGGroupRelationNotify::msgtime() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGGroupRelationNotify.msgTime)
  return msgtime_;
}
inline void SVRMSGGroupRelationNotify::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.msgTime)
}

// string sOprUserId = 5;
inline void SVRMSGGroupRelationNotify::clear_sopruserid() {
  sopruserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGGroupRelationNotify::sopruserid() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGGroupRelationNotify.sOprUserId)
  return sopruserid_.GetNoArena();
}
inline void SVRMSGGroupRelationNotify::set_sopruserid(const ::std::string& value) {
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.sOprUserId)
}
#if LANG_CXX11
inline void SVRMSGGroupRelationNotify::set_sopruserid(::std::string&& value) {
  
  sopruserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGGroupRelationNotify.sOprUserId)
}
#endif
inline void SVRMSGGroupRelationNotify::set_sopruserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGGroupRelationNotify.sOprUserId)
}
inline void SVRMSGGroupRelationNotify::set_sopruserid(const char* value, size_t size) {
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGGroupRelationNotify.sOprUserId)
}
inline ::std::string* SVRMSGGroupRelationNotify::mutable_sopruserid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGGroupRelationNotify.sOprUserId)
  return sopruserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGGroupRelationNotify::release_sopruserid() {
  // @@protoc_insertion_point(field_release:im.SVRMSGGroupRelationNotify.sOprUserId)
  
  return sopruserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGGroupRelationNotify::set_allocated_sopruserid(::std::string* sopruserid) {
  if (sopruserid != NULL) {
    
  } else {
    
  }
  sopruserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sopruserid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGGroupRelationNotify.sOprUserId)
}

// repeated string sMnpledUserId = 6;
inline int SVRMSGGroupRelationNotify::smnpleduserid_size() const {
  return smnpleduserid_.size();
}
inline void SVRMSGGroupRelationNotify::clear_smnpleduserid() {
  smnpleduserid_.Clear();
}
inline const ::std::string& SVRMSGGroupRelationNotify::smnpleduserid(int index) const {
  // @@protoc_insertion_point(field_get:im.SVRMSGGroupRelationNotify.sMnpledUserId)
  return smnpleduserid_.Get(index);
}
inline ::std::string* SVRMSGGroupRelationNotify::mutable_smnpleduserid(int index) {
  // @@protoc_insertion_point(field_mutable:im.SVRMSGGroupRelationNotify.sMnpledUserId)
  return smnpleduserid_.Mutable(index);
}
inline void SVRMSGGroupRelationNotify::set_smnpleduserid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.sMnpledUserId)
  smnpleduserid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SVRMSGGroupRelationNotify::set_smnpleduserid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.sMnpledUserId)
  smnpleduserid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SVRMSGGroupRelationNotify::set_smnpleduserid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  smnpleduserid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im.SVRMSGGroupRelationNotify.sMnpledUserId)
}
inline void SVRMSGGroupRelationNotify::set_smnpleduserid(int index, const char* value, size_t size) {
  smnpleduserid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGGroupRelationNotify.sMnpledUserId)
}
inline ::std::string* SVRMSGGroupRelationNotify::add_smnpleduserid() {
  // @@protoc_insertion_point(field_add_mutable:im.SVRMSGGroupRelationNotify.sMnpledUserId)
  return smnpleduserid_.Add();
}
inline void SVRMSGGroupRelationNotify::add_smnpleduserid(const ::std::string& value) {
  smnpleduserid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im.SVRMSGGroupRelationNotify.sMnpledUserId)
}
#if LANG_CXX11
inline void SVRMSGGroupRelationNotify::add_smnpleduserid(::std::string&& value) {
  smnpleduserid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:im.SVRMSGGroupRelationNotify.sMnpledUserId)
}
#endif
inline void SVRMSGGroupRelationNotify::add_smnpleduserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  smnpleduserid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im.SVRMSGGroupRelationNotify.sMnpledUserId)
}
inline void SVRMSGGroupRelationNotify::add_smnpleduserid(const char* value, size_t size) {
  smnpleduserid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im.SVRMSGGroupRelationNotify.sMnpledUserId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SVRMSGGroupRelationNotify::smnpleduserid() const {
  // @@protoc_insertion_point(field_list:im.SVRMSGGroupRelationNotify.sMnpledUserId)
  return smnpleduserid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SVRMSGGroupRelationNotify::mutable_smnpleduserid() {
  // @@protoc_insertion_point(field_mutable_list:im.SVRMSGGroupRelationNotify.sMnpledUserId)
  return &smnpleduserid_;
}

// string sContent = 7;
inline void SVRMSGGroupRelationNotify::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGGroupRelationNotify::scontent() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGGroupRelationNotify.sContent)
  return scontent_.GetNoArena();
}
inline void SVRMSGGroupRelationNotify::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.sContent)
}
#if LANG_CXX11
inline void SVRMSGGroupRelationNotify::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGGroupRelationNotify.sContent)
}
#endif
inline void SVRMSGGroupRelationNotify::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGGroupRelationNotify.sContent)
}
inline void SVRMSGGroupRelationNotify::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGGroupRelationNotify.sContent)
}
inline ::std::string* SVRMSGGroupRelationNotify::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGGroupRelationNotify.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGGroupRelationNotify::release_scontent() {
  // @@protoc_insertion_point(field_release:im.SVRMSGGroupRelationNotify.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGGroupRelationNotify::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGGroupRelationNotify.sContent)
}

// .im.SVRGroupRelationNotifyType notifyType = 8;
inline void SVRMSGGroupRelationNotify::clear_notifytype() {
  notifytype_ = 0;
}
inline ::im::SVRGroupRelationNotifyType SVRMSGGroupRelationNotify::notifytype() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGGroupRelationNotify.notifyType)
  return static_cast< ::im::SVRGroupRelationNotifyType >(notifytype_);
}
inline void SVRMSGGroupRelationNotify::set_notifytype(::im::SVRGroupRelationNotifyType value) {
  
  notifytype_ = value;
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.notifyType)
}

// string sOperId = 9;
inline void SVRMSGGroupRelationNotify::clear_soperid() {
  soperid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGGroupRelationNotify::soperid() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGGroupRelationNotify.sOperId)
  return soperid_.GetNoArena();
}
inline void SVRMSGGroupRelationNotify::set_soperid(const ::std::string& value) {
  
  soperid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.sOperId)
}
#if LANG_CXX11
inline void SVRMSGGroupRelationNotify::set_soperid(::std::string&& value) {
  
  soperid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGGroupRelationNotify.sOperId)
}
#endif
inline void SVRMSGGroupRelationNotify::set_soperid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  soperid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGGroupRelationNotify.sOperId)
}
inline void SVRMSGGroupRelationNotify::set_soperid(const char* value, size_t size) {
  
  soperid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGGroupRelationNotify.sOperId)
}
inline ::std::string* SVRMSGGroupRelationNotify::mutable_soperid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGGroupRelationNotify.sOperId)
  return soperid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGGroupRelationNotify::release_soperid() {
  // @@protoc_insertion_point(field_release:im.SVRMSGGroupRelationNotify.sOperId)
  
  return soperid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGGroupRelationNotify::set_allocated_soperid(::std::string* soperid) {
  if (soperid != NULL) {
    
  } else {
    
  }
  soperid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), soperid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGGroupRelationNotify.sOperId)
}

// string extend = 10;
inline void SVRMSGGroupRelationNotify::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGGroupRelationNotify::extend() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGGroupRelationNotify.extend)
  return extend_.GetNoArena();
}
inline void SVRMSGGroupRelationNotify::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGGroupRelationNotify.extend)
}
#if LANG_CXX11
inline void SVRMSGGroupRelationNotify::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGGroupRelationNotify.extend)
}
#endif
inline void SVRMSGGroupRelationNotify::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGGroupRelationNotify.extend)
}
inline void SVRMSGGroupRelationNotify::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGGroupRelationNotify.extend)
}
inline ::std::string* SVRMSGGroupRelationNotify::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGGroupRelationNotify.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGGroupRelationNotify::release_extend() {
  // @@protoc_insertion_point(field_release:im.SVRMSGGroupRelationNotify.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGGroupRelationNotify::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGGroupRelationNotify.extend)
}

// -------------------------------------------------------------------

// SVRMSGFriendRelationNotify

// string sFromId = 1;
inline void SVRMSGFriendRelationNotify::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGFriendRelationNotify::sfromid() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGFriendRelationNotify.sFromId)
  return sfromid_.GetNoArena();
}
inline void SVRMSGFriendRelationNotify::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGFriendRelationNotify.sFromId)
}
#if LANG_CXX11
inline void SVRMSGFriendRelationNotify::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGFriendRelationNotify.sFromId)
}
#endif
inline void SVRMSGFriendRelationNotify::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGFriendRelationNotify.sFromId)
}
inline void SVRMSGFriendRelationNotify::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGFriendRelationNotify.sFromId)
}
inline ::std::string* SVRMSGFriendRelationNotify::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGFriendRelationNotify.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGFriendRelationNotify::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.SVRMSGFriendRelationNotify.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGFriendRelationNotify::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGFriendRelationNotify.sFromId)
}

// string sToId = 2;
inline void SVRMSGFriendRelationNotify::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGFriendRelationNotify::stoid() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGFriendRelationNotify.sToId)
  return stoid_.GetNoArena();
}
inline void SVRMSGFriendRelationNotify::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGFriendRelationNotify.sToId)
}
#if LANG_CXX11
inline void SVRMSGFriendRelationNotify::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGFriendRelationNotify.sToId)
}
#endif
inline void SVRMSGFriendRelationNotify::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGFriendRelationNotify.sToId)
}
inline void SVRMSGFriendRelationNotify::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGFriendRelationNotify.sToId)
}
inline ::std::string* SVRMSGFriendRelationNotify::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGFriendRelationNotify.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGFriendRelationNotify::release_stoid() {
  // @@protoc_insertion_point(field_release:im.SVRMSGFriendRelationNotify.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGFriendRelationNotify::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGFriendRelationNotify.sToId)
}

// string sMsgId = 3;
inline void SVRMSGFriendRelationNotify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGFriendRelationNotify::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGFriendRelationNotify.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SVRMSGFriendRelationNotify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGFriendRelationNotify.sMsgId)
}
#if LANG_CXX11
inline void SVRMSGFriendRelationNotify::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGFriendRelationNotify.sMsgId)
}
#endif
inline void SVRMSGFriendRelationNotify::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGFriendRelationNotify.sMsgId)
}
inline void SVRMSGFriendRelationNotify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGFriendRelationNotify.sMsgId)
}
inline ::std::string* SVRMSGFriendRelationNotify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGFriendRelationNotify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGFriendRelationNotify::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SVRMSGFriendRelationNotify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGFriendRelationNotify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGFriendRelationNotify.sMsgId)
}

// string sMemoName = 4;
inline void SVRMSGFriendRelationNotify::clear_smemoname() {
  smemoname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGFriendRelationNotify::smemoname() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGFriendRelationNotify.sMemoName)
  return smemoname_.GetNoArena();
}
inline void SVRMSGFriendRelationNotify::set_smemoname(const ::std::string& value) {
  
  smemoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGFriendRelationNotify.sMemoName)
}
#if LANG_CXX11
inline void SVRMSGFriendRelationNotify::set_smemoname(::std::string&& value) {
  
  smemoname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGFriendRelationNotify.sMemoName)
}
#endif
inline void SVRMSGFriendRelationNotify::set_smemoname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smemoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGFriendRelationNotify.sMemoName)
}
inline void SVRMSGFriendRelationNotify::set_smemoname(const char* value, size_t size) {
  
  smemoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGFriendRelationNotify.sMemoName)
}
inline ::std::string* SVRMSGFriendRelationNotify::mutable_smemoname() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGFriendRelationNotify.sMemoName)
  return smemoname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGFriendRelationNotify::release_smemoname() {
  // @@protoc_insertion_point(field_release:im.SVRMSGFriendRelationNotify.sMemoName)
  
  return smemoname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGFriendRelationNotify::set_allocated_smemoname(::std::string* smemoname) {
  if (smemoname != NULL) {
    
  } else {
    
  }
  smemoname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smemoname);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGFriendRelationNotify.sMemoName)
}

// .im.SVRFriendRelationNotifyType notifyType = 5;
inline void SVRMSGFriendRelationNotify::clear_notifytype() {
  notifytype_ = 0;
}
inline ::im::SVRFriendRelationNotifyType SVRMSGFriendRelationNotify::notifytype() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGFriendRelationNotify.notifyType)
  return static_cast< ::im::SVRFriendRelationNotifyType >(notifytype_);
}
inline void SVRMSGFriendRelationNotify::set_notifytype(::im::SVRFriendRelationNotifyType value) {
  
  notifytype_ = value;
  // @@protoc_insertion_point(field_set:im.SVRMSGFriendRelationNotify.notifyType)
}

// string sSelfIntroduce = 6;
inline void SVRMSGFriendRelationNotify::clear_sselfintroduce() {
  sselfintroduce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGFriendRelationNotify::sselfintroduce() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGFriendRelationNotify.sSelfIntroduce)
  return sselfintroduce_.GetNoArena();
}
inline void SVRMSGFriendRelationNotify::set_sselfintroduce(const ::std::string& value) {
  
  sselfintroduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGFriendRelationNotify.sSelfIntroduce)
}
#if LANG_CXX11
inline void SVRMSGFriendRelationNotify::set_sselfintroduce(::std::string&& value) {
  
  sselfintroduce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGFriendRelationNotify.sSelfIntroduce)
}
#endif
inline void SVRMSGFriendRelationNotify::set_sselfintroduce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sselfintroduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGFriendRelationNotify.sSelfIntroduce)
}
inline void SVRMSGFriendRelationNotify::set_sselfintroduce(const char* value, size_t size) {
  
  sselfintroduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGFriendRelationNotify.sSelfIntroduce)
}
inline ::std::string* SVRMSGFriendRelationNotify::mutable_sselfintroduce() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGFriendRelationNotify.sSelfIntroduce)
  return sselfintroduce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGFriendRelationNotify::release_sselfintroduce() {
  // @@protoc_insertion_point(field_release:im.SVRMSGFriendRelationNotify.sSelfIntroduce)
  
  return sselfintroduce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGFriendRelationNotify::set_allocated_sselfintroduce(::std::string* sselfintroduce) {
  if (sselfintroduce != NULL) {
    
  } else {
    
  }
  sselfintroduce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sselfintroduce);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGFriendRelationNotify.sSelfIntroduce)
}

// uint64 msgTime = 7;
inline void SVRMSGFriendRelationNotify::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SVRMSGFriendRelationNotify::msgtime() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGFriendRelationNotify.msgTime)
  return msgtime_;
}
inline void SVRMSGFriendRelationNotify::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.SVRMSGFriendRelationNotify.msgTime)
}

// string sOperId = 8;
inline void SVRMSGFriendRelationNotify::clear_soperid() {
  soperid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGFriendRelationNotify::soperid() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGFriendRelationNotify.sOperId)
  return soperid_.GetNoArena();
}
inline void SVRMSGFriendRelationNotify::set_soperid(const ::std::string& value) {
  
  soperid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGFriendRelationNotify.sOperId)
}
#if LANG_CXX11
inline void SVRMSGFriendRelationNotify::set_soperid(::std::string&& value) {
  
  soperid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGFriendRelationNotify.sOperId)
}
#endif
inline void SVRMSGFriendRelationNotify::set_soperid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  soperid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGFriendRelationNotify.sOperId)
}
inline void SVRMSGFriendRelationNotify::set_soperid(const char* value, size_t size) {
  
  soperid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGFriendRelationNotify.sOperId)
}
inline ::std::string* SVRMSGFriendRelationNotify::mutable_soperid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGFriendRelationNotify.sOperId)
  return soperid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGFriendRelationNotify::release_soperid() {
  // @@protoc_insertion_point(field_release:im.SVRMSGFriendRelationNotify.sOperId)
  
  return soperid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGFriendRelationNotify::set_allocated_soperid(::std::string* soperid) {
  if (soperid != NULL) {
    
  } else {
    
  }
  soperid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), soperid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGFriendRelationNotify.sOperId)
}

// string extend = 9;
inline void SVRMSGFriendRelationNotify::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGFriendRelationNotify::extend() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGFriendRelationNotify.extend)
  return extend_.GetNoArena();
}
inline void SVRMSGFriendRelationNotify::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGFriendRelationNotify.extend)
}
#if LANG_CXX11
inline void SVRMSGFriendRelationNotify::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGFriendRelationNotify.extend)
}
#endif
inline void SVRMSGFriendRelationNotify::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGFriendRelationNotify.extend)
}
inline void SVRMSGFriendRelationNotify::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGFriendRelationNotify.extend)
}
inline ::std::string* SVRMSGFriendRelationNotify::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGFriendRelationNotify.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGFriendRelationNotify::release_extend() {
  // @@protoc_insertion_point(field_release:im.SVRMSGFriendRelationNotify.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGFriendRelationNotify::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGFriendRelationNotify.extend)
}

// -------------------------------------------------------------------

// SVRMSGCommonMsgNotify

// string sFromId = 1;
inline void SVRMSGCommonMsgNotify::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGCommonMsgNotify::sfromid() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGCommonMsgNotify.sFromId)
  return sfromid_.GetNoArena();
}
inline void SVRMSGCommonMsgNotify::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGCommonMsgNotify.sFromId)
}
#if LANG_CXX11
inline void SVRMSGCommonMsgNotify::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGCommonMsgNotify.sFromId)
}
#endif
inline void SVRMSGCommonMsgNotify::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGCommonMsgNotify.sFromId)
}
inline void SVRMSGCommonMsgNotify::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGCommonMsgNotify.sFromId)
}
inline ::std::string* SVRMSGCommonMsgNotify::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGCommonMsgNotify.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGCommonMsgNotify::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.SVRMSGCommonMsgNotify.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGCommonMsgNotify::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGCommonMsgNotify.sFromId)
}

// repeated string sToIds = 2;
inline int SVRMSGCommonMsgNotify::stoids_size() const {
  return stoids_.size();
}
inline void SVRMSGCommonMsgNotify::clear_stoids() {
  stoids_.Clear();
}
inline const ::std::string& SVRMSGCommonMsgNotify::stoids(int index) const {
  // @@protoc_insertion_point(field_get:im.SVRMSGCommonMsgNotify.sToIds)
  return stoids_.Get(index);
}
inline ::std::string* SVRMSGCommonMsgNotify::mutable_stoids(int index) {
  // @@protoc_insertion_point(field_mutable:im.SVRMSGCommonMsgNotify.sToIds)
  return stoids_.Mutable(index);
}
inline void SVRMSGCommonMsgNotify::set_stoids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im.SVRMSGCommonMsgNotify.sToIds)
  stoids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SVRMSGCommonMsgNotify::set_stoids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:im.SVRMSGCommonMsgNotify.sToIds)
  stoids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SVRMSGCommonMsgNotify::set_stoids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stoids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im.SVRMSGCommonMsgNotify.sToIds)
}
inline void SVRMSGCommonMsgNotify::set_stoids(int index, const char* value, size_t size) {
  stoids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGCommonMsgNotify.sToIds)
}
inline ::std::string* SVRMSGCommonMsgNotify::add_stoids() {
  // @@protoc_insertion_point(field_add_mutable:im.SVRMSGCommonMsgNotify.sToIds)
  return stoids_.Add();
}
inline void SVRMSGCommonMsgNotify::add_stoids(const ::std::string& value) {
  stoids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im.SVRMSGCommonMsgNotify.sToIds)
}
#if LANG_CXX11
inline void SVRMSGCommonMsgNotify::add_stoids(::std::string&& value) {
  stoids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:im.SVRMSGCommonMsgNotify.sToIds)
}
#endif
inline void SVRMSGCommonMsgNotify::add_stoids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stoids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im.SVRMSGCommonMsgNotify.sToIds)
}
inline void SVRMSGCommonMsgNotify::add_stoids(const char* value, size_t size) {
  stoids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im.SVRMSGCommonMsgNotify.sToIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SVRMSGCommonMsgNotify::stoids() const {
  // @@protoc_insertion_point(field_list:im.SVRMSGCommonMsgNotify.sToIds)
  return stoids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SVRMSGCommonMsgNotify::mutable_stoids() {
  // @@protoc_insertion_point(field_mutable_list:im.SVRMSGCommonMsgNotify.sToIds)
  return &stoids_;
}

// string sMsgId = 3;
inline void SVRMSGCommonMsgNotify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGCommonMsgNotify::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGCommonMsgNotify.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SVRMSGCommonMsgNotify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGCommonMsgNotify.sMsgId)
}
#if LANG_CXX11
inline void SVRMSGCommonMsgNotify::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGCommonMsgNotify.sMsgId)
}
#endif
inline void SVRMSGCommonMsgNotify::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGCommonMsgNotify.sMsgId)
}
inline void SVRMSGCommonMsgNotify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGCommonMsgNotify.sMsgId)
}
inline ::std::string* SVRMSGCommonMsgNotify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGCommonMsgNotify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGCommonMsgNotify::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SVRMSGCommonMsgNotify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGCommonMsgNotify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGCommonMsgNotify.sMsgId)
}

// .im.SVRCommonNotifyType notifyType = 4;
inline void SVRMSGCommonMsgNotify::clear_notifytype() {
  notifytype_ = 0;
}
inline ::im::SVRCommonNotifyType SVRMSGCommonMsgNotify::notifytype() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGCommonMsgNotify.notifyType)
  return static_cast< ::im::SVRCommonNotifyType >(notifytype_);
}
inline void SVRMSGCommonMsgNotify::set_notifytype(::im::SVRCommonNotifyType value) {
  
  notifytype_ = value;
  // @@protoc_insertion_point(field_set:im.SVRMSGCommonMsgNotify.notifyType)
}

// string sContent = 5;
inline void SVRMSGCommonMsgNotify::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGCommonMsgNotify::scontent() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGCommonMsgNotify.sContent)
  return scontent_.GetNoArena();
}
inline void SVRMSGCommonMsgNotify::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGCommonMsgNotify.sContent)
}
#if LANG_CXX11
inline void SVRMSGCommonMsgNotify::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGCommonMsgNotify.sContent)
}
#endif
inline void SVRMSGCommonMsgNotify::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGCommonMsgNotify.sContent)
}
inline void SVRMSGCommonMsgNotify::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGCommonMsgNotify.sContent)
}
inline ::std::string* SVRMSGCommonMsgNotify::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGCommonMsgNotify.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGCommonMsgNotify::release_scontent() {
  // @@protoc_insertion_point(field_release:im.SVRMSGCommonMsgNotify.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGCommonMsgNotify::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGCommonMsgNotify.sContent)
}

// uint64 msgTime = 6;
inline void SVRMSGCommonMsgNotify::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SVRMSGCommonMsgNotify::msgtime() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGCommonMsgNotify.msgTime)
  return msgtime_;
}
inline void SVRMSGCommonMsgNotify::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.SVRMSGCommonMsgNotify.msgTime)
}

// string extend = 7;
inline void SVRMSGCommonMsgNotify::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGCommonMsgNotify::extend() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGCommonMsgNotify.extend)
  return extend_.GetNoArena();
}
inline void SVRMSGCommonMsgNotify::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGCommonMsgNotify.extend)
}
#if LANG_CXX11
inline void SVRMSGCommonMsgNotify::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGCommonMsgNotify.extend)
}
#endif
inline void SVRMSGCommonMsgNotify::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGCommonMsgNotify.extend)
}
inline void SVRMSGCommonMsgNotify::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGCommonMsgNotify.extend)
}
inline ::std::string* SVRMSGCommonMsgNotify::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGCommonMsgNotify.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGCommonMsgNotify::release_extend() {
  // @@protoc_insertion_point(field_release:im.SVRMSGCommonMsgNotify.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGCommonMsgNotify::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGCommonMsgNotify.extend)
}

// -------------------------------------------------------------------

// SVRRadioMsgNotify

// string sRadioId = 1;
inline void SVRRadioMsgNotify::clear_sradioid() {
  sradioid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRRadioMsgNotify::sradioid() const {
  // @@protoc_insertion_point(field_get:im.SVRRadioMsgNotify.sRadioId)
  return sradioid_.GetNoArena();
}
inline void SVRRadioMsgNotify::set_sradioid(const ::std::string& value) {
  
  sradioid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRRadioMsgNotify.sRadioId)
}
#if LANG_CXX11
inline void SVRRadioMsgNotify::set_sradioid(::std::string&& value) {
  
  sradioid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRRadioMsgNotify.sRadioId)
}
#endif
inline void SVRRadioMsgNotify::set_sradioid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sradioid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRRadioMsgNotify.sRadioId)
}
inline void SVRRadioMsgNotify::set_sradioid(const char* value, size_t size) {
  
  sradioid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRRadioMsgNotify.sRadioId)
}
inline ::std::string* SVRRadioMsgNotify::mutable_sradioid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRRadioMsgNotify.sRadioId)
  return sradioid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRRadioMsgNotify::release_sradioid() {
  // @@protoc_insertion_point(field_release:im.SVRRadioMsgNotify.sRadioId)
  
  return sradioid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRRadioMsgNotify::set_allocated_sradioid(::std::string* sradioid) {
  if (sradioid != NULL) {
    
  } else {
    
  }
  sradioid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sradioid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRRadioMsgNotify.sRadioId)
}

// string sMsgId = 2;
inline void SVRRadioMsgNotify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRRadioMsgNotify::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SVRRadioMsgNotify.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SVRRadioMsgNotify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRRadioMsgNotify.sMsgId)
}
#if LANG_CXX11
inline void SVRRadioMsgNotify::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRRadioMsgNotify.sMsgId)
}
#endif
inline void SVRRadioMsgNotify::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRRadioMsgNotify.sMsgId)
}
inline void SVRRadioMsgNotify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRRadioMsgNotify.sMsgId)
}
inline ::std::string* SVRRadioMsgNotify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRRadioMsgNotify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRRadioMsgNotify::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SVRRadioMsgNotify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRRadioMsgNotify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRRadioMsgNotify.sMsgId)
}

// uint64 msgTime = 3;
inline void SVRRadioMsgNotify::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SVRRadioMsgNotify::msgtime() const {
  // @@protoc_insertion_point(field_get:im.SVRRadioMsgNotify.msgTime)
  return msgtime_;
}
inline void SVRRadioMsgNotify::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.SVRRadioMsgNotify.msgTime)
}

// string sOprUserId = 4;
inline void SVRRadioMsgNotify::clear_sopruserid() {
  sopruserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRRadioMsgNotify::sopruserid() const {
  // @@protoc_insertion_point(field_get:im.SVRRadioMsgNotify.sOprUserId)
  return sopruserid_.GetNoArena();
}
inline void SVRRadioMsgNotify::set_sopruserid(const ::std::string& value) {
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRRadioMsgNotify.sOprUserId)
}
#if LANG_CXX11
inline void SVRRadioMsgNotify::set_sopruserid(::std::string&& value) {
  
  sopruserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRRadioMsgNotify.sOprUserId)
}
#endif
inline void SVRRadioMsgNotify::set_sopruserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRRadioMsgNotify.sOprUserId)
}
inline void SVRRadioMsgNotify::set_sopruserid(const char* value, size_t size) {
  
  sopruserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRRadioMsgNotify.sOprUserId)
}
inline ::std::string* SVRRadioMsgNotify::mutable_sopruserid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRRadioMsgNotify.sOprUserId)
  return sopruserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRRadioMsgNotify::release_sopruserid() {
  // @@protoc_insertion_point(field_release:im.SVRRadioMsgNotify.sOprUserId)
  
  return sopruserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRRadioMsgNotify::set_allocated_sopruserid(::std::string* sopruserid) {
  if (sopruserid != NULL) {
    
  } else {
    
  }
  sopruserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sopruserid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRRadioMsgNotify.sOprUserId)
}

// repeated string sMnpledUserId = 5;
inline int SVRRadioMsgNotify::smnpleduserid_size() const {
  return smnpleduserid_.size();
}
inline void SVRRadioMsgNotify::clear_smnpleduserid() {
  smnpleduserid_.Clear();
}
inline const ::std::string& SVRRadioMsgNotify::smnpleduserid(int index) const {
  // @@protoc_insertion_point(field_get:im.SVRRadioMsgNotify.sMnpledUserId)
  return smnpleduserid_.Get(index);
}
inline ::std::string* SVRRadioMsgNotify::mutable_smnpleduserid(int index) {
  // @@protoc_insertion_point(field_mutable:im.SVRRadioMsgNotify.sMnpledUserId)
  return smnpleduserid_.Mutable(index);
}
inline void SVRRadioMsgNotify::set_smnpleduserid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im.SVRRadioMsgNotify.sMnpledUserId)
  smnpleduserid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SVRRadioMsgNotify::set_smnpleduserid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:im.SVRRadioMsgNotify.sMnpledUserId)
  smnpleduserid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SVRRadioMsgNotify::set_smnpleduserid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  smnpleduserid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im.SVRRadioMsgNotify.sMnpledUserId)
}
inline void SVRRadioMsgNotify::set_smnpleduserid(int index, const char* value, size_t size) {
  smnpleduserid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im.SVRRadioMsgNotify.sMnpledUserId)
}
inline ::std::string* SVRRadioMsgNotify::add_smnpleduserid() {
  // @@protoc_insertion_point(field_add_mutable:im.SVRRadioMsgNotify.sMnpledUserId)
  return smnpleduserid_.Add();
}
inline void SVRRadioMsgNotify::add_smnpleduserid(const ::std::string& value) {
  smnpleduserid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im.SVRRadioMsgNotify.sMnpledUserId)
}
#if LANG_CXX11
inline void SVRRadioMsgNotify::add_smnpleduserid(::std::string&& value) {
  smnpleduserid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:im.SVRRadioMsgNotify.sMnpledUserId)
}
#endif
inline void SVRRadioMsgNotify::add_smnpleduserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  smnpleduserid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im.SVRRadioMsgNotify.sMnpledUserId)
}
inline void SVRRadioMsgNotify::add_smnpleduserid(const char* value, size_t size) {
  smnpleduserid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im.SVRRadioMsgNotify.sMnpledUserId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SVRRadioMsgNotify::smnpleduserid() const {
  // @@protoc_insertion_point(field_list:im.SVRRadioMsgNotify.sMnpledUserId)
  return smnpleduserid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SVRRadioMsgNotify::mutable_smnpleduserid() {
  // @@protoc_insertion_point(field_mutable_list:im.SVRRadioMsgNotify.sMnpledUserId)
  return &smnpleduserid_;
}

// string sContent = 6;
inline void SVRRadioMsgNotify::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRRadioMsgNotify::scontent() const {
  // @@protoc_insertion_point(field_get:im.SVRRadioMsgNotify.sContent)
  return scontent_.GetNoArena();
}
inline void SVRRadioMsgNotify::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRRadioMsgNotify.sContent)
}
#if LANG_CXX11
inline void SVRRadioMsgNotify::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRRadioMsgNotify.sContent)
}
#endif
inline void SVRRadioMsgNotify::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRRadioMsgNotify.sContent)
}
inline void SVRRadioMsgNotify::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRRadioMsgNotify.sContent)
}
inline ::std::string* SVRRadioMsgNotify::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRRadioMsgNotify.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRRadioMsgNotify::release_scontent() {
  // @@protoc_insertion_point(field_release:im.SVRRadioMsgNotify.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRRadioMsgNotify::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im.SVRRadioMsgNotify.sContent)
}

// .im.SVRRadioNotifyType notifyType = 7;
inline void SVRRadioMsgNotify::clear_notifytype() {
  notifytype_ = 0;
}
inline ::im::SVRRadioNotifyType SVRRadioMsgNotify::notifytype() const {
  // @@protoc_insertion_point(field_get:im.SVRRadioMsgNotify.notifyType)
  return static_cast< ::im::SVRRadioNotifyType >(notifytype_);
}
inline void SVRRadioMsgNotify::set_notifytype(::im::SVRRadioNotifyType value) {
  
  notifytype_ = value;
  // @@protoc_insertion_point(field_set:im.SVRRadioMsgNotify.notifyType)
}

// string extend = 8;
inline void SVRRadioMsgNotify::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRRadioMsgNotify::extend() const {
  // @@protoc_insertion_point(field_get:im.SVRRadioMsgNotify.extend)
  return extend_.GetNoArena();
}
inline void SVRRadioMsgNotify::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRRadioMsgNotify.extend)
}
#if LANG_CXX11
inline void SVRRadioMsgNotify::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRRadioMsgNotify.extend)
}
#endif
inline void SVRRadioMsgNotify::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRRadioMsgNotify.extend)
}
inline void SVRRadioMsgNotify::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRRadioMsgNotify.extend)
}
inline ::std::string* SVRRadioMsgNotify::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRRadioMsgNotify.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRRadioMsgNotify::release_extend() {
  // @@protoc_insertion_point(field_release:im.SVRRadioMsgNotify.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRRadioMsgNotify::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.SVRRadioMsgNotify.extend)
}

// -------------------------------------------------------------------

// SVRRadioPushSetNotify

// string sMsgId = 1;
inline void SVRRadioPushSetNotify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRRadioPushSetNotify::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SVRRadioPushSetNotify.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SVRRadioPushSetNotify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRRadioPushSetNotify.sMsgId)
}
#if LANG_CXX11
inline void SVRRadioPushSetNotify::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRRadioPushSetNotify.sMsgId)
}
#endif
inline void SVRRadioPushSetNotify::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRRadioPushSetNotify.sMsgId)
}
inline void SVRRadioPushSetNotify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRRadioPushSetNotify.sMsgId)
}
inline ::std::string* SVRRadioPushSetNotify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRRadioPushSetNotify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRRadioPushSetNotify::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SVRRadioPushSetNotify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRRadioPushSetNotify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRRadioPushSetNotify.sMsgId)
}

// string sUserId = 2;
inline void SVRRadioPushSetNotify::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRRadioPushSetNotify::suserid() const {
  // @@protoc_insertion_point(field_get:im.SVRRadioPushSetNotify.sUserId)
  return suserid_.GetNoArena();
}
inline void SVRRadioPushSetNotify::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRRadioPushSetNotify.sUserId)
}
#if LANG_CXX11
inline void SVRRadioPushSetNotify::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRRadioPushSetNotify.sUserId)
}
#endif
inline void SVRRadioPushSetNotify::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRRadioPushSetNotify.sUserId)
}
inline void SVRRadioPushSetNotify::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRRadioPushSetNotify.sUserId)
}
inline ::std::string* SVRRadioPushSetNotify::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRRadioPushSetNotify.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRRadioPushSetNotify::release_suserid() {
  // @@protoc_insertion_point(field_release:im.SVRRadioPushSetNotify.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRRadioPushSetNotify::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRRadioPushSetNotify.sUserId)
}

// string sRadioId = 3;
inline void SVRRadioPushSetNotify::clear_sradioid() {
  sradioid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRRadioPushSetNotify::sradioid() const {
  // @@protoc_insertion_point(field_get:im.SVRRadioPushSetNotify.sRadioId)
  return sradioid_.GetNoArena();
}
inline void SVRRadioPushSetNotify::set_sradioid(const ::std::string& value) {
  
  sradioid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRRadioPushSetNotify.sRadioId)
}
#if LANG_CXX11
inline void SVRRadioPushSetNotify::set_sradioid(::std::string&& value) {
  
  sradioid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRRadioPushSetNotify.sRadioId)
}
#endif
inline void SVRRadioPushSetNotify::set_sradioid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sradioid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRRadioPushSetNotify.sRadioId)
}
inline void SVRRadioPushSetNotify::set_sradioid(const char* value, size_t size) {
  
  sradioid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRRadioPushSetNotify.sRadioId)
}
inline ::std::string* SVRRadioPushSetNotify::mutable_sradioid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRRadioPushSetNotify.sRadioId)
  return sradioid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRRadioPushSetNotify::release_sradioid() {
  // @@protoc_insertion_point(field_release:im.SVRRadioPushSetNotify.sRadioId)
  
  return sradioid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRRadioPushSetNotify::set_allocated_sradioid(::std::string* sradioid) {
  if (sradioid != NULL) {
    
  } else {
    
  }
  sradioid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sradioid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRRadioPushSetNotify.sRadioId)
}

// .im.SVRRadioPushSetNotifyType notifyType = 4;
inline void SVRRadioPushSetNotify::clear_notifytype() {
  notifytype_ = 0;
}
inline ::im::SVRRadioPushSetNotifyType SVRRadioPushSetNotify::notifytype() const {
  // @@protoc_insertion_point(field_get:im.SVRRadioPushSetNotify.notifyType)
  return static_cast< ::im::SVRRadioPushSetNotifyType >(notifytype_);
}
inline void SVRRadioPushSetNotify::set_notifytype(::im::SVRRadioPushSetNotifyType value) {
  
  notifytype_ = value;
  // @@protoc_insertion_point(field_set:im.SVRRadioPushSetNotify.notifyType)
}

// uint32 status = 5;
inline void SVRRadioPushSetNotify::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 SVRRadioPushSetNotify::status() const {
  // @@protoc_insertion_point(field_get:im.SVRRadioPushSetNotify.status)
  return status_;
}
inline void SVRRadioPushSetNotify::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:im.SVRRadioPushSetNotify.status)
}

// uint64 msgTime = 6;
inline void SVRRadioPushSetNotify::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SVRRadioPushSetNotify::msgtime() const {
  // @@protoc_insertion_point(field_get:im.SVRRadioPushSetNotify.msgTime)
  return msgtime_;
}
inline void SVRRadioPushSetNotify::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.SVRRadioPushSetNotify.msgTime)
}

// -------------------------------------------------------------------

// SVRMSGNotifyACK

// string sMsgId = 1;
inline void SVRMSGNotifyACK::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SVRMSGNotifyACK::smsgid() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGNotifyACK.sMsgId)
  return smsgid_.GetNoArena();
}
inline void SVRMSGNotifyACK::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.SVRMSGNotifyACK.sMsgId)
}
#if LANG_CXX11
inline void SVRMSGNotifyACK::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.SVRMSGNotifyACK.sMsgId)
}
#endif
inline void SVRMSGNotifyACK::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.SVRMSGNotifyACK.sMsgId)
}
inline void SVRMSGNotifyACK::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.SVRMSGNotifyACK.sMsgId)
}
inline ::std::string* SVRMSGNotifyACK::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.SVRMSGNotifyACK.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SVRMSGNotifyACK::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.SVRMSGNotifyACK.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SVRMSGNotifyACK::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.SVRMSGNotifyACK.sMsgId)
}

// uint64 msgTime = 2;
inline void SVRMSGNotifyACK::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SVRMSGNotifyACK::msgtime() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGNotifyACK.msgTime)
  return msgtime_;
}
inline void SVRMSGNotifyACK::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.SVRMSGNotifyACK.msgTime)
}

// .im.ErrCode errcode = 3;
inline void SVRMSGNotifyACK::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode SVRMSGNotifyACK::errcode() const {
  // @@protoc_insertion_point(field_get:im.SVRMSGNotifyACK.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void SVRMSGNotifyACK::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.SVRMSGNotifyACK.errcode)
}

// -------------------------------------------------------------------

// OnLoginResult

// string sUserId = 1;
inline void OnLoginResult::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OnLoginResult::suserid() const {
  // @@protoc_insertion_point(field_get:im.OnLoginResult.sUserId)
  return suserid_.GetNoArena();
}
inline void OnLoginResult::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.OnLoginResult.sUserId)
}
#if LANG_CXX11
inline void OnLoginResult::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.OnLoginResult.sUserId)
}
#endif
inline void OnLoginResult::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.OnLoginResult.sUserId)
}
inline void OnLoginResult::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.OnLoginResult.sUserId)
}
inline ::std::string* OnLoginResult::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.OnLoginResult.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnLoginResult::release_suserid() {
  // @@protoc_insertion_point(field_release:im.OnLoginResult.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnLoginResult::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.OnLoginResult.sUserId)
}

// string sHost = 2;
inline void OnLoginResult::clear_shost() {
  shost_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OnLoginResult::shost() const {
  // @@protoc_insertion_point(field_get:im.OnLoginResult.sHost)
  return shost_.GetNoArena();
}
inline void OnLoginResult::set_shost(const ::std::string& value) {
  
  shost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.OnLoginResult.sHost)
}
#if LANG_CXX11
inline void OnLoginResult::set_shost(::std::string&& value) {
  
  shost_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.OnLoginResult.sHost)
}
#endif
inline void OnLoginResult::set_shost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  shost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.OnLoginResult.sHost)
}
inline void OnLoginResult::set_shost(const char* value, size_t size) {
  
  shost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.OnLoginResult.sHost)
}
inline ::std::string* OnLoginResult::mutable_shost() {
  
  // @@protoc_insertion_point(field_mutable:im.OnLoginResult.sHost)
  return shost_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnLoginResult::release_shost() {
  // @@protoc_insertion_point(field_release:im.OnLoginResult.sHost)
  
  return shost_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnLoginResult::set_allocated_shost(::std::string* shost) {
  if (shost != NULL) {
    
  } else {
    
  }
  shost_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shost);
  // @@protoc_insertion_point(field_set_allocated:im.OnLoginResult.sHost)
}

// .im.LoginResultType type = 3;
inline void OnLoginResult::clear_type() {
  type_ = 0;
}
inline ::im::LoginResultType OnLoginResult::type() const {
  // @@protoc_insertion_point(field_get:im.OnLoginResult.type)
  return static_cast< ::im::LoginResultType >(type_);
}
inline void OnLoginResult::set_type(::im::LoginResultType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:im.OnLoginResult.type)
}

// .im.ErrCode nErr = 4;
inline void OnLoginResult::clear_nerr() {
  nerr_ = 0;
}
inline ::im::ErrCode OnLoginResult::nerr() const {
  // @@protoc_insertion_point(field_get:im.OnLoginResult.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
inline void OnLoginResult::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.OnLoginResult.nErr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace im

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::im::CMLoginNotifyType> : ::std::true_type {};
template <> struct is_proto_enum< ::im::LoginCMNotifyType> : ::std::true_type {};
template <> struct is_proto_enum< ::im::PHPLoginNotifyType> : ::std::true_type {};
template <> struct is_proto_enum< ::im::PHPLoginNotifySubType> : ::std::true_type {};
template <> struct is_proto_enum< ::im::SVRGroupRelationNotifyType> : ::std::true_type {};
template <> struct is_proto_enum< ::im::SVRFriendRelationNotifyType> : ::std::true_type {};
template <> struct is_proto_enum< ::im::SVRCommonNotifyType> : ::std::true_type {};
template <> struct is_proto_enum< ::im::SVRRadioNotifyType> : ::std::true_type {};
template <> struct is_proto_enum< ::im::SVRRadioPushSetNotifyType> : ::std::true_type {};
template <> struct is_proto_enum< ::im::LoginResultType> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_im_2einner_2eproto
