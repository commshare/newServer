// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.cm.proto

#ifndef PROTOBUF_INCLUDED_im_2ecm_2eproto
#define PROTOBUF_INCLUDED_im_2ecm_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "im.pub.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_im_2ecm_2eproto 

namespace protobuf_im_2ecm_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_im_2ecm_2eproto
namespace im {
class CCMPushTokenSyncAck;
class CCMPushTokenSyncAckDefaultTypeInternal;
extern CCMPushTokenSyncAckDefaultTypeInternal _CCMPushTokenSyncAck_default_instance_;
class CMKickoutNotification;
class CMKickoutNotificationDefaultTypeInternal;
extern CMKickoutNotificationDefaultTypeInternal _CMKickoutNotification_default_instance_;
class CMLogin;
class CMLoginDefaultTypeInternal;
extern CMLoginDefaultTypeInternal _CMLogin_default_instance_;
class CMLoginAck;
class CMLoginAckDefaultTypeInternal;
extern CMLoginAckDefaultTypeInternal _CMLoginAck_default_instance_;
class CMLogout;
class CMLogoutDefaultTypeInternal;
extern CMLogoutDefaultTypeInternal _CMLogout_default_instance_;
class CMLogoutAck;
class CMLogoutAckDefaultTypeInternal;
extern CMLogoutAckDefaultTypeInternal _CMLogoutAck_default_instance_;
class CMPushTokenSync;
class CMPushTokenSyncDefaultTypeInternal;
extern CMPushTokenSyncDefaultTypeInternal _CMPushTokenSync_default_instance_;
}  // namespace im
namespace google {
namespace protobuf {
template<> ::im::CCMPushTokenSyncAck* Arena::CreateMaybeMessage<::im::CCMPushTokenSyncAck>(Arena*);
template<> ::im::CMKickoutNotification* Arena::CreateMaybeMessage<::im::CMKickoutNotification>(Arena*);
template<> ::im::CMLogin* Arena::CreateMaybeMessage<::im::CMLogin>(Arena*);
template<> ::im::CMLoginAck* Arena::CreateMaybeMessage<::im::CMLoginAck>(Arena*);
template<> ::im::CMLogout* Arena::CreateMaybeMessage<::im::CMLogout>(Arena*);
template<> ::im::CMLogoutAck* Arena::CreateMaybeMessage<::im::CMLogoutAck>(Arena*);
template<> ::im::CMPushTokenSync* Arena::CreateMaybeMessage<::im::CMPushTokenSync>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace im {

// ===================================================================

class CMLogin : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.CMLogin) */ {
 public:
  CMLogin();
  virtual ~CMLogin();

  CMLogin(const CMLogin& from);

  inline CMLogin& operator=(const CMLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMLogin(CMLogin&& from) noexcept
    : CMLogin() {
    *this = ::std::move(from);
  }

  inline CMLogin& operator=(CMLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CMLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMLogin* internal_default_instance() {
    return reinterpret_cast<const CMLogin*>(
               &_CMLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CMLogin* other);
  friend void swap(CMLogin& a, CMLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMLogin* New() const final {
    return CreateMaybeMessage<CMLogin>(NULL);
  }

  CMLogin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMLogin>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CMLogin& from);
  void MergeFrom(const CMLogin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sLoginToken = 2;
  void clear_slogintoken();
  static const int kSLoginTokenFieldNumber = 2;
  const ::std::string& slogintoken() const;
  void set_slogintoken(const ::std::string& value);
  #if LANG_CXX11
  void set_slogintoken(::std::string&& value);
  #endif
  void set_slogintoken(const char* value);
  void set_slogintoken(const char* value, size_t size);
  ::std::string* mutable_slogintoken();
  ::std::string* release_slogintoken();
  void set_allocated_slogintoken(::std::string* slogintoken);

  // string sDeviceToken = 3;
  void clear_sdevicetoken();
  static const int kSDeviceTokenFieldNumber = 3;
  const ::std::string& sdevicetoken() const;
  void set_sdevicetoken(const ::std::string& value);
  #if LANG_CXX11
  void set_sdevicetoken(::std::string&& value);
  #endif
  void set_sdevicetoken(const char* value);
  void set_sdevicetoken(const char* value, size_t size);
  ::std::string* mutable_sdevicetoken();
  ::std::string* release_sdevicetoken();
  void set_allocated_sdevicetoken(::std::string* sdevicetoken);

  // string sPushToken = 5;
  void clear_spushtoken();
  static const int kSPushTokenFieldNumber = 5;
  const ::std::string& spushtoken() const;
  void set_spushtoken(const ::std::string& value);
  #if LANG_CXX11
  void set_spushtoken(::std::string&& value);
  #endif
  void set_spushtoken(const char* value);
  void set_spushtoken(const char* value, size_t size);
  ::std::string* mutable_spushtoken();
  ::std::string* release_spushtoken();
  void set_allocated_spushtoken(::std::string* spushtoken);

  // uint32 nPushType = 4;
  void clear_npushtype();
  static const int kNPushTypeFieldNumber = 4;
  ::google::protobuf::uint32 npushtype() const;
  void set_npushtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.CMLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr slogintoken_;
  ::google::protobuf::internal::ArenaStringPtr sdevicetoken_;
  ::google::protobuf::internal::ArenaStringPtr spushtoken_;
  ::google::protobuf::uint32 npushtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2ecm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMLoginAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.CMLoginAck) */ {
 public:
  CMLoginAck();
  virtual ~CMLoginAck();

  CMLoginAck(const CMLoginAck& from);

  inline CMLoginAck& operator=(const CMLoginAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMLoginAck(CMLoginAck&& from) noexcept
    : CMLoginAck() {
    *this = ::std::move(from);
  }

  inline CMLoginAck& operator=(CMLoginAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CMLoginAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMLoginAck* internal_default_instance() {
    return reinterpret_cast<const CMLoginAck*>(
               &_CMLoginAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CMLoginAck* other);
  friend void swap(CMLoginAck& a, CMLoginAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMLoginAck* New() const final {
    return CreateMaybeMessage<CMLoginAck>(NULL);
  }

  CMLoginAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMLoginAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CMLoginAck& from);
  void MergeFrom(const CMLoginAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMLoginAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // uint64 nLastLoginTime = 3;
  void clear_nlastlogintime();
  static const int kNLastLoginTimeFieldNumber = 3;
  ::google::protobuf::uint64 nlastlogintime() const;
  void set_nlastlogintime(::google::protobuf::uint64 value);

  // .im.ErrCode nErr = 2;
  void clear_nerr();
  static const int kNErrFieldNumber = 2;
  ::im::ErrCode nerr() const;
  void set_nerr(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.CMLoginAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::uint64 nlastlogintime_;
  int nerr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2ecm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMLogout : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.CMLogout) */ {
 public:
  CMLogout();
  virtual ~CMLogout();

  CMLogout(const CMLogout& from);

  inline CMLogout& operator=(const CMLogout& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMLogout(CMLogout&& from) noexcept
    : CMLogout() {
    *this = ::std::move(from);
  }

  inline CMLogout& operator=(CMLogout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CMLogout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMLogout* internal_default_instance() {
    return reinterpret_cast<const CMLogout*>(
               &_CMLogout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CMLogout* other);
  friend void swap(CMLogout& a, CMLogout& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMLogout* New() const final {
    return CreateMaybeMessage<CMLogout>(NULL);
  }

  CMLogout* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMLogout>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CMLogout& from);
  void MergeFrom(const CMLogout& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMLogout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // uint32 nDeviceType = 2;
  void clear_ndevicetype();
  static const int kNDeviceTypeFieldNumber = 2;
  ::google::protobuf::uint32 ndevicetype() const;
  void set_ndevicetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.CMLogout)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::uint32 ndevicetype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2ecm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMLogoutAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.CMLogoutAck) */ {
 public:
  CMLogoutAck();
  virtual ~CMLogoutAck();

  CMLogoutAck(const CMLogoutAck& from);

  inline CMLogoutAck& operator=(const CMLogoutAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMLogoutAck(CMLogoutAck&& from) noexcept
    : CMLogoutAck() {
    *this = ::std::move(from);
  }

  inline CMLogoutAck& operator=(CMLogoutAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CMLogoutAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMLogoutAck* internal_default_instance() {
    return reinterpret_cast<const CMLogoutAck*>(
               &_CMLogoutAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CMLogoutAck* other);
  friend void swap(CMLogoutAck& a, CMLogoutAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMLogoutAck* New() const final {
    return CreateMaybeMessage<CMLogoutAck>(NULL);
  }

  CMLogoutAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMLogoutAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CMLogoutAck& from);
  void MergeFrom(const CMLogoutAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMLogoutAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 2;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 2;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // .im.ErrCode nErr = 1;
  void clear_nerr();
  static const int kNErrFieldNumber = 1;
  ::im::ErrCode nerr() const;
  void set_nerr(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.CMLogoutAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  int nerr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2ecm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMKickoutNotification : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.CMKickoutNotification) */ {
 public:
  CMKickoutNotification();
  virtual ~CMKickoutNotification();

  CMKickoutNotification(const CMKickoutNotification& from);

  inline CMKickoutNotification& operator=(const CMKickoutNotification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMKickoutNotification(CMKickoutNotification&& from) noexcept
    : CMKickoutNotification() {
    *this = ::std::move(from);
  }

  inline CMKickoutNotification& operator=(CMKickoutNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CMKickoutNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMKickoutNotification* internal_default_instance() {
    return reinterpret_cast<const CMKickoutNotification*>(
               &_CMKickoutNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CMKickoutNotification* other);
  friend void swap(CMKickoutNotification& a, CMKickoutNotification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMKickoutNotification* New() const final {
    return CreateMaybeMessage<CMKickoutNotification>(NULL);
  }

  CMKickoutNotification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMKickoutNotification>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CMKickoutNotification& from);
  void MergeFrom(const CMKickoutNotification& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMKickoutNotification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // uint32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.CMKickoutNotification)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2ecm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMPushTokenSync : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.CMPushTokenSync) */ {
 public:
  CMPushTokenSync();
  virtual ~CMPushTokenSync();

  CMPushTokenSync(const CMPushTokenSync& from);

  inline CMPushTokenSync& operator=(const CMPushTokenSync& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMPushTokenSync(CMPushTokenSync&& from) noexcept
    : CMPushTokenSync() {
    *this = ::std::move(from);
  }

  inline CMPushTokenSync& operator=(CMPushTokenSync&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CMPushTokenSync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMPushTokenSync* internal_default_instance() {
    return reinterpret_cast<const CMPushTokenSync*>(
               &_CMPushTokenSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CMPushTokenSync* other);
  friend void swap(CMPushTokenSync& a, CMPushTokenSync& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMPushTokenSync* New() const final {
    return CreateMaybeMessage<CMPushTokenSync>(NULL);
  }

  CMPushTokenSync* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMPushTokenSync>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CMPushTokenSync& from);
  void MergeFrom(const CMPushTokenSync& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CMPushTokenSync* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sPushToken = 3;
  void clear_spushtoken();
  static const int kSPushTokenFieldNumber = 3;
  const ::std::string& spushtoken() const;
  void set_spushtoken(const ::std::string& value);
  #if LANG_CXX11
  void set_spushtoken(::std::string&& value);
  #endif
  void set_spushtoken(const char* value);
  void set_spushtoken(const char* value, size_t size);
  ::std::string* mutable_spushtoken();
  ::std::string* release_spushtoken();
  void set_allocated_spushtoken(::std::string* spushtoken);

  // uint32 nPushType = 2;
  void clear_npushtype();
  static const int kNPushTypeFieldNumber = 2;
  ::google::protobuf::uint32 npushtype() const;
  void set_npushtype(::google::protobuf::uint32 value);

  // uint32 nPushTokenType = 4;
  void clear_npushtokentype();
  static const int kNPushTokenTypeFieldNumber = 4;
  ::google::protobuf::uint32 npushtokentype() const;
  void set_npushtokentype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.CMPushTokenSync)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr spushtoken_;
  ::google::protobuf::uint32 npushtype_;
  ::google::protobuf::uint32 npushtokentype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2ecm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CCMPushTokenSyncAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.CCMPushTokenSyncAck) */ {
 public:
  CCMPushTokenSyncAck();
  virtual ~CCMPushTokenSyncAck();

  CCMPushTokenSyncAck(const CCMPushTokenSyncAck& from);

  inline CCMPushTokenSyncAck& operator=(const CCMPushTokenSyncAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CCMPushTokenSyncAck(CCMPushTokenSyncAck&& from) noexcept
    : CCMPushTokenSyncAck() {
    *this = ::std::move(from);
  }

  inline CCMPushTokenSyncAck& operator=(CCMPushTokenSyncAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const CCMPushTokenSyncAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCMPushTokenSyncAck* internal_default_instance() {
    return reinterpret_cast<const CCMPushTokenSyncAck*>(
               &_CCMPushTokenSyncAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CCMPushTokenSyncAck* other);
  friend void swap(CCMPushTokenSyncAck& a, CCMPushTokenSyncAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CCMPushTokenSyncAck* New() const final {
    return CreateMaybeMessage<CCMPushTokenSyncAck>(NULL);
  }

  CCMPushTokenSyncAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CCMPushTokenSyncAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CCMPushTokenSyncAck& from);
  void MergeFrom(const CCMPushTokenSyncAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CCMPushTokenSyncAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // .im.ErrCode nErr = 2;
  void clear_nerr();
  static const int kNErrFieldNumber = 2;
  ::im::ErrCode nerr() const;
  void set_nerr(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.CCMPushTokenSyncAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  int nerr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2ecm_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMLogin

// string sUserId = 1;
inline void CMLogin::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLogin::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMLogin.sUserId)
  return suserid_.GetNoArena();
}
inline void CMLogin::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLogin.sUserId)
}
#if LANG_CXX11
inline void CMLogin::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMLogin.sUserId)
}
#endif
inline void CMLogin::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLogin.sUserId)
}
inline void CMLogin::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLogin.sUserId)
}
inline ::std::string* CMLogin::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLogin.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLogin::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMLogin.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLogin::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMLogin.sUserId)
}

// string sLoginToken = 2;
inline void CMLogin::clear_slogintoken() {
  slogintoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLogin::slogintoken() const {
  // @@protoc_insertion_point(field_get:im.CMLogin.sLoginToken)
  return slogintoken_.GetNoArena();
}
inline void CMLogin::set_slogintoken(const ::std::string& value) {
  
  slogintoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLogin.sLoginToken)
}
#if LANG_CXX11
inline void CMLogin::set_slogintoken(::std::string&& value) {
  
  slogintoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMLogin.sLoginToken)
}
#endif
inline void CMLogin::set_slogintoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  slogintoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLogin.sLoginToken)
}
inline void CMLogin::set_slogintoken(const char* value, size_t size) {
  
  slogintoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLogin.sLoginToken)
}
inline ::std::string* CMLogin::mutable_slogintoken() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLogin.sLoginToken)
  return slogintoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLogin::release_slogintoken() {
  // @@protoc_insertion_point(field_release:im.CMLogin.sLoginToken)
  
  return slogintoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLogin::set_allocated_slogintoken(::std::string* slogintoken) {
  if (slogintoken != NULL) {
    
  } else {
    
  }
  slogintoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slogintoken);
  // @@protoc_insertion_point(field_set_allocated:im.CMLogin.sLoginToken)
}

// string sDeviceToken = 3;
inline void CMLogin::clear_sdevicetoken() {
  sdevicetoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLogin::sdevicetoken() const {
  // @@protoc_insertion_point(field_get:im.CMLogin.sDeviceToken)
  return sdevicetoken_.GetNoArena();
}
inline void CMLogin::set_sdevicetoken(const ::std::string& value) {
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLogin.sDeviceToken)
}
#if LANG_CXX11
inline void CMLogin::set_sdevicetoken(::std::string&& value) {
  
  sdevicetoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMLogin.sDeviceToken)
}
#endif
inline void CMLogin::set_sdevicetoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLogin.sDeviceToken)
}
inline void CMLogin::set_sdevicetoken(const char* value, size_t size) {
  
  sdevicetoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLogin.sDeviceToken)
}
inline ::std::string* CMLogin::mutable_sdevicetoken() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLogin.sDeviceToken)
  return sdevicetoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLogin::release_sdevicetoken() {
  // @@protoc_insertion_point(field_release:im.CMLogin.sDeviceToken)
  
  return sdevicetoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLogin::set_allocated_sdevicetoken(::std::string* sdevicetoken) {
  if (sdevicetoken != NULL) {
    
  } else {
    
  }
  sdevicetoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdevicetoken);
  // @@protoc_insertion_point(field_set_allocated:im.CMLogin.sDeviceToken)
}

// uint32 nPushType = 4;
inline void CMLogin::clear_npushtype() {
  npushtype_ = 0u;
}
inline ::google::protobuf::uint32 CMLogin::npushtype() const {
  // @@protoc_insertion_point(field_get:im.CMLogin.nPushType)
  return npushtype_;
}
inline void CMLogin::set_npushtype(::google::protobuf::uint32 value) {
  
  npushtype_ = value;
  // @@protoc_insertion_point(field_set:im.CMLogin.nPushType)
}

// string sPushToken = 5;
inline void CMLogin::clear_spushtoken() {
  spushtoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLogin::spushtoken() const {
  // @@protoc_insertion_point(field_get:im.CMLogin.sPushToken)
  return spushtoken_.GetNoArena();
}
inline void CMLogin::set_spushtoken(const ::std::string& value) {
  
  spushtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLogin.sPushToken)
}
#if LANG_CXX11
inline void CMLogin::set_spushtoken(::std::string&& value) {
  
  spushtoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMLogin.sPushToken)
}
#endif
inline void CMLogin::set_spushtoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  spushtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLogin.sPushToken)
}
inline void CMLogin::set_spushtoken(const char* value, size_t size) {
  
  spushtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLogin.sPushToken)
}
inline ::std::string* CMLogin::mutable_spushtoken() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLogin.sPushToken)
  return spushtoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLogin::release_spushtoken() {
  // @@protoc_insertion_point(field_release:im.CMLogin.sPushToken)
  
  return spushtoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLogin::set_allocated_spushtoken(::std::string* spushtoken) {
  if (spushtoken != NULL) {
    
  } else {
    
  }
  spushtoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spushtoken);
  // @@protoc_insertion_point(field_set_allocated:im.CMLogin.sPushToken)
}

// -------------------------------------------------------------------

// CMLoginAck

// string sUserId = 1;
inline void CMLoginAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLoginAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMLoginAck.sUserId)
  return suserid_.GetNoArena();
}
inline void CMLoginAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLoginAck.sUserId)
}
#if LANG_CXX11
inline void CMLoginAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMLoginAck.sUserId)
}
#endif
inline void CMLoginAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLoginAck.sUserId)
}
inline void CMLoginAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLoginAck.sUserId)
}
inline ::std::string* CMLoginAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLoginAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLoginAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMLoginAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLoginAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMLoginAck.sUserId)
}

// .im.ErrCode nErr = 2;
inline void CMLoginAck::clear_nerr() {
  nerr_ = 0;
}
inline ::im::ErrCode CMLoginAck::nerr() const {
  // @@protoc_insertion_point(field_get:im.CMLoginAck.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
inline void CMLoginAck::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.CMLoginAck.nErr)
}

// uint64 nLastLoginTime = 3;
inline void CMLoginAck::clear_nlastlogintime() {
  nlastlogintime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CMLoginAck::nlastlogintime() const {
  // @@protoc_insertion_point(field_get:im.CMLoginAck.nLastLoginTime)
  return nlastlogintime_;
}
inline void CMLoginAck::set_nlastlogintime(::google::protobuf::uint64 value) {
  
  nlastlogintime_ = value;
  // @@protoc_insertion_point(field_set:im.CMLoginAck.nLastLoginTime)
}

// -------------------------------------------------------------------

// CMLogout

// string sUserId = 1;
inline void CMLogout::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLogout::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMLogout.sUserId)
  return suserid_.GetNoArena();
}
inline void CMLogout::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLogout.sUserId)
}
#if LANG_CXX11
inline void CMLogout::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMLogout.sUserId)
}
#endif
inline void CMLogout::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLogout.sUserId)
}
inline void CMLogout::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLogout.sUserId)
}
inline ::std::string* CMLogout::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLogout.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLogout::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMLogout.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLogout::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMLogout.sUserId)
}

// uint32 nDeviceType = 2;
inline void CMLogout::clear_ndevicetype() {
  ndevicetype_ = 0u;
}
inline ::google::protobuf::uint32 CMLogout::ndevicetype() const {
  // @@protoc_insertion_point(field_get:im.CMLogout.nDeviceType)
  return ndevicetype_;
}
inline void CMLogout::set_ndevicetype(::google::protobuf::uint32 value) {
  
  ndevicetype_ = value;
  // @@protoc_insertion_point(field_set:im.CMLogout.nDeviceType)
}

// -------------------------------------------------------------------

// CMLogoutAck

// .im.ErrCode nErr = 1;
inline void CMLogoutAck::clear_nerr() {
  nerr_ = 0;
}
inline ::im::ErrCode CMLogoutAck::nerr() const {
  // @@protoc_insertion_point(field_get:im.CMLogoutAck.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
inline void CMLogoutAck::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.CMLogoutAck.nErr)
}

// string sUserId = 2;
inline void CMLogoutAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMLogoutAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMLogoutAck.sUserId)
  return suserid_.GetNoArena();
}
inline void CMLogoutAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMLogoutAck.sUserId)
}
#if LANG_CXX11
inline void CMLogoutAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMLogoutAck.sUserId)
}
#endif
inline void CMLogoutAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMLogoutAck.sUserId)
}
inline void CMLogoutAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMLogoutAck.sUserId)
}
inline ::std::string* CMLogoutAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMLogoutAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMLogoutAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMLogoutAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMLogoutAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMLogoutAck.sUserId)
}

// -------------------------------------------------------------------

// CMKickoutNotification

// string sUserId = 1;
inline void CMKickoutNotification::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMKickoutNotification::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMKickoutNotification.sUserId)
  return suserid_.GetNoArena();
}
inline void CMKickoutNotification::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMKickoutNotification.sUserId)
}
#if LANG_CXX11
inline void CMKickoutNotification::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMKickoutNotification.sUserId)
}
#endif
inline void CMKickoutNotification::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMKickoutNotification.sUserId)
}
inline void CMKickoutNotification::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMKickoutNotification.sUserId)
}
inline ::std::string* CMKickoutNotification::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMKickoutNotification.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMKickoutNotification::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMKickoutNotification.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMKickoutNotification::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMKickoutNotification.sUserId)
}

// string ip = 2;
inline void CMKickoutNotification::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMKickoutNotification::ip() const {
  // @@protoc_insertion_point(field_get:im.CMKickoutNotification.ip)
  return ip_.GetNoArena();
}
inline void CMKickoutNotification::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMKickoutNotification.ip)
}
#if LANG_CXX11
inline void CMKickoutNotification::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMKickoutNotification.ip)
}
#endif
inline void CMKickoutNotification::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMKickoutNotification.ip)
}
inline void CMKickoutNotification::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMKickoutNotification.ip)
}
inline ::std::string* CMKickoutNotification::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:im.CMKickoutNotification.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMKickoutNotification::release_ip() {
  // @@protoc_insertion_point(field_release:im.CMKickoutNotification.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMKickoutNotification::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:im.CMKickoutNotification.ip)
}

// uint32 port = 3;
inline void CMKickoutNotification::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 CMKickoutNotification::port() const {
  // @@protoc_insertion_point(field_get:im.CMKickoutNotification.port)
  return port_;
}
inline void CMKickoutNotification::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:im.CMKickoutNotification.port)
}

// -------------------------------------------------------------------

// CMPushTokenSync

// string sUserId = 1;
inline void CMPushTokenSync::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMPushTokenSync::suserid() const {
  // @@protoc_insertion_point(field_get:im.CMPushTokenSync.sUserId)
  return suserid_.GetNoArena();
}
inline void CMPushTokenSync::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMPushTokenSync.sUserId)
}
#if LANG_CXX11
inline void CMPushTokenSync::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMPushTokenSync.sUserId)
}
#endif
inline void CMPushTokenSync::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMPushTokenSync.sUserId)
}
inline void CMPushTokenSync::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMPushTokenSync.sUserId)
}
inline ::std::string* CMPushTokenSync::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CMPushTokenSync.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMPushTokenSync::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CMPushTokenSync.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMPushTokenSync::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CMPushTokenSync.sUserId)
}

// uint32 nPushType = 2;
inline void CMPushTokenSync::clear_npushtype() {
  npushtype_ = 0u;
}
inline ::google::protobuf::uint32 CMPushTokenSync::npushtype() const {
  // @@protoc_insertion_point(field_get:im.CMPushTokenSync.nPushType)
  return npushtype_;
}
inline void CMPushTokenSync::set_npushtype(::google::protobuf::uint32 value) {
  
  npushtype_ = value;
  // @@protoc_insertion_point(field_set:im.CMPushTokenSync.nPushType)
}

// string sPushToken = 3;
inline void CMPushTokenSync::clear_spushtoken() {
  spushtoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CMPushTokenSync::spushtoken() const {
  // @@protoc_insertion_point(field_get:im.CMPushTokenSync.sPushToken)
  return spushtoken_.GetNoArena();
}
inline void CMPushTokenSync::set_spushtoken(const ::std::string& value) {
  
  spushtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CMPushTokenSync.sPushToken)
}
#if LANG_CXX11
inline void CMPushTokenSync::set_spushtoken(::std::string&& value) {
  
  spushtoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CMPushTokenSync.sPushToken)
}
#endif
inline void CMPushTokenSync::set_spushtoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  spushtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CMPushTokenSync.sPushToken)
}
inline void CMPushTokenSync::set_spushtoken(const char* value, size_t size) {
  
  spushtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CMPushTokenSync.sPushToken)
}
inline ::std::string* CMPushTokenSync::mutable_spushtoken() {
  
  // @@protoc_insertion_point(field_mutable:im.CMPushTokenSync.sPushToken)
  return spushtoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMPushTokenSync::release_spushtoken() {
  // @@protoc_insertion_point(field_release:im.CMPushTokenSync.sPushToken)
  
  return spushtoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMPushTokenSync::set_allocated_spushtoken(::std::string* spushtoken) {
  if (spushtoken != NULL) {
    
  } else {
    
  }
  spushtoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spushtoken);
  // @@protoc_insertion_point(field_set_allocated:im.CMPushTokenSync.sPushToken)
}

// uint32 nPushTokenType = 4;
inline void CMPushTokenSync::clear_npushtokentype() {
  npushtokentype_ = 0u;
}
inline ::google::protobuf::uint32 CMPushTokenSync::npushtokentype() const {
  // @@protoc_insertion_point(field_get:im.CMPushTokenSync.nPushTokenType)
  return npushtokentype_;
}
inline void CMPushTokenSync::set_npushtokentype(::google::protobuf::uint32 value) {
  
  npushtokentype_ = value;
  // @@protoc_insertion_point(field_set:im.CMPushTokenSync.nPushTokenType)
}

// -------------------------------------------------------------------

// CCMPushTokenSyncAck

// string sUserId = 1;
inline void CCMPushTokenSyncAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CCMPushTokenSyncAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.CCMPushTokenSyncAck.sUserId)
  return suserid_.GetNoArena();
}
inline void CCMPushTokenSyncAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.CCMPushTokenSyncAck.sUserId)
}
#if LANG_CXX11
inline void CCMPushTokenSyncAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.CCMPushTokenSyncAck.sUserId)
}
#endif
inline void CCMPushTokenSyncAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.CCMPushTokenSyncAck.sUserId)
}
inline void CCMPushTokenSyncAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.CCMPushTokenSyncAck.sUserId)
}
inline ::std::string* CCMPushTokenSyncAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.CCMPushTokenSyncAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCMPushTokenSyncAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.CCMPushTokenSyncAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCMPushTokenSyncAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.CCMPushTokenSyncAck.sUserId)
}

// .im.ErrCode nErr = 2;
inline void CCMPushTokenSyncAck::clear_nerr() {
  nerr_ = 0;
}
inline ::im::ErrCode CCMPushTokenSyncAck::nerr() const {
  // @@protoc_insertion_point(field_get:im.CCMPushTokenSyncAck.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
inline void CCMPushTokenSyncAck::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.CCMPushTokenSyncAck.nErr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace im

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_im_2ecm_2eproto
