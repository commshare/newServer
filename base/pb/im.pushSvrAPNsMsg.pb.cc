// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.pushSvrAPNsMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "im.pushSvrAPNsMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace im {

void protobuf_ShutdownFile_im_2epushSvrAPNsMsg_2eproto() {
  delete PSvrMsg::default_instance_;
  delete PSvrMsgAck::default_instance_;
  delete PSvrAPNsRespone::default_instance_;
  delete PSvrAPNsNotifyAck::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_im_2epushSvrAPNsMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_im_2epushSvrAPNsMsg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_im_2epushSvrAPNsMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::im::protobuf_AddDesc_im_2epub_2eproto();
  PSvrMsg::default_instance_ = new PSvrMsg();
  PSvrMsgAck::default_instance_ = new PSvrMsgAck();
  PSvrAPNsRespone::default_instance_ = new PSvrAPNsRespone();
  PSvrAPNsNotifyAck::default_instance_ = new PSvrAPNsNotifyAck();
  PSvrMsg::default_instance_->InitAsDefaultInstance();
  PSvrMsgAck::default_instance_->InitAsDefaultInstance();
  PSvrAPNsRespone::default_instance_->InitAsDefaultInstance();
  PSvrAPNsNotifyAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_im_2epushSvrAPNsMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_im_2epushSvrAPNsMsg_2eproto_once_);
void protobuf_AddDesc_im_2epushSvrAPNsMsg_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_im_2epushSvrAPNsMsg_2eproto_once_,
                 &protobuf_AddDesc_im_2epushSvrAPNsMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_im_2epushSvrAPNsMsg_2eproto {
  StaticDescriptorInitializer_im_2epushSvrAPNsMsg_2eproto() {
    protobuf_AddDesc_im_2epushSvrAPNsMsg_2eproto();
  }
} static_descriptor_initializer_im_2epushSvrAPNsMsg_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PSvrMsg::kEMsgTypeFieldNumber;
const int PSvrMsg::kSMsgIdFieldNumber;
const int PSvrMsg::kNGroupIdFieldNumber;
const int PSvrMsg::kSFromIdFieldNumber;
const int PSvrMsg::kSToIdFieldNumber;
const int PSvrMsg::kUDeviceVerFieldNumber;
const int PSvrMsg::kSToTokenFieldNumber;
const int PSvrMsg::kSBodyFieldNumber;
const int PSvrMsg::kNUnreadNotifyMsgCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PSvrMsg::PSvrMsg()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.PSvrMsg)
}

void PSvrMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PSvrMsg::PSvrMsg(const PSvrMsg& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.PSvrMsg)
}

void PSvrMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  emsgtype_ = 0;
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ngroupid_ = 0u;
  sfromid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  udevicever_ = 0u;
  stotoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbody_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nunreadnotifymsgcount_ = 0u;
}

PSvrMsg::~PSvrMsg() {
  // @@protoc_insertion_point(destructor:im.PSvrMsg)
  SharedDtor();
}

void PSvrMsg::SharedDtor() {
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sfromid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stotoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbody_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PSvrMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PSvrMsg& PSvrMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2epushSvrAPNsMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2epushSvrAPNsMsg_2eproto();
#endif
  return *default_instance_;
}

PSvrMsg* PSvrMsg::default_instance_ = NULL;

PSvrMsg* PSvrMsg::New(::google::protobuf::Arena* arena) const {
  PSvrMsg* n = new PSvrMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PSvrMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:im.PSvrMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PSvrMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PSvrMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(emsgtype_, ngroupid_);
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  udevicever_ = 0u;
  stotoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbody_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nunreadnotifymsgcount_ = 0u;

#undef ZR_HELPER_
#undef ZR_

}

bool PSvrMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.PSvrMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .im.MsgType eMsgType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_emsgtype(static_cast< ::im::MsgType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sMsgId;
        break;
      }

      // optional string sMsgId = 2;
      case 2: {
        if (tag == 18) {
         parse_sMsgId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.PSvrMsg.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nGroupId;
        break;
      }

      // optional uint32 nGroupId = 3;
      case 3: {
        if (tag == 24) {
         parse_nGroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ngroupid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sFromId;
        break;
      }

      // optional string sFromId = 4;
      case 4: {
        if (tag == 34) {
         parse_sFromId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sfromid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sfromid().data(), this->sfromid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.PSvrMsg.sFromId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sToId;
        break;
      }

      // optional string sToId = 5;
      case 5: {
        if (tag == 42) {
         parse_sToId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stoid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stoid().data(), this->stoid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.PSvrMsg.sToId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_uDeviceVer;
        break;
      }

      // optional uint32 uDeviceVer = 6;
      case 6: {
        if (tag == 48) {
         parse_uDeviceVer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &udevicever_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sToToken;
        break;
      }

      // optional string sToToken = 7;
      case 7: {
        if (tag == 58) {
         parse_sToToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stotoken()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stotoken().data(), this->stotoken().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.PSvrMsg.sToToken"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sBody;
        break;
      }

      // optional string sBody = 8;
      case 8: {
        if (tag == 66) {
         parse_sBody:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sbody()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sbody().data(), this->sbody().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.PSvrMsg.sBody"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_nUnreadNotifyMsgCount;
        break;
      }

      // optional uint32 nUnreadNotifyMsgCount = 9;
      case 9: {
        if (tag == 72) {
         parse_nUnreadNotifyMsgCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nunreadnotifymsgcount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.PSvrMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.PSvrMsg)
  return false;
#undef DO_
}

void PSvrMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.PSvrMsg)
  // optional .im.MsgType eMsgType = 1;
  if (this->emsgtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->emsgtype(), output);
  }

  // optional string sMsgId = 2;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.PSvrMsg.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->smsgid(), output);
  }

  // optional uint32 nGroupId = 3;
  if (this->ngroupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ngroupid(), output);
  }

  // optional string sFromId = 4;
  if (this->sfromid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sfromid().data(), this->sfromid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.PSvrMsg.sFromId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sfromid(), output);
  }

  // optional string sToId = 5;
  if (this->stoid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stoid().data(), this->stoid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.PSvrMsg.sToId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->stoid(), output);
  }

  // optional uint32 uDeviceVer = 6;
  if (this->udevicever() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->udevicever(), output);
  }

  // optional string sToToken = 7;
  if (this->stotoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stotoken().data(), this->stotoken().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.PSvrMsg.sToToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->stotoken(), output);
  }

  // optional string sBody = 8;
  if (this->sbody().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sbody().data(), this->sbody().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.PSvrMsg.sBody");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->sbody(), output);
  }

  // optional uint32 nUnreadNotifyMsgCount = 9;
  if (this->nunreadnotifymsgcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->nunreadnotifymsgcount(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.PSvrMsg)
}

int PSvrMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.PSvrMsg)
  int total_size = 0;

  // optional .im.MsgType eMsgType = 1;
  if (this->emsgtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->emsgtype());
  }

  // optional string sMsgId = 2;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional uint32 nGroupId = 3;
  if (this->ngroupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ngroupid());
  }

  // optional string sFromId = 4;
  if (this->sfromid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sfromid());
  }

  // optional string sToId = 5;
  if (this->stoid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stoid());
  }

  // optional uint32 uDeviceVer = 6;
  if (this->udevicever() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->udevicever());
  }

  // optional string sToToken = 7;
  if (this->stotoken().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stotoken());
  }

  // optional string sBody = 8;
  if (this->sbody().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sbody());
  }

  // optional uint32 nUnreadNotifyMsgCount = 9;
  if (this->nunreadnotifymsgcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nunreadnotifymsgcount());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PSvrMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PSvrMsg*>(&from));
}

void PSvrMsg::MergeFrom(const PSvrMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.PSvrMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.emsgtype() != 0) {
    set_emsgtype(from.emsgtype());
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.ngroupid() != 0) {
    set_ngroupid(from.ngroupid());
  }
  if (from.sfromid().size() > 0) {

    sfromid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sfromid_);
  }
  if (from.stoid().size() > 0) {

    stoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stoid_);
  }
  if (from.udevicever() != 0) {
    set_udevicever(from.udevicever());
  }
  if (from.stotoken().size() > 0) {

    stotoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stotoken_);
  }
  if (from.sbody().size() > 0) {

    sbody_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbody_);
  }
  if (from.nunreadnotifymsgcount() != 0) {
    set_nunreadnotifymsgcount(from.nunreadnotifymsgcount());
  }
}

void PSvrMsg::CopyFrom(const PSvrMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.PSvrMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSvrMsg::IsInitialized() const {

  return true;
}

void PSvrMsg::Swap(PSvrMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PSvrMsg::InternalSwap(PSvrMsg* other) {
  std::swap(emsgtype_, other->emsgtype_);
  smsgid_.Swap(&other->smsgid_);
  std::swap(ngroupid_, other->ngroupid_);
  sfromid_.Swap(&other->sfromid_);
  stoid_.Swap(&other->stoid_);
  std::swap(udevicever_, other->udevicever_);
  stotoken_.Swap(&other->stotoken_);
  sbody_.Swap(&other->sbody_);
  std::swap(nunreadnotifymsgcount_, other->nunreadnotifymsgcount_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PSvrMsg::GetTypeName() const {
  return "im.PSvrMsg";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PSvrMsg

// optional .im.MsgType eMsgType = 1;
void PSvrMsg::clear_emsgtype() {
  emsgtype_ = 0;
}
 ::im::MsgType PSvrMsg::emsgtype() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsg.eMsgType)
  return static_cast< ::im::MsgType >(emsgtype_);
}
 void PSvrMsg::set_emsgtype(::im::MsgType value) {
  
  emsgtype_ = value;
  // @@protoc_insertion_point(field_set:im.PSvrMsg.eMsgType)
}

// optional string sMsgId = 2;
void PSvrMsg::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PSvrMsg::smsgid() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsg.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PSvrMsg::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.PSvrMsg.sMsgId)
}
 void PSvrMsg::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.PSvrMsg.sMsgId)
}
 void PSvrMsg::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.PSvrMsg.sMsgId)
}
 ::std::string* PSvrMsg::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.PSvrMsg.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PSvrMsg::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.PSvrMsg.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PSvrMsg::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.PSvrMsg.sMsgId)
}

// optional uint32 nGroupId = 3;
void PSvrMsg::clear_ngroupid() {
  ngroupid_ = 0u;
}
 ::google::protobuf::uint32 PSvrMsg::ngroupid() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsg.nGroupId)
  return ngroupid_;
}
 void PSvrMsg::set_ngroupid(::google::protobuf::uint32 value) {
  
  ngroupid_ = value;
  // @@protoc_insertion_point(field_set:im.PSvrMsg.nGroupId)
}

// optional string sFromId = 4;
void PSvrMsg::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PSvrMsg::sfromid() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsg.sFromId)
  return sfromid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PSvrMsg::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.PSvrMsg.sFromId)
}
 void PSvrMsg::set_sfromid(const char* value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.PSvrMsg.sFromId)
}
 void PSvrMsg::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.PSvrMsg.sFromId)
}
 ::std::string* PSvrMsg::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.PSvrMsg.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PSvrMsg::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.PSvrMsg.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PSvrMsg::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.PSvrMsg.sFromId)
}

// optional string sToId = 5;
void PSvrMsg::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PSvrMsg::stoid() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsg.sToId)
  return stoid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PSvrMsg::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.PSvrMsg.sToId)
}
 void PSvrMsg::set_stoid(const char* value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.PSvrMsg.sToId)
}
 void PSvrMsg::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.PSvrMsg.sToId)
}
 ::std::string* PSvrMsg::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.PSvrMsg.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PSvrMsg::release_stoid() {
  // @@protoc_insertion_point(field_release:im.PSvrMsg.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PSvrMsg::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.PSvrMsg.sToId)
}

// optional uint32 uDeviceVer = 6;
void PSvrMsg::clear_udevicever() {
  udevicever_ = 0u;
}
 ::google::protobuf::uint32 PSvrMsg::udevicever() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsg.uDeviceVer)
  return udevicever_;
}
 void PSvrMsg::set_udevicever(::google::protobuf::uint32 value) {
  
  udevicever_ = value;
  // @@protoc_insertion_point(field_set:im.PSvrMsg.uDeviceVer)
}

// optional string sToToken = 7;
void PSvrMsg::clear_stotoken() {
  stotoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PSvrMsg::stotoken() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsg.sToToken)
  return stotoken_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PSvrMsg::set_stotoken(const ::std::string& value) {
  
  stotoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.PSvrMsg.sToToken)
}
 void PSvrMsg::set_stotoken(const char* value) {
  
  stotoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.PSvrMsg.sToToken)
}
 void PSvrMsg::set_stotoken(const char* value, size_t size) {
  
  stotoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.PSvrMsg.sToToken)
}
 ::std::string* PSvrMsg::mutable_stotoken() {
  
  // @@protoc_insertion_point(field_mutable:im.PSvrMsg.sToToken)
  return stotoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PSvrMsg::release_stotoken() {
  // @@protoc_insertion_point(field_release:im.PSvrMsg.sToToken)
  
  return stotoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PSvrMsg::set_allocated_stotoken(::std::string* stotoken) {
  if (stotoken != NULL) {
    
  } else {
    
  }
  stotoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stotoken);
  // @@protoc_insertion_point(field_set_allocated:im.PSvrMsg.sToToken)
}

// optional string sBody = 8;
void PSvrMsg::clear_sbody() {
  sbody_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PSvrMsg::sbody() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsg.sBody)
  return sbody_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PSvrMsg::set_sbody(const ::std::string& value) {
  
  sbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.PSvrMsg.sBody)
}
 void PSvrMsg::set_sbody(const char* value) {
  
  sbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.PSvrMsg.sBody)
}
 void PSvrMsg::set_sbody(const char* value, size_t size) {
  
  sbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.PSvrMsg.sBody)
}
 ::std::string* PSvrMsg::mutable_sbody() {
  
  // @@protoc_insertion_point(field_mutable:im.PSvrMsg.sBody)
  return sbody_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PSvrMsg::release_sbody() {
  // @@protoc_insertion_point(field_release:im.PSvrMsg.sBody)
  
  return sbody_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PSvrMsg::set_allocated_sbody(::std::string* sbody) {
  if (sbody != NULL) {
    
  } else {
    
  }
  sbody_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sbody);
  // @@protoc_insertion_point(field_set_allocated:im.PSvrMsg.sBody)
}

// optional uint32 nUnreadNotifyMsgCount = 9;
void PSvrMsg::clear_nunreadnotifymsgcount() {
  nunreadnotifymsgcount_ = 0u;
}
 ::google::protobuf::uint32 PSvrMsg::nunreadnotifymsgcount() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsg.nUnreadNotifyMsgCount)
  return nunreadnotifymsgcount_;
}
 void PSvrMsg::set_nunreadnotifymsgcount(::google::protobuf::uint32 value) {
  
  nunreadnotifymsgcount_ = value;
  // @@protoc_insertion_point(field_set:im.PSvrMsg.nUnreadNotifyMsgCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PSvrMsgAck::kSMsgIdFieldNumber;
const int PSvrMsgAck::kNErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PSvrMsgAck::PSvrMsgAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.PSvrMsgAck)
}

void PSvrMsgAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PSvrMsgAck::PSvrMsgAck(const PSvrMsgAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.PSvrMsgAck)
}

void PSvrMsgAck::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
}

PSvrMsgAck::~PSvrMsgAck() {
  // @@protoc_insertion_point(destructor:im.PSvrMsgAck)
  SharedDtor();
}

void PSvrMsgAck::SharedDtor() {
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PSvrMsgAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PSvrMsgAck& PSvrMsgAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2epushSvrAPNsMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2epushSvrAPNsMsg_2eproto();
#endif
  return *default_instance_;
}

PSvrMsgAck* PSvrMsgAck::default_instance_ = NULL;

PSvrMsgAck* PSvrMsgAck::New(::google::protobuf::Arena* arena) const {
  PSvrMsgAck* n = new PSvrMsgAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PSvrMsgAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.PSvrMsgAck)
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
}

bool PSvrMsgAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.PSvrMsgAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sMsgId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.PSvrMsgAck.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nErr;
        break;
      }

      // optional .im.ErrCode nErr = 2;
      case 2: {
        if (tag == 16) {
         parse_nErr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nerr(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.PSvrMsgAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.PSvrMsgAck)
  return false;
#undef DO_
}

void PSvrMsgAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.PSvrMsgAck)
  // optional string sMsgId = 1;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.PSvrMsgAck.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->smsgid(), output);
  }

  // optional .im.ErrCode nErr = 2;
  if (this->nerr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->nerr(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.PSvrMsgAck)
}

int PSvrMsgAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.PSvrMsgAck)
  int total_size = 0;

  // optional string sMsgId = 1;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional .im.ErrCode nErr = 2;
  if (this->nerr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nerr());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PSvrMsgAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PSvrMsgAck*>(&from));
}

void PSvrMsgAck::MergeFrom(const PSvrMsgAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.PSvrMsgAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.nerr() != 0) {
    set_nerr(from.nerr());
  }
}

void PSvrMsgAck::CopyFrom(const PSvrMsgAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.PSvrMsgAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSvrMsgAck::IsInitialized() const {

  return true;
}

void PSvrMsgAck::Swap(PSvrMsgAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PSvrMsgAck::InternalSwap(PSvrMsgAck* other) {
  smsgid_.Swap(&other->smsgid_);
  std::swap(nerr_, other->nerr_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PSvrMsgAck::GetTypeName() const {
  return "im.PSvrMsgAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PSvrMsgAck

// optional string sMsgId = 1;
void PSvrMsgAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PSvrMsgAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsgAck.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PSvrMsgAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.PSvrMsgAck.sMsgId)
}
 void PSvrMsgAck::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.PSvrMsgAck.sMsgId)
}
 void PSvrMsgAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.PSvrMsgAck.sMsgId)
}
 ::std::string* PSvrMsgAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.PSvrMsgAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PSvrMsgAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.PSvrMsgAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PSvrMsgAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.PSvrMsgAck.sMsgId)
}

// optional .im.ErrCode nErr = 2;
void PSvrMsgAck::clear_nerr() {
  nerr_ = 0;
}
 ::im::ErrCode PSvrMsgAck::nerr() const {
  // @@protoc_insertion_point(field_get:im.PSvrMsgAck.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
 void PSvrMsgAck::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.PSvrMsgAck.nErr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PSvrAPNsRespone::kSMsgIdFieldNumber;
const int PSvrAPNsRespone::kSToIdFieldNumber;
const int PSvrAPNsRespone::kNErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PSvrAPNsRespone::PSvrAPNsRespone()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.PSvrAPNsRespone)
}

void PSvrAPNsRespone::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PSvrAPNsRespone::PSvrAPNsRespone(const PSvrAPNsRespone& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.PSvrAPNsRespone)
}

void PSvrAPNsRespone::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
}

PSvrAPNsRespone::~PSvrAPNsRespone() {
  // @@protoc_insertion_point(destructor:im.PSvrAPNsRespone)
  SharedDtor();
}

void PSvrAPNsRespone::SharedDtor() {
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PSvrAPNsRespone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PSvrAPNsRespone& PSvrAPNsRespone::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2epushSvrAPNsMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2epushSvrAPNsMsg_2eproto();
#endif
  return *default_instance_;
}

PSvrAPNsRespone* PSvrAPNsRespone::default_instance_ = NULL;

PSvrAPNsRespone* PSvrAPNsRespone::New(::google::protobuf::Arena* arena) const {
  PSvrAPNsRespone* n = new PSvrAPNsRespone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PSvrAPNsRespone::Clear() {
// @@protoc_insertion_point(message_clear_start:im.PSvrAPNsRespone)
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
}

bool PSvrAPNsRespone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.PSvrAPNsRespone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sMsgId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.PSvrAPNsRespone.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sToId;
        break;
      }

      // optional string sToId = 2;
      case 2: {
        if (tag == 18) {
         parse_sToId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stoid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stoid().data(), this->stoid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.PSvrAPNsRespone.sToId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nErr;
        break;
      }

      // optional .im.ErrCode nErr = 3;
      case 3: {
        if (tag == 24) {
         parse_nErr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nerr(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.PSvrAPNsRespone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.PSvrAPNsRespone)
  return false;
#undef DO_
}

void PSvrAPNsRespone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.PSvrAPNsRespone)
  // optional string sMsgId = 1;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.PSvrAPNsRespone.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->smsgid(), output);
  }

  // optional string sToId = 2;
  if (this->stoid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stoid().data(), this->stoid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.PSvrAPNsRespone.sToId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stoid(), output);
  }

  // optional .im.ErrCode nErr = 3;
  if (this->nerr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->nerr(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.PSvrAPNsRespone)
}

int PSvrAPNsRespone::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.PSvrAPNsRespone)
  int total_size = 0;

  // optional string sMsgId = 1;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional string sToId = 2;
  if (this->stoid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stoid());
  }

  // optional .im.ErrCode nErr = 3;
  if (this->nerr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nerr());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PSvrAPNsRespone::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PSvrAPNsRespone*>(&from));
}

void PSvrAPNsRespone::MergeFrom(const PSvrAPNsRespone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.PSvrAPNsRespone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.stoid().size() > 0) {

    stoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stoid_);
  }
  if (from.nerr() != 0) {
    set_nerr(from.nerr());
  }
}

void PSvrAPNsRespone::CopyFrom(const PSvrAPNsRespone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.PSvrAPNsRespone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSvrAPNsRespone::IsInitialized() const {

  return true;
}

void PSvrAPNsRespone::Swap(PSvrAPNsRespone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PSvrAPNsRespone::InternalSwap(PSvrAPNsRespone* other) {
  smsgid_.Swap(&other->smsgid_);
  stoid_.Swap(&other->stoid_);
  std::swap(nerr_, other->nerr_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PSvrAPNsRespone::GetTypeName() const {
  return "im.PSvrAPNsRespone";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PSvrAPNsRespone

// optional string sMsgId = 1;
void PSvrAPNsRespone::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PSvrAPNsRespone::smsgid() const {
  // @@protoc_insertion_point(field_get:im.PSvrAPNsRespone.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PSvrAPNsRespone::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.PSvrAPNsRespone.sMsgId)
}
 void PSvrAPNsRespone::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.PSvrAPNsRespone.sMsgId)
}
 void PSvrAPNsRespone::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.PSvrAPNsRespone.sMsgId)
}
 ::std::string* PSvrAPNsRespone::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.PSvrAPNsRespone.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PSvrAPNsRespone::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.PSvrAPNsRespone.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PSvrAPNsRespone::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.PSvrAPNsRespone.sMsgId)
}

// optional string sToId = 2;
void PSvrAPNsRespone::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PSvrAPNsRespone::stoid() const {
  // @@protoc_insertion_point(field_get:im.PSvrAPNsRespone.sToId)
  return stoid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PSvrAPNsRespone::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.PSvrAPNsRespone.sToId)
}
 void PSvrAPNsRespone::set_stoid(const char* value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.PSvrAPNsRespone.sToId)
}
 void PSvrAPNsRespone::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.PSvrAPNsRespone.sToId)
}
 ::std::string* PSvrAPNsRespone::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.PSvrAPNsRespone.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PSvrAPNsRespone::release_stoid() {
  // @@protoc_insertion_point(field_release:im.PSvrAPNsRespone.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PSvrAPNsRespone::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.PSvrAPNsRespone.sToId)
}

// optional .im.ErrCode nErr = 3;
void PSvrAPNsRespone::clear_nerr() {
  nerr_ = 0;
}
 ::im::ErrCode PSvrAPNsRespone::nerr() const {
  // @@protoc_insertion_point(field_get:im.PSvrAPNsRespone.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
 void PSvrAPNsRespone::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.PSvrAPNsRespone.nErr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PSvrAPNsNotifyAck::kSMsgIdFieldNumber;
const int PSvrAPNsNotifyAck::kSToIdFieldNumber;
const int PSvrAPNsNotifyAck::kNErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PSvrAPNsNotifyAck::PSvrAPNsNotifyAck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.PSvrAPNsNotifyAck)
}

void PSvrAPNsNotifyAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PSvrAPNsNotifyAck::PSvrAPNsNotifyAck(const PSvrAPNsNotifyAck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:im.PSvrAPNsNotifyAck)
}

void PSvrAPNsNotifyAck::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
}

PSvrAPNsNotifyAck::~PSvrAPNsNotifyAck() {
  // @@protoc_insertion_point(destructor:im.PSvrAPNsNotifyAck)
  SharedDtor();
}

void PSvrAPNsNotifyAck::SharedDtor() {
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PSvrAPNsNotifyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PSvrAPNsNotifyAck& PSvrAPNsNotifyAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_im_2epushSvrAPNsMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_im_2epushSvrAPNsMsg_2eproto();
#endif
  return *default_instance_;
}

PSvrAPNsNotifyAck* PSvrAPNsNotifyAck::default_instance_ = NULL;

PSvrAPNsNotifyAck* PSvrAPNsNotifyAck::New(::google::protobuf::Arena* arena) const {
  PSvrAPNsNotifyAck* n = new PSvrAPNsNotifyAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PSvrAPNsNotifyAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.PSvrAPNsNotifyAck)
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
}

bool PSvrAPNsNotifyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:im.PSvrAPNsNotifyAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sMsgId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), this->smsgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.PSvrAPNsNotifyAck.sMsgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sToId;
        break;
      }

      // optional string sToId = 2;
      case 2: {
        if (tag == 18) {
         parse_sToId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stoid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stoid().data(), this->stoid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.PSvrAPNsNotifyAck.sToId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nErr;
        break;
      }

      // optional .im.ErrCode nErr = 3;
      case 3: {
        if (tag == 24) {
         parse_nErr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nerr(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.PSvrAPNsNotifyAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.PSvrAPNsNotifyAck)
  return false;
#undef DO_
}

void PSvrAPNsNotifyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.PSvrAPNsNotifyAck)
  // optional string sMsgId = 1;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), this->smsgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.PSvrAPNsNotifyAck.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->smsgid(), output);
  }

  // optional string sToId = 2;
  if (this->stoid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stoid().data(), this->stoid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.PSvrAPNsNotifyAck.sToId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stoid(), output);
  }

  // optional .im.ErrCode nErr = 3;
  if (this->nerr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->nerr(), output);
  }

  // @@protoc_insertion_point(serialize_end:im.PSvrAPNsNotifyAck)
}

int PSvrAPNsNotifyAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:im.PSvrAPNsNotifyAck)
  int total_size = 0;

  // optional string sMsgId = 1;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // optional string sToId = 2;
  if (this->stoid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stoid());
  }

  // optional .im.ErrCode nErr = 3;
  if (this->nerr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nerr());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PSvrAPNsNotifyAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PSvrAPNsNotifyAck*>(&from));
}

void PSvrAPNsNotifyAck::MergeFrom(const PSvrAPNsNotifyAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.PSvrAPNsNotifyAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.stoid().size() > 0) {

    stoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stoid_);
  }
  if (from.nerr() != 0) {
    set_nerr(from.nerr());
  }
}

void PSvrAPNsNotifyAck::CopyFrom(const PSvrAPNsNotifyAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.PSvrAPNsNotifyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSvrAPNsNotifyAck::IsInitialized() const {

  return true;
}

void PSvrAPNsNotifyAck::Swap(PSvrAPNsNotifyAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PSvrAPNsNotifyAck::InternalSwap(PSvrAPNsNotifyAck* other) {
  smsgid_.Swap(&other->smsgid_);
  stoid_.Swap(&other->stoid_);
  std::swap(nerr_, other->nerr_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PSvrAPNsNotifyAck::GetTypeName() const {
  return "im.PSvrAPNsNotifyAck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PSvrAPNsNotifyAck

// optional string sMsgId = 1;
void PSvrAPNsNotifyAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PSvrAPNsNotifyAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.PSvrAPNsNotifyAck.sMsgId)
  return smsgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PSvrAPNsNotifyAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.PSvrAPNsNotifyAck.sMsgId)
}
 void PSvrAPNsNotifyAck::set_smsgid(const char* value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.PSvrAPNsNotifyAck.sMsgId)
}
 void PSvrAPNsNotifyAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.PSvrAPNsNotifyAck.sMsgId)
}
 ::std::string* PSvrAPNsNotifyAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.PSvrAPNsNotifyAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PSvrAPNsNotifyAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.PSvrAPNsNotifyAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PSvrAPNsNotifyAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.PSvrAPNsNotifyAck.sMsgId)
}

// optional string sToId = 2;
void PSvrAPNsNotifyAck::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PSvrAPNsNotifyAck::stoid() const {
  // @@protoc_insertion_point(field_get:im.PSvrAPNsNotifyAck.sToId)
  return stoid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PSvrAPNsNotifyAck::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.PSvrAPNsNotifyAck.sToId)
}
 void PSvrAPNsNotifyAck::set_stoid(const char* value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.PSvrAPNsNotifyAck.sToId)
}
 void PSvrAPNsNotifyAck::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.PSvrAPNsNotifyAck.sToId)
}
 ::std::string* PSvrAPNsNotifyAck::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.PSvrAPNsNotifyAck.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PSvrAPNsNotifyAck::release_stoid() {
  // @@protoc_insertion_point(field_release:im.PSvrAPNsNotifyAck.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PSvrAPNsNotifyAck::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.PSvrAPNsNotifyAck.sToId)
}

// optional .im.ErrCode nErr = 3;
void PSvrAPNsNotifyAck::clear_nerr() {
  nerr_ = 0;
}
 ::im::ErrCode PSvrAPNsNotifyAck::nerr() const {
  // @@protoc_insertion_point(field_get:im.PSvrAPNsNotifyAck.nErr)
  return static_cast< ::im::ErrCode >(nerr_);
}
 void PSvrAPNsNotifyAck::set_nerr(::im::ErrCode value) {
  
  nerr_ = value;
  // @@protoc_insertion_point(field_set:im.PSvrAPNsNotifyAck.nErr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace im

// @@protoc_insertion_point(global_scope)
