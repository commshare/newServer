// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.push.android.proto

#include "im.push.android.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace im {
class ANDPushMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ANDPushMsg>
      _instance;
} _ANDPushMsg_default_instance_;
class ANDPushMsgAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ANDPushMsgAck>
      _instance;
} _ANDPushMsgAck_default_instance_;
class ANDNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ANDNotify>
      _instance;
} _ANDNotify_default_instance_;
class ANDNotifyAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ANDNotifyAck>
      _instance;
} _ANDNotifyAck_default_instance_;
}  // namespace im
namespace protobuf_im_2epush_2eandroid_2eproto {
static void InitDefaultsANDPushMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::im::_ANDPushMsg_default_instance_;
    new (ptr) ::im::ANDPushMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::im::ANDPushMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ANDPushMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsANDPushMsg}, {}};

static void InitDefaultsANDPushMsgAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::im::_ANDPushMsgAck_default_instance_;
    new (ptr) ::im::ANDPushMsgAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::im::ANDPushMsgAck::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ANDPushMsgAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsANDPushMsgAck}, {}};

static void InitDefaultsANDNotify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::im::_ANDNotify_default_instance_;
    new (ptr) ::im::ANDNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::im::ANDNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ANDNotify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsANDNotify}, {}};

static void InitDefaultsANDNotifyAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::im::_ANDNotifyAck_default_instance_;
    new (ptr) ::im::ANDNotifyAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::im::ANDNotifyAck::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ANDNotifyAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsANDNotifyAck}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ANDPushMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ANDPushMsgAck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ANDNotify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ANDNotifyAck.base);
}

}  // namespace protobuf_im_2epush_2eandroid_2eproto
namespace im {

// ===================================================================

void ANDPushMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ANDPushMsg::kEMsgTypeFieldNumber;
const int ANDPushMsg::kSMsgIdFieldNumber;
const int ANDPushMsg::kNGroupIdFieldNumber;
const int ANDPushMsg::kSTitleFieldNumber;
const int ANDPushMsg::kSBodyFieldNumber;
const int ANDPushMsg::kSToIdFieldNumber;
const int ANDPushMsg::kSDiveceTokenFieldNumber;
const int ANDPushMsg::kEDiveceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ANDPushMsg::ANDPushMsg()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_im_2epush_2eandroid_2eproto::scc_info_ANDPushMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.ANDPushMsg)
}
ANDPushMsg::ANDPushMsg(const ANDPushMsg& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.smsgid().size() > 0) {
    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  stitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stitle().size() > 0) {
    stitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stitle_);
  }
  sbody_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sbody().size() > 0) {
    sbody_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbody_);
  }
  stoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stoid().size() > 0) {
    stoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stoid_);
  }
  sdivece_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sdivece_token().size() > 0) {
    sdivece_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdivece_token_);
  }
  ::memcpy(&emsgtype_, &from.emsgtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&edivece_type_) -
    reinterpret_cast<char*>(&emsgtype_)) + sizeof(edivece_type_));
  // @@protoc_insertion_point(copy_constructor:im.ANDPushMsg)
}

void ANDPushMsg::SharedCtor() {
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stitle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbody_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdivece_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&emsgtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edivece_type_) -
      reinterpret_cast<char*>(&emsgtype_)) + sizeof(edivece_type_));
}

ANDPushMsg::~ANDPushMsg() {
  // @@protoc_insertion_point(destructor:im.ANDPushMsg)
  SharedDtor();
}

void ANDPushMsg::SharedDtor() {
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stitle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbody_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdivece_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ANDPushMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ANDPushMsg& ANDPushMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_im_2epush_2eandroid_2eproto::scc_info_ANDPushMsg.base);
  return *internal_default_instance();
}


void ANDPushMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:im.ANDPushMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sbody_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdivece_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&emsgtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edivece_type_) -
      reinterpret_cast<char*>(&emsgtype_)) + sizeof(edivece_type_));
  _internal_metadata_.Clear();
}

bool ANDPushMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:im.ANDPushMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .im.MsgType eMsgType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_emsgtype(static_cast< ::im::MsgType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sMsgId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), static_cast<int>(this->smsgid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.ANDPushMsg.sMsgId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nGroupId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ngroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sTitle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stitle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stitle().data(), static_cast<int>(this->stitle().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.ANDPushMsg.sTitle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sBody = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sbody()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sbody().data(), static_cast<int>(this->sbody().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.ANDPushMsg.sBody"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sToId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stoid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stoid().data(), static_cast<int>(this->stoid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.ANDPushMsg.sToId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sDivece_Token = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdivece_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sdivece_token().data(), static_cast<int>(this->sdivece_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.ANDPushMsg.sDivece_Token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .im.DiveceType eDivece_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_edivece_type(static_cast< ::im::DiveceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.ANDPushMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.ANDPushMsg)
  return false;
#undef DO_
}

void ANDPushMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.ANDPushMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .im.MsgType eMsgType = 1;
  if (this->emsgtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->emsgtype(), output);
  }

  // string sMsgId = 2;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), static_cast<int>(this->smsgid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.ANDPushMsg.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->smsgid(), output);
  }

  // uint32 nGroupId = 3;
  if (this->ngroupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ngroupid(), output);
  }

  // string sTitle = 4;
  if (this->stitle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stitle().data(), static_cast<int>(this->stitle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.ANDPushMsg.sTitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stitle(), output);
  }

  // string sBody = 5;
  if (this->sbody().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sbody().data(), static_cast<int>(this->sbody().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.ANDPushMsg.sBody");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sbody(), output);
  }

  // string sToId = 6;
  if (this->stoid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stoid().data(), static_cast<int>(this->stoid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.ANDPushMsg.sToId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->stoid(), output);
  }

  // string sDivece_Token = 7;
  if (this->sdivece_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sdivece_token().data(), static_cast<int>(this->sdivece_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.ANDPushMsg.sDivece_Token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sdivece_token(), output);
  }

  // .im.DiveceType eDivece_type = 8;
  if (this->edivece_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->edivece_type(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:im.ANDPushMsg)
}

size_t ANDPushMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.ANDPushMsg)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string sMsgId = 2;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // string sTitle = 4;
  if (this->stitle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stitle());
  }

  // string sBody = 5;
  if (this->sbody().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sbody());
  }

  // string sToId = 6;
  if (this->stoid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stoid());
  }

  // string sDivece_Token = 7;
  if (this->sdivece_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sdivece_token());
  }

  // .im.MsgType eMsgType = 1;
  if (this->emsgtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->emsgtype());
  }

  // uint32 nGroupId = 3;
  if (this->ngroupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ngroupid());
  }

  // .im.DiveceType eDivece_type = 8;
  if (this->edivece_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->edivece_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ANDPushMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ANDPushMsg*>(&from));
}

void ANDPushMsg::MergeFrom(const ANDPushMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.ANDPushMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.stitle().size() > 0) {

    stitle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stitle_);
  }
  if (from.sbody().size() > 0) {

    sbody_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sbody_);
  }
  if (from.stoid().size() > 0) {

    stoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stoid_);
  }
  if (from.sdivece_token().size() > 0) {

    sdivece_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdivece_token_);
  }
  if (from.emsgtype() != 0) {
    set_emsgtype(from.emsgtype());
  }
  if (from.ngroupid() != 0) {
    set_ngroupid(from.ngroupid());
  }
  if (from.edivece_type() != 0) {
    set_edivece_type(from.edivece_type());
  }
}

void ANDPushMsg::CopyFrom(const ANDPushMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.ANDPushMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ANDPushMsg::IsInitialized() const {
  return true;
}

void ANDPushMsg::Swap(ANDPushMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ANDPushMsg::InternalSwap(ANDPushMsg* other) {
  using std::swap;
  smsgid_.Swap(&other->smsgid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stitle_.Swap(&other->stitle_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sbody_.Swap(&other->sbody_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stoid_.Swap(&other->stoid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sdivece_token_.Swap(&other->sdivece_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(emsgtype_, other->emsgtype_);
  swap(ngroupid_, other->ngroupid_);
  swap(edivece_type_, other->edivece_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ANDPushMsg::GetTypeName() const {
  return "im.ANDPushMsg";
}


// ===================================================================

void ANDPushMsgAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ANDPushMsgAck::kSMsgIdFieldNumber;
const int ANDPushMsgAck::kNErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ANDPushMsgAck::ANDPushMsgAck()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_im_2epush_2eandroid_2eproto::scc_info_ANDPushMsgAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.ANDPushMsgAck)
}
ANDPushMsgAck::ANDPushMsgAck(const ANDPushMsgAck& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.smsgid().size() > 0) {
    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  nerr_ = from.nerr_;
  // @@protoc_insertion_point(copy_constructor:im.ANDPushMsgAck)
}

void ANDPushMsgAck::SharedCtor() {
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
}

ANDPushMsgAck::~ANDPushMsgAck() {
  // @@protoc_insertion_point(destructor:im.ANDPushMsgAck)
  SharedDtor();
}

void ANDPushMsgAck::SharedDtor() {
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ANDPushMsgAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ANDPushMsgAck& ANDPushMsgAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_im_2epush_2eandroid_2eproto::scc_info_ANDPushMsgAck.base);
  return *internal_default_instance();
}


void ANDPushMsgAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.ANDPushMsgAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
  _internal_metadata_.Clear();
}

bool ANDPushMsgAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:im.ANDPushMsgAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sMsgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), static_cast<int>(this->smsgid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.ANDPushMsgAck.sMsgId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .im.ErrCode nErr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nerr(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.ANDPushMsgAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.ANDPushMsgAck)
  return false;
#undef DO_
}

void ANDPushMsgAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.ANDPushMsgAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sMsgId = 1;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), static_cast<int>(this->smsgid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.ANDPushMsgAck.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->smsgid(), output);
  }

  // .im.ErrCode nErr = 2;
  if (this->nerr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->nerr(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:im.ANDPushMsgAck)
}

size_t ANDPushMsgAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.ANDPushMsgAck)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string sMsgId = 1;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // .im.ErrCode nErr = 2;
  if (this->nerr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nerr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ANDPushMsgAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ANDPushMsgAck*>(&from));
}

void ANDPushMsgAck::MergeFrom(const ANDPushMsgAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.ANDPushMsgAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.nerr() != 0) {
    set_nerr(from.nerr());
  }
}

void ANDPushMsgAck::CopyFrom(const ANDPushMsgAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.ANDPushMsgAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ANDPushMsgAck::IsInitialized() const {
  return true;
}

void ANDPushMsgAck::Swap(ANDPushMsgAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ANDPushMsgAck::InternalSwap(ANDPushMsgAck* other) {
  using std::swap;
  smsgid_.Swap(&other->smsgid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nerr_, other->nerr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ANDPushMsgAck::GetTypeName() const {
  return "im.ANDPushMsgAck";
}


// ===================================================================

void ANDNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ANDNotify::kSMsgIdFieldNumber;
const int ANDNotify::kSToIdFieldNumber;
const int ANDNotify::kNErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ANDNotify::ANDNotify()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_im_2epush_2eandroid_2eproto::scc_info_ANDNotify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.ANDNotify)
}
ANDNotify::ANDNotify(const ANDNotify& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.smsgid().size() > 0) {
    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  stoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stoid().size() > 0) {
    stoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stoid_);
  }
  nerr_ = from.nerr_;
  // @@protoc_insertion_point(copy_constructor:im.ANDNotify)
}

void ANDNotify::SharedCtor() {
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
}

ANDNotify::~ANDNotify() {
  // @@protoc_insertion_point(destructor:im.ANDNotify)
  SharedDtor();
}

void ANDNotify::SharedDtor() {
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ANDNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ANDNotify& ANDNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_im_2epush_2eandroid_2eproto::scc_info_ANDNotify.base);
  return *internal_default_instance();
}


void ANDNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:im.ANDNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
  _internal_metadata_.Clear();
}

bool ANDNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:im.ANDNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sMsgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), static_cast<int>(this->smsgid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.ANDNotify.sMsgId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sToId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stoid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stoid().data(), static_cast<int>(this->stoid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.ANDNotify.sToId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .im.ErrCode nErr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nerr(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.ANDNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.ANDNotify)
  return false;
#undef DO_
}

void ANDNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.ANDNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sMsgId = 1;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), static_cast<int>(this->smsgid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.ANDNotify.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->smsgid(), output);
  }

  // string sToId = 2;
  if (this->stoid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stoid().data(), static_cast<int>(this->stoid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.ANDNotify.sToId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stoid(), output);
  }

  // .im.ErrCode nErr = 3;
  if (this->nerr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->nerr(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:im.ANDNotify)
}

size_t ANDNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.ANDNotify)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string sMsgId = 1;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // string sToId = 2;
  if (this->stoid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stoid());
  }

  // .im.ErrCode nErr = 3;
  if (this->nerr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nerr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ANDNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ANDNotify*>(&from));
}

void ANDNotify::MergeFrom(const ANDNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.ANDNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.stoid().size() > 0) {

    stoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stoid_);
  }
  if (from.nerr() != 0) {
    set_nerr(from.nerr());
  }
}

void ANDNotify::CopyFrom(const ANDNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.ANDNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ANDNotify::IsInitialized() const {
  return true;
}

void ANDNotify::Swap(ANDNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ANDNotify::InternalSwap(ANDNotify* other) {
  using std::swap;
  smsgid_.Swap(&other->smsgid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stoid_.Swap(&other->stoid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nerr_, other->nerr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ANDNotify::GetTypeName() const {
  return "im.ANDNotify";
}


// ===================================================================

void ANDNotifyAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ANDNotifyAck::kSMsgIdFieldNumber;
const int ANDNotifyAck::kSToIdFieldNumber;
const int ANDNotifyAck::kNErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ANDNotifyAck::ANDNotifyAck()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_im_2epush_2eandroid_2eproto::scc_info_ANDNotifyAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:im.ANDNotifyAck)
}
ANDNotifyAck::ANDNotifyAck(const ANDNotifyAck& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.smsgid().size() > 0) {
    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  stoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stoid().size() > 0) {
    stoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stoid_);
  }
  nerr_ = from.nerr_;
  // @@protoc_insertion_point(copy_constructor:im.ANDNotifyAck)
}

void ANDNotifyAck::SharedCtor() {
  smsgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
}

ANDNotifyAck::~ANDNotifyAck() {
  // @@protoc_insertion_point(destructor:im.ANDNotifyAck)
  SharedDtor();
}

void ANDNotifyAck::SharedDtor() {
  smsgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ANDNotifyAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ANDNotifyAck& ANDNotifyAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_im_2epush_2eandroid_2eproto::scc_info_ANDNotifyAck.base);
  return *internal_default_instance();
}


void ANDNotifyAck::Clear() {
// @@protoc_insertion_point(message_clear_start:im.ANDNotifyAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nerr_ = 0;
  _internal_metadata_.Clear();
}

bool ANDNotifyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:im.ANDNotifyAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sMsgId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smsgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smsgid().data(), static_cast<int>(this->smsgid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.ANDNotifyAck.sMsgId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sToId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stoid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stoid().data(), static_cast<int>(this->stoid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "im.ANDNotifyAck.sToId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .im.ErrCode nErr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nerr(static_cast< ::im::ErrCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:im.ANDNotifyAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:im.ANDNotifyAck)
  return false;
#undef DO_
}

void ANDNotifyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:im.ANDNotifyAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sMsgId = 1;
  if (this->smsgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smsgid().data(), static_cast<int>(this->smsgid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.ANDNotifyAck.sMsgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->smsgid(), output);
  }

  // string sToId = 2;
  if (this->stoid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stoid().data(), static_cast<int>(this->stoid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "im.ANDNotifyAck.sToId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stoid(), output);
  }

  // .im.ErrCode nErr = 3;
  if (this->nerr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->nerr(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:im.ANDNotifyAck)
}

size_t ANDNotifyAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:im.ANDNotifyAck)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string sMsgId = 1;
  if (this->smsgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smsgid());
  }

  // string sToId = 2;
  if (this->stoid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stoid());
  }

  // .im.ErrCode nErr = 3;
  if (this->nerr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nerr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ANDNotifyAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ANDNotifyAck*>(&from));
}

void ANDNotifyAck::MergeFrom(const ANDNotifyAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:im.ANDNotifyAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.smsgid().size() > 0) {

    smsgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smsgid_);
  }
  if (from.stoid().size() > 0) {

    stoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stoid_);
  }
  if (from.nerr() != 0) {
    set_nerr(from.nerr());
  }
}

void ANDNotifyAck::CopyFrom(const ANDNotifyAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:im.ANDNotifyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ANDNotifyAck::IsInitialized() const {
  return true;
}

void ANDNotifyAck::Swap(ANDNotifyAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ANDNotifyAck::InternalSwap(ANDNotifyAck* other) {
  using std::swap;
  smsgid_.Swap(&other->smsgid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stoid_.Swap(&other->stoid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nerr_, other->nerr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ANDNotifyAck::GetTypeName() const {
  return "im.ANDNotifyAck";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace im
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::im::ANDPushMsg* Arena::CreateMaybeMessage< ::im::ANDPushMsg >(Arena* arena) {
  return Arena::CreateInternal< ::im::ANDPushMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::im::ANDPushMsgAck* Arena::CreateMaybeMessage< ::im::ANDPushMsgAck >(Arena* arena) {
  return Arena::CreateInternal< ::im::ANDPushMsgAck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::im::ANDNotify* Arena::CreateMaybeMessage< ::im::ANDNotify >(Arena* arena) {
  return Arena::CreateInternal< ::im::ANDNotify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::im::ANDNotifyAck* Arena::CreateMaybeMessage< ::im::ANDNotifyAck >(Arena* arena) {
  return Arena::CreateInternal< ::im::ANDNotifyAck >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
