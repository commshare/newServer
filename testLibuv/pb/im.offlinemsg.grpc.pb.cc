// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: im.offlinemsg.proto

#include "im.offlinemsg.pb.h"
#include "im.offlinemsg.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace imofflinemsg {

static const char* OfflineMsgService_method_names[] = {
  "/imofflinemsg.OfflineMsgService/OnOfflineMsg",
};

std::unique_ptr< OfflineMsgService::Stub> OfflineMsgService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OfflineMsgService::Stub> stub(new OfflineMsgService::Stub(channel));
  return stub;
}

OfflineMsgService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_OnOfflineMsg_(OfflineMsgService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OfflineMsgService::Stub::OnOfflineMsg(::grpc::ClientContext* context, const ::imofflinemsg::MESOfflineMsg& request, ::imofflinemsg::MESOfflineMsgAck* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnOfflineMsg_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::imofflinemsg::MESOfflineMsgAck>* OfflineMsgService::Stub::AsyncOnOfflineMsgRaw(::grpc::ClientContext* context, const ::imofflinemsg::MESOfflineMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::imofflinemsg::MESOfflineMsgAck>::Create(channel_.get(), cq, rpcmethod_OnOfflineMsg_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::imofflinemsg::MESOfflineMsgAck>* OfflineMsgService::Stub::PrepareAsyncOnOfflineMsgRaw(::grpc::ClientContext* context, const ::imofflinemsg::MESOfflineMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::imofflinemsg::MESOfflineMsgAck>::Create(channel_.get(), cq, rpcmethod_OnOfflineMsg_, context, request, false);
}

OfflineMsgService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OfflineMsgService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OfflineMsgService::Service, ::imofflinemsg::MESOfflineMsg, ::imofflinemsg::MESOfflineMsgAck>(
          std::mem_fn(&OfflineMsgService::Service::OnOfflineMsg), this)));
}

OfflineMsgService::Service::~Service() {
}

::grpc::Status OfflineMsgService::Service::OnOfflineMsg(::grpc::ServerContext* context, const ::imofflinemsg::MESOfflineMsg* request, ::imofflinemsg::MESOfflineMsgAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace imofflinemsg

