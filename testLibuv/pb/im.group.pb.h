// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.group.proto

#ifndef PROTOBUF_INCLUDED_im_2egroup_2eproto
#define PROTOBUF_INCLUDED_im_2egroup_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "im.pub.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_im_2egroup_2eproto 

namespace protobuf_im_2egroup_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[26];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_im_2egroup_2eproto
namespace im {
class GroupApply;
class GroupApplyDefaultTypeInternal;
extern GroupApplyDefaultTypeInternal _GroupApply_default_instance_;
class GroupApplyAck;
class GroupApplyAckDefaultTypeInternal;
extern GroupApplyAckDefaultTypeInternal _GroupApplyAck_default_instance_;
class GroupChat;
class GroupChatDefaultTypeInternal;
extern GroupChatDefaultTypeInternal _GroupChat_default_instance_;
class GroupChatAck;
class GroupChatAckDefaultTypeInternal;
extern GroupChatAckDefaultTypeInternal _GroupChatAck_default_instance_;
class GroupChatCancel;
class GroupChatCancelDefaultTypeInternal;
extern GroupChatCancelDefaultTypeInternal _GroupChatCancel_default_instance_;
class GroupChatCancelAck;
class GroupChatCancelAckDefaultTypeInternal;
extern GroupChatCancelAckDefaultTypeInternal _GroupChatCancelAck_default_instance_;
class GroupCreate;
class GroupCreateDefaultTypeInternal;
extern GroupCreateDefaultTypeInternal _GroupCreate_default_instance_;
class GroupCreateAck;
class GroupCreateAckDefaultTypeInternal;
extern GroupCreateAckDefaultTypeInternal _GroupCreateAck_default_instance_;
class GroupInfo;
class GroupInfoDefaultTypeInternal;
extern GroupInfoDefaultTypeInternal _GroupInfo_default_instance_;
class GroupInvite;
class GroupInviteDefaultTypeInternal;
extern GroupInviteDefaultTypeInternal _GroupInvite_default_instance_;
class GroupInviteAck;
class GroupInviteAckDefaultTypeInternal;
extern GroupInviteAckDefaultTypeInternal _GroupInviteAck_default_instance_;
class GroupKickOut;
class GroupKickOutDefaultTypeInternal;
extern GroupKickOutDefaultTypeInternal _GroupKickOut_default_instance_;
class GroupKickoutAck;
class GroupKickoutAckDefaultTypeInternal;
extern GroupKickoutAckDefaultTypeInternal _GroupKickoutAck_default_instance_;
class GroupMember;
class GroupMemberDefaultTypeInternal;
extern GroupMemberDefaultTypeInternal _GroupMember_default_instance_;
class GroupMemberAck;
class GroupMemberAckDefaultTypeInternal;
extern GroupMemberAckDefaultTypeInternal _GroupMemberAck_default_instance_;
class GroupModify;
class GroupModifyDefaultTypeInternal;
extern GroupModifyDefaultTypeInternal _GroupModify_default_instance_;
class GroupModifyAck;
class GroupModifyAckDefaultTypeInternal;
extern GroupModifyAckDefaultTypeInternal _GroupModifyAck_default_instance_;
class GroupNotify;
class GroupNotifyDefaultTypeInternal;
extern GroupNotifyDefaultTypeInternal _GroupNotify_default_instance_;
class GroupNotifyAck;
class GroupNotifyAckDefaultTypeInternal;
extern GroupNotifyAckDefaultTypeInternal _GroupNotifyAck_default_instance_;
class GroupPermit;
class GroupPermitDefaultTypeInternal;
extern GroupPermitDefaultTypeInternal _GroupPermit_default_instance_;
class GroupPermitAck;
class GroupPermitAckDefaultTypeInternal;
extern GroupPermitAckDefaultTypeInternal _GroupPermitAck_default_instance_;
class GroupQuery;
class GroupQueryDefaultTypeInternal;
extern GroupQueryDefaultTypeInternal _GroupQuery_default_instance_;
class GroupQuit;
class GroupQuitDefaultTypeInternal;
extern GroupQuitDefaultTypeInternal _GroupQuit_default_instance_;
class GroupQuitAck;
class GroupQuitAckDefaultTypeInternal;
extern GroupQuitAckDefaultTypeInternal _GroupQuitAck_default_instance_;
class Member;
class MemberDefaultTypeInternal;
extern MemberDefaultTypeInternal _Member_default_instance_;
class UserGroupQueryRsp;
class UserGroupQueryRspDefaultTypeInternal;
extern UserGroupQueryRspDefaultTypeInternal _UserGroupQueryRsp_default_instance_;
}  // namespace im
namespace google {
namespace protobuf {
template<> ::im::GroupApply* Arena::CreateMaybeMessage<::im::GroupApply>(Arena*);
template<> ::im::GroupApplyAck* Arena::CreateMaybeMessage<::im::GroupApplyAck>(Arena*);
template<> ::im::GroupChat* Arena::CreateMaybeMessage<::im::GroupChat>(Arena*);
template<> ::im::GroupChatAck* Arena::CreateMaybeMessage<::im::GroupChatAck>(Arena*);
template<> ::im::GroupChatCancel* Arena::CreateMaybeMessage<::im::GroupChatCancel>(Arena*);
template<> ::im::GroupChatCancelAck* Arena::CreateMaybeMessage<::im::GroupChatCancelAck>(Arena*);
template<> ::im::GroupCreate* Arena::CreateMaybeMessage<::im::GroupCreate>(Arena*);
template<> ::im::GroupCreateAck* Arena::CreateMaybeMessage<::im::GroupCreateAck>(Arena*);
template<> ::im::GroupInfo* Arena::CreateMaybeMessage<::im::GroupInfo>(Arena*);
template<> ::im::GroupInvite* Arena::CreateMaybeMessage<::im::GroupInvite>(Arena*);
template<> ::im::GroupInviteAck* Arena::CreateMaybeMessage<::im::GroupInviteAck>(Arena*);
template<> ::im::GroupKickOut* Arena::CreateMaybeMessage<::im::GroupKickOut>(Arena*);
template<> ::im::GroupKickoutAck* Arena::CreateMaybeMessage<::im::GroupKickoutAck>(Arena*);
template<> ::im::GroupMember* Arena::CreateMaybeMessage<::im::GroupMember>(Arena*);
template<> ::im::GroupMemberAck* Arena::CreateMaybeMessage<::im::GroupMemberAck>(Arena*);
template<> ::im::GroupModify* Arena::CreateMaybeMessage<::im::GroupModify>(Arena*);
template<> ::im::GroupModifyAck* Arena::CreateMaybeMessage<::im::GroupModifyAck>(Arena*);
template<> ::im::GroupNotify* Arena::CreateMaybeMessage<::im::GroupNotify>(Arena*);
template<> ::im::GroupNotifyAck* Arena::CreateMaybeMessage<::im::GroupNotifyAck>(Arena*);
template<> ::im::GroupPermit* Arena::CreateMaybeMessage<::im::GroupPermit>(Arena*);
template<> ::im::GroupPermitAck* Arena::CreateMaybeMessage<::im::GroupPermitAck>(Arena*);
template<> ::im::GroupQuery* Arena::CreateMaybeMessage<::im::GroupQuery>(Arena*);
template<> ::im::GroupQuit* Arena::CreateMaybeMessage<::im::GroupQuit>(Arena*);
template<> ::im::GroupQuitAck* Arena::CreateMaybeMessage<::im::GroupQuitAck>(Arena*);
template<> ::im::Member* Arena::CreateMaybeMessage<::im::Member>(Arena*);
template<> ::im::UserGroupQueryRsp* Arena::CreateMaybeMessage<::im::UserGroupQueryRsp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace im {

// ===================================================================

class GroupChat : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupChat) */ {
 public:
  GroupChat();
  virtual ~GroupChat();

  GroupChat(const GroupChat& from);

  inline GroupChat& operator=(const GroupChat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupChat(GroupChat&& from) noexcept
    : GroupChat() {
    *this = ::std::move(from);
  }

  inline GroupChat& operator=(GroupChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupChat* internal_default_instance() {
    return reinterpret_cast<const GroupChat*>(
               &_GroupChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GroupChat* other);
  friend void swap(GroupChat& a, GroupChat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupChat* New() const final {
    return CreateMaybeMessage<GroupChat>(NULL);
  }

  GroupChat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupChat>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupChat& from);
  void MergeFrom(const GroupChat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupChat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sNotifyUsers = 4;
  int snotifyusers_size() const;
  void clear_snotifyusers();
  static const int kSNotifyUsersFieldNumber = 4;
  const ::std::string& snotifyusers(int index) const;
  ::std::string* mutable_snotifyusers(int index);
  void set_snotifyusers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_snotifyusers(int index, ::std::string&& value);
  #endif
  void set_snotifyusers(int index, const char* value);
  void set_snotifyusers(int index, const char* value, size_t size);
  ::std::string* add_snotifyusers();
  void add_snotifyusers(const ::std::string& value);
  #if LANG_CXX11
  void add_snotifyusers(::std::string&& value);
  #endif
  void add_snotifyusers(const char* value);
  void add_snotifyusers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& snotifyusers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_snotifyusers();

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sGroupId = 2;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 2;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // string sMsgId = 5;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 5;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sContent = 8;
  void clear_scontent();
  static const int kSContentFieldNumber = 8;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // uint32 nNotifyCount = 3;
  void clear_nnotifycount();
  static const int kNNotifyCountFieldNumber = 3;
  ::google::protobuf::uint32 nnotifycount() const;
  void set_nnotifycount(::google::protobuf::uint32 value);

  // uint32 encrypt = 7;
  void clear_encrypt();
  static const int kEncryptFieldNumber = 7;
  ::google::protobuf::uint32 encrypt() const;
  void set_encrypt(::google::protobuf::uint32 value);

  // uint64 msgTime = 6;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 6;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:im.GroupChat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> snotifyusers_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::uint32 nnotifycount_;
  ::google::protobuf::uint32 encrypt_;
  ::google::protobuf::uint64 msgtime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupChatAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupChatAck) */ {
 public:
  GroupChatAck();
  virtual ~GroupChatAck();

  GroupChatAck(const GroupChatAck& from);

  inline GroupChatAck& operator=(const GroupChatAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupChatAck(GroupChatAck&& from) noexcept
    : GroupChatAck() {
    *this = ::std::move(from);
  }

  inline GroupChatAck& operator=(GroupChatAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupChatAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupChatAck* internal_default_instance() {
    return reinterpret_cast<const GroupChatAck*>(
               &_GroupChatAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GroupChatAck* other);
  friend void swap(GroupChatAck& a, GroupChatAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupChatAck* New() const final {
    return CreateMaybeMessage<GroupChatAck>(NULL);
  }

  GroupChatAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupChatAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupChatAck& from);
  void MergeFrom(const GroupChatAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupChatAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sGroupId = 2;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 2;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // uint64 sendtime = 4;
  void clear_sendtime();
  static const int kSendtimeFieldNumber = 4;
  ::google::protobuf::uint64 sendtime() const;
  void set_sendtime(::google::protobuf::uint64 value);

  // .im.ErrCode errcode = 5;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 5;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.GroupChatAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::uint64 sendtime_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupCreate : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupCreate) */ {
 public:
  GroupCreate();
  virtual ~GroupCreate();

  GroupCreate(const GroupCreate& from);

  inline GroupCreate& operator=(const GroupCreate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupCreate(GroupCreate&& from) noexcept
    : GroupCreate() {
    *this = ::std::move(from);
  }

  inline GroupCreate& operator=(GroupCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupCreate* internal_default_instance() {
    return reinterpret_cast<const GroupCreate*>(
               &_GroupCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GroupCreate* other);
  friend void swap(GroupCreate& a, GroupCreate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupCreate* New() const final {
    return CreateMaybeMessage<GroupCreate>(NULL);
  }

  GroupCreate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupCreate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupCreate& from);
  void MergeFrom(const GroupCreate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupCreate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sInviteUserIds = 8;
  int sinviteuserids_size() const;
  void clear_sinviteuserids();
  static const int kSInviteUserIdsFieldNumber = 8;
  const ::std::string& sinviteuserids(int index) const;
  ::std::string* mutable_sinviteuserids(int index);
  void set_sinviteuserids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_sinviteuserids(int index, ::std::string&& value);
  #endif
  void set_sinviteuserids(int index, const char* value);
  void set_sinviteuserids(int index, const char* value, size_t size);
  ::std::string* add_sinviteuserids();
  void add_sinviteuserids(const ::std::string& value);
  #if LANG_CXX11
  void add_sinviteuserids(::std::string&& value);
  #endif
  void add_sinviteuserids(const char* value);
  void add_sinviteuserids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sinviteuserids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sinviteuserids();

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sName = 2;
  void clear_sname();
  static const int kSNameFieldNumber = 2;
  const ::std::string& sname() const;
  void set_sname(const ::std::string& value);
  #if LANG_CXX11
  void set_sname(::std::string&& value);
  #endif
  void set_sname(const char* value);
  void set_sname(const char* value, size_t size);
  ::std::string* mutable_sname();
  ::std::string* release_sname();
  void set_allocated_sname(::std::string* sname);

  // string sRemarks = 3;
  void clear_sremarks();
  static const int kSRemarksFieldNumber = 3;
  const ::std::string& sremarks() const;
  void set_sremarks(const ::std::string& value);
  #if LANG_CXX11
  void set_sremarks(::std::string&& value);
  #endif
  void set_sremarks(const char* value);
  void set_sremarks(const char* value, size_t size);
  ::std::string* mutable_sremarks();
  ::std::string* release_sremarks();
  void set_allocated_sremarks(::std::string* sremarks);

  // string sMsgId = 4;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 4;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sGrpAvatar = 9;
  void clear_sgrpavatar();
  static const int kSGrpAvatarFieldNumber = 9;
  const ::std::string& sgrpavatar() const;
  void set_sgrpavatar(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpavatar(::std::string&& value);
  #endif
  void set_sgrpavatar(const char* value);
  void set_sgrpavatar(const char* value, size_t size);
  ::std::string* mutable_sgrpavatar();
  ::std::string* release_sgrpavatar();
  void set_allocated_sgrpavatar(::std::string* sgrpavatar);

  // string extend = 10;
  void clear_extend();
  static const int kExtendFieldNumber = 10;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint32 nPermission = 5;
  void clear_npermission();
  static const int kNPermissionFieldNumber = 5;
  ::google::protobuf::uint32 npermission() const;
  void set_npermission(::google::protobuf::uint32 value);

  // uint32 nCreateType = 6;
  void clear_ncreatetype();
  static const int kNCreateTypeFieldNumber = 6;
  ::google::protobuf::uint32 ncreatetype() const;
  void set_ncreatetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.GroupCreate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sinviteuserids_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sname_;
  ::google::protobuf::internal::ArenaStringPtr sremarks_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpavatar_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint32 npermission_;
  ::google::protobuf::uint32 ncreatetype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupCreateAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupCreateAck) */ {
 public:
  GroupCreateAck();
  virtual ~GroupCreateAck();

  GroupCreateAck(const GroupCreateAck& from);

  inline GroupCreateAck& operator=(const GroupCreateAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupCreateAck(GroupCreateAck&& from) noexcept
    : GroupCreateAck() {
    *this = ::std::move(from);
  }

  inline GroupCreateAck& operator=(GroupCreateAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupCreateAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupCreateAck* internal_default_instance() {
    return reinterpret_cast<const GroupCreateAck*>(
               &_GroupCreateAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GroupCreateAck* other);
  friend void swap(GroupCreateAck& a, GroupCreateAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupCreateAck* New() const final {
    return CreateMaybeMessage<GroupCreateAck>(NULL);
  }

  GroupCreateAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupCreateAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupCreateAck& from);
  void MergeFrom(const GroupCreateAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupCreateAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sGroupId = 2;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 2;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // uint64 msgTime = 5;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 5;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // .im.ErrCode errcode = 4;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 4;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.GroupCreateAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::uint64 msgtime_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupQuery : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupQuery) */ {
 public:
  GroupQuery();
  virtual ~GroupQuery();

  GroupQuery(const GroupQuery& from);

  inline GroupQuery& operator=(const GroupQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupQuery(GroupQuery&& from) noexcept
    : GroupQuery() {
    *this = ::std::move(from);
  }

  inline GroupQuery& operator=(GroupQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupQuery* internal_default_instance() {
    return reinterpret_cast<const GroupQuery*>(
               &_GroupQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GroupQuery* other);
  friend void swap(GroupQuery& a, GroupQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupQuery* New() const final {
    return CreateMaybeMessage<GroupQuery>(NULL);
  }

  GroupQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupQuery>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupQuery& from);
  void MergeFrom(const GroupQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sKey = 3;
  void clear_skey();
  static const int kSKeyFieldNumber = 3;
  const ::std::string& skey() const;
  void set_skey(const ::std::string& value);
  #if LANG_CXX11
  void set_skey(::std::string&& value);
  #endif
  void set_skey(const char* value);
  void set_skey(const char* value, size_t size);
  ::std::string* mutable_skey();
  ::std::string* release_skey();
  void set_allocated_skey(::std::string* skey);

  // uint32 nQueryType = 2;
  void clear_nquerytype();
  static const int kNQueryTypeFieldNumber = 2;
  ::google::protobuf::uint32 nquerytype() const;
  void set_nquerytype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.GroupQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr skey_;
  ::google::protobuf::uint32 nquerytype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserGroupQueryRsp : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.UserGroupQueryRsp) */ {
 public:
  UserGroupQueryRsp();
  virtual ~UserGroupQueryRsp();

  UserGroupQueryRsp(const UserGroupQueryRsp& from);

  inline UserGroupQueryRsp& operator=(const UserGroupQueryRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserGroupQueryRsp(UserGroupQueryRsp&& from) noexcept
    : UserGroupQueryRsp() {
    *this = ::std::move(from);
  }

  inline UserGroupQueryRsp& operator=(UserGroupQueryRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const UserGroupQueryRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserGroupQueryRsp* internal_default_instance() {
    return reinterpret_cast<const UserGroupQueryRsp*>(
               &_UserGroupQueryRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(UserGroupQueryRsp* other);
  friend void swap(UserGroupQueryRsp& a, UserGroupQueryRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserGroupQueryRsp* New() const final {
    return CreateMaybeMessage<UserGroupQueryRsp>(NULL);
  }

  UserGroupQueryRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserGroupQueryRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const UserGroupQueryRsp& from);
  void MergeFrom(const UserGroupQueryRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserGroupQueryRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .im.GroupInfo lsGroupInfo = 2;
  int lsgroupinfo_size() const;
  void clear_lsgroupinfo();
  static const int kLsGroupInfoFieldNumber = 2;
  ::im::GroupInfo* mutable_lsgroupinfo(int index);
  ::google::protobuf::RepeatedPtrField< ::im::GroupInfo >*
      mutable_lsgroupinfo();
  const ::im::GroupInfo& lsgroupinfo(int index) const;
  ::im::GroupInfo* add_lsgroupinfo();
  const ::google::protobuf::RepeatedPtrField< ::im::GroupInfo >&
      lsgroupinfo() const;

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // .im.ErrCode errcode = 3;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.UserGroupQueryRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::im::GroupInfo > lsgroupinfo_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupApply : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupApply) */ {
 public:
  GroupApply();
  virtual ~GroupApply();

  GroupApply(const GroupApply& from);

  inline GroupApply& operator=(const GroupApply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupApply(GroupApply&& from) noexcept
    : GroupApply() {
    *this = ::std::move(from);
  }

  inline GroupApply& operator=(GroupApply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupApply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupApply* internal_default_instance() {
    return reinterpret_cast<const GroupApply*>(
               &_GroupApply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GroupApply* other);
  friend void swap(GroupApply& a, GroupApply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupApply* New() const final {
    return CreateMaybeMessage<GroupApply>(NULL);
  }

  GroupApply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupApply>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupApply& from);
  void MergeFrom(const GroupApply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupApply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sGroupId = 2;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 2;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sRemark = 4;
  void clear_sremark();
  static const int kSRemarkFieldNumber = 4;
  const ::std::string& sremark() const;
  void set_sremark(const ::std::string& value);
  #if LANG_CXX11
  void set_sremark(::std::string&& value);
  #endif
  void set_sremark(const char* value);
  void set_sremark(const char* value, size_t size);
  ::std::string* mutable_sremark();
  ::std::string* release_sremark();
  void set_allocated_sremark(::std::string* sremark);

  // string extend = 5;
  void clear_extend();
  static const int kExtendFieldNumber = 5;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint32 applyType = 6;
  void clear_applytype();
  static const int kApplyTypeFieldNumber = 6;
  ::google::protobuf::uint32 applytype() const;
  void set_applytype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.GroupApply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr sremark_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint32 applytype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupApplyAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupApplyAck) */ {
 public:
  GroupApplyAck();
  virtual ~GroupApplyAck();

  GroupApplyAck(const GroupApplyAck& from);

  inline GroupApplyAck& operator=(const GroupApplyAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupApplyAck(GroupApplyAck&& from) noexcept
    : GroupApplyAck() {
    *this = ::std::move(from);
  }

  inline GroupApplyAck& operator=(GroupApplyAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupApplyAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupApplyAck* internal_default_instance() {
    return reinterpret_cast<const GroupApplyAck*>(
               &_GroupApplyAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GroupApplyAck* other);
  friend void swap(GroupApplyAck& a, GroupApplyAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupApplyAck* New() const final {
    return CreateMaybeMessage<GroupApplyAck>(NULL);
  }

  GroupApplyAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupApplyAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupApplyAck& from);
  void MergeFrom(const GroupApplyAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupApplyAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sGroupId = 2;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 2;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 4;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 4;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.GroupApplyAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupInvite : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupInvite) */ {
 public:
  GroupInvite();
  virtual ~GroupInvite();

  GroupInvite(const GroupInvite& from);

  inline GroupInvite& operator=(const GroupInvite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupInvite(GroupInvite&& from) noexcept
    : GroupInvite() {
    *this = ::std::move(from);
  }

  inline GroupInvite& operator=(GroupInvite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupInvite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupInvite* internal_default_instance() {
    return reinterpret_cast<const GroupInvite*>(
               &_GroupInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GroupInvite* other);
  friend void swap(GroupInvite& a, GroupInvite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupInvite* New() const final {
    return CreateMaybeMessage<GroupInvite>(NULL);
  }

  GroupInvite* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupInvite>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupInvite& from);
  void MergeFrom(const GroupInvite& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupInvite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sInviteeIds = 2;
  int sinviteeids_size() const;
  void clear_sinviteeids();
  static const int kSInviteeIdsFieldNumber = 2;
  const ::std::string& sinviteeids(int index) const;
  ::std::string* mutable_sinviteeids(int index);
  void set_sinviteeids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_sinviteeids(int index, ::std::string&& value);
  #endif
  void set_sinviteeids(int index, const char* value);
  void set_sinviteeids(int index, const char* value, size_t size);
  ::std::string* add_sinviteeids();
  void add_sinviteeids(const ::std::string& value);
  #if LANG_CXX11
  void add_sinviteeids(::std::string&& value);
  #endif
  void add_sinviteeids(const char* value);
  void add_sinviteeids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sinviteeids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sinviteeids();

  // string sInviterId = 1;
  void clear_sinviterid();
  static const int kSInviterIdFieldNumber = 1;
  const ::std::string& sinviterid() const;
  void set_sinviterid(const ::std::string& value);
  #if LANG_CXX11
  void set_sinviterid(::std::string&& value);
  #endif
  void set_sinviterid(const char* value);
  void set_sinviterid(const char* value, size_t size);
  ::std::string* mutable_sinviterid();
  ::std::string* release_sinviterid();
  void set_allocated_sinviterid(::std::string* sinviterid);

  // string sGroupId = 3;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 3;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // string sMsgId = 4;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 4;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sRemark = 5;
  void clear_sremark();
  static const int kSRemarkFieldNumber = 5;
  const ::std::string& sremark() const;
  void set_sremark(const ::std::string& value);
  #if LANG_CXX11
  void set_sremark(::std::string&& value);
  #endif
  void set_sremark(const char* value);
  void set_sremark(const char* value, size_t size);
  ::std::string* mutable_sremark();
  ::std::string* release_sremark();
  void set_allocated_sremark(::std::string* sremark);

  // string extend = 6;
  void clear_extend();
  static const int kExtendFieldNumber = 6;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // @@protoc_insertion_point(class_scope:im.GroupInvite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sinviteeids_;
  ::google::protobuf::internal::ArenaStringPtr sinviterid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr sremark_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupInviteAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupInviteAck) */ {
 public:
  GroupInviteAck();
  virtual ~GroupInviteAck();

  GroupInviteAck(const GroupInviteAck& from);

  inline GroupInviteAck& operator=(const GroupInviteAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupInviteAck(GroupInviteAck&& from) noexcept
    : GroupInviteAck() {
    *this = ::std::move(from);
  }

  inline GroupInviteAck& operator=(GroupInviteAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupInviteAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupInviteAck* internal_default_instance() {
    return reinterpret_cast<const GroupInviteAck*>(
               &_GroupInviteAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GroupInviteAck* other);
  friend void swap(GroupInviteAck& a, GroupInviteAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupInviteAck* New() const final {
    return CreateMaybeMessage<GroupInviteAck>(NULL);
  }

  GroupInviteAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupInviteAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupInviteAck& from);
  void MergeFrom(const GroupInviteAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupInviteAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sGroupId = 2;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 2;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 4;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 4;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.GroupInviteAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupMember : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupMember) */ {
 public:
  GroupMember();
  virtual ~GroupMember();

  GroupMember(const GroupMember& from);

  inline GroupMember& operator=(const GroupMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupMember(GroupMember&& from) noexcept
    : GroupMember() {
    *this = ::std::move(from);
  }

  inline GroupMember& operator=(GroupMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupMember* internal_default_instance() {
    return reinterpret_cast<const GroupMember*>(
               &_GroupMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GroupMember* other);
  friend void swap(GroupMember& a, GroupMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupMember* New() const final {
    return CreateMaybeMessage<GroupMember>(NULL);
  }

  GroupMember* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupMember>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupMember& from);
  void MergeFrom(const GroupMember& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sGroupId = 2;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 2;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // uint32 nPageIndex = 3;
  void clear_npageindex();
  static const int kNPageIndexFieldNumber = 3;
  ::google::protobuf::uint32 npageindex() const;
  void set_npageindex(::google::protobuf::uint32 value);

  // uint32 nPageCount = 4;
  void clear_npagecount();
  static const int kNPageCountFieldNumber = 4;
  ::google::protobuf::uint32 npagecount() const;
  void set_npagecount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.GroupMember)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::uint32 npageindex_;
  ::google::protobuf::uint32 npagecount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupMemberAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupMemberAck) */ {
 public:
  GroupMemberAck();
  virtual ~GroupMemberAck();

  GroupMemberAck(const GroupMemberAck& from);

  inline GroupMemberAck& operator=(const GroupMemberAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupMemberAck(GroupMemberAck&& from) noexcept
    : GroupMemberAck() {
    *this = ::std::move(from);
  }

  inline GroupMemberAck& operator=(GroupMemberAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupMemberAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupMemberAck* internal_default_instance() {
    return reinterpret_cast<const GroupMemberAck*>(
               &_GroupMemberAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(GroupMemberAck* other);
  friend void swap(GroupMemberAck& a, GroupMemberAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupMemberAck* New() const final {
    return CreateMaybeMessage<GroupMemberAck>(NULL);
  }

  GroupMemberAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupMemberAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupMemberAck& from);
  void MergeFrom(const GroupMemberAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupMemberAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .im.Member members = 4;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 4;
  ::im::Member* mutable_members(int index);
  ::google::protobuf::RepeatedPtrField< ::im::Member >*
      mutable_members();
  const ::im::Member& members(int index) const;
  ::im::Member* add_members();
  const ::google::protobuf::RepeatedPtrField< ::im::Member >&
      members() const;

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sGroupId = 2;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 2;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // uint32 nPageIndex = 3;
  void clear_npageindex();
  static const int kNPageIndexFieldNumber = 3;
  ::google::protobuf::uint32 npageindex() const;
  void set_npageindex(::google::protobuf::uint32 value);

  // .im.ErrCode errcode = 5;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 5;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.GroupMemberAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::im::Member > members_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::uint32 npageindex_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupKickOut : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupKickOut) */ {
 public:
  GroupKickOut();
  virtual ~GroupKickOut();

  GroupKickOut(const GroupKickOut& from);

  inline GroupKickOut& operator=(const GroupKickOut& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupKickOut(GroupKickOut&& from) noexcept
    : GroupKickOut() {
    *this = ::std::move(from);
  }

  inline GroupKickOut& operator=(GroupKickOut&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupKickOut& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupKickOut* internal_default_instance() {
    return reinterpret_cast<const GroupKickOut*>(
               &_GroupKickOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(GroupKickOut* other);
  friend void swap(GroupKickOut& a, GroupKickOut& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupKickOut* New() const final {
    return CreateMaybeMessage<GroupKickOut>(NULL);
  }

  GroupKickOut* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupKickOut>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupKickOut& from);
  void MergeFrom(const GroupKickOut& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupKickOut* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sKickId = 2;
  void clear_skickid();
  static const int kSKickIdFieldNumber = 2;
  const ::std::string& skickid() const;
  void set_skickid(const ::std::string& value);
  #if LANG_CXX11
  void set_skickid(::std::string&& value);
  #endif
  void set_skickid(const char* value);
  void set_skickid(const char* value, size_t size);
  ::std::string* mutable_skickid();
  ::std::string* release_skickid();
  void set_allocated_skickid(::std::string* skickid);

  // string sGroupId = 3;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 3;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // string sMsgId = 4;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 4;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string extend = 5;
  void clear_extend();
  static const int kExtendFieldNumber = 5;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // @@protoc_insertion_point(class_scope:im.GroupKickOut)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr skickid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupKickoutAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupKickoutAck) */ {
 public:
  GroupKickoutAck();
  virtual ~GroupKickoutAck();

  GroupKickoutAck(const GroupKickoutAck& from);

  inline GroupKickoutAck& operator=(const GroupKickoutAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupKickoutAck(GroupKickoutAck&& from) noexcept
    : GroupKickoutAck() {
    *this = ::std::move(from);
  }

  inline GroupKickoutAck& operator=(GroupKickoutAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupKickoutAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupKickoutAck* internal_default_instance() {
    return reinterpret_cast<const GroupKickoutAck*>(
               &_GroupKickoutAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(GroupKickoutAck* other);
  friend void swap(GroupKickoutAck& a, GroupKickoutAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupKickoutAck* New() const final {
    return CreateMaybeMessage<GroupKickoutAck>(NULL);
  }

  GroupKickoutAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupKickoutAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupKickoutAck& from);
  void MergeFrom(const GroupKickoutAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupKickoutAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sMsgId = 2;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 2;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 3;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.GroupKickoutAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupQuit : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupQuit) */ {
 public:
  GroupQuit();
  virtual ~GroupQuit();

  GroupQuit(const GroupQuit& from);

  inline GroupQuit& operator=(const GroupQuit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupQuit(GroupQuit&& from) noexcept
    : GroupQuit() {
    *this = ::std::move(from);
  }

  inline GroupQuit& operator=(GroupQuit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupQuit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupQuit* internal_default_instance() {
    return reinterpret_cast<const GroupQuit*>(
               &_GroupQuit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(GroupQuit* other);
  friend void swap(GroupQuit& a, GroupQuit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupQuit* New() const final {
    return CreateMaybeMessage<GroupQuit>(NULL);
  }

  GroupQuit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupQuit>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupQuit& from);
  void MergeFrom(const GroupQuit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupQuit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sGroupId = 2;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 2;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string extend = 4;
  void clear_extend();
  static const int kExtendFieldNumber = 4;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // @@protoc_insertion_point(class_scope:im.GroupQuit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupQuitAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupQuitAck) */ {
 public:
  GroupQuitAck();
  virtual ~GroupQuitAck();

  GroupQuitAck(const GroupQuitAck& from);

  inline GroupQuitAck& operator=(const GroupQuitAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupQuitAck(GroupQuitAck&& from) noexcept
    : GroupQuitAck() {
    *this = ::std::move(from);
  }

  inline GroupQuitAck& operator=(GroupQuitAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupQuitAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupQuitAck* internal_default_instance() {
    return reinterpret_cast<const GroupQuitAck*>(
               &_GroupQuitAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(GroupQuitAck* other);
  friend void swap(GroupQuitAck& a, GroupQuitAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupQuitAck* New() const final {
    return CreateMaybeMessage<GroupQuitAck>(NULL);
  }

  GroupQuitAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupQuitAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupQuitAck& from);
  void MergeFrom(const GroupQuitAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupQuitAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sGroupId = 2;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 2;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 4;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 4;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.GroupQuitAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupModify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupModify) */ {
 public:
  GroupModify();
  virtual ~GroupModify();

  GroupModify(const GroupModify& from);

  inline GroupModify& operator=(const GroupModify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupModify(GroupModify&& from) noexcept
    : GroupModify() {
    *this = ::std::move(from);
  }

  inline GroupModify& operator=(GroupModify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupModify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupModify* internal_default_instance() {
    return reinterpret_cast<const GroupModify*>(
               &_GroupModify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(GroupModify* other);
  friend void swap(GroupModify& a, GroupModify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupModify* New() const final {
    return CreateMaybeMessage<GroupModify>(NULL);
  }

  GroupModify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupModify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupModify& from);
  void MergeFrom(const GroupModify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupModify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sGroupId = 2;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 2;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // string sInvolvedId = 3;
  void clear_sinvolvedid();
  static const int kSInvolvedIdFieldNumber = 3;
  const ::std::string& sinvolvedid() const;
  void set_sinvolvedid(const ::std::string& value);
  #if LANG_CXX11
  void set_sinvolvedid(::std::string&& value);
  #endif
  void set_sinvolvedid(const char* value);
  void set_sinvolvedid(const char* value, size_t size);
  ::std::string* mutable_sinvolvedid();
  ::std::string* release_sinvolvedid();
  void set_allocated_sinvolvedid(::std::string* sinvolvedid);

  // string sMsgId = 4;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 4;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sContent = 6;
  void clear_scontent();
  static const int kSContentFieldNumber = 6;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // .im.NotifyType nModifyType = 5;
  void clear_nmodifytype();
  static const int kNModifyTypeFieldNumber = 5;
  ::im::NotifyType nmodifytype() const;
  void set_nmodifytype(::im::NotifyType value);

  // @@protoc_insertion_point(class_scope:im.GroupModify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::internal::ArenaStringPtr sinvolvedid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  int nmodifytype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupModifyAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupModifyAck) */ {
 public:
  GroupModifyAck();
  virtual ~GroupModifyAck();

  GroupModifyAck(const GroupModifyAck& from);

  inline GroupModifyAck& operator=(const GroupModifyAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupModifyAck(GroupModifyAck&& from) noexcept
    : GroupModifyAck() {
    *this = ::std::move(from);
  }

  inline GroupModifyAck& operator=(GroupModifyAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupModifyAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupModifyAck* internal_default_instance() {
    return reinterpret_cast<const GroupModifyAck*>(
               &_GroupModifyAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(GroupModifyAck* other);
  friend void swap(GroupModifyAck& a, GroupModifyAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupModifyAck* New() const final {
    return CreateMaybeMessage<GroupModifyAck>(NULL);
  }

  GroupModifyAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupModifyAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupModifyAck& from);
  void MergeFrom(const GroupModifyAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupModifyAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sGroupId = 2;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 2;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 4;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 4;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.GroupModifyAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupNotify) */ {
 public:
  GroupNotify();
  virtual ~GroupNotify();

  GroupNotify(const GroupNotify& from);

  inline GroupNotify& operator=(const GroupNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupNotify(GroupNotify&& from) noexcept
    : GroupNotify() {
    *this = ::std::move(from);
  }

  inline GroupNotify& operator=(GroupNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupNotify* internal_default_instance() {
    return reinterpret_cast<const GroupNotify*>(
               &_GroupNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(GroupNotify* other);
  friend void swap(GroupNotify& a, GroupNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupNotify* New() const final {
    return CreateMaybeMessage<GroupNotify>(NULL);
  }

  GroupNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupNotify& from);
  void MergeFrom(const GroupNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sGroupId = 2;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 2;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sContent = 5;
  void clear_scontent();
  static const int kSContentFieldNumber = 5;
  const ::std::string& scontent() const;
  void set_scontent(const ::std::string& value);
  #if LANG_CXX11
  void set_scontent(::std::string&& value);
  #endif
  void set_scontent(const char* value);
  void set_scontent(const char* value, size_t size);
  ::std::string* mutable_scontent();
  ::std::string* release_scontent();
  void set_allocated_scontent(::std::string* scontent);

  // uint32 nNotifyType = 4;
  void clear_nnotifytype();
  static const int kNNotifyTypeFieldNumber = 4;
  ::google::protobuf::uint32 nnotifytype() const;
  void set_nnotifytype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:im.GroupNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr scontent_;
  ::google::protobuf::uint32 nnotifytype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupNotifyAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupNotifyAck) */ {
 public:
  GroupNotifyAck();
  virtual ~GroupNotifyAck();

  GroupNotifyAck(const GroupNotifyAck& from);

  inline GroupNotifyAck& operator=(const GroupNotifyAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupNotifyAck(GroupNotifyAck&& from) noexcept
    : GroupNotifyAck() {
    *this = ::std::move(from);
  }

  inline GroupNotifyAck& operator=(GroupNotifyAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupNotifyAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupNotifyAck* internal_default_instance() {
    return reinterpret_cast<const GroupNotifyAck*>(
               &_GroupNotifyAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(GroupNotifyAck* other);
  friend void swap(GroupNotifyAck& a, GroupNotifyAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupNotifyAck* New() const final {
    return CreateMaybeMessage<GroupNotifyAck>(NULL);
  }

  GroupNotifyAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupNotifyAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupNotifyAck& from);
  void MergeFrom(const GroupNotifyAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupNotifyAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sGroupId = 2;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 2;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 4;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 4;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.GroupNotifyAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupPermit : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupPermit) */ {
 public:
  GroupPermit();
  virtual ~GroupPermit();

  GroupPermit(const GroupPermit& from);

  inline GroupPermit& operator=(const GroupPermit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupPermit(GroupPermit&& from) noexcept
    : GroupPermit() {
    *this = ::std::move(from);
  }

  inline GroupPermit& operator=(GroupPermit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupPermit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupPermit* internal_default_instance() {
    return reinterpret_cast<const GroupPermit*>(
               &_GroupPermit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(GroupPermit* other);
  friend void swap(GroupPermit& a, GroupPermit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupPermit* New() const final {
    return CreateMaybeMessage<GroupPermit>(NULL);
  }

  GroupPermit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupPermit>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupPermit& from);
  void MergeFrom(const GroupPermit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupPermit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sToId = 2;
  void clear_stoid();
  static const int kSToIdFieldNumber = 2;
  const ::std::string& stoid() const;
  void set_stoid(const ::std::string& value);
  #if LANG_CXX11
  void set_stoid(::std::string&& value);
  #endif
  void set_stoid(const char* value);
  void set_stoid(const char* value, size_t size);
  ::std::string* mutable_stoid();
  ::std::string* release_stoid();
  void set_allocated_stoid(::std::string* stoid);

  // string sGrpId = 3;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 3;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 4;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 4;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // string sRemark = 7;
  void clear_sremark();
  static const int kSRemarkFieldNumber = 7;
  const ::std::string& sremark() const;
  void set_sremark(const ::std::string& value);
  #if LANG_CXX11
  void set_sremark(::std::string&& value);
  #endif
  void set_sremark(const char* value);
  void set_sremark(const char* value, size_t size);
  ::std::string* mutable_sremark();
  ::std::string* release_sremark();
  void set_allocated_sremark(::std::string* sremark);

  // string extend = 8;
  void clear_extend();
  static const int kExtendFieldNumber = 8;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // uint32 rspType = 5;
  void clear_rsptype();
  static const int kRspTypeFieldNumber = 5;
  ::google::protobuf::uint32 rsptype() const;
  void set_rsptype(::google::protobuf::uint32 value);

  // .im.ErrCode errcode = 6;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 6;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.GroupPermit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr stoid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::internal::ArenaStringPtr sremark_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  ::google::protobuf::uint32 rsptype_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupPermitAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupPermitAck) */ {
 public:
  GroupPermitAck();
  virtual ~GroupPermitAck();

  GroupPermitAck(const GroupPermitAck& from);

  inline GroupPermitAck& operator=(const GroupPermitAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupPermitAck(GroupPermitAck&& from) noexcept
    : GroupPermitAck() {
    *this = ::std::move(from);
  }

  inline GroupPermitAck& operator=(GroupPermitAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupPermitAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupPermitAck* internal_default_instance() {
    return reinterpret_cast<const GroupPermitAck*>(
               &_GroupPermitAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(GroupPermitAck* other);
  friend void swap(GroupPermitAck& a, GroupPermitAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupPermitAck* New() const final {
    return CreateMaybeMessage<GroupPermitAck>(NULL);
  }

  GroupPermitAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupPermitAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupPermitAck& from);
  void MergeFrom(const GroupPermitAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupPermitAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sGrpId = 2;
  void clear_sgrpid();
  static const int kSGrpIdFieldNumber = 2;
  const ::std::string& sgrpid() const;
  void set_sgrpid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgrpid(::std::string&& value);
  #endif
  void set_sgrpid(const char* value);
  void set_sgrpid(const char* value, size_t size);
  ::std::string* mutable_sgrpid();
  ::std::string* release_sgrpid();
  void set_allocated_sgrpid(::std::string* sgrpid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // .im.ErrCode errcode = 4;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 4;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.GroupPermitAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr sgrpid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupChatCancel : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupChatCancel) */ {
 public:
  GroupChatCancel();
  virtual ~GroupChatCancel();

  GroupChatCancel(const GroupChatCancel& from);

  inline GroupChatCancel& operator=(const GroupChatCancel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupChatCancel(GroupChatCancel&& from) noexcept
    : GroupChatCancel() {
    *this = ::std::move(from);
  }

  inline GroupChatCancel& operator=(GroupChatCancel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupChatCancel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupChatCancel* internal_default_instance() {
    return reinterpret_cast<const GroupChatCancel*>(
               &_GroupChatCancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(GroupChatCancel* other);
  friend void swap(GroupChatCancel& a, GroupChatCancel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupChatCancel* New() const final {
    return CreateMaybeMessage<GroupChatCancel>(NULL);
  }

  GroupChatCancel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupChatCancel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupChatCancel& from);
  void MergeFrom(const GroupChatCancel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupChatCancel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sGroupId = 2;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 2;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // uint64 msgTime = 4;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 4;
  ::google::protobuf::uint64 msgtime() const;
  void set_msgtime(::google::protobuf::uint64 value);

  // uint64 cancelTime = 5;
  void clear_canceltime();
  static const int kCancelTimeFieldNumber = 5;
  ::google::protobuf::uint64 canceltime() const;
  void set_canceltime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:im.GroupChatCancel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::uint64 msgtime_;
  ::google::protobuf::uint64 canceltime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupChatCancelAck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupChatCancelAck) */ {
 public:
  GroupChatCancelAck();
  virtual ~GroupChatCancelAck();

  GroupChatCancelAck(const GroupChatCancelAck& from);

  inline GroupChatCancelAck& operator=(const GroupChatCancelAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupChatCancelAck(GroupChatCancelAck&& from) noexcept
    : GroupChatCancelAck() {
    *this = ::std::move(from);
  }

  inline GroupChatCancelAck& operator=(GroupChatCancelAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupChatCancelAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupChatCancelAck* internal_default_instance() {
    return reinterpret_cast<const GroupChatCancelAck*>(
               &_GroupChatCancelAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(GroupChatCancelAck* other);
  friend void swap(GroupChatCancelAck& a, GroupChatCancelAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupChatCancelAck* New() const final {
    return CreateMaybeMessage<GroupChatCancelAck>(NULL);
  }

  GroupChatCancelAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupChatCancelAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupChatCancelAck& from);
  void MergeFrom(const GroupChatCancelAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupChatCancelAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sFromId = 1;
  void clear_sfromid();
  static const int kSFromIdFieldNumber = 1;
  const ::std::string& sfromid() const;
  void set_sfromid(const ::std::string& value);
  #if LANG_CXX11
  void set_sfromid(::std::string&& value);
  #endif
  void set_sfromid(const char* value);
  void set_sfromid(const char* value, size_t size);
  ::std::string* mutable_sfromid();
  ::std::string* release_sfromid();
  void set_allocated_sfromid(::std::string* sfromid);

  // string sGroupId = 2;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 2;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // string sMsgId = 3;
  void clear_smsgid();
  static const int kSMsgIdFieldNumber = 3;
  const ::std::string& smsgid() const;
  void set_smsgid(const ::std::string& value);
  #if LANG_CXX11
  void set_smsgid(::std::string&& value);
  #endif
  void set_smsgid(const char* value);
  void set_smsgid(const char* value, size_t size);
  ::std::string* mutable_smsgid();
  ::std::string* release_smsgid();
  void set_allocated_smsgid(::std::string* smsgid);

  // uint64 cancelTime = 4;
  void clear_canceltime();
  static const int kCancelTimeFieldNumber = 4;
  ::google::protobuf::uint64 canceltime() const;
  void set_canceltime(::google::protobuf::uint64 value);

  // .im.ErrCode errcode = 5;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 5;
  ::im::ErrCode errcode() const;
  void set_errcode(::im::ErrCode value);

  // @@protoc_insertion_point(class_scope:im.GroupChatCancelAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sfromid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::internal::ArenaStringPtr smsgid_;
  ::google::protobuf::uint64 canceltime_;
  int errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.GroupInfo) */ {
 public:
  GroupInfo();
  virtual ~GroupInfo();

  GroupInfo(const GroupInfo& from);

  inline GroupInfo& operator=(const GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupInfo(GroupInfo&& from) noexcept
    : GroupInfo() {
    *this = ::std::move(from);
  }

  inline GroupInfo& operator=(GroupInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GroupInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupInfo* internal_default_instance() {
    return reinterpret_cast<const GroupInfo*>(
               &_GroupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(GroupInfo* other);
  friend void swap(GroupInfo& a, GroupInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupInfo* New() const final {
    return CreateMaybeMessage<GroupInfo>(NULL);
  }

  GroupInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GroupInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GroupInfo& from);
  void MergeFrom(const GroupInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sGroupId = 1;
  void clear_sgroupid();
  static const int kSGroupIdFieldNumber = 1;
  const ::std::string& sgroupid() const;
  void set_sgroupid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupid(::std::string&& value);
  #endif
  void set_sgroupid(const char* value);
  void set_sgroupid(const char* value, size_t size);
  ::std::string* mutable_sgroupid();
  ::std::string* release_sgroupid();
  void set_allocated_sgroupid(::std::string* sgroupid);

  // string sGroupAdminId = 2;
  void clear_sgroupadminid();
  static const int kSGroupAdminIdFieldNumber = 2;
  const ::std::string& sgroupadminid() const;
  void set_sgroupadminid(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupadminid(::std::string&& value);
  #endif
  void set_sgroupadminid(const char* value);
  void set_sgroupadminid(const char* value, size_t size);
  ::std::string* mutable_sgroupadminid();
  ::std::string* release_sgroupadminid();
  void set_allocated_sgroupadminid(::std::string* sgroupadminid);

  // string sGroupAdminNickName = 3;
  void clear_sgroupadminnickname();
  static const int kSGroupAdminNickNameFieldNumber = 3;
  const ::std::string& sgroupadminnickname() const;
  void set_sgroupadminnickname(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupadminnickname(::std::string&& value);
  #endif
  void set_sgroupadminnickname(const char* value);
  void set_sgroupadminnickname(const char* value, size_t size);
  ::std::string* mutable_sgroupadminnickname();
  ::std::string* release_sgroupadminnickname();
  void set_allocated_sgroupadminnickname(::std::string* sgroupadminnickname);

  // string sGroupName = 4;
  void clear_sgroupname();
  static const int kSGroupNameFieldNumber = 4;
  const ::std::string& sgroupname() const;
  void set_sgroupname(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupname(::std::string&& value);
  #endif
  void set_sgroupname(const char* value);
  void set_sgroupname(const char* value, size_t size);
  ::std::string* mutable_sgroupname();
  ::std::string* release_sgroupname();
  void set_allocated_sgroupname(::std::string* sgroupname);

  // string sGroupAnnounce = 5;
  void clear_sgroupannounce();
  static const int kSGroupAnnounceFieldNumber = 5;
  const ::std::string& sgroupannounce() const;
  void set_sgroupannounce(const ::std::string& value);
  #if LANG_CXX11
  void set_sgroupannounce(::std::string&& value);
  #endif
  void set_sgroupannounce(const char* value);
  void set_sgroupannounce(const char* value, size_t size);
  ::std::string* mutable_sgroupannounce();
  ::std::string* release_sgroupannounce();
  void set_allocated_sgroupannounce(::std::string* sgroupannounce);

  // uint32 nMemberCount = 6;
  void clear_nmembercount();
  static const int kNMemberCountFieldNumber = 6;
  ::google::protobuf::uint32 nmembercount() const;
  void set_nmembercount(::google::protobuf::uint32 value);

  // bool isMember = 7;
  void clear_ismember();
  static const int kIsMemberFieldNumber = 7;
  bool ismember() const;
  void set_ismember(bool value);

  // @@protoc_insertion_point(class_scope:im.GroupInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sgroupid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupadminid_;
  ::google::protobuf::internal::ArenaStringPtr sgroupadminnickname_;
  ::google::protobuf::internal::ArenaStringPtr sgroupname_;
  ::google::protobuf::internal::ArenaStringPtr sgroupannounce_;
  ::google::protobuf::uint32 nmembercount_;
  bool ismember_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Member : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:im.Member) */ {
 public:
  Member();
  virtual ~Member();

  Member(const Member& from);

  inline Member& operator=(const Member& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Member(Member&& from) noexcept
    : Member() {
    *this = ::std::move(from);
  }

  inline Member& operator=(Member&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Member& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Member* internal_default_instance() {
    return reinterpret_cast<const Member*>(
               &_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(Member* other);
  friend void swap(Member& a, Member& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Member* New() const final {
    return CreateMaybeMessage<Member>(NULL);
  }

  Member* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Member>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Member& from);
  void MergeFrom(const Member& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Member* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sUserId = 1;
  void clear_suserid();
  static const int kSUserIdFieldNumber = 1;
  const ::std::string& suserid() const;
  void set_suserid(const ::std::string& value);
  #if LANG_CXX11
  void set_suserid(::std::string&& value);
  #endif
  void set_suserid(const char* value);
  void set_suserid(const char* value, size_t size);
  ::std::string* mutable_suserid();
  ::std::string* release_suserid();
  void set_allocated_suserid(::std::string* suserid);

  // string sNickName = 2;
  void clear_snickname();
  static const int kSNickNameFieldNumber = 2;
  const ::std::string& snickname() const;
  void set_snickname(const ::std::string& value);
  #if LANG_CXX11
  void set_snickname(::std::string&& value);
  #endif
  void set_snickname(const char* value);
  void set_snickname(const char* value, size_t size);
  ::std::string* mutable_snickname();
  ::std::string* release_snickname();
  void set_allocated_snickname(::std::string* snickname);

  // uint32 nState = 3;
  void clear_nstate();
  static const int kNStateFieldNumber = 3;
  ::google::protobuf::uint32 nstate() const;
  void set_nstate(::google::protobuf::uint32 value);

  // bool bGroupConfirm = 4;
  void clear_bgroupconfirm();
  static const int kBGroupConfirmFieldNumber = 4;
  bool bgroupconfirm() const;
  void set_bgroupconfirm(bool value);

  // @@protoc_insertion_point(class_scope:im.Member)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr suserid_;
  ::google::protobuf::internal::ArenaStringPtr snickname_;
  ::google::protobuf::uint32 nstate_;
  bool bgroupconfirm_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_im_2egroup_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GroupChat

// string sFromId = 1;
inline void GroupChat::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupChat::sfromid() const {
  // @@protoc_insertion_point(field_get:im.GroupChat.sFromId)
  return sfromid_.GetNoArena();
}
inline void GroupChat::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChat.sFromId)
}
#if LANG_CXX11
inline void GroupChat::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupChat.sFromId)
}
#endif
inline void GroupChat::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChat.sFromId)
}
inline void GroupChat::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChat.sFromId)
}
inline ::std::string* GroupChat::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChat.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupChat::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.GroupChat.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChat::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChat.sFromId)
}

// string sGroupId = 2;
inline void GroupChat::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupChat::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupChat.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void GroupChat::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChat.sGroupId)
}
#if LANG_CXX11
inline void GroupChat::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupChat.sGroupId)
}
#endif
inline void GroupChat::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChat.sGroupId)
}
inline void GroupChat::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChat.sGroupId)
}
inline ::std::string* GroupChat::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChat.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupChat::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupChat.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChat::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChat.sGroupId)
}

// uint32 nNotifyCount = 3;
inline void GroupChat::clear_nnotifycount() {
  nnotifycount_ = 0u;
}
inline ::google::protobuf::uint32 GroupChat::nnotifycount() const {
  // @@protoc_insertion_point(field_get:im.GroupChat.nNotifyCount)
  return nnotifycount_;
}
inline void GroupChat::set_nnotifycount(::google::protobuf::uint32 value) {
  
  nnotifycount_ = value;
  // @@protoc_insertion_point(field_set:im.GroupChat.nNotifyCount)
}

// repeated string sNotifyUsers = 4;
inline int GroupChat::snotifyusers_size() const {
  return snotifyusers_.size();
}
inline void GroupChat::clear_snotifyusers() {
  snotifyusers_.Clear();
}
inline const ::std::string& GroupChat::snotifyusers(int index) const {
  // @@protoc_insertion_point(field_get:im.GroupChat.sNotifyUsers)
  return snotifyusers_.Get(index);
}
inline ::std::string* GroupChat::mutable_snotifyusers(int index) {
  // @@protoc_insertion_point(field_mutable:im.GroupChat.sNotifyUsers)
  return snotifyusers_.Mutable(index);
}
inline void GroupChat::set_snotifyusers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im.GroupChat.sNotifyUsers)
  snotifyusers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GroupChat::set_snotifyusers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:im.GroupChat.sNotifyUsers)
  snotifyusers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GroupChat::set_snotifyusers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  snotifyusers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im.GroupChat.sNotifyUsers)
}
inline void GroupChat::set_snotifyusers(int index, const char* value, size_t size) {
  snotifyusers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im.GroupChat.sNotifyUsers)
}
inline ::std::string* GroupChat::add_snotifyusers() {
  // @@protoc_insertion_point(field_add_mutable:im.GroupChat.sNotifyUsers)
  return snotifyusers_.Add();
}
inline void GroupChat::add_snotifyusers(const ::std::string& value) {
  snotifyusers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im.GroupChat.sNotifyUsers)
}
#if LANG_CXX11
inline void GroupChat::add_snotifyusers(::std::string&& value) {
  snotifyusers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:im.GroupChat.sNotifyUsers)
}
#endif
inline void GroupChat::add_snotifyusers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  snotifyusers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im.GroupChat.sNotifyUsers)
}
inline void GroupChat::add_snotifyusers(const char* value, size_t size) {
  snotifyusers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im.GroupChat.sNotifyUsers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GroupChat::snotifyusers() const {
  // @@protoc_insertion_point(field_list:im.GroupChat.sNotifyUsers)
  return snotifyusers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GroupChat::mutable_snotifyusers() {
  // @@protoc_insertion_point(field_mutable_list:im.GroupChat.sNotifyUsers)
  return &snotifyusers_;
}

// string sMsgId = 5;
inline void GroupChat::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupChat::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupChat.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupChat::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChat.sMsgId)
}
#if LANG_CXX11
inline void GroupChat::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupChat.sMsgId)
}
#endif
inline void GroupChat::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChat.sMsgId)
}
inline void GroupChat::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChat.sMsgId)
}
inline ::std::string* GroupChat::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChat.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupChat::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupChat.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChat::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChat.sMsgId)
}

// uint64 msgTime = 6;
inline void GroupChat::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GroupChat::msgtime() const {
  // @@protoc_insertion_point(field_get:im.GroupChat.msgTime)
  return msgtime_;
}
inline void GroupChat::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.GroupChat.msgTime)
}

// uint32 encrypt = 7;
inline void GroupChat::clear_encrypt() {
  encrypt_ = 0u;
}
inline ::google::protobuf::uint32 GroupChat::encrypt() const {
  // @@protoc_insertion_point(field_get:im.GroupChat.encrypt)
  return encrypt_;
}
inline void GroupChat::set_encrypt(::google::protobuf::uint32 value) {
  
  encrypt_ = value;
  // @@protoc_insertion_point(field_set:im.GroupChat.encrypt)
}

// string sContent = 8;
inline void GroupChat::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupChat::scontent() const {
  // @@protoc_insertion_point(field_get:im.GroupChat.sContent)
  return scontent_.GetNoArena();
}
inline void GroupChat::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChat.sContent)
}
#if LANG_CXX11
inline void GroupChat::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupChat.sContent)
}
#endif
inline void GroupChat::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChat.sContent)
}
inline void GroupChat::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChat.sContent)
}
inline ::std::string* GroupChat::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChat.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupChat::release_scontent() {
  // @@protoc_insertion_point(field_release:im.GroupChat.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChat::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChat.sContent)
}

// -------------------------------------------------------------------

// GroupChatAck

// string sFromId = 1;
inline void GroupChatAck::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupChatAck::sfromid() const {
  // @@protoc_insertion_point(field_get:im.GroupChatAck.sFromId)
  return sfromid_.GetNoArena();
}
inline void GroupChatAck::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChatAck.sFromId)
}
#if LANG_CXX11
inline void GroupChatAck::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupChatAck.sFromId)
}
#endif
inline void GroupChatAck::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChatAck.sFromId)
}
inline void GroupChatAck::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChatAck.sFromId)
}
inline ::std::string* GroupChatAck::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChatAck.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupChatAck::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.GroupChatAck.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChatAck::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChatAck.sFromId)
}

// string sGroupId = 2;
inline void GroupChatAck::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupChatAck::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupChatAck.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void GroupChatAck::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChatAck.sGroupId)
}
#if LANG_CXX11
inline void GroupChatAck::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupChatAck.sGroupId)
}
#endif
inline void GroupChatAck::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChatAck.sGroupId)
}
inline void GroupChatAck::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChatAck.sGroupId)
}
inline ::std::string* GroupChatAck::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChatAck.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupChatAck::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupChatAck.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChatAck::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChatAck.sGroupId)
}

// string sMsgId = 3;
inline void GroupChatAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupChatAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupChatAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupChatAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChatAck.sMsgId)
}
#if LANG_CXX11
inline void GroupChatAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupChatAck.sMsgId)
}
#endif
inline void GroupChatAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChatAck.sMsgId)
}
inline void GroupChatAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChatAck.sMsgId)
}
inline ::std::string* GroupChatAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChatAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupChatAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupChatAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChatAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChatAck.sMsgId)
}

// uint64 sendtime = 4;
inline void GroupChatAck::clear_sendtime() {
  sendtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GroupChatAck::sendtime() const {
  // @@protoc_insertion_point(field_get:im.GroupChatAck.sendtime)
  return sendtime_;
}
inline void GroupChatAck::set_sendtime(::google::protobuf::uint64 value) {
  
  sendtime_ = value;
  // @@protoc_insertion_point(field_set:im.GroupChatAck.sendtime)
}

// .im.ErrCode errcode = 5;
inline void GroupChatAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode GroupChatAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupChatAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void GroupChatAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupChatAck.errcode)
}

// -------------------------------------------------------------------

// GroupCreate

// string sUserId = 1;
inline void GroupCreate::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupCreate::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupCreate.sUserId)
  return suserid_.GetNoArena();
}
inline void GroupCreate::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupCreate.sUserId)
}
#if LANG_CXX11
inline void GroupCreate::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupCreate.sUserId)
}
#endif
inline void GroupCreate::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupCreate.sUserId)
}
inline void GroupCreate::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupCreate.sUserId)
}
inline ::std::string* GroupCreate::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupCreate.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupCreate::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupCreate.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupCreate::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupCreate.sUserId)
}

// string sName = 2;
inline void GroupCreate::clear_sname() {
  sname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupCreate::sname() const {
  // @@protoc_insertion_point(field_get:im.GroupCreate.sName)
  return sname_.GetNoArena();
}
inline void GroupCreate::set_sname(const ::std::string& value) {
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupCreate.sName)
}
#if LANG_CXX11
inline void GroupCreate::set_sname(::std::string&& value) {
  
  sname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupCreate.sName)
}
#endif
inline void GroupCreate::set_sname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupCreate.sName)
}
inline void GroupCreate::set_sname(const char* value, size_t size) {
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupCreate.sName)
}
inline ::std::string* GroupCreate::mutable_sname() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupCreate.sName)
  return sname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupCreate::release_sname() {
  // @@protoc_insertion_point(field_release:im.GroupCreate.sName)
  
  return sname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupCreate::set_allocated_sname(::std::string* sname) {
  if (sname != NULL) {
    
  } else {
    
  }
  sname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sname);
  // @@protoc_insertion_point(field_set_allocated:im.GroupCreate.sName)
}

// string sRemarks = 3;
inline void GroupCreate::clear_sremarks() {
  sremarks_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupCreate::sremarks() const {
  // @@protoc_insertion_point(field_get:im.GroupCreate.sRemarks)
  return sremarks_.GetNoArena();
}
inline void GroupCreate::set_sremarks(const ::std::string& value) {
  
  sremarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupCreate.sRemarks)
}
#if LANG_CXX11
inline void GroupCreate::set_sremarks(::std::string&& value) {
  
  sremarks_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupCreate.sRemarks)
}
#endif
inline void GroupCreate::set_sremarks(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sremarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupCreate.sRemarks)
}
inline void GroupCreate::set_sremarks(const char* value, size_t size) {
  
  sremarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupCreate.sRemarks)
}
inline ::std::string* GroupCreate::mutable_sremarks() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupCreate.sRemarks)
  return sremarks_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupCreate::release_sremarks() {
  // @@protoc_insertion_point(field_release:im.GroupCreate.sRemarks)
  
  return sremarks_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupCreate::set_allocated_sremarks(::std::string* sremarks) {
  if (sremarks != NULL) {
    
  } else {
    
  }
  sremarks_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sremarks);
  // @@protoc_insertion_point(field_set_allocated:im.GroupCreate.sRemarks)
}

// string sMsgId = 4;
inline void GroupCreate::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupCreate::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupCreate.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupCreate::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupCreate.sMsgId)
}
#if LANG_CXX11
inline void GroupCreate::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupCreate.sMsgId)
}
#endif
inline void GroupCreate::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupCreate.sMsgId)
}
inline void GroupCreate::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupCreate.sMsgId)
}
inline ::std::string* GroupCreate::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupCreate.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupCreate::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupCreate.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupCreate::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupCreate.sMsgId)
}

// uint32 nPermission = 5;
inline void GroupCreate::clear_npermission() {
  npermission_ = 0u;
}
inline ::google::protobuf::uint32 GroupCreate::npermission() const {
  // @@protoc_insertion_point(field_get:im.GroupCreate.nPermission)
  return npermission_;
}
inline void GroupCreate::set_npermission(::google::protobuf::uint32 value) {
  
  npermission_ = value;
  // @@protoc_insertion_point(field_set:im.GroupCreate.nPermission)
}

// uint32 nCreateType = 6;
inline void GroupCreate::clear_ncreatetype() {
  ncreatetype_ = 0u;
}
inline ::google::protobuf::uint32 GroupCreate::ncreatetype() const {
  // @@protoc_insertion_point(field_get:im.GroupCreate.nCreateType)
  return ncreatetype_;
}
inline void GroupCreate::set_ncreatetype(::google::protobuf::uint32 value) {
  
  ncreatetype_ = value;
  // @@protoc_insertion_point(field_set:im.GroupCreate.nCreateType)
}

// repeated string sInviteUserIds = 8;
inline int GroupCreate::sinviteuserids_size() const {
  return sinviteuserids_.size();
}
inline void GroupCreate::clear_sinviteuserids() {
  sinviteuserids_.Clear();
}
inline const ::std::string& GroupCreate::sinviteuserids(int index) const {
  // @@protoc_insertion_point(field_get:im.GroupCreate.sInviteUserIds)
  return sinviteuserids_.Get(index);
}
inline ::std::string* GroupCreate::mutable_sinviteuserids(int index) {
  // @@protoc_insertion_point(field_mutable:im.GroupCreate.sInviteUserIds)
  return sinviteuserids_.Mutable(index);
}
inline void GroupCreate::set_sinviteuserids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im.GroupCreate.sInviteUserIds)
  sinviteuserids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GroupCreate::set_sinviteuserids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:im.GroupCreate.sInviteUserIds)
  sinviteuserids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GroupCreate::set_sinviteuserids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sinviteuserids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im.GroupCreate.sInviteUserIds)
}
inline void GroupCreate::set_sinviteuserids(int index, const char* value, size_t size) {
  sinviteuserids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im.GroupCreate.sInviteUserIds)
}
inline ::std::string* GroupCreate::add_sinviteuserids() {
  // @@protoc_insertion_point(field_add_mutable:im.GroupCreate.sInviteUserIds)
  return sinviteuserids_.Add();
}
inline void GroupCreate::add_sinviteuserids(const ::std::string& value) {
  sinviteuserids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im.GroupCreate.sInviteUserIds)
}
#if LANG_CXX11
inline void GroupCreate::add_sinviteuserids(::std::string&& value) {
  sinviteuserids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:im.GroupCreate.sInviteUserIds)
}
#endif
inline void GroupCreate::add_sinviteuserids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sinviteuserids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im.GroupCreate.sInviteUserIds)
}
inline void GroupCreate::add_sinviteuserids(const char* value, size_t size) {
  sinviteuserids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im.GroupCreate.sInviteUserIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GroupCreate::sinviteuserids() const {
  // @@protoc_insertion_point(field_list:im.GroupCreate.sInviteUserIds)
  return sinviteuserids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GroupCreate::mutable_sinviteuserids() {
  // @@protoc_insertion_point(field_mutable_list:im.GroupCreate.sInviteUserIds)
  return &sinviteuserids_;
}

// string sGrpAvatar = 9;
inline void GroupCreate::clear_sgrpavatar() {
  sgrpavatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupCreate::sgrpavatar() const {
  // @@protoc_insertion_point(field_get:im.GroupCreate.sGrpAvatar)
  return sgrpavatar_.GetNoArena();
}
inline void GroupCreate::set_sgrpavatar(const ::std::string& value) {
  
  sgrpavatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupCreate.sGrpAvatar)
}
#if LANG_CXX11
inline void GroupCreate::set_sgrpavatar(::std::string&& value) {
  
  sgrpavatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupCreate.sGrpAvatar)
}
#endif
inline void GroupCreate::set_sgrpavatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpavatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupCreate.sGrpAvatar)
}
inline void GroupCreate::set_sgrpavatar(const char* value, size_t size) {
  
  sgrpavatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupCreate.sGrpAvatar)
}
inline ::std::string* GroupCreate::mutable_sgrpavatar() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupCreate.sGrpAvatar)
  return sgrpavatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupCreate::release_sgrpavatar() {
  // @@protoc_insertion_point(field_release:im.GroupCreate.sGrpAvatar)
  
  return sgrpavatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupCreate::set_allocated_sgrpavatar(::std::string* sgrpavatar) {
  if (sgrpavatar != NULL) {
    
  } else {
    
  }
  sgrpavatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpavatar);
  // @@protoc_insertion_point(field_set_allocated:im.GroupCreate.sGrpAvatar)
}

// string extend = 10;
inline void GroupCreate::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupCreate::extend() const {
  // @@protoc_insertion_point(field_get:im.GroupCreate.extend)
  return extend_.GetNoArena();
}
inline void GroupCreate::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupCreate.extend)
}
#if LANG_CXX11
inline void GroupCreate::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupCreate.extend)
}
#endif
inline void GroupCreate::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupCreate.extend)
}
inline void GroupCreate::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupCreate.extend)
}
inline ::std::string* GroupCreate::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupCreate.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupCreate::release_extend() {
  // @@protoc_insertion_point(field_release:im.GroupCreate.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupCreate::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.GroupCreate.extend)
}

// -------------------------------------------------------------------

// GroupCreateAck

// string sUserId = 1;
inline void GroupCreateAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupCreateAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupCreateAck.sUserId)
  return suserid_.GetNoArena();
}
inline void GroupCreateAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupCreateAck.sUserId)
}
#if LANG_CXX11
inline void GroupCreateAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupCreateAck.sUserId)
}
#endif
inline void GroupCreateAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupCreateAck.sUserId)
}
inline void GroupCreateAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupCreateAck.sUserId)
}
inline ::std::string* GroupCreateAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupCreateAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupCreateAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupCreateAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupCreateAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupCreateAck.sUserId)
}

// string sGroupId = 2;
inline void GroupCreateAck::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupCreateAck::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupCreateAck.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void GroupCreateAck::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupCreateAck.sGroupId)
}
#if LANG_CXX11
inline void GroupCreateAck::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupCreateAck.sGroupId)
}
#endif
inline void GroupCreateAck::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupCreateAck.sGroupId)
}
inline void GroupCreateAck::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupCreateAck.sGroupId)
}
inline ::std::string* GroupCreateAck::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupCreateAck.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupCreateAck::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupCreateAck.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupCreateAck::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupCreateAck.sGroupId)
}

// string sMsgId = 3;
inline void GroupCreateAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupCreateAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupCreateAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupCreateAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupCreateAck.sMsgId)
}
#if LANG_CXX11
inline void GroupCreateAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupCreateAck.sMsgId)
}
#endif
inline void GroupCreateAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupCreateAck.sMsgId)
}
inline void GroupCreateAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupCreateAck.sMsgId)
}
inline ::std::string* GroupCreateAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupCreateAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupCreateAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupCreateAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupCreateAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupCreateAck.sMsgId)
}

// .im.ErrCode errcode = 4;
inline void GroupCreateAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode GroupCreateAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupCreateAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void GroupCreateAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupCreateAck.errcode)
}

// uint64 msgTime = 5;
inline void GroupCreateAck::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GroupCreateAck::msgtime() const {
  // @@protoc_insertion_point(field_get:im.GroupCreateAck.msgTime)
  return msgtime_;
}
inline void GroupCreateAck::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.GroupCreateAck.msgTime)
}

// -------------------------------------------------------------------

// GroupQuery

// string sUserId = 1;
inline void GroupQuery::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupQuery::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupQuery.sUserId)
  return suserid_.GetNoArena();
}
inline void GroupQuery::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupQuery.sUserId)
}
#if LANG_CXX11
inline void GroupQuery::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupQuery.sUserId)
}
#endif
inline void GroupQuery::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupQuery.sUserId)
}
inline void GroupQuery::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupQuery.sUserId)
}
inline ::std::string* GroupQuery::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupQuery.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupQuery::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupQuery.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupQuery::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupQuery.sUserId)
}

// uint32 nQueryType = 2;
inline void GroupQuery::clear_nquerytype() {
  nquerytype_ = 0u;
}
inline ::google::protobuf::uint32 GroupQuery::nquerytype() const {
  // @@protoc_insertion_point(field_get:im.GroupQuery.nQueryType)
  return nquerytype_;
}
inline void GroupQuery::set_nquerytype(::google::protobuf::uint32 value) {
  
  nquerytype_ = value;
  // @@protoc_insertion_point(field_set:im.GroupQuery.nQueryType)
}

// string sKey = 3;
inline void GroupQuery::clear_skey() {
  skey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupQuery::skey() const {
  // @@protoc_insertion_point(field_get:im.GroupQuery.sKey)
  return skey_.GetNoArena();
}
inline void GroupQuery::set_skey(const ::std::string& value) {
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupQuery.sKey)
}
#if LANG_CXX11
inline void GroupQuery::set_skey(::std::string&& value) {
  
  skey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupQuery.sKey)
}
#endif
inline void GroupQuery::set_skey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupQuery.sKey)
}
inline void GroupQuery::set_skey(const char* value, size_t size) {
  
  skey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupQuery.sKey)
}
inline ::std::string* GroupQuery::mutable_skey() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupQuery.sKey)
  return skey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupQuery::release_skey() {
  // @@protoc_insertion_point(field_release:im.GroupQuery.sKey)
  
  return skey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupQuery::set_allocated_skey(::std::string* skey) {
  if (skey != NULL) {
    
  } else {
    
  }
  skey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skey);
  // @@protoc_insertion_point(field_set_allocated:im.GroupQuery.sKey)
}

// -------------------------------------------------------------------

// UserGroupQueryRsp

// string sUserId = 1;
inline void UserGroupQueryRsp::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserGroupQueryRsp::suserid() const {
  // @@protoc_insertion_point(field_get:im.UserGroupQueryRsp.sUserId)
  return suserid_.GetNoArena();
}
inline void UserGroupQueryRsp::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.UserGroupQueryRsp.sUserId)
}
#if LANG_CXX11
inline void UserGroupQueryRsp::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.UserGroupQueryRsp.sUserId)
}
#endif
inline void UserGroupQueryRsp::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.UserGroupQueryRsp.sUserId)
}
inline void UserGroupQueryRsp::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.UserGroupQueryRsp.sUserId)
}
inline ::std::string* UserGroupQueryRsp::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.UserGroupQueryRsp.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserGroupQueryRsp::release_suserid() {
  // @@protoc_insertion_point(field_release:im.UserGroupQueryRsp.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserGroupQueryRsp::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.UserGroupQueryRsp.sUserId)
}

// repeated .im.GroupInfo lsGroupInfo = 2;
inline int UserGroupQueryRsp::lsgroupinfo_size() const {
  return lsgroupinfo_.size();
}
inline void UserGroupQueryRsp::clear_lsgroupinfo() {
  lsgroupinfo_.Clear();
}
inline ::im::GroupInfo* UserGroupQueryRsp::mutable_lsgroupinfo(int index) {
  // @@protoc_insertion_point(field_mutable:im.UserGroupQueryRsp.lsGroupInfo)
  return lsgroupinfo_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::im::GroupInfo >*
UserGroupQueryRsp::mutable_lsgroupinfo() {
  // @@protoc_insertion_point(field_mutable_list:im.UserGroupQueryRsp.lsGroupInfo)
  return &lsgroupinfo_;
}
inline const ::im::GroupInfo& UserGroupQueryRsp::lsgroupinfo(int index) const {
  // @@protoc_insertion_point(field_get:im.UserGroupQueryRsp.lsGroupInfo)
  return lsgroupinfo_.Get(index);
}
inline ::im::GroupInfo* UserGroupQueryRsp::add_lsgroupinfo() {
  // @@protoc_insertion_point(field_add:im.UserGroupQueryRsp.lsGroupInfo)
  return lsgroupinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::im::GroupInfo >&
UserGroupQueryRsp::lsgroupinfo() const {
  // @@protoc_insertion_point(field_list:im.UserGroupQueryRsp.lsGroupInfo)
  return lsgroupinfo_;
}

// .im.ErrCode errcode = 3;
inline void UserGroupQueryRsp::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode UserGroupQueryRsp::errcode() const {
  // @@protoc_insertion_point(field_get:im.UserGroupQueryRsp.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void UserGroupQueryRsp::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.UserGroupQueryRsp.errcode)
}

// -------------------------------------------------------------------

// GroupApply

// string sUserId = 1;
inline void GroupApply::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupApply::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupApply.sUserId)
  return suserid_.GetNoArena();
}
inline void GroupApply::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupApply.sUserId)
}
#if LANG_CXX11
inline void GroupApply::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupApply.sUserId)
}
#endif
inline void GroupApply::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupApply.sUserId)
}
inline void GroupApply::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupApply.sUserId)
}
inline ::std::string* GroupApply::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupApply.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupApply::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupApply.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupApply::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupApply.sUserId)
}

// string sGroupId = 2;
inline void GroupApply::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupApply::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupApply.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void GroupApply::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupApply.sGroupId)
}
#if LANG_CXX11
inline void GroupApply::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupApply.sGroupId)
}
#endif
inline void GroupApply::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupApply.sGroupId)
}
inline void GroupApply::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupApply.sGroupId)
}
inline ::std::string* GroupApply::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupApply.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupApply::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupApply.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupApply::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupApply.sGroupId)
}

// string sMsgId = 3;
inline void GroupApply::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupApply::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupApply.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupApply::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupApply.sMsgId)
}
#if LANG_CXX11
inline void GroupApply::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupApply.sMsgId)
}
#endif
inline void GroupApply::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupApply.sMsgId)
}
inline void GroupApply::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupApply.sMsgId)
}
inline ::std::string* GroupApply::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupApply.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupApply::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupApply.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupApply::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupApply.sMsgId)
}

// string sRemark = 4;
inline void GroupApply::clear_sremark() {
  sremark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupApply::sremark() const {
  // @@protoc_insertion_point(field_get:im.GroupApply.sRemark)
  return sremark_.GetNoArena();
}
inline void GroupApply::set_sremark(const ::std::string& value) {
  
  sremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupApply.sRemark)
}
#if LANG_CXX11
inline void GroupApply::set_sremark(::std::string&& value) {
  
  sremark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupApply.sRemark)
}
#endif
inline void GroupApply::set_sremark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupApply.sRemark)
}
inline void GroupApply::set_sremark(const char* value, size_t size) {
  
  sremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupApply.sRemark)
}
inline ::std::string* GroupApply::mutable_sremark() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupApply.sRemark)
  return sremark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupApply::release_sremark() {
  // @@protoc_insertion_point(field_release:im.GroupApply.sRemark)
  
  return sremark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupApply::set_allocated_sremark(::std::string* sremark) {
  if (sremark != NULL) {
    
  } else {
    
  }
  sremark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sremark);
  // @@protoc_insertion_point(field_set_allocated:im.GroupApply.sRemark)
}

// string extend = 5;
inline void GroupApply::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupApply::extend() const {
  // @@protoc_insertion_point(field_get:im.GroupApply.extend)
  return extend_.GetNoArena();
}
inline void GroupApply::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupApply.extend)
}
#if LANG_CXX11
inline void GroupApply::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupApply.extend)
}
#endif
inline void GroupApply::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupApply.extend)
}
inline void GroupApply::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupApply.extend)
}
inline ::std::string* GroupApply::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupApply.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupApply::release_extend() {
  // @@protoc_insertion_point(field_release:im.GroupApply.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupApply::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.GroupApply.extend)
}

// uint32 applyType = 6;
inline void GroupApply::clear_applytype() {
  applytype_ = 0u;
}
inline ::google::protobuf::uint32 GroupApply::applytype() const {
  // @@protoc_insertion_point(field_get:im.GroupApply.applyType)
  return applytype_;
}
inline void GroupApply::set_applytype(::google::protobuf::uint32 value) {
  
  applytype_ = value;
  // @@protoc_insertion_point(field_set:im.GroupApply.applyType)
}

// -------------------------------------------------------------------

// GroupApplyAck

// string sUserId = 1;
inline void GroupApplyAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupApplyAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupApplyAck.sUserId)
  return suserid_.GetNoArena();
}
inline void GroupApplyAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupApplyAck.sUserId)
}
#if LANG_CXX11
inline void GroupApplyAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupApplyAck.sUserId)
}
#endif
inline void GroupApplyAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupApplyAck.sUserId)
}
inline void GroupApplyAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupApplyAck.sUserId)
}
inline ::std::string* GroupApplyAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupApplyAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupApplyAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupApplyAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupApplyAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupApplyAck.sUserId)
}

// string sGroupId = 2;
inline void GroupApplyAck::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupApplyAck::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupApplyAck.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void GroupApplyAck::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupApplyAck.sGroupId)
}
#if LANG_CXX11
inline void GroupApplyAck::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupApplyAck.sGroupId)
}
#endif
inline void GroupApplyAck::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupApplyAck.sGroupId)
}
inline void GroupApplyAck::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupApplyAck.sGroupId)
}
inline ::std::string* GroupApplyAck::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupApplyAck.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupApplyAck::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupApplyAck.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupApplyAck::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupApplyAck.sGroupId)
}

// string sMsgId = 3;
inline void GroupApplyAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupApplyAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupApplyAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupApplyAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupApplyAck.sMsgId)
}
#if LANG_CXX11
inline void GroupApplyAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupApplyAck.sMsgId)
}
#endif
inline void GroupApplyAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupApplyAck.sMsgId)
}
inline void GroupApplyAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupApplyAck.sMsgId)
}
inline ::std::string* GroupApplyAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupApplyAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupApplyAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupApplyAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupApplyAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupApplyAck.sMsgId)
}

// .im.ErrCode errcode = 4;
inline void GroupApplyAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode GroupApplyAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupApplyAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void GroupApplyAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupApplyAck.errcode)
}

// -------------------------------------------------------------------

// GroupInvite

// string sInviterId = 1;
inline void GroupInvite::clear_sinviterid() {
  sinviterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInvite::sinviterid() const {
  // @@protoc_insertion_point(field_get:im.GroupInvite.sInviterId)
  return sinviterid_.GetNoArena();
}
inline void GroupInvite::set_sinviterid(const ::std::string& value) {
  
  sinviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInvite.sInviterId)
}
#if LANG_CXX11
inline void GroupInvite::set_sinviterid(::std::string&& value) {
  
  sinviterid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupInvite.sInviterId)
}
#endif
inline void GroupInvite::set_sinviterid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sinviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInvite.sInviterId)
}
inline void GroupInvite::set_sinviterid(const char* value, size_t size) {
  
  sinviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInvite.sInviterId)
}
inline ::std::string* GroupInvite::mutable_sinviterid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInvite.sInviterId)
  return sinviterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInvite::release_sinviterid() {
  // @@protoc_insertion_point(field_release:im.GroupInvite.sInviterId)
  
  return sinviterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInvite::set_allocated_sinviterid(::std::string* sinviterid) {
  if (sinviterid != NULL) {
    
  } else {
    
  }
  sinviterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sinviterid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInvite.sInviterId)
}

// repeated string sInviteeIds = 2;
inline int GroupInvite::sinviteeids_size() const {
  return sinviteeids_.size();
}
inline void GroupInvite::clear_sinviteeids() {
  sinviteeids_.Clear();
}
inline const ::std::string& GroupInvite::sinviteeids(int index) const {
  // @@protoc_insertion_point(field_get:im.GroupInvite.sInviteeIds)
  return sinviteeids_.Get(index);
}
inline ::std::string* GroupInvite::mutable_sinviteeids(int index) {
  // @@protoc_insertion_point(field_mutable:im.GroupInvite.sInviteeIds)
  return sinviteeids_.Mutable(index);
}
inline void GroupInvite::set_sinviteeids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:im.GroupInvite.sInviteeIds)
  sinviteeids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GroupInvite::set_sinviteeids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:im.GroupInvite.sInviteeIds)
  sinviteeids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GroupInvite::set_sinviteeids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sinviteeids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:im.GroupInvite.sInviteeIds)
}
inline void GroupInvite::set_sinviteeids(int index, const char* value, size_t size) {
  sinviteeids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:im.GroupInvite.sInviteeIds)
}
inline ::std::string* GroupInvite::add_sinviteeids() {
  // @@protoc_insertion_point(field_add_mutable:im.GroupInvite.sInviteeIds)
  return sinviteeids_.Add();
}
inline void GroupInvite::add_sinviteeids(const ::std::string& value) {
  sinviteeids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:im.GroupInvite.sInviteeIds)
}
#if LANG_CXX11
inline void GroupInvite::add_sinviteeids(::std::string&& value) {
  sinviteeids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:im.GroupInvite.sInviteeIds)
}
#endif
inline void GroupInvite::add_sinviteeids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sinviteeids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:im.GroupInvite.sInviteeIds)
}
inline void GroupInvite::add_sinviteeids(const char* value, size_t size) {
  sinviteeids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:im.GroupInvite.sInviteeIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GroupInvite::sinviteeids() const {
  // @@protoc_insertion_point(field_list:im.GroupInvite.sInviteeIds)
  return sinviteeids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GroupInvite::mutable_sinviteeids() {
  // @@protoc_insertion_point(field_mutable_list:im.GroupInvite.sInviteeIds)
  return &sinviteeids_;
}

// string sGroupId = 3;
inline void GroupInvite::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInvite::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupInvite.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void GroupInvite::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInvite.sGroupId)
}
#if LANG_CXX11
inline void GroupInvite::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupInvite.sGroupId)
}
#endif
inline void GroupInvite::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInvite.sGroupId)
}
inline void GroupInvite::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInvite.sGroupId)
}
inline ::std::string* GroupInvite::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInvite.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInvite::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupInvite.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInvite::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInvite.sGroupId)
}

// string sMsgId = 4;
inline void GroupInvite::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInvite::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupInvite.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupInvite::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInvite.sMsgId)
}
#if LANG_CXX11
inline void GroupInvite::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupInvite.sMsgId)
}
#endif
inline void GroupInvite::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInvite.sMsgId)
}
inline void GroupInvite::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInvite.sMsgId)
}
inline ::std::string* GroupInvite::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInvite.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInvite::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupInvite.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInvite::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInvite.sMsgId)
}

// string sRemark = 5;
inline void GroupInvite::clear_sremark() {
  sremark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInvite::sremark() const {
  // @@protoc_insertion_point(field_get:im.GroupInvite.sRemark)
  return sremark_.GetNoArena();
}
inline void GroupInvite::set_sremark(const ::std::string& value) {
  
  sremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInvite.sRemark)
}
#if LANG_CXX11
inline void GroupInvite::set_sremark(::std::string&& value) {
  
  sremark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupInvite.sRemark)
}
#endif
inline void GroupInvite::set_sremark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInvite.sRemark)
}
inline void GroupInvite::set_sremark(const char* value, size_t size) {
  
  sremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInvite.sRemark)
}
inline ::std::string* GroupInvite::mutable_sremark() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInvite.sRemark)
  return sremark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInvite::release_sremark() {
  // @@protoc_insertion_point(field_release:im.GroupInvite.sRemark)
  
  return sremark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInvite::set_allocated_sremark(::std::string* sremark) {
  if (sremark != NULL) {
    
  } else {
    
  }
  sremark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sremark);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInvite.sRemark)
}

// string extend = 6;
inline void GroupInvite::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInvite::extend() const {
  // @@protoc_insertion_point(field_get:im.GroupInvite.extend)
  return extend_.GetNoArena();
}
inline void GroupInvite::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInvite.extend)
}
#if LANG_CXX11
inline void GroupInvite::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupInvite.extend)
}
#endif
inline void GroupInvite::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInvite.extend)
}
inline void GroupInvite::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInvite.extend)
}
inline ::std::string* GroupInvite::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInvite.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInvite::release_extend() {
  // @@protoc_insertion_point(field_release:im.GroupInvite.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInvite::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInvite.extend)
}

// -------------------------------------------------------------------

// GroupInviteAck

// string sUserId = 1;
inline void GroupInviteAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInviteAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupInviteAck.sUserId)
  return suserid_.GetNoArena();
}
inline void GroupInviteAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInviteAck.sUserId)
}
#if LANG_CXX11
inline void GroupInviteAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupInviteAck.sUserId)
}
#endif
inline void GroupInviteAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInviteAck.sUserId)
}
inline void GroupInviteAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInviteAck.sUserId)
}
inline ::std::string* GroupInviteAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInviteAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInviteAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupInviteAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInviteAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInviteAck.sUserId)
}

// string sGroupId = 2;
inline void GroupInviteAck::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInviteAck::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupInviteAck.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void GroupInviteAck::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInviteAck.sGroupId)
}
#if LANG_CXX11
inline void GroupInviteAck::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupInviteAck.sGroupId)
}
#endif
inline void GroupInviteAck::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInviteAck.sGroupId)
}
inline void GroupInviteAck::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInviteAck.sGroupId)
}
inline ::std::string* GroupInviteAck::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInviteAck.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInviteAck::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupInviteAck.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInviteAck::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInviteAck.sGroupId)
}

// string sMsgId = 3;
inline void GroupInviteAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInviteAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupInviteAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupInviteAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInviteAck.sMsgId)
}
#if LANG_CXX11
inline void GroupInviteAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupInviteAck.sMsgId)
}
#endif
inline void GroupInviteAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInviteAck.sMsgId)
}
inline void GroupInviteAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInviteAck.sMsgId)
}
inline ::std::string* GroupInviteAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInviteAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInviteAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupInviteAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInviteAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInviteAck.sMsgId)
}

// .im.ErrCode errcode = 4;
inline void GroupInviteAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode GroupInviteAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupInviteAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void GroupInviteAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupInviteAck.errcode)
}

// -------------------------------------------------------------------

// GroupMember

// string sUserId = 1;
inline void GroupMember::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMember::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupMember.sUserId)
  return suserid_.GetNoArena();
}
inline void GroupMember::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupMember.sUserId)
}
#if LANG_CXX11
inline void GroupMember::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupMember.sUserId)
}
#endif
inline void GroupMember::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupMember.sUserId)
}
inline void GroupMember::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupMember.sUserId)
}
inline ::std::string* GroupMember::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupMember.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMember::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupMember.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMember::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupMember.sUserId)
}

// string sGroupId = 2;
inline void GroupMember::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMember::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupMember.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void GroupMember::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupMember.sGroupId)
}
#if LANG_CXX11
inline void GroupMember::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupMember.sGroupId)
}
#endif
inline void GroupMember::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupMember.sGroupId)
}
inline void GroupMember::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupMember.sGroupId)
}
inline ::std::string* GroupMember::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupMember.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMember::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupMember.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMember::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupMember.sGroupId)
}

// uint32 nPageIndex = 3;
inline void GroupMember::clear_npageindex() {
  npageindex_ = 0u;
}
inline ::google::protobuf::uint32 GroupMember::npageindex() const {
  // @@protoc_insertion_point(field_get:im.GroupMember.nPageIndex)
  return npageindex_;
}
inline void GroupMember::set_npageindex(::google::protobuf::uint32 value) {
  
  npageindex_ = value;
  // @@protoc_insertion_point(field_set:im.GroupMember.nPageIndex)
}

// uint32 nPageCount = 4;
inline void GroupMember::clear_npagecount() {
  npagecount_ = 0u;
}
inline ::google::protobuf::uint32 GroupMember::npagecount() const {
  // @@protoc_insertion_point(field_get:im.GroupMember.nPageCount)
  return npagecount_;
}
inline void GroupMember::set_npagecount(::google::protobuf::uint32 value) {
  
  npagecount_ = value;
  // @@protoc_insertion_point(field_set:im.GroupMember.nPageCount)
}

// -------------------------------------------------------------------

// GroupMemberAck

// string sUserId = 1;
inline void GroupMemberAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMemberAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupMemberAck.sUserId)
  return suserid_.GetNoArena();
}
inline void GroupMemberAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupMemberAck.sUserId)
}
#if LANG_CXX11
inline void GroupMemberAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupMemberAck.sUserId)
}
#endif
inline void GroupMemberAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupMemberAck.sUserId)
}
inline void GroupMemberAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupMemberAck.sUserId)
}
inline ::std::string* GroupMemberAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupMemberAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMemberAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupMemberAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMemberAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupMemberAck.sUserId)
}

// string sGroupId = 2;
inline void GroupMemberAck::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMemberAck::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupMemberAck.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void GroupMemberAck::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupMemberAck.sGroupId)
}
#if LANG_CXX11
inline void GroupMemberAck::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupMemberAck.sGroupId)
}
#endif
inline void GroupMemberAck::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupMemberAck.sGroupId)
}
inline void GroupMemberAck::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupMemberAck.sGroupId)
}
inline ::std::string* GroupMemberAck::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupMemberAck.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMemberAck::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupMemberAck.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMemberAck::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupMemberAck.sGroupId)
}

// uint32 nPageIndex = 3;
inline void GroupMemberAck::clear_npageindex() {
  npageindex_ = 0u;
}
inline ::google::protobuf::uint32 GroupMemberAck::npageindex() const {
  // @@protoc_insertion_point(field_get:im.GroupMemberAck.nPageIndex)
  return npageindex_;
}
inline void GroupMemberAck::set_npageindex(::google::protobuf::uint32 value) {
  
  npageindex_ = value;
  // @@protoc_insertion_point(field_set:im.GroupMemberAck.nPageIndex)
}

// repeated .im.Member members = 4;
inline int GroupMemberAck::members_size() const {
  return members_.size();
}
inline void GroupMemberAck::clear_members() {
  members_.Clear();
}
inline ::im::Member* GroupMemberAck::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:im.GroupMemberAck.members)
  return members_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::im::Member >*
GroupMemberAck::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:im.GroupMemberAck.members)
  return &members_;
}
inline const ::im::Member& GroupMemberAck::members(int index) const {
  // @@protoc_insertion_point(field_get:im.GroupMemberAck.members)
  return members_.Get(index);
}
inline ::im::Member* GroupMemberAck::add_members() {
  // @@protoc_insertion_point(field_add:im.GroupMemberAck.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::im::Member >&
GroupMemberAck::members() const {
  // @@protoc_insertion_point(field_list:im.GroupMemberAck.members)
  return members_;
}

// .im.ErrCode errcode = 5;
inline void GroupMemberAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode GroupMemberAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupMemberAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void GroupMemberAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupMemberAck.errcode)
}

// -------------------------------------------------------------------

// GroupKickOut

// string sUserId = 1;
inline void GroupKickOut::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupKickOut::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupKickOut.sUserId)
  return suserid_.GetNoArena();
}
inline void GroupKickOut::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupKickOut.sUserId)
}
#if LANG_CXX11
inline void GroupKickOut::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupKickOut.sUserId)
}
#endif
inline void GroupKickOut::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupKickOut.sUserId)
}
inline void GroupKickOut::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupKickOut.sUserId)
}
inline ::std::string* GroupKickOut::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupKickOut.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupKickOut::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupKickOut.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupKickOut::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupKickOut.sUserId)
}

// string sKickId = 2;
inline void GroupKickOut::clear_skickid() {
  skickid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupKickOut::skickid() const {
  // @@protoc_insertion_point(field_get:im.GroupKickOut.sKickId)
  return skickid_.GetNoArena();
}
inline void GroupKickOut::set_skickid(const ::std::string& value) {
  
  skickid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupKickOut.sKickId)
}
#if LANG_CXX11
inline void GroupKickOut::set_skickid(::std::string&& value) {
  
  skickid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupKickOut.sKickId)
}
#endif
inline void GroupKickOut::set_skickid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  skickid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupKickOut.sKickId)
}
inline void GroupKickOut::set_skickid(const char* value, size_t size) {
  
  skickid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupKickOut.sKickId)
}
inline ::std::string* GroupKickOut::mutable_skickid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupKickOut.sKickId)
  return skickid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupKickOut::release_skickid() {
  // @@protoc_insertion_point(field_release:im.GroupKickOut.sKickId)
  
  return skickid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupKickOut::set_allocated_skickid(::std::string* skickid) {
  if (skickid != NULL) {
    
  } else {
    
  }
  skickid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skickid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupKickOut.sKickId)
}

// string sGroupId = 3;
inline void GroupKickOut::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupKickOut::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupKickOut.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void GroupKickOut::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupKickOut.sGroupId)
}
#if LANG_CXX11
inline void GroupKickOut::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupKickOut.sGroupId)
}
#endif
inline void GroupKickOut::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupKickOut.sGroupId)
}
inline void GroupKickOut::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupKickOut.sGroupId)
}
inline ::std::string* GroupKickOut::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupKickOut.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupKickOut::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupKickOut.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupKickOut::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupKickOut.sGroupId)
}

// string sMsgId = 4;
inline void GroupKickOut::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupKickOut::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupKickOut.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupKickOut::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupKickOut.sMsgId)
}
#if LANG_CXX11
inline void GroupKickOut::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupKickOut.sMsgId)
}
#endif
inline void GroupKickOut::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupKickOut.sMsgId)
}
inline void GroupKickOut::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupKickOut.sMsgId)
}
inline ::std::string* GroupKickOut::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupKickOut.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupKickOut::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupKickOut.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupKickOut::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupKickOut.sMsgId)
}

// string extend = 5;
inline void GroupKickOut::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupKickOut::extend() const {
  // @@protoc_insertion_point(field_get:im.GroupKickOut.extend)
  return extend_.GetNoArena();
}
inline void GroupKickOut::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupKickOut.extend)
}
#if LANG_CXX11
inline void GroupKickOut::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupKickOut.extend)
}
#endif
inline void GroupKickOut::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupKickOut.extend)
}
inline void GroupKickOut::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupKickOut.extend)
}
inline ::std::string* GroupKickOut::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupKickOut.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupKickOut::release_extend() {
  // @@protoc_insertion_point(field_release:im.GroupKickOut.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupKickOut::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.GroupKickOut.extend)
}

// -------------------------------------------------------------------

// GroupKickoutAck

// string sUserId = 1;
inline void GroupKickoutAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupKickoutAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupKickoutAck.sUserId)
  return suserid_.GetNoArena();
}
inline void GroupKickoutAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupKickoutAck.sUserId)
}
#if LANG_CXX11
inline void GroupKickoutAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupKickoutAck.sUserId)
}
#endif
inline void GroupKickoutAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupKickoutAck.sUserId)
}
inline void GroupKickoutAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupKickoutAck.sUserId)
}
inline ::std::string* GroupKickoutAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupKickoutAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupKickoutAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupKickoutAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupKickoutAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupKickoutAck.sUserId)
}

// string sMsgId = 2;
inline void GroupKickoutAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupKickoutAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupKickoutAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupKickoutAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupKickoutAck.sMsgId)
}
#if LANG_CXX11
inline void GroupKickoutAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupKickoutAck.sMsgId)
}
#endif
inline void GroupKickoutAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupKickoutAck.sMsgId)
}
inline void GroupKickoutAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupKickoutAck.sMsgId)
}
inline ::std::string* GroupKickoutAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupKickoutAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupKickoutAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupKickoutAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupKickoutAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupKickoutAck.sMsgId)
}

// .im.ErrCode errcode = 3;
inline void GroupKickoutAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode GroupKickoutAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupKickoutAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void GroupKickoutAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupKickoutAck.errcode)
}

// -------------------------------------------------------------------

// GroupQuit

// string sUserId = 1;
inline void GroupQuit::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupQuit::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupQuit.sUserId)
  return suserid_.GetNoArena();
}
inline void GroupQuit::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupQuit.sUserId)
}
#if LANG_CXX11
inline void GroupQuit::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupQuit.sUserId)
}
#endif
inline void GroupQuit::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupQuit.sUserId)
}
inline void GroupQuit::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupQuit.sUserId)
}
inline ::std::string* GroupQuit::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupQuit.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupQuit::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupQuit.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupQuit::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupQuit.sUserId)
}

// string sGroupId = 2;
inline void GroupQuit::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupQuit::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupQuit.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void GroupQuit::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupQuit.sGroupId)
}
#if LANG_CXX11
inline void GroupQuit::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupQuit.sGroupId)
}
#endif
inline void GroupQuit::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupQuit.sGroupId)
}
inline void GroupQuit::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupQuit.sGroupId)
}
inline ::std::string* GroupQuit::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupQuit.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupQuit::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupQuit.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupQuit::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupQuit.sGroupId)
}

// string sMsgId = 3;
inline void GroupQuit::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupQuit::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupQuit.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupQuit::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupQuit.sMsgId)
}
#if LANG_CXX11
inline void GroupQuit::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupQuit.sMsgId)
}
#endif
inline void GroupQuit::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupQuit.sMsgId)
}
inline void GroupQuit::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupQuit.sMsgId)
}
inline ::std::string* GroupQuit::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupQuit.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupQuit::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupQuit.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupQuit::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupQuit.sMsgId)
}

// string extend = 4;
inline void GroupQuit::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupQuit::extend() const {
  // @@protoc_insertion_point(field_get:im.GroupQuit.extend)
  return extend_.GetNoArena();
}
inline void GroupQuit::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupQuit.extend)
}
#if LANG_CXX11
inline void GroupQuit::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupQuit.extend)
}
#endif
inline void GroupQuit::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupQuit.extend)
}
inline void GroupQuit::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupQuit.extend)
}
inline ::std::string* GroupQuit::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupQuit.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupQuit::release_extend() {
  // @@protoc_insertion_point(field_release:im.GroupQuit.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupQuit::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.GroupQuit.extend)
}

// -------------------------------------------------------------------

// GroupQuitAck

// string sUserId = 1;
inline void GroupQuitAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupQuitAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupQuitAck.sUserId)
  return suserid_.GetNoArena();
}
inline void GroupQuitAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupQuitAck.sUserId)
}
#if LANG_CXX11
inline void GroupQuitAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupQuitAck.sUserId)
}
#endif
inline void GroupQuitAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupQuitAck.sUserId)
}
inline void GroupQuitAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupQuitAck.sUserId)
}
inline ::std::string* GroupQuitAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupQuitAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupQuitAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupQuitAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupQuitAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupQuitAck.sUserId)
}

// string sGroupId = 2;
inline void GroupQuitAck::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupQuitAck::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupQuitAck.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void GroupQuitAck::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupQuitAck.sGroupId)
}
#if LANG_CXX11
inline void GroupQuitAck::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupQuitAck.sGroupId)
}
#endif
inline void GroupQuitAck::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupQuitAck.sGroupId)
}
inline void GroupQuitAck::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupQuitAck.sGroupId)
}
inline ::std::string* GroupQuitAck::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupQuitAck.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupQuitAck::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupQuitAck.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupQuitAck::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupQuitAck.sGroupId)
}

// string sMsgId = 3;
inline void GroupQuitAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupQuitAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupQuitAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupQuitAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupQuitAck.sMsgId)
}
#if LANG_CXX11
inline void GroupQuitAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupQuitAck.sMsgId)
}
#endif
inline void GroupQuitAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupQuitAck.sMsgId)
}
inline void GroupQuitAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupQuitAck.sMsgId)
}
inline ::std::string* GroupQuitAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupQuitAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupQuitAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupQuitAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupQuitAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupQuitAck.sMsgId)
}

// .im.ErrCode errcode = 4;
inline void GroupQuitAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode GroupQuitAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupQuitAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void GroupQuitAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupQuitAck.errcode)
}

// -------------------------------------------------------------------

// GroupModify

// string sUserId = 1;
inline void GroupModify::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupModify::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupModify.sUserId)
  return suserid_.GetNoArena();
}
inline void GroupModify::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupModify.sUserId)
}
#if LANG_CXX11
inline void GroupModify::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupModify.sUserId)
}
#endif
inline void GroupModify::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupModify.sUserId)
}
inline void GroupModify::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupModify.sUserId)
}
inline ::std::string* GroupModify::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupModify.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupModify::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupModify.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupModify::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupModify.sUserId)
}

// string sGroupId = 2;
inline void GroupModify::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupModify::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupModify.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void GroupModify::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupModify.sGroupId)
}
#if LANG_CXX11
inline void GroupModify::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupModify.sGroupId)
}
#endif
inline void GroupModify::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupModify.sGroupId)
}
inline void GroupModify::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupModify.sGroupId)
}
inline ::std::string* GroupModify::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupModify.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupModify::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupModify.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupModify::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupModify.sGroupId)
}

// string sInvolvedId = 3;
inline void GroupModify::clear_sinvolvedid() {
  sinvolvedid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupModify::sinvolvedid() const {
  // @@protoc_insertion_point(field_get:im.GroupModify.sInvolvedId)
  return sinvolvedid_.GetNoArena();
}
inline void GroupModify::set_sinvolvedid(const ::std::string& value) {
  
  sinvolvedid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupModify.sInvolvedId)
}
#if LANG_CXX11
inline void GroupModify::set_sinvolvedid(::std::string&& value) {
  
  sinvolvedid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupModify.sInvolvedId)
}
#endif
inline void GroupModify::set_sinvolvedid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sinvolvedid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupModify.sInvolvedId)
}
inline void GroupModify::set_sinvolvedid(const char* value, size_t size) {
  
  sinvolvedid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupModify.sInvolvedId)
}
inline ::std::string* GroupModify::mutable_sinvolvedid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupModify.sInvolvedId)
  return sinvolvedid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupModify::release_sinvolvedid() {
  // @@protoc_insertion_point(field_release:im.GroupModify.sInvolvedId)
  
  return sinvolvedid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupModify::set_allocated_sinvolvedid(::std::string* sinvolvedid) {
  if (sinvolvedid != NULL) {
    
  } else {
    
  }
  sinvolvedid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sinvolvedid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupModify.sInvolvedId)
}

// string sMsgId = 4;
inline void GroupModify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupModify::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupModify.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupModify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupModify.sMsgId)
}
#if LANG_CXX11
inline void GroupModify::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupModify.sMsgId)
}
#endif
inline void GroupModify::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupModify.sMsgId)
}
inline void GroupModify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupModify.sMsgId)
}
inline ::std::string* GroupModify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupModify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupModify::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupModify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupModify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupModify.sMsgId)
}

// .im.NotifyType nModifyType = 5;
inline void GroupModify::clear_nmodifytype() {
  nmodifytype_ = 0;
}
inline ::im::NotifyType GroupModify::nmodifytype() const {
  // @@protoc_insertion_point(field_get:im.GroupModify.nModifyType)
  return static_cast< ::im::NotifyType >(nmodifytype_);
}
inline void GroupModify::set_nmodifytype(::im::NotifyType value) {
  
  nmodifytype_ = value;
  // @@protoc_insertion_point(field_set:im.GroupModify.nModifyType)
}

// string sContent = 6;
inline void GroupModify::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupModify::scontent() const {
  // @@protoc_insertion_point(field_get:im.GroupModify.sContent)
  return scontent_.GetNoArena();
}
inline void GroupModify::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupModify.sContent)
}
#if LANG_CXX11
inline void GroupModify::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupModify.sContent)
}
#endif
inline void GroupModify::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupModify.sContent)
}
inline void GroupModify::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupModify.sContent)
}
inline ::std::string* GroupModify::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupModify.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupModify::release_scontent() {
  // @@protoc_insertion_point(field_release:im.GroupModify.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupModify::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im.GroupModify.sContent)
}

// -------------------------------------------------------------------

// GroupModifyAck

// string sUserId = 1;
inline void GroupModifyAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupModifyAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupModifyAck.sUserId)
  return suserid_.GetNoArena();
}
inline void GroupModifyAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupModifyAck.sUserId)
}
#if LANG_CXX11
inline void GroupModifyAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupModifyAck.sUserId)
}
#endif
inline void GroupModifyAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupModifyAck.sUserId)
}
inline void GroupModifyAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupModifyAck.sUserId)
}
inline ::std::string* GroupModifyAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupModifyAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupModifyAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupModifyAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupModifyAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupModifyAck.sUserId)
}

// string sGroupId = 2;
inline void GroupModifyAck::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupModifyAck::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupModifyAck.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void GroupModifyAck::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupModifyAck.sGroupId)
}
#if LANG_CXX11
inline void GroupModifyAck::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupModifyAck.sGroupId)
}
#endif
inline void GroupModifyAck::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupModifyAck.sGroupId)
}
inline void GroupModifyAck::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupModifyAck.sGroupId)
}
inline ::std::string* GroupModifyAck::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupModifyAck.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupModifyAck::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupModifyAck.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupModifyAck::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupModifyAck.sGroupId)
}

// string sMsgId = 3;
inline void GroupModifyAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupModifyAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupModifyAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupModifyAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupModifyAck.sMsgId)
}
#if LANG_CXX11
inline void GroupModifyAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupModifyAck.sMsgId)
}
#endif
inline void GroupModifyAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupModifyAck.sMsgId)
}
inline void GroupModifyAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupModifyAck.sMsgId)
}
inline ::std::string* GroupModifyAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupModifyAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupModifyAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupModifyAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupModifyAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupModifyAck.sMsgId)
}

// .im.ErrCode errcode = 4;
inline void GroupModifyAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode GroupModifyAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupModifyAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void GroupModifyAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupModifyAck.errcode)
}

// -------------------------------------------------------------------

// GroupNotify

// string sUserId = 1;
inline void GroupNotify::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupNotify::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupNotify.sUserId)
  return suserid_.GetNoArena();
}
inline void GroupNotify::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupNotify.sUserId)
}
#if LANG_CXX11
inline void GroupNotify::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupNotify.sUserId)
}
#endif
inline void GroupNotify::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupNotify.sUserId)
}
inline void GroupNotify::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupNotify.sUserId)
}
inline ::std::string* GroupNotify::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupNotify.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupNotify::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupNotify.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupNotify::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupNotify.sUserId)
}

// string sGroupId = 2;
inline void GroupNotify::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupNotify::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupNotify.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void GroupNotify::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupNotify.sGroupId)
}
#if LANG_CXX11
inline void GroupNotify::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupNotify.sGroupId)
}
#endif
inline void GroupNotify::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupNotify.sGroupId)
}
inline void GroupNotify::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupNotify.sGroupId)
}
inline ::std::string* GroupNotify::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupNotify.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupNotify::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupNotify.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupNotify::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupNotify.sGroupId)
}

// string sMsgId = 3;
inline void GroupNotify::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupNotify::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupNotify.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupNotify::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupNotify.sMsgId)
}
#if LANG_CXX11
inline void GroupNotify::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupNotify.sMsgId)
}
#endif
inline void GroupNotify::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupNotify.sMsgId)
}
inline void GroupNotify::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupNotify.sMsgId)
}
inline ::std::string* GroupNotify::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupNotify.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupNotify::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupNotify.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupNotify::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupNotify.sMsgId)
}

// uint32 nNotifyType = 4;
inline void GroupNotify::clear_nnotifytype() {
  nnotifytype_ = 0u;
}
inline ::google::protobuf::uint32 GroupNotify::nnotifytype() const {
  // @@protoc_insertion_point(field_get:im.GroupNotify.nNotifyType)
  return nnotifytype_;
}
inline void GroupNotify::set_nnotifytype(::google::protobuf::uint32 value) {
  
  nnotifytype_ = value;
  // @@protoc_insertion_point(field_set:im.GroupNotify.nNotifyType)
}

// string sContent = 5;
inline void GroupNotify::clear_scontent() {
  scontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupNotify::scontent() const {
  // @@protoc_insertion_point(field_get:im.GroupNotify.sContent)
  return scontent_.GetNoArena();
}
inline void GroupNotify::set_scontent(const ::std::string& value) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupNotify.sContent)
}
#if LANG_CXX11
inline void GroupNotify::set_scontent(::std::string&& value) {
  
  scontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupNotify.sContent)
}
#endif
inline void GroupNotify::set_scontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupNotify.sContent)
}
inline void GroupNotify::set_scontent(const char* value, size_t size) {
  
  scontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupNotify.sContent)
}
inline ::std::string* GroupNotify::mutable_scontent() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupNotify.sContent)
  return scontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupNotify::release_scontent() {
  // @@protoc_insertion_point(field_release:im.GroupNotify.sContent)
  
  return scontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupNotify::set_allocated_scontent(::std::string* scontent) {
  if (scontent != NULL) {
    
  } else {
    
  }
  scontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scontent);
  // @@protoc_insertion_point(field_set_allocated:im.GroupNotify.sContent)
}

// -------------------------------------------------------------------

// GroupNotifyAck

// string sUserId = 1;
inline void GroupNotifyAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupNotifyAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupNotifyAck.sUserId)
  return suserid_.GetNoArena();
}
inline void GroupNotifyAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupNotifyAck.sUserId)
}
#if LANG_CXX11
inline void GroupNotifyAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupNotifyAck.sUserId)
}
#endif
inline void GroupNotifyAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupNotifyAck.sUserId)
}
inline void GroupNotifyAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupNotifyAck.sUserId)
}
inline ::std::string* GroupNotifyAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupNotifyAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupNotifyAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupNotifyAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupNotifyAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupNotifyAck.sUserId)
}

// string sGroupId = 2;
inline void GroupNotifyAck::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupNotifyAck::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupNotifyAck.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void GroupNotifyAck::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupNotifyAck.sGroupId)
}
#if LANG_CXX11
inline void GroupNotifyAck::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupNotifyAck.sGroupId)
}
#endif
inline void GroupNotifyAck::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupNotifyAck.sGroupId)
}
inline void GroupNotifyAck::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupNotifyAck.sGroupId)
}
inline ::std::string* GroupNotifyAck::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupNotifyAck.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupNotifyAck::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupNotifyAck.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupNotifyAck::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupNotifyAck.sGroupId)
}

// string sMsgId = 3;
inline void GroupNotifyAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupNotifyAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupNotifyAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupNotifyAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupNotifyAck.sMsgId)
}
#if LANG_CXX11
inline void GroupNotifyAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupNotifyAck.sMsgId)
}
#endif
inline void GroupNotifyAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupNotifyAck.sMsgId)
}
inline void GroupNotifyAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupNotifyAck.sMsgId)
}
inline ::std::string* GroupNotifyAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupNotifyAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupNotifyAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupNotifyAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupNotifyAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupNotifyAck.sMsgId)
}

// .im.ErrCode errcode = 4;
inline void GroupNotifyAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode GroupNotifyAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupNotifyAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void GroupNotifyAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupNotifyAck.errcode)
}

// -------------------------------------------------------------------

// GroupPermit

// string sFromId = 1;
inline void GroupPermit::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupPermit::sfromid() const {
  // @@protoc_insertion_point(field_get:im.GroupPermit.sFromId)
  return sfromid_.GetNoArena();
}
inline void GroupPermit::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupPermit.sFromId)
}
#if LANG_CXX11
inline void GroupPermit::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupPermit.sFromId)
}
#endif
inline void GroupPermit::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupPermit.sFromId)
}
inline void GroupPermit::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupPermit.sFromId)
}
inline ::std::string* GroupPermit::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupPermit.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupPermit::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.GroupPermit.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupPermit::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupPermit.sFromId)
}

// string sToId = 2;
inline void GroupPermit::clear_stoid() {
  stoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupPermit::stoid() const {
  // @@protoc_insertion_point(field_get:im.GroupPermit.sToId)
  return stoid_.GetNoArena();
}
inline void GroupPermit::set_stoid(const ::std::string& value) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupPermit.sToId)
}
#if LANG_CXX11
inline void GroupPermit::set_stoid(::std::string&& value) {
  
  stoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupPermit.sToId)
}
#endif
inline void GroupPermit::set_stoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupPermit.sToId)
}
inline void GroupPermit::set_stoid(const char* value, size_t size) {
  
  stoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupPermit.sToId)
}
inline ::std::string* GroupPermit::mutable_stoid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupPermit.sToId)
  return stoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupPermit::release_stoid() {
  // @@protoc_insertion_point(field_release:im.GroupPermit.sToId)
  
  return stoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupPermit::set_allocated_stoid(::std::string* stoid) {
  if (stoid != NULL) {
    
  } else {
    
  }
  stoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupPermit.sToId)
}

// string sGrpId = 3;
inline void GroupPermit::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupPermit::sgrpid() const {
  // @@protoc_insertion_point(field_get:im.GroupPermit.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void GroupPermit::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupPermit.sGrpId)
}
#if LANG_CXX11
inline void GroupPermit::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupPermit.sGrpId)
}
#endif
inline void GroupPermit::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupPermit.sGrpId)
}
inline void GroupPermit::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupPermit.sGrpId)
}
inline ::std::string* GroupPermit::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupPermit.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupPermit::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im.GroupPermit.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupPermit::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupPermit.sGrpId)
}

// string sMsgId = 4;
inline void GroupPermit::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupPermit::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupPermit.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupPermit::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupPermit.sMsgId)
}
#if LANG_CXX11
inline void GroupPermit::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupPermit.sMsgId)
}
#endif
inline void GroupPermit::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupPermit.sMsgId)
}
inline void GroupPermit::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupPermit.sMsgId)
}
inline ::std::string* GroupPermit::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupPermit.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupPermit::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupPermit.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupPermit::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupPermit.sMsgId)
}

// uint32 rspType = 5;
inline void GroupPermit::clear_rsptype() {
  rsptype_ = 0u;
}
inline ::google::protobuf::uint32 GroupPermit::rsptype() const {
  // @@protoc_insertion_point(field_get:im.GroupPermit.rspType)
  return rsptype_;
}
inline void GroupPermit::set_rsptype(::google::protobuf::uint32 value) {
  
  rsptype_ = value;
  // @@protoc_insertion_point(field_set:im.GroupPermit.rspType)
}

// .im.ErrCode errcode = 6;
inline void GroupPermit::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode GroupPermit::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupPermit.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void GroupPermit::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupPermit.errcode)
}

// string sRemark = 7;
inline void GroupPermit::clear_sremark() {
  sremark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupPermit::sremark() const {
  // @@protoc_insertion_point(field_get:im.GroupPermit.sRemark)
  return sremark_.GetNoArena();
}
inline void GroupPermit::set_sremark(const ::std::string& value) {
  
  sremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupPermit.sRemark)
}
#if LANG_CXX11
inline void GroupPermit::set_sremark(::std::string&& value) {
  
  sremark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupPermit.sRemark)
}
#endif
inline void GroupPermit::set_sremark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupPermit.sRemark)
}
inline void GroupPermit::set_sremark(const char* value, size_t size) {
  
  sremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupPermit.sRemark)
}
inline ::std::string* GroupPermit::mutable_sremark() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupPermit.sRemark)
  return sremark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupPermit::release_sremark() {
  // @@protoc_insertion_point(field_release:im.GroupPermit.sRemark)
  
  return sremark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupPermit::set_allocated_sremark(::std::string* sremark) {
  if (sremark != NULL) {
    
  } else {
    
  }
  sremark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sremark);
  // @@protoc_insertion_point(field_set_allocated:im.GroupPermit.sRemark)
}

// string extend = 8;
inline void GroupPermit::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupPermit::extend() const {
  // @@protoc_insertion_point(field_get:im.GroupPermit.extend)
  return extend_.GetNoArena();
}
inline void GroupPermit::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupPermit.extend)
}
#if LANG_CXX11
inline void GroupPermit::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupPermit.extend)
}
#endif
inline void GroupPermit::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupPermit.extend)
}
inline void GroupPermit::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupPermit.extend)
}
inline ::std::string* GroupPermit::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupPermit.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupPermit::release_extend() {
  // @@protoc_insertion_point(field_release:im.GroupPermit.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupPermit::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:im.GroupPermit.extend)
}

// -------------------------------------------------------------------

// GroupPermitAck

// string sUserId = 1;
inline void GroupPermitAck::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupPermitAck::suserid() const {
  // @@protoc_insertion_point(field_get:im.GroupPermitAck.sUserId)
  return suserid_.GetNoArena();
}
inline void GroupPermitAck::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupPermitAck.sUserId)
}
#if LANG_CXX11
inline void GroupPermitAck::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupPermitAck.sUserId)
}
#endif
inline void GroupPermitAck::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupPermitAck.sUserId)
}
inline void GroupPermitAck::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupPermitAck.sUserId)
}
inline ::std::string* GroupPermitAck::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupPermitAck.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupPermitAck::release_suserid() {
  // @@protoc_insertion_point(field_release:im.GroupPermitAck.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupPermitAck::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupPermitAck.sUserId)
}

// string sGrpId = 2;
inline void GroupPermitAck::clear_sgrpid() {
  sgrpid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupPermitAck::sgrpid() const {
  // @@protoc_insertion_point(field_get:im.GroupPermitAck.sGrpId)
  return sgrpid_.GetNoArena();
}
inline void GroupPermitAck::set_sgrpid(const ::std::string& value) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupPermitAck.sGrpId)
}
#if LANG_CXX11
inline void GroupPermitAck::set_sgrpid(::std::string&& value) {
  
  sgrpid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupPermitAck.sGrpId)
}
#endif
inline void GroupPermitAck::set_sgrpid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupPermitAck.sGrpId)
}
inline void GroupPermitAck::set_sgrpid(const char* value, size_t size) {
  
  sgrpid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupPermitAck.sGrpId)
}
inline ::std::string* GroupPermitAck::mutable_sgrpid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupPermitAck.sGrpId)
  return sgrpid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupPermitAck::release_sgrpid() {
  // @@protoc_insertion_point(field_release:im.GroupPermitAck.sGrpId)
  
  return sgrpid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupPermitAck::set_allocated_sgrpid(::std::string* sgrpid) {
  if (sgrpid != NULL) {
    
  } else {
    
  }
  sgrpid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgrpid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupPermitAck.sGrpId)
}

// string sMsgId = 3;
inline void GroupPermitAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupPermitAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupPermitAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupPermitAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupPermitAck.sMsgId)
}
#if LANG_CXX11
inline void GroupPermitAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupPermitAck.sMsgId)
}
#endif
inline void GroupPermitAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupPermitAck.sMsgId)
}
inline void GroupPermitAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupPermitAck.sMsgId)
}
inline ::std::string* GroupPermitAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupPermitAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupPermitAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupPermitAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupPermitAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupPermitAck.sMsgId)
}

// .im.ErrCode errcode = 4;
inline void GroupPermitAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode GroupPermitAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupPermitAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void GroupPermitAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupPermitAck.errcode)
}

// -------------------------------------------------------------------

// GroupChatCancel

// string sFromId = 1;
inline void GroupChatCancel::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupChatCancel::sfromid() const {
  // @@protoc_insertion_point(field_get:im.GroupChatCancel.sFromId)
  return sfromid_.GetNoArena();
}
inline void GroupChatCancel::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChatCancel.sFromId)
}
#if LANG_CXX11
inline void GroupChatCancel::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupChatCancel.sFromId)
}
#endif
inline void GroupChatCancel::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChatCancel.sFromId)
}
inline void GroupChatCancel::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChatCancel.sFromId)
}
inline ::std::string* GroupChatCancel::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChatCancel.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupChatCancel::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.GroupChatCancel.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChatCancel::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChatCancel.sFromId)
}

// string sGroupId = 2;
inline void GroupChatCancel::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupChatCancel::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupChatCancel.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void GroupChatCancel::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChatCancel.sGroupId)
}
#if LANG_CXX11
inline void GroupChatCancel::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupChatCancel.sGroupId)
}
#endif
inline void GroupChatCancel::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChatCancel.sGroupId)
}
inline void GroupChatCancel::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChatCancel.sGroupId)
}
inline ::std::string* GroupChatCancel::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChatCancel.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupChatCancel::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupChatCancel.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChatCancel::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChatCancel.sGroupId)
}

// string sMsgId = 3;
inline void GroupChatCancel::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupChatCancel::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupChatCancel.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupChatCancel::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChatCancel.sMsgId)
}
#if LANG_CXX11
inline void GroupChatCancel::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupChatCancel.sMsgId)
}
#endif
inline void GroupChatCancel::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChatCancel.sMsgId)
}
inline void GroupChatCancel::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChatCancel.sMsgId)
}
inline ::std::string* GroupChatCancel::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChatCancel.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupChatCancel::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupChatCancel.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChatCancel::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChatCancel.sMsgId)
}

// uint64 msgTime = 4;
inline void GroupChatCancel::clear_msgtime() {
  msgtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GroupChatCancel::msgtime() const {
  // @@protoc_insertion_point(field_get:im.GroupChatCancel.msgTime)
  return msgtime_;
}
inline void GroupChatCancel::set_msgtime(::google::protobuf::uint64 value) {
  
  msgtime_ = value;
  // @@protoc_insertion_point(field_set:im.GroupChatCancel.msgTime)
}

// uint64 cancelTime = 5;
inline void GroupChatCancel::clear_canceltime() {
  canceltime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GroupChatCancel::canceltime() const {
  // @@protoc_insertion_point(field_get:im.GroupChatCancel.cancelTime)
  return canceltime_;
}
inline void GroupChatCancel::set_canceltime(::google::protobuf::uint64 value) {
  
  canceltime_ = value;
  // @@protoc_insertion_point(field_set:im.GroupChatCancel.cancelTime)
}

// -------------------------------------------------------------------

// GroupChatCancelAck

// string sFromId = 1;
inline void GroupChatCancelAck::clear_sfromid() {
  sfromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupChatCancelAck::sfromid() const {
  // @@protoc_insertion_point(field_get:im.GroupChatCancelAck.sFromId)
  return sfromid_.GetNoArena();
}
inline void GroupChatCancelAck::set_sfromid(const ::std::string& value) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChatCancelAck.sFromId)
}
#if LANG_CXX11
inline void GroupChatCancelAck::set_sfromid(::std::string&& value) {
  
  sfromid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupChatCancelAck.sFromId)
}
#endif
inline void GroupChatCancelAck::set_sfromid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChatCancelAck.sFromId)
}
inline void GroupChatCancelAck::set_sfromid(const char* value, size_t size) {
  
  sfromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChatCancelAck.sFromId)
}
inline ::std::string* GroupChatCancelAck::mutable_sfromid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChatCancelAck.sFromId)
  return sfromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupChatCancelAck::release_sfromid() {
  // @@protoc_insertion_point(field_release:im.GroupChatCancelAck.sFromId)
  
  return sfromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChatCancelAck::set_allocated_sfromid(::std::string* sfromid) {
  if (sfromid != NULL) {
    
  } else {
    
  }
  sfromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sfromid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChatCancelAck.sFromId)
}

// string sGroupId = 2;
inline void GroupChatCancelAck::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupChatCancelAck::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupChatCancelAck.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void GroupChatCancelAck::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChatCancelAck.sGroupId)
}
#if LANG_CXX11
inline void GroupChatCancelAck::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupChatCancelAck.sGroupId)
}
#endif
inline void GroupChatCancelAck::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChatCancelAck.sGroupId)
}
inline void GroupChatCancelAck::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChatCancelAck.sGroupId)
}
inline ::std::string* GroupChatCancelAck::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChatCancelAck.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupChatCancelAck::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupChatCancelAck.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChatCancelAck::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChatCancelAck.sGroupId)
}

// string sMsgId = 3;
inline void GroupChatCancelAck::clear_smsgid() {
  smsgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupChatCancelAck::smsgid() const {
  // @@protoc_insertion_point(field_get:im.GroupChatCancelAck.sMsgId)
  return smsgid_.GetNoArena();
}
inline void GroupChatCancelAck::set_smsgid(const ::std::string& value) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupChatCancelAck.sMsgId)
}
#if LANG_CXX11
inline void GroupChatCancelAck::set_smsgid(::std::string&& value) {
  
  smsgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupChatCancelAck.sMsgId)
}
#endif
inline void GroupChatCancelAck::set_smsgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupChatCancelAck.sMsgId)
}
inline void GroupChatCancelAck::set_smsgid(const char* value, size_t size) {
  
  smsgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupChatCancelAck.sMsgId)
}
inline ::std::string* GroupChatCancelAck::mutable_smsgid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupChatCancelAck.sMsgId)
  return smsgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupChatCancelAck::release_smsgid() {
  // @@protoc_insertion_point(field_release:im.GroupChatCancelAck.sMsgId)
  
  return smsgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupChatCancelAck::set_allocated_smsgid(::std::string* smsgid) {
  if (smsgid != NULL) {
    
  } else {
    
  }
  smsgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smsgid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupChatCancelAck.sMsgId)
}

// uint64 cancelTime = 4;
inline void GroupChatCancelAck::clear_canceltime() {
  canceltime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GroupChatCancelAck::canceltime() const {
  // @@protoc_insertion_point(field_get:im.GroupChatCancelAck.cancelTime)
  return canceltime_;
}
inline void GroupChatCancelAck::set_canceltime(::google::protobuf::uint64 value) {
  
  canceltime_ = value;
  // @@protoc_insertion_point(field_set:im.GroupChatCancelAck.cancelTime)
}

// .im.ErrCode errcode = 5;
inline void GroupChatCancelAck::clear_errcode() {
  errcode_ = 0;
}
inline ::im::ErrCode GroupChatCancelAck::errcode() const {
  // @@protoc_insertion_point(field_get:im.GroupChatCancelAck.errcode)
  return static_cast< ::im::ErrCode >(errcode_);
}
inline void GroupChatCancelAck::set_errcode(::im::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:im.GroupChatCancelAck.errcode)
}

// -------------------------------------------------------------------

// GroupInfo

// string sGroupId = 1;
inline void GroupInfo::clear_sgroupid() {
  sgroupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInfo::sgroupid() const {
  // @@protoc_insertion_point(field_get:im.GroupInfo.sGroupId)
  return sgroupid_.GetNoArena();
}
inline void GroupInfo::set_sgroupid(const ::std::string& value) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInfo.sGroupId)
}
#if LANG_CXX11
inline void GroupInfo::set_sgroupid(::std::string&& value) {
  
  sgroupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupInfo.sGroupId)
}
#endif
inline void GroupInfo::set_sgroupid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInfo.sGroupId)
}
inline void GroupInfo::set_sgroupid(const char* value, size_t size) {
  
  sgroupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInfo.sGroupId)
}
inline ::std::string* GroupInfo::mutable_sgroupid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInfo.sGroupId)
  return sgroupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInfo::release_sgroupid() {
  // @@protoc_insertion_point(field_release:im.GroupInfo.sGroupId)
  
  return sgroupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_sgroupid(::std::string* sgroupid) {
  if (sgroupid != NULL) {
    
  } else {
    
  }
  sgroupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInfo.sGroupId)
}

// string sGroupAdminId = 2;
inline void GroupInfo::clear_sgroupadminid() {
  sgroupadminid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInfo::sgroupadminid() const {
  // @@protoc_insertion_point(field_get:im.GroupInfo.sGroupAdminId)
  return sgroupadminid_.GetNoArena();
}
inline void GroupInfo::set_sgroupadminid(const ::std::string& value) {
  
  sgroupadminid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInfo.sGroupAdminId)
}
#if LANG_CXX11
inline void GroupInfo::set_sgroupadminid(::std::string&& value) {
  
  sgroupadminid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupInfo.sGroupAdminId)
}
#endif
inline void GroupInfo::set_sgroupadminid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupadminid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInfo.sGroupAdminId)
}
inline void GroupInfo::set_sgroupadminid(const char* value, size_t size) {
  
  sgroupadminid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInfo.sGroupAdminId)
}
inline ::std::string* GroupInfo::mutable_sgroupadminid() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInfo.sGroupAdminId)
  return sgroupadminid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInfo::release_sgroupadminid() {
  // @@protoc_insertion_point(field_release:im.GroupInfo.sGroupAdminId)
  
  return sgroupadminid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_sgroupadminid(::std::string* sgroupadminid) {
  if (sgroupadminid != NULL) {
    
  } else {
    
  }
  sgroupadminid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupadminid);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInfo.sGroupAdminId)
}

// string sGroupAdminNickName = 3;
inline void GroupInfo::clear_sgroupadminnickname() {
  sgroupadminnickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInfo::sgroupadminnickname() const {
  // @@protoc_insertion_point(field_get:im.GroupInfo.sGroupAdminNickName)
  return sgroupadminnickname_.GetNoArena();
}
inline void GroupInfo::set_sgroupadminnickname(const ::std::string& value) {
  
  sgroupadminnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInfo.sGroupAdminNickName)
}
#if LANG_CXX11
inline void GroupInfo::set_sgroupadminnickname(::std::string&& value) {
  
  sgroupadminnickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupInfo.sGroupAdminNickName)
}
#endif
inline void GroupInfo::set_sgroupadminnickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupadminnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInfo.sGroupAdminNickName)
}
inline void GroupInfo::set_sgroupadminnickname(const char* value, size_t size) {
  
  sgroupadminnickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInfo.sGroupAdminNickName)
}
inline ::std::string* GroupInfo::mutable_sgroupadminnickname() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInfo.sGroupAdminNickName)
  return sgroupadminnickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInfo::release_sgroupadminnickname() {
  // @@protoc_insertion_point(field_release:im.GroupInfo.sGroupAdminNickName)
  
  return sgroupadminnickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_sgroupadminnickname(::std::string* sgroupadminnickname) {
  if (sgroupadminnickname != NULL) {
    
  } else {
    
  }
  sgroupadminnickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupadminnickname);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInfo.sGroupAdminNickName)
}

// string sGroupName = 4;
inline void GroupInfo::clear_sgroupname() {
  sgroupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInfo::sgroupname() const {
  // @@protoc_insertion_point(field_get:im.GroupInfo.sGroupName)
  return sgroupname_.GetNoArena();
}
inline void GroupInfo::set_sgroupname(const ::std::string& value) {
  
  sgroupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInfo.sGroupName)
}
#if LANG_CXX11
inline void GroupInfo::set_sgroupname(::std::string&& value) {
  
  sgroupname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupInfo.sGroupName)
}
#endif
inline void GroupInfo::set_sgroupname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInfo.sGroupName)
}
inline void GroupInfo::set_sgroupname(const char* value, size_t size) {
  
  sgroupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInfo.sGroupName)
}
inline ::std::string* GroupInfo::mutable_sgroupname() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInfo.sGroupName)
  return sgroupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInfo::release_sgroupname() {
  // @@protoc_insertion_point(field_release:im.GroupInfo.sGroupName)
  
  return sgroupname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_sgroupname(::std::string* sgroupname) {
  if (sgroupname != NULL) {
    
  } else {
    
  }
  sgroupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupname);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInfo.sGroupName)
}

// string sGroupAnnounce = 5;
inline void GroupInfo::clear_sgroupannounce() {
  sgroupannounce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInfo::sgroupannounce() const {
  // @@protoc_insertion_point(field_get:im.GroupInfo.sGroupAnnounce)
  return sgroupannounce_.GetNoArena();
}
inline void GroupInfo::set_sgroupannounce(const ::std::string& value) {
  
  sgroupannounce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.GroupInfo.sGroupAnnounce)
}
#if LANG_CXX11
inline void GroupInfo::set_sgroupannounce(::std::string&& value) {
  
  sgroupannounce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.GroupInfo.sGroupAnnounce)
}
#endif
inline void GroupInfo::set_sgroupannounce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sgroupannounce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.GroupInfo.sGroupAnnounce)
}
inline void GroupInfo::set_sgroupannounce(const char* value, size_t size) {
  
  sgroupannounce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.GroupInfo.sGroupAnnounce)
}
inline ::std::string* GroupInfo::mutable_sgroupannounce() {
  
  // @@protoc_insertion_point(field_mutable:im.GroupInfo.sGroupAnnounce)
  return sgroupannounce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInfo::release_sgroupannounce() {
  // @@protoc_insertion_point(field_release:im.GroupInfo.sGroupAnnounce)
  
  return sgroupannounce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_sgroupannounce(::std::string* sgroupannounce) {
  if (sgroupannounce != NULL) {
    
  } else {
    
  }
  sgroupannounce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sgroupannounce);
  // @@protoc_insertion_point(field_set_allocated:im.GroupInfo.sGroupAnnounce)
}

// uint32 nMemberCount = 6;
inline void GroupInfo::clear_nmembercount() {
  nmembercount_ = 0u;
}
inline ::google::protobuf::uint32 GroupInfo::nmembercount() const {
  // @@protoc_insertion_point(field_get:im.GroupInfo.nMemberCount)
  return nmembercount_;
}
inline void GroupInfo::set_nmembercount(::google::protobuf::uint32 value) {
  
  nmembercount_ = value;
  // @@protoc_insertion_point(field_set:im.GroupInfo.nMemberCount)
}

// bool isMember = 7;
inline void GroupInfo::clear_ismember() {
  ismember_ = false;
}
inline bool GroupInfo::ismember() const {
  // @@protoc_insertion_point(field_get:im.GroupInfo.isMember)
  return ismember_;
}
inline void GroupInfo::set_ismember(bool value) {
  
  ismember_ = value;
  // @@protoc_insertion_point(field_set:im.GroupInfo.isMember)
}

// -------------------------------------------------------------------

// Member

// string sUserId = 1;
inline void Member::clear_suserid() {
  suserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Member::suserid() const {
  // @@protoc_insertion_point(field_get:im.Member.sUserId)
  return suserid_.GetNoArena();
}
inline void Member::set_suserid(const ::std::string& value) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.Member.sUserId)
}
#if LANG_CXX11
inline void Member::set_suserid(::std::string&& value) {
  
  suserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.Member.sUserId)
}
#endif
inline void Member::set_suserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.Member.sUserId)
}
inline void Member::set_suserid(const char* value, size_t size) {
  
  suserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.Member.sUserId)
}
inline ::std::string* Member::mutable_suserid() {
  
  // @@protoc_insertion_point(field_mutable:im.Member.sUserId)
  return suserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Member::release_suserid() {
  // @@protoc_insertion_point(field_release:im.Member.sUserId)
  
  return suserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Member::set_allocated_suserid(::std::string* suserid) {
  if (suserid != NULL) {
    
  } else {
    
  }
  suserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suserid);
  // @@protoc_insertion_point(field_set_allocated:im.Member.sUserId)
}

// string sNickName = 2;
inline void Member::clear_snickname() {
  snickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Member::snickname() const {
  // @@protoc_insertion_point(field_get:im.Member.sNickName)
  return snickname_.GetNoArena();
}
inline void Member::set_snickname(const ::std::string& value) {
  
  snickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:im.Member.sNickName)
}
#if LANG_CXX11
inline void Member::set_snickname(::std::string&& value) {
  
  snickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:im.Member.sNickName)
}
#endif
inline void Member::set_snickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  snickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:im.Member.sNickName)
}
inline void Member::set_snickname(const char* value, size_t size) {
  
  snickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:im.Member.sNickName)
}
inline ::std::string* Member::mutable_snickname() {
  
  // @@protoc_insertion_point(field_mutable:im.Member.sNickName)
  return snickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Member::release_snickname() {
  // @@protoc_insertion_point(field_release:im.Member.sNickName)
  
  return snickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Member::set_allocated_snickname(::std::string* snickname) {
  if (snickname != NULL) {
    
  } else {
    
  }
  snickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snickname);
  // @@protoc_insertion_point(field_set_allocated:im.Member.sNickName)
}

// uint32 nState = 3;
inline void Member::clear_nstate() {
  nstate_ = 0u;
}
inline ::google::protobuf::uint32 Member::nstate() const {
  // @@protoc_insertion_point(field_get:im.Member.nState)
  return nstate_;
}
inline void Member::set_nstate(::google::protobuf::uint32 value) {
  
  nstate_ = value;
  // @@protoc_insertion_point(field_set:im.Member.nState)
}

// bool bGroupConfirm = 4;
inline void Member::clear_bgroupconfirm() {
  bgroupconfirm_ = false;
}
inline bool Member::bgroupconfirm() const {
  // @@protoc_insertion_point(field_get:im.Member.bGroupConfirm)
  return bgroupconfirm_;
}
inline void Member::set_bgroupconfirm(bool value) {
  
  bgroupconfirm_ = value;
  // @@protoc_insertion_point(field_set:im.Member.bGroupConfirm)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace im

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_im_2egroup_2eproto
